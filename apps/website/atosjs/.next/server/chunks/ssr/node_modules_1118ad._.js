module.exports = {

"[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/link.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Link": (()=>Link)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-runtime.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/react-compiler-runtime/dist/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$clsx$2f$dist$2f$clsx$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/clsx/dist/clsx.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2f$anchor$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra/dist/client/mdx-components/anchor.js [app-rsc] (ecmascript)");
;
;
;
;
const Link = (t0)=>{
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["c"])(8);
    let className;
    let props;
    if ($[0] !== t0) {
        ({ className, ...props } = t0);
        $[0] = t0;
        $[1] = className;
        $[2] = props;
    } else {
        className = $[1];
        props = $[2];
    }
    let t1;
    if ($[3] !== className) {
        t1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$clsx$2f$dist$2f$clsx$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])("x:text-primary-600 x:underline x:hover:no-underline x:decoration-from-font x:[text-underline-position:from-font]", className);
        $[3] = className;
        $[4] = t1;
    } else {
        t1 = $[4];
    }
    let t2;
    if ($[5] !== props || $[6] !== t1) {
        t2 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2f$anchor$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Anchor"], {
            className: t1,
            ...props
        });
        $[5] = props;
        $[6] = t1;
        $[7] = t2;
    } else {
        t2 = $[7];
    }
    return t2;
};
;
}}),
"[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/heading-anchor.client.js (client proxy) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "HeadingAnchor": (()=>HeadingAnchor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server-edge.js [app-rsc] (ecmascript)");
;
const HeadingAnchor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["registerClientReference"])(function() {
    throw new Error("Attempted to call HeadingAnchor() from the server but HeadingAnchor is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.");
}, "[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/heading-anchor.client.js <module evaluation>", "HeadingAnchor");
}}),
"[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/heading-anchor.client.js (client proxy)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "HeadingAnchor": (()=>HeadingAnchor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server-edge.js [app-rsc] (ecmascript)");
;
const HeadingAnchor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["registerClientReference"])(function() {
    throw new Error("Attempted to call HeadingAnchor() from the server but HeadingAnchor is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.");
}, "[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/heading-anchor.client.js", "HeadingAnchor");
}}),
"[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/heading-anchor.client.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$heading$2d$anchor$2e$client$2e$js__$28$client__proxy$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/heading-anchor.client.js (client proxy) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$heading$2d$anchor$2e$client$2e$js__$28$client__proxy$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/heading-anchor.client.js (client proxy)");
;
__turbopack_export_namespace__(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$heading$2d$anchor$2e$client$2e$js__$28$client__proxy$29$__);
}}),
"[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/heading.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "H1": (()=>H1),
    "H2": (()=>H2),
    "H3": (()=>H3),
    "H4": (()=>H4),
    "H5": (()=>H5),
    "H6": (()=>H6)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-runtime.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$clsx$2f$dist$2f$clsx$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/clsx/dist/clsx.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$heading$2d$anchor$2e$client$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/heading-anchor.client.js [app-rsc] (ecmascript)");
"use no memo";
;
;
;
const createHeading = (Tag)=>function Heading({ children, id, className, ...props }) {
        const _class = // can be added by footnotes
        className === "sr-only" ? "x:sr-only" : (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$clsx$2f$dist$2f$clsx$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])("x:tracking-tight x:text-slate-900 x:dark:text-slate-100", Tag === "h1" ? "x:font-bold" : "x:font-semibold x:target:animate-[fade-in_1.5s]", {
            h1: "x:mt-2 x:text-4xl",
            h2: "x:mt-10 x:border-b x:pb-1 x:text-3xl nextra-border",
            h3: "x:mt-8 x:text-2xl",
            h4: "x:mt-8 x:text-xl",
            h5: "x:mt-8 x:text-lg",
            h6: "x:mt-8 x:text-base"
        }[Tag], className);
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxs"])(Tag, {
            id,
            className: _class,
            ...props,
            children: [
                children,
                id && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$heading$2d$anchor$2e$client$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["HeadingAnchor"], {
                    id
                })
            ]
        });
    };
const H1 = createHeading("h1");
const H2 = createHeading("h2");
const H3 = createHeading("h3");
const H4 = createHeading("h4");
const H5 = createHeading("h5");
const H6 = createHeading("h6");
;
}}),
"[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/wrapper.client.js (client proxy) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ClientWrapper": (()=>ClientWrapper)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server-edge.js [app-rsc] (ecmascript)");
;
const ClientWrapper = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["registerClientReference"])(function() {
    throw new Error("Attempted to call ClientWrapper() from the server but ClientWrapper is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.");
}, "[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/wrapper.client.js <module evaluation>", "ClientWrapper");
}}),
"[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/wrapper.client.js (client proxy)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ClientWrapper": (()=>ClientWrapper)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server-edge.js [app-rsc] (ecmascript)");
;
const ClientWrapper = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["registerClientReference"])(function() {
    throw new Error("Attempted to call ClientWrapper() from the server but ClientWrapper is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.");
}, "[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/wrapper.client.js", "ClientWrapper");
}}),
"[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/wrapper.client.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$wrapper$2e$client$2e$js__$28$client__proxy$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/wrapper.client.js (client proxy) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$wrapper$2e$client$2e$js__$28$client__proxy$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/wrapper.client.js (client proxy)");
;
__turbopack_export_namespace__(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$wrapper$2e$client$2e$js__$28$client__proxy$29$__);
}}),
"[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "useMDXComponents": (()=>useMDXComponents)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-runtime.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$clsx$2f$dist$2f$clsx$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/clsx/dist/clsx.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra/dist/client/mdx-components.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/link.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$hocs$2f$with$2d$github$2d$alert$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra/dist/client/hocs/with-github-alert.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$components$2f$callout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra/dist/client/components/callout.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2f$code$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra/dist/client/mdx-components/code.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2f$details$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra/dist/client/mdx-components/details.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$heading$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/heading.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$hocs$2f$with$2d$icons$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra/dist/client/hocs/with-icons.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2f$pre$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra/dist/client/mdx-components/pre/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2f$summary$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra/dist/client/mdx-components/summary.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2f$table$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra/dist/client/mdx-components/table.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$remove$2d$links$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra/dist/client/remove-links.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$components$2f$sidebar$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/components/sidebar.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$wrapper$2e$client$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra-theme-docs/dist/mdx-components/wrapper.client.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$components$2f$skip$2d$nav$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nextra/dist/client/components/skip-nav/index.js [app-rsc] (ecmascript) <locals>");
"use no memo";
;
;
;
;
;
;
;
;
;
const Blockquote = (props)=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])("blockquote", {
        className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$clsx$2f$dist$2f$clsx$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])("x:not-first:mt-6 x:border-gray-300 x:italic x:text-gray-700 x:dark:border-gray-700 x:dark:text-gray-400", "x:border-s-2 x:ps-6"),
        ...props
    });
const DEFAULT_COMPONENTS = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["useMDXComponents"])({
    a: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Link"],
    blockquote: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$hocs$2f$with$2d$github$2d$alert$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["withGitHubAlert"])(({ type, ...props })=>{
        const calloutType = {
            caution: "error",
            important: "error",
            // TODO
            note: "info",
            tip: "default",
            warning: "warning"
        }[type];
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$components$2f$callout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Callout"], {
            type: calloutType,
            ...props
        });
    }, Blockquote),
    code: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2f$code$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Code"],
    details: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2f$details$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Details"],
    h1: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$heading$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["H1"],
    h2: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$heading$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["H2"],
    h3: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$heading$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["H3"],
    h4: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$heading$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["H4"],
    h5: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$heading$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["H5"],
    h6: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$heading$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["H6"],
    hr: (props)=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])("hr", {
            className: "x:my-8 nextra-border",
            ...props
        }),
    li: (props)=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])("li", {
            className: "x:my-2",
            ...props
        }),
    ol: (props)=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])("ol", {
            className: "x:[:is(ol,ul)_&]:my-3 x:not-first:mt-6 x:list-decimal x:ms-6",
            ...props
        }),
    p: (props)=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])("p", {
            className: "x:not-first:mt-6 x:leading-7",
            ...props
        }),
    pre: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$hocs$2f$with$2d$icons$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["withIcons"])(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2f$pre$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Pre"]),
    summary: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2f$summary$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Summary"],
    table: ({ className, ...props })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2f$table$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Table"], {
            className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$clsx$2f$dist$2f$clsx$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])("nextra-scrollbar x:not-first:mt-6 x:p-0", className),
            ...props
        }),
    td: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2f$table$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Table"].Td,
    th: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2f$table$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Table"].Th,
    tr: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$mdx$2d$components$2f$table$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Table"].Tr,
    ul: (props)=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])("ul", {
            className: "x:[:is(ol,ul)_&]:my-3 x:not-first:mt-6 x:list-disc x:ms-6",
            ...props
        }),
    wrapper ({ toc, children, metadata, bottomContent, ...props }) {
        toc = toc.map((item)=>({
                ...item,
                value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$remove$2d$links$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["removeLinks"])(item.value)
            }));
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxs"])("div", {
            className: "x:mx-auto x:flex x:max-w-(--nextra-content-width)",
            ...props,
            children: [
                /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$components$2f$sidebar$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Sidebar"], {
                    toc
                }),
                /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2d$theme$2d$docs$2f$dist$2f$mdx$2d$components$2f$wrapper$2e$client$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ClientWrapper"], {
                    toc,
                    metadata,
                    bottomContent,
                    children: [
                        /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nextra$2f$dist$2f$client$2f$components$2f$skip$2d$nav$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SkipNavContent"], {}),
                        /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])("main", {
                            "data-pagefind-body": metadata.searchable !== false || void 0,
                            children
                        })
                    ]
                })
            ]
        });
    }
});
const useMDXComponents = (components)=>{
    return {
        ...DEFAULT_COMPONENTS,
        ...components
    };
};
;
}}),
"[project]/apps/website/docs/node_modules/reading-time/lib/reading-time.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/*!
 * reading-time
 * Copyright (c) Nicolas Gryman <ngryman@gmail.com>
 * MIT Licensed
 */ 'use strict';
/**
 * @typedef {import('reading-time').Options['wordBound']} WordBoundFunction
 */ /**
 * @param {number} number
 * @param {number[][]} arrayOfRanges
 */ function codeIsInRanges(number, arrayOfRanges) {
    return arrayOfRanges.some(([lowerBound, upperBound])=>lowerBound <= number && number <= upperBound);
}
/**
 * @type {WordBoundFunction}
 */ function isCJK(c) {
    if ('string' !== typeof c) {
        return false;
    }
    const charCode = c.charCodeAt(0);
    // Help wanted!
    // This should be good for most cases, but if you find it unsatisfactory
    // (e.g. some other language where each character should be standalone words),
    // contributions welcome!
    return codeIsInRanges(charCode, [
        // Hiragana (Katakana not included on purpose,
        // context: https://github.com/ngryman/reading-time/pull/35#issuecomment-853364526)
        // If you think Katakana should be included and have solid reasons, improvement is welcomed
        [
            0x3040,
            0x309f
        ],
        // CJK Unified ideographs
        [
            0x4e00,
            0x9fff
        ],
        // Hangul
        [
            0xac00,
            0xd7a3
        ],
        // CJK extensions
        [
            0x20000,
            0x2ebe0
        ]
    ]);
}
/**
 * @type {WordBoundFunction}
 */ function isAnsiWordBound(c) {
    return ' \n\r\t'.includes(c);
}
/**
 * @type {WordBoundFunction}
 */ function isPunctuation(c) {
    if ('string' !== typeof c) {
        return false;
    }
    const charCode = c.charCodeAt(0);
    return codeIsInRanges(charCode, [
        [
            0x21,
            0x2f
        ],
        [
            0x3a,
            0x40
        ],
        [
            0x5b,
            0x60
        ],
        [
            0x7b,
            0x7e
        ],
        // CJK Symbols and Punctuation
        [
            0x3000,
            0x303f
        ],
        // Full-width ASCII punctuation variants
        [
            0xff00,
            0xffef
        ]
    ]);
}
/**
 * @type {import('reading-time').default}
 */ function readingTime(text, options = {}) {
    let words = 0, start = 0, end = text.length - 1;
    // use provided value if available
    const wordsPerMinute = options.wordsPerMinute || 200;
    // use provided function if available
    const isWordBound = options.wordBound || isAnsiWordBound;
    // fetch bounds
    while(isWordBound(text[start]))start++;
    while(isWordBound(text[end]))end--;
    // Add a trailing word bound to make handling edges more convenient
    const normalizedText = `${text}\n`;
    // calculate the number of words
    for(let i = start; i <= end; i++){
        // A CJK character is a always word;
        // A non-word bound followed by a word bound / CJK is the end of a word.
        if (isCJK(normalizedText[i]) || !isWordBound(normalizedText[i]) && (isWordBound(normalizedText[i + 1]) || isCJK(normalizedText[i + 1]))) {
            words++;
        }
        // In case of CJK followed by punctuations, those characters have to be eaten as well
        if (isCJK(normalizedText[i])) {
            while(i <= end && (isPunctuation(normalizedText[i + 1]) || isWordBound(normalizedText[i + 1]))){
                i++;
            }
        }
    }
    // reading time stats
    const minutes = words / wordsPerMinute;
    // Math.round used to resolve floating point funkyness
    //   http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html
    const time = Math.round(minutes * 60 * 1000);
    const displayed = Math.ceil(minutes.toFixed(2));
    return {
        text: displayed + ' min read',
        minutes: minutes,
        time: time,
        words: words
    };
}
/**
 * Export
 */ module.exports = readingTime;
}}),
"[project]/apps/website/docs/node_modules/reading-time/lib/stream.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/*!
 * reading-time
 * Copyright (c) Nicolas Gryman <ngryman@gmail.com>
 * MIT Licensed
 */ 'use strict';
/**
 * Module dependencies.
 */ const readingTime = __turbopack_require__("[project]/apps/website/docs/node_modules/reading-time/lib/reading-time.js [app-rsc] (ecmascript)");
const Transform = __turbopack_require__("[externals]/stream [external] (stream, cjs)").Transform;
const util = __turbopack_require__("[externals]/util [external] (util, cjs)");
/**
 * @typedef {import('reading-time').Options} Options
 * @typedef {import('reading-time').Options['wordBound']} WordBoundFunction
 * @typedef {import('reading-time').readingTimeStream} ReadingTimeStream
 * @typedef {import('stream').TransformCallback} TransformCallback
 */ /**
 * @param {Options} options
 * @returns {ReadingTimeStream}
 */ function ReadingTimeStream(options) {
    // allow use without new
    if (!(this instanceof ReadingTimeStream)) {
        return new ReadingTimeStream(options);
    }
    Transform.call(this, {
        objectMode: true
    });
    this.options = options || {};
    this.stats = {
        minutes: 0,
        time: 0,
        words: 0
    };
}
util.inherits(ReadingTimeStream, Transform);
/**
 * @param {Buffer} chunk
 * @param {BufferEncoding} encoding
 * @param {TransformCallback} callback
 */ ReadingTimeStream.prototype._transform = function(chunk, encoding, callback) {
    const stats = readingTime(chunk.toString(encoding), this.options);
    this.stats.minutes += stats.minutes;
    this.stats.time += stats.time;
    this.stats.words += stats.words;
    callback();
};
/**
 * @param {TransformCallback} callback
 */ ReadingTimeStream.prototype._flush = function(callback) {
    this.stats.text = Math.ceil(this.stats.minutes.toFixed(2)) + ' min read';
    this.push(this.stats);
    callback();
};
/**
 * Export
 */ module.exports = ReadingTimeStream;
}}),
"[project]/apps/website/docs/node_modules/reading-time/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports.default = module.exports = __turbopack_require__("[project]/apps/website/docs/node_modules/reading-time/lib/reading-time.js [app-rsc] (ecmascript)");
module.exports.readingTimeStream = __turbopack_require__("[project]/apps/website/docs/node_modules/reading-time/lib/stream.js [app-rsc] (ecmascript)");
}}),
"[project]/apps/website/docs/node_modules/remark-reading-time/node_modules/unist-util-visit/node_modules/unist-util-is/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 */ /**
 * @typedef {Record<string, unknown>} Props
 * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test
 *   Check for an arbitrary node, unaware of TypeScript inferral.
 *
 * @callback TestFunctionAnything
 *   Check if a node passes a test, unaware of TypeScript inferral.
 * @param {unknown} this
 *   The given context.
 * @param {Node} node
 *   A node.
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {boolean | void}
 *   Whether this node passes the test.
 */ /**
 * @template {Node} Kind
 *   Node type.
 * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest
 *   Check for a node that can be inferred by TypeScript.
 */ /**
 * Check if a node passes a certain test.
 *
 * @template {Node} Kind
 *   Node type.
 * @callback TestFunctionPredicate
 *   Complex test function for a node that can be inferred by TypeScript.
 * @param {Node} node
 *   A node.
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {node is Kind}
 *   Whether this node passes the test.
 */ /**
 * @callback AssertAnything
 *   Check that an arbitrary value is a node, unaware of TypeScript inferral.
 * @param {unknown} [node]
 *   Anything (typically a node).
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {boolean}
 *   Whether this is a node and passes a test.
 */ /**
 * Check if a node is a node and passes a certain node test.
 *
 * @template {Node} Kind
 *   Node type.
 * @callback AssertPredicate
 *   Check that an arbitrary value is a specific node, aware of TypeScript.
 * @param {unknown} [node]
 *   Anything (typically a node).
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {node is Kind}
 *   Whether this is a node and passes a test.
 */ /**
 * Check if `node` is a `Node` and whether it passes the given test.
 *
 * @param node
 *   Thing to check, typically `Node`.
 * @param test
 *   A check for a specific node.
 * @param index
 *   The node’s position in its parent.
 * @param parent
 *   The node’s parent.
 * @returns
 *   Whether `node` is a node and passes a test.
 */ __turbopack_esm__({
    "convert": (()=>convert),
    "is": (()=>is)
});
const is = /**
     * @param {unknown} [node]
     * @param {Test} [test]
     * @param {number | null | undefined} [index]
     * @param {Parent | null | undefined} [parent]
     * @param {unknown} [context]
     * @returns {boolean}
     */ // eslint-disable-next-line max-params
function is(node, test, index, parent, context) {
    const check = convert(test);
    if (index !== undefined && index !== null && (typeof index !== 'number' || index < 0 || index === Number.POSITIVE_INFINITY)) {
        throw new Error('Expected positive finite index');
    }
    if (parent !== undefined && parent !== null && (!is(parent) || !parent.children)) {
        throw new Error('Expected parent node');
    }
    if ((parent === undefined || parent === null) !== (index === undefined || index === null)) {
        throw new Error('Expected both parent and index');
    }
    // @ts-expect-error Looks like a node.
    return node && node.type && typeof node.type === 'string' ? Boolean(check.call(context, node, index, parent)) : false;
};
const convert = /**
     * @param {Test} [test]
     * @returns {AssertAnything}
     */ function(test) {
    if (test === undefined || test === null) {
        return ok;
    }
    if (typeof test === 'string') {
        return typeFactory(test);
    }
    if (typeof test === 'object') {
        return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
    }
    if (typeof test === 'function') {
        return castFactory(test);
    }
    throw new Error('Expected function, string, or object as test');
};
/**
 * @param {Array<string | Props | TestFunctionAnything>} tests
 * @returns {AssertAnything}
 */ function anyFactory(tests) {
    /** @type {Array<AssertAnything>} */ const checks = [];
    let index = -1;
    while(++index < tests.length){
        checks[index] = convert(tests[index]);
    }
    return castFactory(any);
    "TURBOPACK unreachable";
    /**
   * @this {unknown}
   * @param {Array<unknown>} parameters
   * @returns {boolean}
   */ function any(...parameters) {
        let index = -1;
        while(++index < checks.length){
            if (checks[index].call(this, ...parameters)) return true;
        }
        return false;
    }
}
/**
 * Turn an object into a test for a node with a certain fields.
 *
 * @param {Props} check
 * @returns {AssertAnything}
 */ function propsFactory(check) {
    return castFactory(all);
    "TURBOPACK unreachable";
    /**
   * @param {Node} node
   * @returns {boolean}
   */ function all(node) {
        /** @type {string} */ let key;
        for(key in check){
            // @ts-expect-error: hush, it sure works as an index.
            if (node[key] !== check[key]) return false;
        }
        return true;
    }
}
/**
 * Turn a string into a test for a node with a certain type.
 *
 * @param {string} check
 * @returns {AssertAnything}
 */ function typeFactory(check) {
    return castFactory(type);
    "TURBOPACK unreachable";
    /**
   * @param {Node} node
   */ function type(node) {
        return node && node.type === check;
    }
}
/**
 * Turn a custom test into a test for a node that passes that test.
 *
 * @param {TestFunctionAnything} check
 * @returns {AssertAnything}
 */ function castFactory(check) {
    return assertion;
    "TURBOPACK unreachable";
    /**
   * @this {unknown}
   * @param {unknown} node
   * @param {Array<unknown>} parameters
   * @returns {boolean}
   */ function assertion(node, ...parameters) {
        return Boolean(node && typeof node === 'object' && 'type' in node && // @ts-expect-error: fine.
        Boolean(check.call(this, node, ...parameters)));
    }
}
function ok() {
    return true;
}
}}),
"[project]/apps/website/docs/node_modules/remark-reading-time/node_modules/unist-util-visit/node_modules/unist-util-visit-parents/color.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @param {string} d
 * @returns {string}
 */ __turbopack_esm__({
    "color": (()=>color)
});
function color(d) {
    return '\u001B[33m' + d + '\u001B[39m';
}
}}),
"[project]/apps/website/docs/node_modules/remark-reading-time/node_modules/unist-util-visit/node_modules/unist-util-visit-parents/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 */ /**
 * @typedef {CONTINUE|SKIP|EXIT} Action Union of the action types
 * @typedef {number} Index Move to the sibling at index next (after node itself is completely traversed). Useful if mutating the tree, such as removing the node the visitor is currently on, or any of its previous siblings (or next siblings, in case of reverse) Results less than 0 or greater than or equal to children.length stop traversing the parent
 * @typedef {[(Action|null|undefined|void)?, (Index|null|undefined)?]} ActionTuple List with one or two values, the first an action, the second an index.
 * @typedef {null|undefined|Action|Index|ActionTuple|void} VisitorResult Any value that can be returned from a visitor
 */ /**
 * Invoked when a node (matching test, if given) is found.
 * Visitors are free to transform node.
 * They can also transform the parent of node (the last of ancestors).
 * Replacing node itself, if `SKIP` is not returned, still causes its descendants to be visited.
 * If adding or removing previous siblings (or next siblings, in case of reverse) of node,
 * visitor should return a new index (number) to specify the sibling to traverse after node is traversed.
 * Adding or removing next siblings of node (or previous siblings, in case of reverse)
 * is handled as expected without needing to return a new index.
 * Removing the children property of an ancestor still results in them being traversed.
 *
 * @template {Node} V
 * @callback Visitor
 * @param {V} node Found node
 * @param {Array.<Parent>} ancestors Ancestors of node
 * @returns {VisitorResult}
 */ __turbopack_esm__({
    "CONTINUE": (()=>CONTINUE),
    "EXIT": (()=>EXIT),
    "SKIP": (()=>SKIP),
    "visitParents": (()=>visitParents)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$remark$2d$reading$2d$time$2f$node_modules$2f$unist$2d$util$2d$visit$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/remark-reading-time/node_modules/unist-util-visit/node_modules/unist-util-is/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$remark$2d$reading$2d$time$2f$node_modules$2f$unist$2d$util$2d$visit$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$color$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/remark-reading-time/node_modules/unist-util-visit/node_modules/unist-util-visit-parents/color.js [app-rsc] (ecmascript)");
;
;
const CONTINUE = true;
const SKIP = 'skip';
const EXIT = false;
const visitParents = /**
     * Visit children of tree which pass a test
     *
     * @param {Node} tree Abstract syntax tree to walk
     * @param {Test} test test Test node
     * @param {Visitor<Node>} visitor Function to run for each node
     * @param {boolean} [reverse] Fisit the tree in reverse, defaults to false
     */ function(tree, test, visitor, reverse) {
    if (typeof test === 'function' && typeof visitor !== 'function') {
        reverse = visitor;
        // @ts-ignore no visitor given, so `visitor` is test.
        visitor = test;
        test = null;
    }
    var is = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$remark$2d$reading$2d$time$2f$node_modules$2f$unist$2d$util$2d$visit$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convert"])(test);
    var step = reverse ? -1 : 1;
    factory(tree, null, [])();
    /**
       * @param {Node} node
       * @param {number?} index
       * @param {Array.<Parent>} parents
       */ function factory(node, index, parents) {
        /** @type {Object.<string, unknown>} */ var value = typeof node === 'object' && node !== null ? node : {};
        /** @type {string} */ var name;
        if (typeof value.type === 'string') {
            name = typeof value.tagName === 'string' ? value.tagName : typeof value.name === 'string' ? value.name : undefined;
            Object.defineProperty(visit, 'name', {
                value: 'node (' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$remark$2d$reading$2d$time$2f$node_modules$2f$unist$2d$util$2d$visit$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$color$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["color"])(value.type + (name ? '<' + name + '>' : '')) + ')'
            });
        }
        return visit;
        "TURBOPACK unreachable";
        function visit() {
            /** @type {ActionTuple} */ var result = [];
            /** @type {ActionTuple} */ var subresult;
            /** @type {number} */ var offset;
            /** @type {Array.<Parent>} */ var grandparents;
            if (!test || is(node, index, parents[parents.length - 1] || null)) {
                result = toResult(visitor(node, parents));
                if (result[0] === EXIT) {
                    return result;
                }
            }
            if (node.children && result[0] !== SKIP) {
                // @ts-ignore looks like a parent.
                offset = (reverse ? node.children.length : -1) + step;
                // @ts-ignore looks like a parent.
                grandparents = parents.concat(node);
                // @ts-ignore looks like a parent.
                while(offset > -1 && offset < node.children.length){
                    subresult = factory(node.children[offset], offset, grandparents)();
                    if (subresult[0] === EXIT) {
                        return subresult;
                    }
                    offset = typeof subresult[1] === 'number' ? subresult[1] : offset + step;
                }
            }
            return result;
        }
    }
};
/**
 * @param {VisitorResult} value
 * @returns {ActionTuple}
 */ function toResult(value) {
    if (Array.isArray(value)) {
        return value;
    }
    if (typeof value === 'number') {
        return [
            CONTINUE,
            value
        ];
    }
    return [
        value
    ];
}
}}),
"[project]/apps/website/docs/node_modules/remark-reading-time/node_modules/unist-util-visit/index.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 */ /**
 * Invoked when a node (matching test, if given) is found.
 * Visitors are free to transform node.
 * They can also transform the parent of node (the last of ancestors).
 * Replacing node itself, if `SKIP` is not returned, still causes its descendants to be visited.
 * If adding or removing previous siblings (or next siblings, in case of reverse) of node,
 * visitor should return a new index (number) to specify the sibling to traverse after node is traversed.
 * Adding or removing next siblings of node (or previous siblings, in case of reverse)
 * is handled as expected without needing to return a new index.
 * Removing the children property of an ancestor still results in them being traversed.
 *
 * @template {Node} V
 * @callback Visitor
 * @param {V} node Found node
 * @param {number|null} index Position of `node` in `parent`
 * @param {Parent|null} parent Parent of `node`
 * @returns {VisitorResult}
 */ __turbopack_esm__({
    "visit": (()=>visit)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$remark$2d$reading$2d$time$2f$node_modules$2f$unist$2d$util$2d$visit$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/remark-reading-time/node_modules/unist-util-visit/node_modules/unist-util-visit-parents/index.js [app-rsc] (ecmascript)");
;
;
const visit = /**
     * Visit children of tree which pass a test
     *
     * @param {Node} tree Abstract syntax tree to walk
     * @param {Test} test test Test node
     * @param {Visitor<Node>} visitor Function to run for each node
     * @param {boolean} [reverse] Fisit the tree in reverse, defaults to false
     */ function(tree, test, visitor, reverse) {
    if (typeof test === 'function' && typeof visitor !== 'function') {
        reverse = visitor;
        visitor = test;
        test = null;
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$remark$2d$reading$2d$time$2f$node_modules$2f$unist$2d$util$2d$visit$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["visitParents"])(tree, test, overload, reverse);
    /**
       * @param {Node} node
       * @param {Array.<Parent>} parents
       */ function overload(node, parents) {
        var parent = parents[parents.length - 1];
        return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
    }
};
}}),
"[project]/apps/website/docs/node_modules/remark-reading-time/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>readingTime)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$reading$2d$time$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/reading-time/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$remark$2d$reading$2d$time$2f$node_modules$2f$unist$2d$util$2d$visit$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/remark-reading-time/node_modules/unist-util-visit/index.js [app-rsc] (ecmascript) <locals>");
;
;
function readingTime({ /**
   * The attribute name to store the reading time under data.
   *
   * @type {string}
   * @default "readingTime"
   */ attribute = "readingTime" } = {}) {
    return function(info, file) {
        let text = "";
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$remark$2d$reading$2d$time$2f$node_modules$2f$unist$2d$util$2d$visit$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(info, [
            "text",
            "code"
        ], (node)=>{
            text += node.value;
        });
        file.data[attribute] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$reading$2d$time$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(text);
    };
}
}}),
"[project]/apps/website/docs/node_modules/unist-util-is/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 */ /**
 * @template Fn
 * @template Fallback
 * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate
 */ /**
 * @callback Check
 *   Check that an arbitrary value is a node.
 * @param {unknown} this
 *   The given context.
 * @param {unknown} [node]
 *   Anything (typically a node).
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {boolean}
 *   Whether this is a node and passes a test.
 *
 * @typedef {Record<string, unknown> | Node} Props
 *   Object to check for equivalence.
 *
 *   Note: `Node` is included as it is common but is not indexable.
 *
 * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test
 *   Check for an arbitrary node.
 *
 * @callback TestFunction
 *   Check if a node passes a test.
 * @param {unknown} this
 *   The given context.
 * @param {Node} node
 *   A node.
 * @param {number | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | undefined} [parent]
 *   The node’s parent.
 * @returns {boolean | undefined | void}
 *   Whether this node passes the test.
 *
 *   Note: `void` is included until TS sees no return as `undefined`.
 */ /**
 * Check if `node` is a `Node` and whether it passes the given test.
 *
 * @param {unknown} node
 *   Thing to check, typically `Node`.
 * @param {Test} test
 *   A check for a specific node.
 * @param {number | null | undefined} index
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} parent
 *   The node’s parent.
 * @param {unknown} context
 *   Context object (`this`) to pass to `test` functions.
 * @returns {boolean}
 *   Whether `node` is a node and passes a test.
 */ __turbopack_esm__({
    "convert": (()=>convert),
    "is": (()=>is)
});
const is = /**
     * @param {unknown} [node]
     * @param {Test} [test]
     * @param {number | null | undefined} [index]
     * @param {Parent | null | undefined} [parent]
     * @param {unknown} [context]
     * @returns {boolean}
     */ // eslint-disable-next-line max-params
function(node, test, index, parent, context) {
    const check = convert(test);
    if (index !== undefined && index !== null && (typeof index !== 'number' || index < 0 || index === Number.POSITIVE_INFINITY)) {
        throw new Error('Expected positive finite index');
    }
    if (parent !== undefined && parent !== null && (!is(parent) || !parent.children)) {
        throw new Error('Expected parent node');
    }
    if ((parent === undefined || parent === null) !== (index === undefined || index === null)) {
        throw new Error('Expected both parent and index');
    }
    return looksLikeANode(node) ? check.call(context, node, index, parent) : false;
};
const convert = /**
     * @param {Test} [test]
     * @returns {Check}
     */ function(test) {
    if (test === null || test === undefined) {
        return ok;
    }
    if (typeof test === 'function') {
        return castFactory(test);
    }
    if (typeof test === 'object') {
        return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
    }
    if (typeof test === 'string') {
        return typeFactory(test);
    }
    throw new Error('Expected function, string, or object as test');
};
/**
 * @param {Array<Props | TestFunction | string>} tests
 * @returns {Check}
 */ function anyFactory(tests) {
    /** @type {Array<Check>} */ const checks = [];
    let index = -1;
    while(++index < tests.length){
        checks[index] = convert(tests[index]);
    }
    return castFactory(any);
    "TURBOPACK unreachable";
    /**
   * @this {unknown}
   * @type {TestFunction}
   */ function any(...parameters) {
        let index = -1;
        while(++index < checks.length){
            if (checks[index].apply(this, parameters)) return true;
        }
        return false;
    }
}
/**
 * Turn an object into a test for a node with a certain fields.
 *
 * @param {Props} check
 * @returns {Check}
 */ function propsFactory(check) {
    const checkAsRecord = check;
    return castFactory(all);
    "TURBOPACK unreachable";
    /**
   * @param {Node} node
   * @returns {boolean}
   */ function all(node) {
        const nodeAsRecord = node;
        /** @type {string} */ let key;
        for(key in check){
            if (nodeAsRecord[key] !== checkAsRecord[key]) return false;
        }
        return true;
    }
}
/**
 * Turn a string into a test for a node with a certain type.
 *
 * @param {string} check
 * @returns {Check}
 */ function typeFactory(check) {
    return castFactory(type);
    "TURBOPACK unreachable";
    /**
   * @param {Node} node
   */ function type(node) {
        return node && node.type === check;
    }
}
/**
 * Turn a custom test into a test for a node that passes that test.
 *
 * @param {TestFunction} testFunction
 * @returns {Check}
 */ function castFactory(testFunction) {
    return check;
    "TURBOPACK unreachable";
    /**
   * @this {unknown}
   * @type {Check}
   */ function check(value, index, parent) {
        return Boolean(looksLikeANode(value) && testFunction.call(this, value, typeof index === 'number' ? index : undefined, parent || undefined));
    }
}
function ok() {
    return true;
}
/**
 * @param {unknown} value
 * @returns {value is Node}
 */ function looksLikeANode(value) {
    return value !== null && typeof value === 'object' && 'type' in value;
}
}}),
"[project]/apps/website/docs/node_modules/unist-util-visit-parents/lib/color.node.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @param {string} d
 * @returns {string}
 */ __turbopack_esm__({
    "color": (()=>color)
});
function color(d) {
    return '\u001B[33m' + d + '\u001B[39m';
}
}}),
"[project]/apps/website/docs/node_modules/unist-util-visit-parents/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Node} UnistNode
 * @typedef {import('unist').Parent} UnistParent
 */ /**
 * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test
 *   Test from `unist-util-is`.
 *
 *   Note: we have remove and add `undefined`, because otherwise when generating
 *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,
 *   which doesn’t work when publishing on npm.
 */ /**
 * @typedef {(
 *   Fn extends (value: any) => value is infer Thing
 *   ? Thing
 *   : Fallback
 * )} Predicate
 *   Get the value of a type guard `Fn`.
 * @template Fn
 *   Value; typically function that is a type guard (such as `(x): x is Y`).
 * @template Fallback
 *   Value to yield if `Fn` is not a type guard.
 */ /**
 * @typedef {(
 *   Check extends null | undefined // No test.
 *   ? Value
 *   : Value extends {type: Check} // String (type) test.
 *   ? Value
 *   : Value extends Check // Partial test.
 *   ? Value
 *   : Check extends Function // Function test.
 *   ? Predicate<Check, Value> extends Value
 *     ? Predicate<Check, Value>
 *     : never
 *   : never // Some other test?
 * )} MatchesOne
 *   Check whether a node matches a primitive check in the type system.
 * @template Value
 *   Value; typically unist `Node`.
 * @template Check
 *   Value; typically `unist-util-is`-compatible test, but not arrays.
 */ /**
 * @typedef {(
 *   Check extends Array<any>
 *   ? MatchesOne<Value, Check[keyof Check]>
 *   : MatchesOne<Value, Check>
 * )} Matches
 *   Check whether a node matches a check in the type system.
 * @template Value
 *   Value; typically unist `Node`.
 * @template Check
 *   Value; typically `unist-util-is`-compatible test.
 */ /**
 * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint
 *   Number; capped reasonably.
 */ /**
 * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment
 *   Increment a number in the type system.
 * @template {Uint} [I=0]
 *   Index.
 */ /**
 * @typedef {(
 *   Node extends UnistParent
 *   ? Node extends {children: Array<infer Children>}
 *     ? Child extends Children ? Node : never
 *     : never
 *   : never
 * )} InternalParent
 *   Collect nodes that can be parents of `Child`.
 * @template {UnistNode} Node
 *   All node types in a tree.
 * @template {UnistNode} Child
 *   Node to search for.
 */ /**
 * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent
 *   Collect nodes in `Tree` that can be parents of `Child`.
 * @template {UnistNode} Tree
 *   All node types in a tree.
 * @template {UnistNode} Child
 *   Node to search for.
 */ /**
 * @typedef {(
 *   Depth extends Max
 *   ? never
 *   :
 *     | InternalParent<Node, Child>
 *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>
 * )} InternalAncestor
 *   Collect nodes in `Tree` that can be ancestors of `Child`.
 * @template {UnistNode} Node
 *   All node types in a tree.
 * @template {UnistNode} Child
 *   Node to search for.
 * @template {Uint} [Max=10]
 *   Max; searches up to this depth.
 * @template {Uint} [Depth=0]
 *   Current depth.
 */ /**
 * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor
 *   Collect nodes in `Tree` that can be ancestors of `Child`.
 * @template {UnistNode} Tree
 *   All node types in a tree.
 * @template {UnistNode} Child
 *   Node to search for.
 */ /**
 * @typedef {(
 *   Tree extends UnistParent
 *     ? Depth extends Max
 *       ? Tree
 *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>
 *     : Tree
 * )} InclusiveDescendant
 *   Collect all (inclusive) descendants of `Tree`.
 *
 *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to
 *   > recurse without actually running into an infinite loop, which the
 *   > previous version did.
 *   >
 *   > Practically, a max of `2` is typically enough assuming a `Root` is
 *   > passed, but it doesn’t improve performance.
 *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.
 *   > Using up to `10` doesn’t hurt or help either.
 * @template {UnistNode} Tree
 *   Tree type.
 * @template {Uint} [Max=10]
 *   Max; searches up to this depth.
 * @template {Uint} [Depth=0]
 *   Current depth.
 */ /**
 * @typedef {'skip' | boolean} Action
 *   Union of the action types.
 *
 * @typedef {number} Index
 *   Move to the sibling at `index` next (after node itself is completely
 *   traversed).
 *
 *   Useful if mutating the tree, such as removing the node the visitor is
 *   currently on, or any of its previous siblings.
 *   Results less than 0 or greater than or equal to `children.length` stop
 *   traversing the parent.
 *
 * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple
 *   List with one or two values, the first an action, the second an index.
 *
 * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult
 *   Any value that can be returned from a visitor.
 */ /**
 * @callback Visitor
 *   Handle a node (matching `test`, if given).
 *
 *   Visitors are free to transform `node`.
 *   They can also transform the parent of node (the last of `ancestors`).
 *
 *   Replacing `node` itself, if `SKIP` is not returned, still causes its
 *   descendants to be walked (which is a bug).
 *
 *   When adding or removing previous siblings of `node` (or next siblings, in
 *   case of reverse), the `Visitor` should return a new `Index` to specify the
 *   sibling to traverse after `node` is traversed.
 *   Adding or removing next siblings of `node` (or previous siblings, in case
 *   of reverse) is handled as expected without needing to return a new `Index`.
 *
 *   Removing the children property of an ancestor still results in them being
 *   traversed.
 * @param {Visited} node
 *   Found node.
 * @param {Array<VisitedParents>} ancestors
 *   Ancestors of `node`.
 * @returns {VisitorResult}
 *   What to do next.
 *
 *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.
 *   An `Action` is treated as a tuple of `[Action]`.
 *
 *   Passing a tuple back only makes sense if the `Action` is `SKIP`.
 *   When the `Action` is `EXIT`, that action can be returned.
 *   When the `Action` is `CONTINUE`, `Index` can be returned.
 * @template {UnistNode} [Visited=UnistNode]
 *   Visited node type.
 * @template {UnistParent} [VisitedParents=UnistParent]
 *   Ancestor type.
 */ /**
 * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor
 *   Build a typed `Visitor` function from a tree and a test.
 *
 *   It will infer which values are passed as `node` and which as `parents`.
 * @template {UnistNode} [Tree=UnistNode]
 *   Tree type.
 * @template {Test} [Check=Test]
 *   Test type.
 */ __turbopack_esm__({
    "CONTINUE": (()=>CONTINUE),
    "EXIT": (()=>EXIT),
    "SKIP": (()=>SKIP),
    "visitParents": (()=>visitParents)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-is/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$color$2e$node$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit-parents/lib/color.node.js [app-rsc] (ecmascript)");
;
;
/** @type {Readonly<ActionTuple>} */ const empty = [];
const CONTINUE = true;
const EXIT = false;
const SKIP = 'skip';
function visitParents(tree, test, visitor, reverse) {
    /** @type {Test} */ let check;
    if (typeof test === 'function' && typeof visitor !== 'function') {
        reverse = visitor;
        // @ts-expect-error no visitor given, so `visitor` is test.
        visitor = test;
    } else {
        // @ts-expect-error visitor given, so `test` isn’t a visitor.
        check = test;
    }
    const is = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convert"])(check);
    const step = reverse ? -1 : 1;
    factory(tree, undefined, [])();
    /**
   * @param {UnistNode} node
   * @param {number | undefined} index
   * @param {Array<UnistParent>} parents
   */ function factory(node, index, parents) {
        const value = node && typeof node === 'object' ? node : {};
        if (typeof value.type === 'string') {
            const name = // `hast`
            typeof value.tagName === 'string' ? value.tagName : typeof value.name === 'string' ? value.name : undefined;
            Object.defineProperty(visit, 'name', {
                value: 'node (' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$color$2e$node$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["color"])(node.type + (name ? '<' + name + '>' : '')) + ')'
            });
        }
        return visit;
        "TURBOPACK unreachable";
        function visit() {
            /** @type {Readonly<ActionTuple>} */ let result = empty;
            /** @type {Readonly<ActionTuple>} */ let subresult;
            /** @type {number} */ let offset;
            /** @type {Array<UnistParent>} */ let grandparents;
            if (!test || is(node, index, parents[parents.length - 1] || undefined)) {
                // @ts-expect-error: `visitor` is now a visitor.
                result = toResult(visitor(node, parents));
                if (result[0] === EXIT) {
                    return result;
                }
            }
            if ('children' in node && node.children) {
                const nodeAsParent = node;
                if (nodeAsParent.children && result[0] !== SKIP) {
                    offset = (reverse ? nodeAsParent.children.length : -1) + step;
                    grandparents = parents.concat(nodeAsParent);
                    while(offset > -1 && offset < nodeAsParent.children.length){
                        const child = nodeAsParent.children[offset];
                        subresult = factory(child, offset, grandparents)();
                        if (subresult[0] === EXIT) {
                            return subresult;
                        }
                        offset = typeof subresult[1] === 'number' ? subresult[1] : offset + step;
                    }
                }
            }
            return result;
        }
    }
}
/**
 * Turn a return value into a clean result.
 *
 * @param {VisitorResult} value
 *   Valid return values from visitors.
 * @returns {Readonly<ActionTuple>}
 *   Clean result.
 */ function toResult(value) {
    if (Array.isArray(value)) {
        return value;
    }
    if (typeof value === 'number') {
        return [
            CONTINUE,
            value
        ];
    }
    return value === null || value === undefined ? empty : [
        value
    ];
}
}}),
"[project]/apps/website/docs/node_modules/unist-util-visit/lib/index.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Node} UnistNode
 * @typedef {import('unist').Parent} UnistParent
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 */ /**
 * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test
 *   Test from `unist-util-is`.
 *
 *   Note: we have remove and add `undefined`, because otherwise when generating
 *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,
 *   which doesn’t work when publishing on npm.
 */ // To do: use types from `unist-util-visit-parents` when it’s released.
/**
 * @typedef {(
 *   Fn extends (value: any) => value is infer Thing
 *   ? Thing
 *   : Fallback
 * )} Predicate
 *   Get the value of a type guard `Fn`.
 * @template Fn
 *   Value; typically function that is a type guard (such as `(x): x is Y`).
 * @template Fallback
 *   Value to yield if `Fn` is not a type guard.
 */ /**
 * @typedef {(
 *   Check extends null | undefined // No test.
 *   ? Value
 *   : Value extends {type: Check} // String (type) test.
 *   ? Value
 *   : Value extends Check // Partial test.
 *   ? Value
 *   : Check extends Function // Function test.
 *   ? Predicate<Check, Value> extends Value
 *     ? Predicate<Check, Value>
 *     : never
 *   : never // Some other test?
 * )} MatchesOne
 *   Check whether a node matches a primitive check in the type system.
 * @template Value
 *   Value; typically unist `Node`.
 * @template Check
 *   Value; typically `unist-util-is`-compatible test, but not arrays.
 */ /**
 * @typedef {(
 *   Check extends Array<any>
 *   ? MatchesOne<Value, Check[keyof Check]>
 *   : MatchesOne<Value, Check>
 * )} Matches
 *   Check whether a node matches a check in the type system.
 * @template Value
 *   Value; typically unist `Node`.
 * @template Check
 *   Value; typically `unist-util-is`-compatible test.
 */ /**
 * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint
 *   Number; capped reasonably.
 */ /**
 * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment
 *   Increment a number in the type system.
 * @template {Uint} [I=0]
 *   Index.
 */ /**
 * @typedef {(
 *   Node extends UnistParent
 *   ? Node extends {children: Array<infer Children>}
 *     ? Child extends Children ? Node : never
 *     : never
 *   : never
 * )} InternalParent
 *   Collect nodes that can be parents of `Child`.
 * @template {UnistNode} Node
 *   All node types in a tree.
 * @template {UnistNode} Child
 *   Node to search for.
 */ /**
 * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent
 *   Collect nodes in `Tree` that can be parents of `Child`.
 * @template {UnistNode} Tree
 *   All node types in a tree.
 * @template {UnistNode} Child
 *   Node to search for.
 */ /**
 * @typedef {(
 *   Depth extends Max
 *   ? never
 *   :
 *     | InternalParent<Node, Child>
 *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>
 * )} InternalAncestor
 *   Collect nodes in `Tree` that can be ancestors of `Child`.
 * @template {UnistNode} Node
 *   All node types in a tree.
 * @template {UnistNode} Child
 *   Node to search for.
 * @template {Uint} [Max=10]
 *   Max; searches up to this depth.
 * @template {Uint} [Depth=0]
 *   Current depth.
 */ /**
 * @typedef {(
 *   Tree extends UnistParent
 *     ? Depth extends Max
 *       ? Tree
 *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>
 *     : Tree
 * )} InclusiveDescendant
 *   Collect all (inclusive) descendants of `Tree`.
 *
 *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to
 *   > recurse without actually running into an infinite loop, which the
 *   > previous version did.
 *   >
 *   > Practically, a max of `2` is typically enough assuming a `Root` is
 *   > passed, but it doesn’t improve performance.
 *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.
 *   > Using up to `10` doesn’t hurt or help either.
 * @template {UnistNode} Tree
 *   Tree type.
 * @template {Uint} [Max=10]
 *   Max; searches up to this depth.
 * @template {Uint} [Depth=0]
 *   Current depth.
 */ /**
 * @callback Visitor
 *   Handle a node (matching `test`, if given).
 *
 *   Visitors are free to transform `node`.
 *   They can also transform `parent`.
 *
 *   Replacing `node` itself, if `SKIP` is not returned, still causes its
 *   descendants to be walked (which is a bug).
 *
 *   When adding or removing previous siblings of `node` (or next siblings, in
 *   case of reverse), the `Visitor` should return a new `Index` to specify the
 *   sibling to traverse after `node` is traversed.
 *   Adding or removing next siblings of `node` (or previous siblings, in case
 *   of reverse) is handled as expected without needing to return a new `Index`.
 *
 *   Removing the children property of `parent` still results in them being
 *   traversed.
 * @param {Visited} node
 *   Found node.
 * @param {Visited extends UnistNode ? number | undefined : never} index
 *   Index of `node` in `parent`.
 * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent
 *   Parent of `node`.
 * @returns {VisitorResult}
 *   What to do next.
 *
 *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.
 *   An `Action` is treated as a tuple of `[Action]`.
 *
 *   Passing a tuple back only makes sense if the `Action` is `SKIP`.
 *   When the `Action` is `EXIT`, that action can be returned.
 *   When the `Action` is `CONTINUE`, `Index` can be returned.
 * @template {UnistNode} [Visited=UnistNode]
 *   Visited node type.
 * @template {UnistParent} [Ancestor=UnistParent]
 *   Ancestor type.
 */ /**
 * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch
 *   Build a typed `Visitor` function from a node and all possible parents.
 *
 *   It will infer which values are passed as `node` and which as `parent`.
 * @template {UnistNode} Visited
 *   Node type.
 * @template {UnistParent} Ancestor
 *   Parent type.
 */ /**
 * @typedef {(
 *   BuildVisitorFromMatch<
 *     Matches<Descendant, Check>,
 *     Extract<Descendant, UnistParent>
 *   >
 * )} BuildVisitorFromDescendants
 *   Build a typed `Visitor` function from a list of descendants and a test.
 *
 *   It will infer which values are passed as `node` and which as `parent`.
 * @template {UnistNode} Descendant
 *   Node type.
 * @template {Test} Check
 *   Test type.
 */ /**
 * @typedef {(
 *   BuildVisitorFromDescendants<
 *     InclusiveDescendant<Tree>,
 *     Check
 *   >
 * )} BuildVisitor
 *   Build a typed `Visitor` function from a tree and a test.
 *
 *   It will infer which values are passed as `node` and which as `parent`.
 * @template {UnistNode} [Tree=UnistNode]
 *   Node type.
 * @template {Test} [Check=Test]
 *   Test type.
 */ __turbopack_esm__({
    "visit": (()=>visit)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit-parents/lib/index.js [app-rsc] (ecmascript)");
;
;
function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {
    /** @type {boolean | null | undefined} */ let reverse;
    /** @type {Test} */ let test;
    /** @type {Visitor} */ let visitor;
    if (typeof testOrVisitor === 'function' && typeof visitorOrReverse !== 'function') {
        test = undefined;
        visitor = testOrVisitor;
        reverse = visitorOrReverse;
    } else {
        // @ts-expect-error: assume the overload with test was given.
        test = testOrVisitor;
        // @ts-expect-error: assume the overload with test was given.
        visitor = visitorOrReverse;
        reverse = maybeReverse;
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["visitParents"])(tree, test, overload, reverse);
    /**
   * @param {UnistNode} node
   * @param {Array<UnistParent>} parents
   */ function overload(node, parents) {
        const parent = parents[parents.length - 1];
        const index = parent ? parent.children.indexOf(node) : undefined;
        return visitor(node, index, parent);
    }
}
}}),
"[project]/apps/website/docs/node_modules/extend/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var defineProperty = Object.defineProperty;
var gOPD = Object.getOwnPropertyDescriptor;
var isArray = function isArray(arr) {
    if (typeof Array.isArray === 'function') {
        return Array.isArray(arr);
    }
    return toStr.call(arr) === '[object Array]';
};
var isPlainObject = function isPlainObject(obj) {
    if (!obj || toStr.call(obj) !== '[object Object]') {
        return false;
    }
    var hasOwnConstructor = hasOwn.call(obj, 'constructor');
    var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
    // Not own constructor property must be Object
    if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false;
    }
    // Own properties are enumerated firstly, so to speed up,
    // if last one is own, then all properties are own.
    var key;
    for(key in obj){}
    return typeof key === 'undefined' || hasOwn.call(obj, key);
};
// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
var setProperty = function setProperty(target, options) {
    if (defineProperty && options.name === '__proto__') {
        defineProperty(target, options.name, {
            enumerable: true,
            configurable: true,
            value: options.newValue,
            writable: true
        });
    } else {
        target[options.name] = options.newValue;
    }
};
// Return undefined instead of __proto__ if '__proto__' is not an own property
var getProperty = function getProperty(obj, name) {
    if (name === '__proto__') {
        if (!hasOwn.call(obj, name)) {
            return void 0;
        } else if (gOPD) {
            // In early versions of node, obj['__proto__'] is buggy when obj has
            // __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
            return gOPD(obj, name).value;
        }
    }
    return obj[name];
};
module.exports = function extend() {
    var options, name, src, copy, copyIsArray, clone;
    var target = arguments[0];
    var i = 1;
    var length = arguments.length;
    var deep = false;
    // Handle a deep copy situation
    if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2;
    }
    if (target == null || typeof target !== 'object' && typeof target !== 'function') {
        target = {};
    }
    for(; i < length; ++i){
        options = arguments[i];
        // Only deal with non-null/undefined values
        if (options != null) {
            // Extend the base object
            for(name in options){
                src = getProperty(target, name);
                copy = getProperty(options, name);
                // Prevent never-ending loop
                if (target !== copy) {
                    // Recurse if we're merging plain objects or arrays
                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && isArray(src) ? src : [];
                        } else {
                            clone = src && isPlainObject(src) ? src : {};
                        }
                        // Never move original objects, clone them
                        setProperty(target, {
                            name: name,
                            newValue: extend(deep, clone, copy)
                        });
                    // Don't bring in undefined values
                    } else if (typeof copy !== 'undefined') {
                        setProperty(target, {
                            name: name,
                            newValue: copy
                        });
                    }
                }
            }
        }
    }
    // Return the modified object
    return target;
};
}}),
"[project]/apps/website/docs/node_modules/is-plain-obj/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>isPlainObject)
});
function isPlainObject(value) {
    if (typeof value !== 'object' || value === null) {
        return false;
    }
    const prototype = Object.getPrototypeOf(value);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}
}}),
"[project]/apps/website/docs/node_modules/trough/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// To do: remove `void`s
// To do: remove `null` from output of our APIs, allow it as user APIs.
/**
 * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback
 *   Callback.
 *
 * @typedef {(...input: Array<any>) => any} Middleware
 *   Ware.
 *
 * @typedef Pipeline
 *   Pipeline.
 * @property {Run} run
 *   Run the pipeline.
 * @property {Use} use
 *   Add middleware.
 *
 * @typedef {(...input: Array<any>) => void} Run
 *   Call all middleware.
 *
 *   Calls `done` on completion with either an error or the output of the
 *   last middleware.
 *
 *   > 👉 **Note**: as the length of input defines whether async functions get a
 *   > `next` function,
 *   > it’s recommended to keep `input` at one value normally.

 *
 * @typedef {(fn: Middleware) => Pipeline} Use
 *   Add middleware.
 */ /**
 * Create new middleware.
 *
 * @returns {Pipeline}
 *   Pipeline.
 */ __turbopack_esm__({
    "trough": (()=>trough),
    "wrap": (()=>wrap)
});
function trough() {
    /** @type {Array<Middleware>} */ const fns = [];
    /** @type {Pipeline} */ const pipeline = {
        run,
        use
    };
    return pipeline;
    "TURBOPACK unreachable";
    /** @type {Run} */ function run(...values) {
        let middlewareIndex = -1;
        /** @type {Callback} */ const callback = values.pop();
        if (typeof callback !== 'function') {
            throw new TypeError('Expected function as last argument, not ' + callback);
        }
        next(null, ...values);
        /**
     * Run the next `fn`, or we’re done.
     *
     * @param {Error | null | undefined} error
     * @param {Array<any>} output
     */ function next(error, ...output) {
            const fn = fns[++middlewareIndex];
            let index = -1;
            if (error) {
                callback(error);
                return;
            }
            // Copy non-nullish input into values.
            while(++index < values.length){
                if (output[index] === null || output[index] === undefined) {
                    output[index] = values[index];
                }
            }
            // Save the newly created `output` for the next call.
            values = output;
            // Next or done.
            if (fn) {
                wrap(fn, next)(...output);
            } else {
                callback(null, ...output);
            }
        }
    }
    /** @type {Use} */ function use(middelware) {
        if (typeof middelware !== 'function') {
            throw new TypeError('Expected `middelware` to be a function, not ' + middelware);
        }
        fns.push(middelware);
        return pipeline;
    }
}
function wrap(middleware, callback) {
    /** @type {boolean} */ let called;
    return wrapped;
    "TURBOPACK unreachable";
    /**
   * Call `middleware`.
   * @this {any}
   * @param {Array<any>} parameters
   * @returns {void}
   */ function wrapped(...parameters) {
        const fnExpectsCallback = middleware.length > parameters.length;
        /** @type {any} */ let result;
        if (fnExpectsCallback) {
            parameters.push(done);
        }
        try {
            result = middleware.apply(this, parameters);
        } catch (error) {
            const exception = error;
            // Well, this is quite the pickle.
            // `middleware` received a callback and called it synchronously, but that
            // threw an error.
            // The only thing left to do is to throw the thing instead.
            if (fnExpectsCallback && called) {
                throw exception;
            }
            return done(exception);
        }
        if (!fnExpectsCallback) {
            if (result && result.then && typeof result.then === 'function') {
                result.then(then, done);
            } else if (result instanceof Error) {
                done(result);
            } else {
                then(result);
            }
        }
    }
    /**
   * Call `callback`, only once.
   *
   * @type {Callback}
   */ function done(error, ...output) {
        if (!called) {
            called = true;
            callback(error, ...output);
        }
    }
    /**
   * Call `done` with one value.
   *
   * @param {any} [value]
   */ function then(value) {
        done(null, value);
    }
}
}}),
"[project]/apps/website/docs/node_modules/dequal/dist/index.mjs [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "dequal": (()=>dequal)
});
var has = Object.prototype.hasOwnProperty;
function find(iter, tar, key) {
    for (key of iter.keys()){
        if (dequal(key, tar)) return key;
    }
}
function dequal(foo, bar) {
    var ctor, len, tmp;
    if (foo === bar) return true;
    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
        if (ctor === Date) return foo.getTime() === bar.getTime();
        if (ctor === RegExp) return foo.toString() === bar.toString();
        if (ctor === Array) {
            if ((len = foo.length) === bar.length) {
                while(len-- && dequal(foo[len], bar[len]));
            }
            return len === -1;
        }
        if (ctor === Set) {
            if (foo.size !== bar.size) {
                return false;
            }
            for (len of foo){
                tmp = len;
                if (tmp && typeof tmp === 'object') {
                    tmp = find(bar, tmp);
                    if (!tmp) return false;
                }
                if (!bar.has(tmp)) return false;
            }
            return true;
        }
        if (ctor === Map) {
            if (foo.size !== bar.size) {
                return false;
            }
            for (len of foo){
                tmp = len[0];
                if (tmp && typeof tmp === 'object') {
                    tmp = find(bar, tmp);
                    if (!tmp) return false;
                }
                if (!dequal(len[1], bar.get(tmp))) {
                    return false;
                }
            }
            return true;
        }
        if (ctor === ArrayBuffer) {
            foo = new Uint8Array(foo);
            bar = new Uint8Array(bar);
        } else if (ctor === DataView) {
            if ((len = foo.byteLength) === bar.byteLength) {
                while(len-- && foo.getInt8(len) === bar.getInt8(len));
            }
            return len === -1;
        }
        if (ArrayBuffer.isView(foo)) {
            if ((len = foo.byteLength) === bar.byteLength) {
                while(len-- && foo[len] === bar[len]);
            }
            return len === -1;
        }
        if (!ctor || typeof foo === 'object') {
            len = 0;
            for(ctor in foo){
                if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;
                if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;
            }
            return Object.keys(bar).length === len;
        }
    }
    return foo !== foo && bar !== bar;
}
}}),
"[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "deprecate": (()=>deprecate),
    "equal": (()=>equal),
    "ok": (()=>ok),
    "unreachable": (()=>unreachable)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$dequal$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/dequal/dist/index.mjs [app-rsc] (ecmascript)");
;
/**
 * @type {Set<string>}
 */ const codesWarned = new Set();
class AssertionError extends Error {
    name = 'Assertion';
    code = 'ERR_ASSERTION';
    /**
   * Create an assertion error.
   *
   * @param {string} message
   *   Message explaining error.
   * @param {unknown} actual
   *   Value.
   * @param {unknown} expected
   *   Baseline.
   * @param {string} operator
   *   Name of equality operation.
   * @param {boolean} generated
   *   Whether `message` is a custom message or not
   * @returns
   *   Instance.
   */ // eslint-disable-next-line max-params
    constructor(message, actual, expected, operator, generated){
        super(message);
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        }
        /**
     * @type {unknown}
     */ this.actual = actual;
        /**
     * @type {unknown}
     */ this.expected = expected;
        /**
     * @type {boolean}
     */ this.generated = generated;
        /**
     * @type {string}
     */ this.operator = operator;
    }
}
class DeprecationError extends Error {
    name = 'DeprecationWarning';
    /**
   * Create a deprecation message.
   *
   * @param {string} message
   *   Message explaining deprecation.
   * @param {string | undefined} code
   *   Deprecation identifier; deprecation messages will be generated only once per code.
   * @returns
   *   Instance.
   */ constructor(message, code){
        super(message);
        /**
     * @type {string | undefined}
     */ this.code = code;
    }
}
function deprecate(fn, message, code) {
    let warned = false;
    // The wrapper will keep the same prototype as fn to maintain prototype chain
    Object.setPrototypeOf(deprecated, fn);
    // @ts-expect-error: it’s perfect, typescript…
    return deprecated;
    "TURBOPACK unreachable";
    /**
   * @this {unknown}
   * @param  {...Array<unknown>} args
   * @returns {unknown}
   */ function deprecated(...args) {
        if (!warned) {
            warned = true;
            if (typeof code === 'string' && codesWarned.has(code)) {
            // Empty.
            } else {
                console.error(new DeprecationError(message, code || undefined));
                if (typeof code === 'string') codesWarned.add(code);
            }
        }
        return new.target ? Reflect.construct(fn, args, new.target) : Reflect.apply(fn, this, args);
    }
}
function equal(actual, expected, message) {
    assert((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$dequal$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["dequal"])(actual, expected), actual, expected, 'equal', 'Expected values to be deeply equal', message);
}
function ok(value, message) {
    assert(Boolean(value), false, true, 'ok', 'Expected value to be truthy', message);
}
function unreachable(message) {
    assert(false, false, true, 'ok', 'Unreachable', message);
}
/**
 * @param {boolean} bool
 *   Whether to skip this operation.
 * @param {unknown} actual
 *   Actual value.
 * @param {unknown} expected
 *   Expected value.
 * @param {string} operator
 *   Operator.
 * @param {string} defaultMessage
 *   Default message for operation.
 * @param {Error | string | null | undefined} userMessage
 *   User-provided message.
 * @returns {asserts bool}
 *   Nothing; throws when falsey.
 */ // eslint-disable-next-line max-params
function assert(bool, actual, expected, operator, defaultMessage, userMessage) {
    if (!bool) {
        throw userMessage instanceof Error ? userMessage : new AssertionError(userMessage || defaultMessage, actual, expected, operator, !userMessage);
    }
}
}}),
"[project]/apps/website/docs/node_modules/bail/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Throw a given error.
 *
 * @param {Error|null|undefined} [error]
 *   Maybe error.
 * @returns {asserts error is null|undefined}
 */ __turbopack_esm__({
    "bail": (()=>bail)
});
function bail(error) {
    if (error) {
        throw error;
    }
}
}}),
"[project]/apps/website/docs/node_modules/unified/lib/callable-instance.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "CallableInstance": (()=>CallableInstance)
});
const CallableInstance = /**
       * @this {Function}
       * @param {string | symbol} property
       * @returns {(...parameters: Array<unknown>) => unknown}
       */ function(property) {
    const self = this;
    const constr = self.constructor;
    const proto = // Prototypes do exist.
    // type-coverage:ignore-next-line
    constr.prototype;
    const value = proto[property];
    /** @type {(...parameters: Array<unknown>) => unknown} */ const apply = function() {
        return value.apply(apply, arguments);
    };
    Object.setPrototypeOf(apply, proto);
    // Not needed for us in `unified`: we only call this on the `copy`
    // function,
    // and we don't need to add its fields (`length`, `name`)
    // over.
    // See also: GH-246.
    // const names = Object.getOwnPropertyNames(value)
    //
    // for (const p of names) {
    //   const descriptor = Object.getOwnPropertyDescriptor(value, p)
    //   if (descriptor) Object.defineProperty(apply, p, descriptor)
    // }
    return apply;
};
}}),
"[project]/apps/website/docs/node_modules/unified/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('trough').Pipeline} Pipeline
 *
 * @typedef {import('unist').Node} Node
 *
 * @typedef {import('vfile').Compatible} Compatible
 * @typedef {import('vfile').Value} Value
 *
 * @typedef {import('../index.js').CompileResultMap} CompileResultMap
 * @typedef {import('../index.js').Data} Data
 * @typedef {import('../index.js').Settings} Settings
 */ /**
 * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults
 *   Acceptable results from compilers.
 *
 *   To register custom results, add them to
 *   {@linkcode CompileResultMap}.
 */ /**
 * @template {Node} [Tree=Node]
 *   The node that the compiler receives (default: `Node`).
 * @template {CompileResults} [Result=CompileResults]
 *   The thing that the compiler yields (default: `CompileResults`).
 * @callback Compiler
 *   A **compiler** handles the compiling of a syntax tree to something else
 *   (in most cases, text) (TypeScript type).
 *
 *   It is used in the stringify phase and called with a {@linkcode Node}
 *   and {@linkcode VFile} representation of the document to compile.
 *   It should return the textual representation of the given tree (typically
 *   `string`).
 *
 *   > **Note**: unified typically compiles by serializing: most compilers
 *   > return `string` (or `Uint8Array`).
 *   > Some compilers, such as the one configured with
 *   > [`rehype-react`][rehype-react], return other values (in this case, a
 *   > React tree).
 *   > If you’re using a compiler that doesn’t serialize, expect different
 *   > result values.
 *   >
 *   > To register custom results in TypeScript, add them to
 *   > {@linkcode CompileResultMap}.
 *
 *   [rehype-react]: https://github.com/rehypejs/rehype-react
 * @param {Tree} tree
 *   Tree to compile.
 * @param {VFile} file
 *   File associated with `tree`.
 * @returns {Result}
 *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or
 *   something else (for `file.result`).
 */ /**
 * @template {Node} [Tree=Node]
 *   The node that the parser yields (default: `Node`)
 * @callback Parser
 *   A **parser** handles the parsing of text to a syntax tree.
 *
 *   It is used in the parse phase and is called with a `string` and
 *   {@linkcode VFile} of the document to parse.
 *   It must return the syntax tree representation of the given file
 *   ({@linkcode Node}).
 * @param {string} document
 *   Document to parse.
 * @param {VFile} file
 *   File associated with `document`.
 * @returns {Tree}
 *   Node representing the given file.
 */ /**
 * @typedef {(
 *   Plugin<Array<any>, any, any> |
 *   PluginTuple<Array<any>, any, any> |
 *   Preset
 * )} Pluggable
 *   Union of the different ways to add plugins and settings.
 */ /**
 * @typedef {Array<Pluggable>} PluggableList
 *   List of plugins and presets.
 */ // Note: we can’t use `callback` yet as it messes up `this`:
//  <https://github.com/microsoft/TypeScript/issues/55197>.
/**
 * @template {Array<unknown>} [PluginParameters=[]]
 *   Arguments passed to the plugin (default: `[]`, the empty tuple).
 * @template {Node | string | undefined} [Input=Node]
 *   Value that is expected as input (default: `Node`).
 *
 *   *   If the plugin returns a {@linkcode Transformer}, this
 *       should be the node it expects.
 *   *   If the plugin sets a {@linkcode Parser}, this should be
 *       `string`.
 *   *   If the plugin sets a {@linkcode Compiler}, this should be the
 *       node it expects.
 * @template [Output=Input]
 *   Value that is yielded as output (default: `Input`).
 *
 *   *   If the plugin returns a {@linkcode Transformer}, this
 *       should be the node that that yields.
 *   *   If the plugin sets a {@linkcode Parser}, this should be the
 *       node that it yields.
 *   *   If the plugin sets a {@linkcode Compiler}, this should be
 *       result it yields.
 * @typedef {(
 *   (this: Processor, ...parameters: PluginParameters) =>
 *     Input extends string ? // Parser.
 *        Output extends Node | undefined ? undefined | void : never :
 *     Output extends CompileResults ? // Compiler.
 *        Input extends Node | undefined ? undefined | void : never :
 *     Transformer<
 *       Input extends Node ? Input : Node,
 *       Output extends Node ? Output : Node
 *     > | undefined | void
 * )} Plugin
 *   Single plugin.
 *
 *   Plugins configure the processors they are applied on in the following
 *   ways:
 *
 *   *   they change the processor, such as the parser, the compiler, or by
 *       configuring data
 *   *   they specify how to handle trees and files
 *
 *   In practice, they are functions that can receive options and configure the
 *   processor (`this`).
 *
 *   > **Note**: plugins are called when the processor is *frozen*, not when
 *   > they are applied.
 */ /**
 * Tuple of a plugin and its configuration.
 *
 * The first item is a plugin, the rest are its parameters.
 *
 * @template {Array<unknown>} [TupleParameters=[]]
 *   Arguments passed to the plugin (default: `[]`, the empty tuple).
 * @template {Node | string | undefined} [Input=undefined]
 *   Value that is expected as input (optional).
 *
 *   *   If the plugin returns a {@linkcode Transformer}, this
 *       should be the node it expects.
 *   *   If the plugin sets a {@linkcode Parser}, this should be
 *       `string`.
 *   *   If the plugin sets a {@linkcode Compiler}, this should be the
 *       node it expects.
 * @template [Output=undefined] (optional).
 *   Value that is yielded as output.
 *
 *   *   If the plugin returns a {@linkcode Transformer}, this
 *       should be the node that that yields.
 *   *   If the plugin sets a {@linkcode Parser}, this should be the
 *       node that it yields.
 *   *   If the plugin sets a {@linkcode Compiler}, this should be
 *       result it yields.
 * @typedef {(
 *   [
 *     plugin: Plugin<TupleParameters, Input, Output>,
 *     ...parameters: TupleParameters
 *   ]
 * )} PluginTuple
 */ /**
 * @typedef Preset
 *   Sharable configuration.
 *
 *   They can contain plugins and settings.
 * @property {PluggableList | undefined} [plugins]
 *   List of plugins and presets (optional).
 * @property {Settings | undefined} [settings]
 *   Shared settings for parsers and compilers (optional).
 */ /**
 * @template {VFile} [File=VFile]
 *   The file that the callback receives (default: `VFile`).
 * @callback ProcessCallback
 *   Callback called when the process is done.
 *
 *   Called with either an error or a result.
 * @param {Error | undefined} [error]
 *   Fatal error (optional).
 * @param {File | undefined} [file]
 *   Processed file (optional).
 * @returns {undefined}
 *   Nothing.
 */ /**
 * @template {Node} [Tree=Node]
 *   The tree that the callback receives (default: `Node`).
 * @callback RunCallback
 *   Callback called when transformers are done.
 *
 *   Called with either an error or results.
 * @param {Error | undefined} [error]
 *   Fatal error (optional).
 * @param {Tree | undefined} [tree]
 *   Transformed tree (optional).
 * @param {VFile | undefined} [file]
 *   File (optional).
 * @returns {undefined}
 *   Nothing.
 */ /**
 * @template {Node} [Output=Node]
 *   Node type that the transformer yields (default: `Node`).
 * @callback TransformCallback
 *   Callback passed to transforms.
 *
 *   If the signature of a `transformer` accepts a third argument, the
 *   transformer may perform asynchronous operations, and must call it.
 * @param {Error | undefined} [error]
 *   Fatal error to stop the process (optional).
 * @param {Output | undefined} [tree]
 *   New, changed, tree (optional).
 * @param {VFile | undefined} [file]
 *   New, changed, file (optional).
 * @returns {undefined}
 *   Nothing.
 */ /**
 * @template {Node} [Input=Node]
 *   Node type that the transformer expects (default: `Node`).
 * @template {Node} [Output=Input]
 *   Node type that the transformer yields (default: `Input`).
 * @callback Transformer
 *   Transformers handle syntax trees and files.
 *
 *   They are functions that are called each time a syntax tree and file are
 *   passed through the run phase.
 *   When an error occurs in them (either because it’s thrown, returned,
 *   rejected, or passed to `next`), the process stops.
 *
 *   The run phase is handled by [`trough`][trough], see its documentation for
 *   the exact semantics of these functions.
 *
 *   > **Note**: you should likely ignore `next`: don’t accept it.
 *   > it supports callback-style async work.
 *   > But promises are likely easier to reason about.
 *
 *   [trough]: https://github.com/wooorm/trough#function-fninput-next
 * @param {Input} tree
 *   Tree to handle.
 * @param {VFile} file
 *   File to handle.
 * @param {TransformCallback<Output>} next
 *   Callback.
 * @returns {(
 *   Promise<Output | undefined | void> |
 *   Promise<never> | // For some reason this is needed separately.
 *   Output |
 *   Error |
 *   undefined |
 *   void
 * )}
 *   If you accept `next`, nothing.
 *   Otherwise:
 *
 *   *   `Error` — fatal error to stop the process
 *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using
 *       same tree
 *   *   `Promise<Node>` or `Node` — new, changed, tree
 */ /**
 * @template {Node | undefined} ParseTree
 *   Output of `parse`.
 * @template {Node | undefined} HeadTree
 *   Input for `run`.
 * @template {Node | undefined} TailTree
 *   Output for `run`.
 * @template {Node | undefined} CompileTree
 *   Input of `stringify`.
 * @template {CompileResults | undefined} CompileResult
 *   Output of `stringify`.
 * @template {Node | string | undefined} Input
 *   Input of plugin.
 * @template Output
 *   Output of plugin (optional).
 * @typedef {(
 *   Input extends string
 *     ? Output extends Node | undefined
 *       ? // Parser.
 *         Processor<
 *           Output extends undefined ? ParseTree : Output,
 *           HeadTree,
 *           TailTree,
 *           CompileTree,
 *           CompileResult
 *         >
 *       : // Unknown.
 *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>
 *     : Output extends CompileResults
 *     ? Input extends Node | undefined
 *       ? // Compiler.
 *         Processor<
 *           ParseTree,
 *           HeadTree,
 *           TailTree,
 *           Input extends undefined ? CompileTree : Input,
 *           Output extends undefined ? CompileResult : Output
 *         >
 *       : // Unknown.
 *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>
 *     : Input extends Node | undefined
 *     ? Output extends Node | undefined
 *       ? // Transform.
 *         Processor<
 *           ParseTree,
 *           HeadTree extends undefined ? Input : HeadTree,
 *           Output extends undefined ? TailTree : Output,
 *           CompileTree,
 *           CompileResult
 *         >
 *       : // Unknown.
 *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>
 *     : // Unknown.
 *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>
 * )} UsePlugin
 *   Create a processor based on the input/output of a {@link Plugin plugin}.
 */ /**
 * @template {CompileResults | undefined} Result
 *   Node type that the transformer yields.
 * @typedef {(
 *   Result extends Value | undefined ?
 *     VFile :
 *     VFile & {result: Result}
 *   )} VFileWithOutput
 *   Type to generate a {@linkcode VFile} corresponding to a compiler result.
 *
 *   If a result that is not acceptable on a `VFile` is used, that will
 *   be stored on the `result` field of {@linkcode VFile}.
 */ __turbopack_esm__({
    "Processor": (()=>Processor),
    "unified": (()=>unified)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$extend$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/extend/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$is$2d$plain$2d$obj$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/is-plain-obj/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$trough$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/trough/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$bail$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/bail/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unified$2f$lib$2f$callable$2d$instance$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unified/lib/callable-instance.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/vfile/lib/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.
// To do: we could start yielding `never` in TS when a parser is missing and
// `parse` is called.
// Currently, we allow directly setting `processor.parser`, which is untyped.
const own = {}.hasOwnProperty;
class Processor extends __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unified$2f$lib$2f$callable$2d$instance$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CallableInstance"] {
    /**
   * Create a processor.
   */ constructor(){
        // If `Processor()` is called (w/o new), `copy` is called instead.
        super('copy');
        /**
     * Compiler to use (deprecated).
     *
     * @deprecated
     *   Use `compiler` instead.
     * @type {(
     *   Compiler<
     *     CompileTree extends undefined ? Node : CompileTree,
     *     CompileResult extends undefined ? CompileResults : CompileResult
     *   > |
     *   undefined
     * )}
     */ this.Compiler = undefined;
        /**
     * Parser to use (deprecated).
     *
     * @deprecated
     *   Use `parser` instead.
     * @type {(
     *   Parser<ParseTree extends undefined ? Node : ParseTree> |
     *   undefined
     * )}
     */ this.Parser = undefined;
        // Note: the following fields are considered private.
        // However, they are needed for tests, and TSC generates an untyped
        // `private freezeIndex` field for, which trips `type-coverage` up.
        // Instead, we use `@deprecated` to visualize that they shouldn’t be used.
        /**
     * Internal list of configured plugins.
     *
     * @deprecated
     *   This is a private internal property and should not be used.
     * @type {Array<PluginTuple<Array<unknown>>>}
     */ this.attachers = [];
        /**
     * Compiler to use.
     *
     * @type {(
     *   Compiler<
     *     CompileTree extends undefined ? Node : CompileTree,
     *     CompileResult extends undefined ? CompileResults : CompileResult
     *   > |
     *   undefined
     * )}
     */ this.compiler = undefined;
        /**
     * Internal state to track where we are while freezing.
     *
     * @deprecated
     *   This is a private internal property and should not be used.
     * @type {number}
     */ this.freezeIndex = -1;
        /**
     * Internal state to track whether we’re frozen.
     *
     * @deprecated
     *   This is a private internal property and should not be used.
     * @type {boolean | undefined}
     */ this.frozen = undefined;
        /**
     * Internal state.
     *
     * @deprecated
     *   This is a private internal property and should not be used.
     * @type {Data}
     */ this.namespace = {};
        /**
     * Parser to use.
     *
     * @type {(
     *   Parser<ParseTree extends undefined ? Node : ParseTree> |
     *   undefined
     * )}
     */ this.parser = undefined;
        /**
     * Internal list of configured transformers.
     *
     * @deprecated
     *   This is a private internal property and should not be used.
     * @type {Pipeline}
     */ this.transformers = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$trough$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["trough"])();
    }
    /**
   * Copy a processor.
   *
   * @deprecated
   *   This is a private internal method and should not be used.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   New *unfrozen* processor ({@linkcode Processor}) that is
   *   configured to work the same as its ancestor.
   *   When the descendant processor is configured in the future it does not
   *   affect the ancestral processor.
   */ copy() {
        // Cast as the type parameters will be the same after attaching.
        const destination = new Processor();
        let index = -1;
        while(++index < this.attachers.length){
            const attacher = this.attachers[index];
            destination.use(...attacher);
        }
        destination.data((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$extend$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(true, {}, this.namespace));
        return destination;
    }
    /**
   * Configure the processor with info available to all plugins.
   * Information is stored in an object.
   *
   * Typically, options can be given to a specific plugin, but sometimes it
   * makes sense to have information shared with several plugins.
   * For example, a list of HTML elements that are self-closing, which is
   * needed during all phases.
   *
   * > **Note**: setting information cannot occur on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * > **Note**: to register custom data in TypeScript, augment the
   * > {@linkcode Data} interface.
   *
   * @example
   *   This example show how to get and set info:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   const processor = unified().data('alpha', 'bravo')
   *
   *   processor.data('alpha') // => 'bravo'
   *
   *   processor.data() // => {alpha: 'bravo'}
   *
   *   processor.data({charlie: 'delta'})
   *
   *   processor.data() // => {charlie: 'delta'}
   *   ```
   *
   * @template {keyof Data} Key
   *
   * @overload
   * @returns {Data}
   *
   * @overload
   * @param {Data} dataset
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Key} key
   * @returns {Data[Key]}
   *
   * @overload
   * @param {Key} key
   * @param {Data[Key]} value
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @param {Data | Key} [key]
   *   Key to get or set, or entire dataset to set, or nothing to get the
   *   entire dataset (optional).
   * @param {Data[Key]} [value]
   *   Value to set (optional).
   * @returns {unknown}
   *   The current processor when setting, the value at `key` when getting, or
   *   the entire dataset when getting without key.
   */ data(key, value) {
        if (typeof key === 'string') {
            // Set `key`.
            if (arguments.length === 2) {
                assertUnfrozen('data', this.frozen);
                this.namespace[key] = value;
                return this;
            }
            // Get `key`.
            return own.call(this.namespace, key) && this.namespace[key] || undefined;
        }
        // Set space.
        if (key) {
            assertUnfrozen('data', this.frozen);
            this.namespace = key;
            return this;
        }
        // Get space.
        return this.namespace;
    }
    /**
   * Freeze a processor.
   *
   * Frozen processors are meant to be extended and not to be configured
   * directly.
   *
   * When a processor is frozen it cannot be unfrozen.
   * New processors working the same way can be created by calling the
   * processor.
   *
   * It’s possible to freeze processors explicitly by calling `.freeze()`.
   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
   * `.stringify()`, `.process()`, or `.processSync()` are called.
   *
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   The current processor.
   */ freeze() {
        if (this.frozen) {
            return this;
        }
        // Cast so that we can type plugins easier.
        // Plugins are supposed to be usable on different processors, not just on
        // this exact processor.
        const self = this;
        while(++this.freezeIndex < this.attachers.length){
            const [attacher, ...options] = this.attachers[this.freezeIndex];
            if (options[0] === false) {
                continue;
            }
            if (options[0] === true) {
                options[0] = undefined;
            }
            const transformer = attacher.call(self, ...options);
            if (typeof transformer === 'function') {
                this.transformers.use(transformer);
            }
        }
        this.frozen = true;
        this.freezeIndex = Number.POSITIVE_INFINITY;
        return this;
    }
    /**
   * Parse text to a syntax tree.
   *
   * > **Note**: `parse` freezes the processor if not already *frozen*.
   *
   * > **Note**: `parse` performs the parse phase, not the run phase or other
   * > phases.
   *
   * @param {Compatible | undefined} [file]
   *   file to parse (optional); typically `string` or `VFile`; any value
   *   accepted as `x` in `new VFile(x)`.
   * @returns {ParseTree extends undefined ? Node : ParseTree}
   *   Syntax tree representing `file`.
   */ parse(file) {
        this.freeze();
        const realFile = vfile(file);
        const parser = this.parser || this.Parser;
        assertParser('parse', parser);
        return parser(String(realFile), realFile);
    }
    /**
   * Process the given file as configured on the processor.
   *
   * > **Note**: `process` freezes the processor if not already *frozen*.
   *
   * > **Note**: `process` performs the parse, run, and stringify phases.
   *
   * @overload
   * @param {Compatible | undefined} file
   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
   * @returns {undefined}
   *
   * @overload
   * @param {Compatible | undefined} [file]
   * @returns {Promise<VFileWithOutput<CompileResult>>}
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`]; any value accepted as
   *   `x` in `new VFile(x)`.
   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
   *   Callback (optional).
   * @returns {Promise<VFile> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise a promise, rejected with a fatal error or resolved with the
   *   processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */ process(file, done) {
        const self = this;
        this.freeze();
        assertParser('process', this.parser || this.Parser);
        assertCompiler('process', this.compiler || this.Compiler);
        return done ? executor(undefined, done) : new Promise(executor);
        "TURBOPACK unreachable";
        // Note: `void`s needed for TS.
        /**
     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve
     * @param {(error: Error | undefined) => undefined | void} reject
     * @returns {undefined}
     */ function executor(resolve, reject) {
            const realFile = vfile(file);
            // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the
            // input of the first transform).
            const parseTree = self.parse(realFile);
            self.run(parseTree, realFile, function(error, tree, file) {
                if (error || !tree || !file) {
                    return realDone(error);
                }
                // Assume `TailTree` (the output of the last transform) matches
                // `CompileTree` (the input of the compiler).
                const compileTree = tree;
                const compileResult = self.stringify(compileTree, file);
                if (looksLikeAValue(compileResult)) {
                    file.value = compileResult;
                } else {
                    file.result = compileResult;
                }
                realDone(error, file);
            });
            /**
       * @param {Error | undefined} error
       * @param {VFileWithOutput<CompileResult> | undefined} [file]
       * @returns {undefined}
       */ function realDone(error, file) {
                if (error || !file) {
                    reject(error);
                } else if (resolve) {
                    resolve(file);
                } else {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(done, '`done` is defined if `resolve` is not');
                    done(undefined, file);
                }
            }
        }
    }
    /**
   * Process the given file as configured on the processor.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `processSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `processSync` performs the parse, run, and stringify phases.
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`; any value accepted as
   *   `x` in `new VFile(x)`.
   * @returns {VFileWithOutput<CompileResult>}
   *   The processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */ processSync(file) {
        /** @type {boolean} */ let complete = false;
        /** @type {VFileWithOutput<CompileResult> | undefined} */ let result;
        this.freeze();
        assertParser('processSync', this.parser || this.Parser);
        assertCompiler('processSync', this.compiler || this.Compiler);
        this.process(file, realDone);
        assertDone('processSync', 'process', complete);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(result, 'we either bailed on an error or have a tree');
        return result;
        "TURBOPACK unreachable";
        /**
     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}
     */ function realDone(error, file) {
            complete = true;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$bail$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["bail"])(error);
            result = file;
        }
    }
    /**
   * Run *transformers* on a syntax tree.
   *
   * > **Note**: `run` freezes the processor if not already *frozen*.
   *
   * > **Note**: `run` performs the run phase, not other phases.
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} file
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} [file]
   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {(
   *   RunCallback<TailTree extends undefined ? Node : TailTree> |
   *   Compatible
   * )} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
   *   Callback (optional).
   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise, a promise rejected with a fatal error or resolved with the
   *   transformed tree.
   */ run(tree, file, done) {
        assertNode(tree);
        this.freeze();
        const transformers = this.transformers;
        if (!done && typeof file === 'function') {
            done = file;
            file = undefined;
        }
        return done ? executor(undefined, done) : new Promise(executor);
        "TURBOPACK unreachable";
        // Note: `void`s needed for TS.
        /**
     * @param {(
     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |
     *   undefined
     * )} resolve
     * @param {(error: Error) => undefined | void} reject
     * @returns {undefined}
     */ function executor(resolve, reject) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof file !== 'function', '`file` can’t be a `done` anymore, we checked');
            const realFile = vfile(file);
            transformers.run(tree, realFile, realDone);
            /**
       * @param {Error | undefined} error
       * @param {Node} outputTree
       * @param {VFile} file
       * @returns {undefined}
       */ function realDone(error, outputTree, file) {
                const resultingTree = outputTree || tree;
                if (error) {
                    reject(error);
                } else if (resolve) {
                    resolve(resultingTree);
                } else {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(done, '`done` is defined if `resolve` is not');
                    done(undefined, resultingTree, file);
                }
            }
        }
    }
    /**
   * Run *transformers* on a syntax tree.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `runSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `runSync` performs the run phase, not other phases.
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {TailTree extends undefined ? Node : TailTree}
   *   Transformed tree.
   */ runSync(tree, file) {
        /** @type {boolean} */ let complete = false;
        /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */ let result;
        this.run(tree, file, realDone);
        assertDone('runSync', 'run', complete);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(result, 'we either bailed on an error or have a tree');
        return result;
        "TURBOPACK unreachable";
        /**
     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}
     */ function realDone(error, tree) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$bail$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["bail"])(error);
            result = tree;
            complete = true;
        }
    }
    /**
   * Compile a syntax tree.
   *
   * > **Note**: `stringify` freezes the processor if not already *frozen*.
   *
   * > **Note**: `stringify` performs the stringify phase, not the run phase
   * > or other phases.
   *
   * @param {CompileTree extends undefined ? Node : CompileTree} tree
   *   Tree to compile.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {CompileResult extends undefined ? Value : CompileResult}
   *   Textual representation of the tree (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most compilers
   *   > return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */ stringify(tree, file) {
        this.freeze();
        const realFile = vfile(file);
        const compiler = this.compiler || this.Compiler;
        assertCompiler('stringify', compiler);
        assertNode(tree);
        return compiler(tree, realFile);
    }
    /**
   * Configure the processor to use a plugin, a list of usable values, or a
   * preset.
   *
   * If the processor is already using a plugin, the previous plugin
   * configuration is changed based on the options that are passed in.
   * In other words, the plugin is not added a second time.
   *
   * > **Note**: `use` cannot be called on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * @example
   *   There are many ways to pass plugins to `.use()`.
   *   This example gives an overview:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   unified()
   *     // Plugin with options:
   *     .use(pluginA, {x: true, y: true})
   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
   *     .use(pluginA, {y: false, z: true})
   *     // Plugins:
   *     .use([pluginB, pluginC])
   *     // Two plugins, the second with options:
   *     .use([pluginD, [pluginE, {}]])
   *     // Preset with plugins and settings:
   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
   *     // Settings only:
   *     .use({settings: {position: false}})
   *   ```
   *
   * @template {Array<unknown>} [Parameters=[]]
   * @template {Node | string | undefined} [Input=undefined]
   * @template [Output=Input]
   *
   * @overload
   * @param {Preset | null | undefined} [preset]
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {PluggableList} list
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Plugin<Parameters, Input, Output>} plugin
   * @param {...(Parameters | [boolean])} parameters
   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
   *
   * @param {PluggableList | Plugin | Preset | null | undefined} value
   *   Usable value.
   * @param {...unknown} parameters
   *   Parameters, when a plugin is given as a usable value.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   Current processor.
   */ use(value, ...parameters) {
        const attachers = this.attachers;
        const namespace = this.namespace;
        assertUnfrozen('use', this.frozen);
        if (value === null || value === undefined) {
        // Empty.
        } else if (typeof value === 'function') {
            addPlugin(value, parameters);
        } else if (typeof value === 'object') {
            if (Array.isArray(value)) {
                addList(value);
            } else {
                addPreset(value);
            }
        } else {
            throw new TypeError('Expected usable value, not `' + value + '`');
        }
        return this;
        "TURBOPACK unreachable";
        /**
     * @param {Pluggable} value
     * @returns {undefined}
     */ function add(value) {
            if (typeof value === 'function') {
                addPlugin(value, []);
            } else if (typeof value === 'object') {
                if (Array.isArray(value)) {
                    const [plugin, ...parameters] = value;
                    addPlugin(plugin, parameters);
                } else {
                    addPreset(value);
                }
            } else {
                throw new TypeError('Expected usable value, not `' + value + '`');
            }
        }
        /**
     * @param {Preset} result
     * @returns {undefined}
     */ function addPreset(result) {
            if (!('plugins' in result) && !('settings' in result)) {
                throw new Error('Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither');
            }
            addList(result.plugins);
            if (result.settings) {
                namespace.settings = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$extend$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(true, namespace.settings, result.settings);
            }
        }
        /**
     * @param {PluggableList | null | undefined} plugins
     * @returns {undefined}
     */ function addList(plugins) {
            let index = -1;
            if (plugins === null || plugins === undefined) {
            // Empty.
            } else if (Array.isArray(plugins)) {
                while(++index < plugins.length){
                    const thing = plugins[index];
                    add(thing);
                }
            } else {
                throw new TypeError('Expected a list of plugins, not `' + plugins + '`');
            }
        }
        /**
     * @param {Plugin} plugin
     * @param {Array<unknown>} parameters
     * @returns {undefined}
     */ function addPlugin(plugin, parameters) {
            let index = -1;
            let entryIndex = -1;
            while(++index < attachers.length){
                if (attachers[index][0] === plugin) {
                    entryIndex = index;
                    break;
                }
            }
            if (entryIndex === -1) {
                attachers.push([
                    plugin,
                    ...parameters
                ]);
            } else if (parameters.length > 0) {
                let [primary, ...rest] = parameters;
                const currentPrimary = attachers[entryIndex][1];
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$is$2d$plain$2d$obj$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(currentPrimary) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$is$2d$plain$2d$obj$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(primary)) {
                    primary = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$extend$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(true, currentPrimary, primary);
                }
                attachers[entryIndex] = [
                    plugin,
                    primary,
                    ...rest
                ];
            }
        }
    }
}
const unified = new Processor().freeze();
/**
 * Assert a parser is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Parser}
 */ function assertParser(name, value) {
    if (typeof value !== 'function') {
        throw new TypeError('Cannot `' + name + '` without `parser`');
    }
}
/**
 * Assert a compiler is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Compiler}
 */ function assertCompiler(name, value) {
    if (typeof value !== 'function') {
        throw new TypeError('Cannot `' + name + '` without `compiler`');
    }
}
/**
 * Assert the processor is not frozen.
 *
 * @param {string} name
 * @param {unknown} frozen
 * @returns {asserts frozen is false}
 */ function assertUnfrozen(name, frozen) {
    if (frozen) {
        throw new Error('Cannot call `' + name + '` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.');
    }
}
/**
 * Assert `node` is a unist node.
 *
 * @param {unknown} node
 * @returns {asserts node is Node}
 */ function assertNode(node) {
    // `isPlainObj` unfortunately uses `any` instead of `unknown`.
    // type-coverage:ignore-next-line
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$is$2d$plain$2d$obj$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(node) || typeof node.type !== 'string') {
        throw new TypeError('Expected node, got `' + node + '`');
    // Fine.
    }
}
/**
 * Assert that `complete` is `true`.
 *
 * @param {string} name
 * @param {string} asyncName
 * @param {unknown} complete
 * @returns {asserts complete is true}
 */ function assertDone(name, asyncName, complete) {
    if (!complete) {
        throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');
    }
}
/**
 * @param {Compatible | undefined} [value]
 * @returns {VFile}
 */ function vfile(value) {
    return looksLikeAVFile(value) ? value : new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFile"](value);
}
/**
 * @param {Compatible | undefined} [value]
 * @returns {value is VFile}
 */ function looksLikeAVFile(value) {
    return Boolean(value && typeof value === 'object' && 'message' in value && 'messages' in value);
}
/**
 * @param {unknown} [value]
 * @returns {value is Value}
 */ function looksLikeAValue(value) {
    return typeof value === 'string' || isUint8Array(value);
}
/**
 * Assert `value` is an `Uint8Array`.
 *
 * @param {unknown} value
 *   thing.
 * @returns {value is Uint8Array}
 *   Whether `value` is an `Uint8Array`.
 */ function isUint8Array(value) {
    return Boolean(value && typeof value === 'object' && 'byteLength' in value && 'byteOffset' in value);
}
}}),
"[project]/apps/website/docs/node_modules/vfile/lib/minurl.shared.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Checks if a value has the shape of a WHATWG URL object.
 *
 * Using a symbol or instanceof would not be able to recognize URL objects
 * coming from other implementations (e.g. in Electron), so instead we are
 * checking some well known properties for a lack of a better test.
 *
 * We use `href` and `protocol` as they are the only properties that are
 * easy to retrieve and calculate due to the lazy nature of the getters.
 *
 * We check for auth attribute to distinguish legacy url instance with
 * WHATWG URL instance.
 *
 * @param {unknown} fileUrlOrPath
 *   File path or URL.
 * @returns {fileUrlOrPath is URL}
 *   Whether it’s a URL.
 */ // From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>
__turbopack_esm__({
    "isUrl": (()=>isUrl)
});
function isUrl(fileUrlOrPath) {
    return Boolean(fileUrlOrPath !== null && typeof fileUrlOrPath === 'object' && 'href' in fileUrlOrPath && fileUrlOrPath.href && 'protocol' in fileUrlOrPath && fileUrlOrPath.protocol && // @ts-expect-error: indexing is fine.
    fileUrlOrPath.auth === undefined);
}
}}),
"[project]/apps/website/docs/node_modules/vfile/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Node, Point, Position} from 'unist'
 * @import {Options as MessageOptions} from 'vfile-message'
 * @import {Compatible, Data, Map, Options, Value} from 'vfile'
 */ /**
 * @typedef {object & {type: string, position?: Position | undefined}} NodeLike
 */ __turbopack_esm__({
    "VFile": (()=>VFile)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2f$lib$2f$minurl$2e$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/vfile/lib/minurl.shared.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__$3c$export__default__as__minproc$3e$__ = __turbopack_import__("[externals]/node:process [external] (node:process, cjs) <export default as minproc>");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__$3c$export__default__as__minpath$3e$__ = __turbopack_import__("[externals]/node:path [external] (node:path, cjs) <export default as minpath>");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$url__$5b$external$5d$__$28$node$3a$url$2c$__cjs$29$__$3c$export__fileURLToPath__as__urlToPath$3e$__ = __turbopack_import__("[externals]/node:url [external] (node:url, cjs) <export fileURLToPath as urlToPath>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/vfile-message/lib/index.js [app-rsc] (ecmascript)");
;
;
;
;
/**
 * Order of setting (least specific to most), we need this because otherwise
 * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
 * stem can be set.
 */ const order = [
    'history',
    'path',
    'basename',
    'stem',
    'extname',
    'dirname'
];
class VFile {
    /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Uint8Array` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */ constructor(value){
        /** @type {Options | VFile} */ let options;
        if (!value) {
            options = {};
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2f$lib$2f$minurl$2e$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isUrl"])(value)) {
            options = {
                path: value
            };
        } else if (typeof value === 'string' || isUint8Array(value)) {
            options = {
                value
            };
        } else {
            options = value;
        }
        /* eslint-disable no-unused-expressions */ /**
     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).
     *
     * @type {string}
     */ // Prevent calling `cwd` (which could be expensive) if it’s not needed;
        // the empty string will be overridden in the next block.
        this.cwd = 'cwd' in options ? '' : __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__$3c$export__default__as__minproc$3e$__["minproc"].cwd();
        /**
     * Place to store custom info (default: `{}`).
     *
     * It’s OK to store custom data directly on the file but moving it to
     * `data` is recommended.
     *
     * @type {Data}
     */ this.data = {};
        /**
     * List of file paths the file moved between.
     *
     * The first is the original path and the last is the current path.
     *
     * @type {Array<string>}
     */ this.history = [];
        /**
     * List of messages associated with the file.
     *
     * @type {Array<VFileMessage>}
     */ this.messages = [];
        /**
     * Raw value.
     *
     * @type {Value}
     */ this.value;
        // The below are non-standard, they are “well-known”.
        // As in, used in several tools.
        /**
     * Source map.
     *
     * This type is equivalent to the `RawSourceMap` type from the `source-map`
     * module.
     *
     * @type {Map | null | undefined}
     */ this.map;
        /**
     * Custom, non-string, compiled, representation.
     *
     * This is used by unified to store non-string results.
     * One example is when turning markdown into React nodes.
     *
     * @type {unknown}
     */ this.result;
        /**
     * Whether a file was saved to disk.
     *
     * This is used by vfile reporters.
     *
     * @type {boolean}
     */ this.stored;
        /* eslint-enable no-unused-expressions */ // Set path related properties in the correct order.
        let index = -1;
        while(++index < order.length){
            const field = order[index];
            // Note: we specifically use `in` instead of `hasOwnProperty` to accept
            // `vfile`s too.
            if (field in options && options[field] !== undefined && options[field] !== null) {
                // @ts-expect-error: TS doesn’t understand basic reality.
                this[field] = field === 'history' ? [
                    ...options[field]
                ] : options[field];
            }
        }
        /** @type {string} */ let field;
        // Set non-path related properties.
        for(field in options){
            // @ts-expect-error: fine to set other things.
            if (!order.includes(field)) {
                // @ts-expect-error: fine to set other things.
                this[field] = options[field];
            }
        }
    }
    /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   *
   * @returns {string | undefined}
   *   Basename.
   */ get basename() {
        return typeof this.path === 'string' ? __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__$3c$export__default__as__minpath$3e$__["minpath"].basename(this.path) : undefined;
    }
    /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} basename
   *   Basename.
   * @returns {undefined}
   *   Nothing.
   */ set basename(basename) {
        assertNonEmpty(basename, 'basename');
        assertPart(basename, 'basename');
        this.path = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__$3c$export__default__as__minpath$3e$__["minpath"].join(this.dirname || '', basename);
    }
    /**
   * Get the parent path (example: `'~'`).
   *
   * @returns {string | undefined}
   *   Dirname.
   */ get dirname() {
        return typeof this.path === 'string' ? __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__$3c$export__default__as__minpath$3e$__["minpath"].dirname(this.path) : undefined;
    }
    /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} dirname
   *   Dirname.
   * @returns {undefined}
   *   Nothing.
   */ set dirname(dirname) {
        assertPath(this.basename, 'dirname');
        this.path = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__$3c$export__default__as__minpath$3e$__["minpath"].join(dirname || '', this.basename);
    }
    /**
   * Get the extname (including dot) (example: `'.js'`).
   *
   * @returns {string | undefined}
   *   Extname.
   */ get extname() {
        return typeof this.path === 'string' ? __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__$3c$export__default__as__minpath$3e$__["minpath"].extname(this.path) : undefined;
    }
    /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} extname
   *   Extname.
   * @returns {undefined}
   *   Nothing.
   */ set extname(extname) {
        assertPart(extname, 'extname');
        assertPath(this.dirname, 'extname');
        if (extname) {
            if (extname.codePointAt(0) !== 46 /* `.` */ ) {
                throw new Error('`extname` must start with `.`');
            }
            if (extname.includes('.', 1)) {
                throw new Error('`extname` cannot contain multiple dots');
            }
        }
        this.path = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__$3c$export__default__as__minpath$3e$__["minpath"].join(this.dirname, this.stem + (extname || ''));
    }
    /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   *   Path.
   */ get path() {
        return this.history[this.history.length - 1];
    }
    /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {URL | string} path
   *   Path.
   * @returns {undefined}
   *   Nothing.
   */ set path(path) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2f$lib$2f$minurl$2e$shared$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isUrl"])(path)) {
            path = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$url__$5b$external$5d$__$28$node$3a$url$2c$__cjs$29$__$3c$export__fileURLToPath__as__urlToPath$3e$__["urlToPath"])(path);
        }
        assertNonEmpty(path, 'path');
        if (this.path !== path) {
            this.history.push(path);
        }
    }
    /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   *
   * @returns {string | undefined}
   *   Stem.
   */ get stem() {
        return typeof this.path === 'string' ? __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__$3c$export__default__as__minpath$3e$__["minpath"].basename(this.path, this.extname) : undefined;
    }
    /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} stem
   *   Stem.
   * @returns {undefined}
   *   Nothing.
   */ set stem(stem) {
        assertNonEmpty(stem, 'stem');
        assertPart(stem, 'stem');
        this.path = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__$3c$export__default__as__minpath$3e$__["minpath"].join(this.dirname || '', stem + (this.extname || ''));
    }
    // Normal prototypal methods.
    /**
   * Create a fatal message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `true` (error; file not usable)
   * and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Never.
   * @throws {VFileMessage}
   *   Message.
   */ fail(causeOrReason, optionsOrParentOrPlace, origin) {
        // @ts-expect-error: the overloads are fine.
        const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
        message.fatal = true;
        throw message;
    }
    /**
   * Create an info message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `undefined` (info; change
   * likely not needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */ info(causeOrReason, optionsOrParentOrPlace, origin) {
        // @ts-expect-error: the overloads are fine.
        const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
        message.fatal = undefined;
        return message;
    }
    /**
   * Create a message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `false` (warning; change may be
   * needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */ message(causeOrReason, optionsOrParentOrPlace, origin) {
        const message = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"](// @ts-expect-error: the overloads are fine.
        causeOrReason, optionsOrParentOrPlace, origin);
        if (this.path) {
            message.name = this.path + ':' + message.name;
            message.file = this.path;
        }
        message.fatal = false;
        this.messages.push(message);
        return message;
    }
    /**
   * Serialize the file.
   *
   * > **Note**: which encodings are supported depends on the engine.
   * > For info on Node.js, see:
   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
   *
   * @param {string | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Uint8Array`
   *   (default: `'utf-8'`).
   * @returns {string}
   *   Serialized file.
   */ toString(encoding) {
        if (this.value === undefined) {
            return '';
        }
        if (typeof this.value === 'string') {
            return this.value;
        }
        const decoder = new TextDecoder(encoding || undefined);
        return decoder.decode(this.value);
    }
}
/**
 * Assert that `part` is not a path (as in, does not contain `path.sep`).
 *
 * @param {string | null | undefined} part
 *   File path part.
 * @param {string} name
 *   Part name.
 * @returns {undefined}
 *   Nothing.
 */ function assertPart(part, name) {
    if (part && part.includes(__TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__$3c$export__default__as__minpath$3e$__["minpath"].sep)) {
        throw new Error('`' + name + '` cannot be a path: did not expect `' + __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$path__$5b$external$5d$__$28$node$3a$path$2c$__cjs$29$__$3c$export__default__as__minpath$3e$__["minpath"].sep + '`');
    }
}
/**
 * Assert that `part` is not empty.
 *
 * @param {string | undefined} part
 *   Thing.
 * @param {string} name
 *   Part name.
 * @returns {asserts part is string}
 *   Nothing.
 */ function assertNonEmpty(part, name) {
    if (!part) {
        throw new Error('`' + name + '` cannot be empty');
    }
}
/**
 * Assert `path` exists.
 *
 * @param {string | undefined} path
 *   Path.
 * @param {string} name
 *   Dependency name.
 * @returns {asserts path is string}
 *   Nothing.
 */ function assertPath(path, name) {
    if (!path) {
        throw new Error('Setting `' + name + '` requires `path` to be set too');
    }
}
/**
 * Assert `value` is an `Uint8Array`.
 *
 * @param {unknown} value
 *   thing.
 * @returns {value is Uint8Array}
 *   Whether `value` is an `Uint8Array`.
 */ function isUint8Array(value) {
    return Boolean(value && typeof value === 'object' && 'byteLength' in value && 'byteOffset' in value);
}
}}),
"[project]/apps/website/docs/node_modules/unist-util-stringify-position/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Position} Position
 */ /**
 * @typedef NodeLike
 * @property {string} type
 * @property {PositionLike | null | undefined} [position]
 *
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 * @property {number | null | undefined} [offset]
 *
 * @typedef PositionLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 */ /**
 * Serialize the positional info of a point, position (start and end points),
 * or node.
 *
 * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]
 *   Node, position, or point.
 * @returns {string}
 *   Pretty printed positional info of a node (`string`).
 *
 *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)
 *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for
 *   column, `s` for `start`, and `e` for end.
 *   An empty string (`''`) is returned if the given value is neither `node`,
 *   `position`, nor `point`.
 */ __turbopack_esm__({
    "stringifyPosition": (()=>stringifyPosition)
});
function stringifyPosition(value) {
    // Nothing.
    if (!value || typeof value !== 'object') {
        return '';
    }
    // Node.
    if ('position' in value || 'type' in value) {
        return position(value.position);
    }
    // Position.
    if ('start' in value || 'end' in value) {
        return position(value);
    }
    // Point.
    if ('line' in value || 'column' in value) {
        return point(value);
    }
    // ?
    return '';
}
/**
 * @param {Point | PointLike | null | undefined} point
 * @returns {string}
 */ function point(point) {
    return index(point && point.line) + ':' + index(point && point.column);
}
/**
 * @param {Position | PositionLike | null | undefined} pos
 * @returns {string}
 */ function position(pos) {
    return point(pos && pos.start) + '-' + point(pos && pos.end);
}
/**
 * @param {number | null | undefined} value
 * @returns {number}
 */ function index(value) {
    return value && typeof value === 'number' ? value : 1;
}
}}),
"[project]/apps/website/docs/node_modules/vfile-message/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Position} Position
 */ /**
 * @typedef {object & {type: string, position?: Position | undefined}} NodeLike
 *
 * @typedef Options
 *   Configuration.
 * @property {Array<Node> | null | undefined} [ancestors]
 *   Stack of (inclusive) ancestor nodes surrounding the message (optional).
 * @property {Error | null | undefined} [cause]
 *   Original error cause of the message (optional).
 * @property {Point | Position | null | undefined} [place]
 *   Place of message (optional).
 * @property {string | null | undefined} [ruleId]
 *   Category of message (optional, example: `'my-rule'`).
 * @property {string | null | undefined} [source]
 *   Namespace of who sent the message (optional, example: `'my-package'`).
 */ __turbopack_esm__({
    "VFileMessage": (()=>VFileMessage)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-stringify-position/lib/index.js [app-rsc] (ecmascript)");
;
class VFileMessage extends Error {
    /**
   * Create a message for `reason`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {Options | null | undefined} [options]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */ // eslint-disable-next-line complexity
    constructor(causeOrReason, optionsOrParentOrPlace, origin){
        super();
        if (typeof optionsOrParentOrPlace === 'string') {
            origin = optionsOrParentOrPlace;
            optionsOrParentOrPlace = undefined;
        }
        /** @type {string} */ let reason = '';
        /** @type {Options} */ let options = {};
        let legacyCause = false;
        if (optionsOrParentOrPlace) {
            // Point.
            if ('line' in optionsOrParentOrPlace && 'column' in optionsOrParentOrPlace) {
                options = {
                    place: optionsOrParentOrPlace
                };
            } else if ('start' in optionsOrParentOrPlace && 'end' in optionsOrParentOrPlace) {
                options = {
                    place: optionsOrParentOrPlace
                };
            } else if ('type' in optionsOrParentOrPlace) {
                options = {
                    ancestors: [
                        optionsOrParentOrPlace
                    ],
                    place: optionsOrParentOrPlace.position
                };
            } else {
                options = {
                    ...optionsOrParentOrPlace
                };
            }
        }
        if (typeof causeOrReason === 'string') {
            reason = causeOrReason;
        } else if (!options.cause && causeOrReason) {
            legacyCause = true;
            reason = causeOrReason.message;
            options.cause = causeOrReason;
        }
        if (!options.ruleId && !options.source && typeof origin === 'string') {
            const index = origin.indexOf(':');
            if (index === -1) {
                options.ruleId = origin;
            } else {
                options.source = origin.slice(0, index);
                options.ruleId = origin.slice(index + 1);
            }
        }
        if (!options.place && options.ancestors && options.ancestors) {
            const parent = options.ancestors[options.ancestors.length - 1];
            if (parent) {
                options.place = parent.position;
            }
        }
        const start = options.place && 'start' in options.place ? options.place.start : options.place;
        /* eslint-disable no-unused-expressions */ /**
     * Stack of ancestor nodes surrounding the message.
     *
     * @type {Array<Node> | undefined}
     */ this.ancestors = options.ancestors || undefined;
        /**
     * Original error cause of the message.
     *
     * @type {Error | undefined}
     */ this.cause = options.cause || undefined;
        /**
     * Starting column of message.
     *
     * @type {number | undefined}
     */ this.column = start ? start.column : undefined;
        /**
     * State of problem.
     *
     * * `true` — error, file not usable
     * * `false` — warning, change may be needed
     * * `undefined` — change likely not needed
     *
     * @type {boolean | null | undefined}
     */ this.fatal = undefined;
        /**
     * Path of a file (used throughout the `VFile` ecosystem).
     *
     * @type {string | undefined}
     */ this.file;
        // Field from `Error`.
        /**
     * Reason for message.
     *
     * @type {string}
     */ this.message = reason;
        /**
     * Starting line of error.
     *
     * @type {number | undefined}
     */ this.line = start ? start.line : undefined;
        // Field from `Error`.
        /**
     * Serialized positional info of message.
     *
     * On normal errors, this would be something like `ParseError`, buit in
     * `VFile` messages we use this space to show where an error happened.
     */ this.name = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"])(options.place) || '1:1';
        /**
     * Place of message.
     *
     * @type {Point | Position | undefined}
     */ this.place = options.place || undefined;
        /**
     * Reason for message, should use markdown.
     *
     * @type {string}
     */ this.reason = this.message;
        /**
     * Category of message (example: `'my-rule'`).
     *
     * @type {string | undefined}
     */ this.ruleId = options.ruleId || undefined;
        /**
     * Namespace of message (example: `'my-package'`).
     *
     * @type {string | undefined}
     */ this.source = options.source || undefined;
        // Field from `Error`.
        /**
     * Stack of message.
     *
     * This is used by normal errors to show where something happened in
     * programming code, irrelevant for `VFile` messages,
     *
     * @type {string}
     */ this.stack = legacyCause && options.cause && typeof options.cause.stack === 'string' ? options.cause.stack : '';
        // The following fields are “well known”.
        // Not standard.
        // Feel free to add other non-standard fields to your messages.
        /**
     * Specify the source value that’s being reported, which is deemed
     * incorrect.
     *
     * @type {string | undefined}
     */ this.actual;
        /**
     * Suggest acceptable values that can be used instead of `actual`.
     *
     * @type {Array<string> | undefined}
     */ this.expected;
        /**
     * Long form description of the message (you should use markdown).
     *
     * @type {string | undefined}
     */ this.note;
        /**
     * Link to docs for the message.
     *
     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`
     * > to `new URL(x)`.
     *
     * @type {string | undefined}
     */ this.url;
    /* eslint-enable no-unused-expressions */ }
}
VFileMessage.prototype.file = '';
VFileMessage.prototype.name = '';
VFileMessage.prototype.reason = '';
VFileMessage.prototype.message = '';
VFileMessage.prototype.stack = '';
VFileMessage.prototype.column = undefined;
VFileMessage.prototype.line = undefined;
VFileMessage.prototype.ancestors = undefined;
VFileMessage.prototype.cause = undefined;
VFileMessage.prototype.fatal = undefined;
VFileMessage.prototype.place = undefined;
VFileMessage.prototype.ruleId = undefined;
VFileMessage.prototype.source = undefined;
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/expressions.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// This module is generated by `script/build-expressions.js`.
__turbopack_esm__({
    "affixSymbol": (()=>affixSymbol),
    "digitStart": (()=>digitStart),
    "lowerInitial": (()=>lowerInitial),
    "newLine": (()=>newLine),
    "numerical": (()=>numerical),
    "punctuation": (()=>punctuation),
    "surrogates": (()=>surrogates),
    "terminalMarker": (()=>terminalMarker),
    "whiteSpace": (()=>whiteSpace),
    "word": (()=>word),
    "wordSymbolInner": (()=>wordSymbolInner)
});
const affixSymbol = /^([!"').?\u0F3B\u0F3D\u169C\u2019\u201D\u2026\u203A\u203D\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21\u2E23\u2E25\u2E27\u2E29\u2E56\u2E58\u2E5A\u2E5C\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63\u00BB\]}])\1*$/;
const newLine = /^[ \t]*((\r?\n|\r)[\t ]*)+$/;
const terminalMarker = /^([!.?\u2026\u203D]+)$/;
const wordSymbolInner = /^([&'\-.:=?@\u00AD\u00B7\u2010\u2011\u2019\u2027]|_+)$/;
const numerical = /^(?:[\d\u00B2\u00B3\u00B9\u00BC-\u00BE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]|\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDD30-\uDD39\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2\uDD50-\uDD59]|\uD807[\uDC50-\uDC6C\uDD50-\uDD59\uDDA0-\uDDA9\uDF50-\uDF59\uDFC0-\uDFD4]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEC0-\uDED3\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD839[\uDCF0-\uDCF9]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9])+$/;
const digitStart = /^\d/;
const lowerInitial = /^(?:[a-z\u00B5\u00DF-\u00F6\u00F8-\u00FF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E\uDF25-\uDF2A]|\uD83A[\uDD22-\uDD43])/;
const surrogates = /[\uD800-\uDFFF]/;
const punctuation = /[!"'-),-/:;?[-\]_{}\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u201F\u2022-\u2027\u2032-\u203A\u203C-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2\uDF00-\uDF09]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDF43-\uDF4F\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;
const word = /[\dA-Za-z\u00AA\u00B2\u00B3\u00B5\u00B9\u00BA\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u052F\u0531-\u0556\u0559\u0560-\u0588\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u07FD\u0800-\u082D\u0840-\u085B\u0860-\u086A\u0870-\u0887\u0889-\u088E\u0898-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09F4-\u09F9\u09FC\u09FE\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71-\u0B77\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BF2\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3C-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C5D\u0C60-\u0C63\u0C66-\u0C6F\u0C78-\u0C7E\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1-\u0CF3\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D63\u0D66-\u0D78\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECE\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F33\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1715\u171F-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u17F0-\u17F9\u180B-\u180D\u180F-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ACE\u1B00-\u1B4C\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CD0-\u1CD2\u1CD4-\u1CFA\u1D00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u20D0-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2CE4\u2CEB-\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA672\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA827\uA82C\uA830-\uA835\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE38-\uDE3A\uDE3F-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE6\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD27\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDEFD-\uDF27\uDF30-\uDF54\uDF70-\uDF85\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC46\uDC52-\uDC75\uDC7F-\uDCBA\uDCC2\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD44-\uDD47\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDC9-\uDDCC\uDDCE-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE37\uDE3E-\uDE41\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3B-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC5E-\uDC61\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF1D-\uDF2B\uDF30-\uDF3B\uDF40-\uDF46]|\uD806[\uDC00-\uDC3A\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B-\uDD43\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDE1\uDDE3\uDDE4\uDE00-\uDE3E\uDE47\uDE50-\uDE99\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF6\uDF00-\uDF10\uDF12-\uDF3A\uDF3E-\uDF42\uDF50-\uDF59\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC40-\uDC55]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDE70-\uDEBE\uDEC0-\uDEC9\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFE4\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44\uDEC0-\uDED3\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDC30-\uDC6D\uDC8F\uDD00-\uDD2C\uDD30-\uDD3D\uDD40-\uDD49\uDD4E\uDE90-\uDEAE\uDEC0-\uDEF9]|\uD839[\uDCD0-\uDCF9\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCD6\uDD00-\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF]|\uDB40[\uDD00-\uDDEF]/;
const whiteSpace = /[\t-\r \u0085\u00A0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-initial-word-symbol.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Sentence} Sentence
 */ __turbopack_esm__({
    "mergeInitialWordSymbol": (()=>mergeInitialWordSymbol)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-modify-children/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)");
;
;
const mergeInitialWordSymbol = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["modifyChildren"])(/**
   * @type {import('unist-util-modify-children').Modifier<Sentence>}
   */ function(child, index, parent) {
    if (child.type !== 'SymbolNode' && child.type !== 'PunctuationNode' || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(child) !== '&') {
        return;
    }
    const children = parent.children;
    const next = children[index + 1];
    // If either a previous word, or no following word, exists, exit early.
    if (index > 0 && children[index - 1].type === 'WordNode' || !(next && next.type === 'WordNode')) {
        return;
    }
    // Remove `child` from parent.
    children.splice(index, 1);
    // Add the punctuation mark at the start of the next node.
    next.children.unshift(child);
    // Update position.
    if (next.position && child.position) {
        next.position.start = child.position.start;
    }
    // Next, iterate over the node at the previous position, as it's now adjacent
    // to a following word.
    return index - 1;
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-final-word-symbol.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Sentence} Sentence
 */ __turbopack_esm__({
    "mergeFinalWordSymbol": (()=>mergeFinalWordSymbol)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-modify-children/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)");
;
;
const mergeFinalWordSymbol = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["modifyChildren"])(/**
   * @type {import('unist-util-modify-children').Modifier<Sentence>}
   */ function(child, index, parent) {
    if (index > 0 && (child.type === 'SymbolNode' || child.type === 'PunctuationNode') && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(child) === '-') {
        const children = parent.children;
        const previous = children[index - 1];
        const next = children[index + 1];
        if ((!next || next.type !== 'WordNode') && previous && previous.type === 'WordNode') {
            // Remove `child` from parent.
            children.splice(index, 1);
            // Add the punctuation mark at the end of the previous node.
            previous.children.push(child);
            // Update position.
            if (previous.position && child.position) {
                previous.position.end = child.position.end;
            }
            // Next, iterate over the node *now* at the current position (which was
            // the next node).
            return index;
        }
    }
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-inner-word-symbol.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Sentence} Sentence
 * @typedef {import('nlcst').WordContent} WordContent
 */ __turbopack_esm__({
    "mergeInnerWordSymbol": (()=>mergeInnerWordSymbol)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-modify-children/lib/index.js [app-rsc] (ecmascript)");
// Symbols part of surrounding words.
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/expressions.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)");
;
;
;
const mergeInnerWordSymbol = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["modifyChildren"])(/**
   * @type {import('unist-util-modify-children').Modifier<Sentence>}
   */ function(child, index, parent) {
    if (index > 0 && (child.type === 'SymbolNode' || child.type === 'PunctuationNode')) {
        const siblings = parent.children;
        const previous = siblings[index - 1];
        if (previous && previous.type === 'WordNode') {
            let position = index - 1;
            /** @type {Array<WordContent>} */ const tokens = [];
            /** @type {Array<WordContent>} */ let queue = [];
            // -   If a token which is neither word nor inner word symbol is found,
            //     the loop is broken
            // -   If an inner word symbol is found,  it’s queued
            // -   If a word is found, it’s queued (and the queue stored and emptied)
            while(siblings[++position]){
                const sibling = siblings[position];
                if (sibling.type === 'WordNode') {
                    tokens.push(...queue, ...sibling.children);
                    queue = [];
                } else if ((sibling.type === 'SymbolNode' || sibling.type === 'PunctuationNode') && __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["wordSymbolInner"].test((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(sibling))) {
                    queue.push(sibling);
                } else {
                    break;
                }
            }
            if (tokens.length > 0) {
                // If there is a queue, remove its length from `position`.
                if (queue.length > 0) {
                    position -= queue.length;
                }
                // Remove every (one or more) inner-word punctuation marks and children
                // of words.
                siblings.splice(index, position - index);
                // Add all found tokens to `prev`s children.
                previous.children.push(...tokens);
                const last = tokens[tokens.length - 1];
                // Update position.
                if (previous.position && last.position) {
                    previous.position.end = last.position.end;
                }
                // Next, iterate over the node *now* at the current position.
                return index;
            }
        }
    }
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-inner-word-slash.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Sentence} Sentence
 * @typedef {import('nlcst').SentenceContent} SentenceContent
 * @typedef {import('nlcst').WordContent} WordContent
 */ __turbopack_esm__({
    "mergeInnerWordSlash": (()=>mergeInnerWordSlash)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-modify-children/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)");
;
;
const mergeInnerWordSlash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["modifyChildren"])(/**
   * @type {import('unist-util-modify-children').Modifier<Sentence>}
   */ function(child, index, parent) {
    const siblings = parent.children;
    const previous = siblings[index - 1];
    if (previous && previous.type === 'WordNode' && (child.type === 'SymbolNode' || child.type === 'PunctuationNode') && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(child) === '/') {
        const previousValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(previous);
        /** @type {SentenceContent} */ let tail = child;
        /** @type {Array<WordContent>} */ const queue = [
            child
        ];
        let count = 1;
        let nextValue = '';
        const next = siblings[index + 1];
        if (next && next.type === 'WordNode') {
            nextValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(next);
            tail = next;
            queue.push(...next.children);
            count++;
        }
        if (previousValue.length < 3 && (!nextValue || nextValue.length < 3)) {
            // Add all found tokens to `prev`s children.
            previous.children.push(...queue);
            siblings.splice(index, count);
            // Update position.
            if (previous.position && tail.position) {
                previous.position.end = tail.position.end;
            }
            // Next, iterate over the node *now* at the current position.
            return index;
        }
    }
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-initialisms.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Sentence} Sentence
 */ __turbopack_esm__({
    "mergeInitialisms": (()=>mergeInitialisms)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-modify-children/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/expressions.js [app-rsc] (ecmascript)");
;
;
;
const mergeInitialisms = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["modifyChildren"])(/**
   * @type {import('unist-util-modify-children').Modifier<Sentence>}
   */ function(child, index, parent) {
    if (index > 0 && child.type === 'PunctuationNode' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(child) === '.') {
        const previous = parent.children[index - 1];
        if (previous.type === 'WordNode' && previous.children && previous.children.length !== 1 && previous.children.length % 2 !== 0) {
            let position = previous.children.length;
            let isAllDigits = true;
            while(previous.children[--position]){
                const otherChild = previous.children[position];
                const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(otherChild);
                if (position % 2 === 0) {
                    // Initialisms consist of one character values.
                    if (value.length > 1) {
                        return;
                    }
                    if (!__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["numerical"].test(value)) {
                        isAllDigits = false;
                    }
                } else if (value !== '.') {
                    if (position < previous.children.length - 2) {
                        break;
                    } else {
                        return;
                    }
                }
            }
            if (!isAllDigits) {
                // Remove `child` from parent.
                parent.children.splice(index, 1);
                // Add child to the previous children.
                previous.children.push(child);
                // Update position.
                if (previous.position && child.position) {
                    previous.position.end = child.position.end;
                }
                // Next, iterate over the node *now* at the current position.
                return index;
            }
        }
    }
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/patch-position.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('nlcst').Paragraph} Paragraph
 * @typedef {import('unist').Position} Position
 * @typedef {import('nlcst').Root} Root
 * @typedef {import('nlcst').Sentence} Sentence
 */ __turbopack_esm__({
    "patchPosition": (()=>patchPosition)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit-children/lib/index.js [app-rsc] (ecmascript)");
;
const patchPosition = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["visitChildren"])(/**
   * @type {import('unist-util-visit-children').Visitor<Paragraph | Root | Sentence>}
   */ function(child, index, node) {
    const siblings = node.children;
    if (child.position && index < 1 && /* c8 ignore next */ (!node.position || !node.position.start)) {
        patch(node);
        node.position.start = child.position.start;
    }
    if (child.position && index === siblings.length - 1 && (!node.position || !node.position.end)) {
        patch(node);
        node.position.end = child.position.end;
    }
});
/**
 * @param {Node} node
 * @returns {asserts node is Node & {position: Position}}
 */ function patch(node) {
    if (!node.position) {
        // @ts-expect-error: fine, we’ll fill it later.
        node.position = {};
    }
}
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-non-word-sentences.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Paragraph} Paragraph
 */ __turbopack_esm__({
    "mergeNonWordSentences": (()=>mergeNonWordSentences)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-modify-children/lib/index.js [app-rsc] (ecmascript)");
;
const mergeNonWordSentences = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["modifyChildren"])(/**
   * @type {import('unist-util-modify-children').Modifier<Paragraph>}
   */ function(child, index, parent) {
    if ('children' in child) {
        let position = -1;
        while(child.children[++position]){
            if (child.children[position].type === 'WordNode') {
                return;
            }
        }
        const previous = parent.children[index - 1];
        if (previous && 'children' in previous) {
            previous.children.push(...child.children);
            // Remove the child.
            parent.children.splice(index, 1);
            // Patch position.
            if (previous.position && child.position) {
                previous.position.end = child.position.end;
            }
            // Next, iterate over the node *now* at the current position (which was the
            // next node).
            return index;
        }
        const next = parent.children[index + 1];
        if (next && 'children' in next) {
            next.children.unshift(...child.children);
            // Patch position.
            if (next.position && child.position) {
                next.position.start = child.position.start;
            }
            // Remove the child.
            parent.children.splice(index, 1);
        }
    }
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-affix-symbol.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Paragraph} Paragraph
 */ __turbopack_esm__({
    "mergeAffixSymbol": (()=>mergeAffixSymbol)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-modify-children/lib/index.js [app-rsc] (ecmascript)");
// Closing or final punctuation, or terminal markers that should still be
// included in the previous sentence, even though they follow the sentence’s
// terminal marker.
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/expressions.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)");
;
;
;
const mergeAffixSymbol = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["modifyChildren"])(/**
   * @type {import('unist-util-modify-children').Modifier<Paragraph>}
   */ function(child, index, parent) {
    if ('children' in child && child.children.length > 0 && index > 0) {
        const previous = parent.children[index - 1];
        const first = child.children[0];
        const second = child.children[1];
        if (previous && previous.type === 'SentenceNode' && (first.type === 'SymbolNode' || first.type === 'PunctuationNode') && __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["affixSymbol"].test((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(first))) {
            child.children.shift() // Remove `first`.
            ;
            previous.children.push(first);
            // Update position.
            if (first.position && previous.position) {
                previous.position.end = first.position.end;
            }
            if (second && second.position && child.position) {
                child.position.start = second.position.start;
            }
            // Next, iterate over the previous node again.
            return index - 1;
        }
    }
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-initial-lower-case-letter-sentences.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Paragraph} Paragraph
 */ __turbopack_esm__({
    "mergeInitialLowerCaseLetterSentences": (()=>mergeInitialLowerCaseLetterSentences)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-modify-children/lib/index.js [app-rsc] (ecmascript)");
// Initial lowercase letter.
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/expressions.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)");
;
;
;
const mergeInitialLowerCaseLetterSentences = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["modifyChildren"])(/**
   * @type {import('unist-util-modify-children').Modifier<Paragraph>}
   */ function(child, index, parent) {
    if (child.type === 'SentenceNode' && index > 0) {
        const previous = parent.children[index - 1];
        const children = child.children;
        if (children.length > 0 && previous.type === 'SentenceNode') {
            let position = -1;
            while(children[++position]){
                const node = children[position];
                if (node.type === 'WordNode') {
                    if (!__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["lowerInitial"].test((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(node))) {
                        return;
                    }
                    previous.children.push(...children);
                    parent.children.splice(index, 1);
                    // Update position.
                    if (previous.position && child.position) {
                        previous.position.end = child.position.end;
                    }
                    // Next, iterate over the node *now* at the current position.
                    return index;
                }
                if (node.type === 'SymbolNode' || node.type === 'PunctuationNode') {
                    return;
                }
            }
        }
    }
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-initial-digit-sentences.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Paragraph} Paragraph
 */ __turbopack_esm__({
    "mergeInitialDigitSentences": (()=>mergeInitialDigitSentences)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-modify-children/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/expressions.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)");
;
;
;
const mergeInitialDigitSentences = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["modifyChildren"])(/**
   * @type {import('unist-util-modify-children').Modifier<Paragraph>}
   */ function(child, index, parent) {
    const previous = parent.children[index - 1];
    if (previous && previous.type === 'SentenceNode' && child.type === 'SentenceNode') {
        const head = child.children[0];
        if (head && head.type === 'WordNode' && __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["digitStart"].test((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(head))) {
            previous.children.push(...child.children);
            parent.children.splice(index, 1);
            // Update position.
            if (previous.position && child.position) {
                previous.position.end = child.position.end;
            }
            // Next, iterate over the node *now* at the current position.
            return index;
        }
    }
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-prefix-exceptions.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Paragraph} Paragraph
 */ __turbopack_esm__({
    "mergePrefixExceptions": (()=>mergePrefixExceptions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-modify-children/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)");
;
;
// Full stop characters that should not be treated as terminal sentence markers:
// A case-insensitive abbreviation.
const abbreviationPrefix = new RegExp('^(' + '[0-9]{1,3}|' + '[a-z]|' + // Common Latin Abbreviations:
// Based on: <https://en.wikipedia.org/wiki/List_of_Latin_abbreviations>.
// Where only the abbreviations written without joining full stops,
// but with a final full stop, were extracted.
//
// circa, capitulus, confer, compare, centum weight, eadem, (et) alii,
// et cetera, floruit, foliis, ibidem, idem, nemine && contradicente,
// opere && citato, (per) cent, (per) procurationem, (pro) tempore,
// sic erat scriptum, (et) sequentia, statim, videlicet. */
'al|ca|cap|cca|cent|cf|cit|con|cp|cwt|ead|etc|ff|' + 'fl|ibid|id|nem|op|pro|seq|sic|stat|tem|viz' + ')$');
const mergePrefixExceptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["modifyChildren"])(/**
   * @type {import('unist-util-modify-children').Modifier<Paragraph>}
   */ function(child, index, parent) {
    if ('children' in child && child.children.length > 1) {
        const period = child.children[child.children.length - 1];
        if (period && (period.type === 'PunctuationNode' || period.type === 'SymbolNode') && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(period) === '.') {
            const node = child.children[child.children.length - 2];
            if (node && node.type === 'WordNode' && abbreviationPrefix.test((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(node).toLowerCase())) {
                // Merge period into abbreviation.
                node.children.push(period);
                child.children.pop();
                // Update position.
                if (period.position && node.position) {
                    node.position.end = period.position.end;
                }
                // Merge sentences.
                const next = parent.children[index + 1];
                if (next && next.type === 'SentenceNode') {
                    child.children.push(...next.children);
                    parent.children.splice(index + 1, 1);
                    // Update position.
                    if (next.position && child.position) {
                        child.position.end = next.position.end;
                    }
                    // Next, iterate over the current node again.
                    return index - 1;
                }
            }
        }
    }
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-affix-exceptions.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Paragraph} Paragraph
 */ __turbopack_esm__({
    "mergeAffixExceptions": (()=>mergeAffixExceptions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-modify-children/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)");
;
;
const mergeAffixExceptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["modifyChildren"])(/**
   * @type {import('unist-util-modify-children').Modifier<Paragraph>}
   */ function(child, index, parent) {
    const previous = parent.children[index - 1];
    if (previous && 'children' in previous && 'children' in child && child.children.length > 0) {
        let position = -1;
        while(child.children[++position]){
            const node = child.children[position];
            if (node.type === 'WordNode') {
                return;
            }
            if (node.type === 'SymbolNode' || node.type === 'PunctuationNode') {
                const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(node);
                if (value !== ',' && value !== ';') {
                    return;
                }
                previous.children.push(...child.children);
                // Update position.
                if (previous.position && child.position) {
                    previous.position.end = child.position.end;
                }
                parent.children.splice(index, 1);
                // Next, iterate over the node *now* at the current position.
                return index;
            }
        }
    }
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-remaining-full-stops.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Paragraph} Paragraph
 */ __turbopack_esm__({
    "mergeRemainingFullStops": (()=>mergeRemainingFullStops)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit-children/lib/index.js [app-rsc] (ecmascript)");
// Full stop characters that should not be treated as terminal sentence markers:
// A case-insensitive abbreviation.
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/expressions.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)");
;
;
;
const mergeRemainingFullStops = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["visitChildren"])(/**
   * @type {import('unist-util-visit-children').Visitor<Paragraph>}
   */ // eslint-disable-next-line complexity
function(child, _, _parent) {
    if ('children' in child) {
        let position = child.children.length;
        let hasFoundDelimiter = false;
        while(child.children[--position]){
            const grandchild = child.children[position];
            if (grandchild.type !== 'SymbolNode' && grandchild.type !== 'PunctuationNode') {
                // This is a sentence without terminal marker, so we 'fool' the code to
                // make it think we have found one.
                if (grandchild.type === 'WordNode') {
                    hasFoundDelimiter = true;
                }
                continue;
            }
            // Exit when this token is not a terminal marker.
            if (!__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["terminalMarker"].test((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(grandchild))) {
                continue;
            }
            // Ignore the first terminal marker found (starting at the end), as it
            // should not be merged.
            if (!hasFoundDelimiter) {
                hasFoundDelimiter = true;
                continue;
            }
            // Only merge a single full stop.
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(grandchild) !== '.') {
                continue;
            }
            const previous = child.children[position - 1];
            const next = child.children[position + 1];
            if (previous && previous.type === 'WordNode') {
                const nextNext = child.children[position + 2];
                // Continue when the full stop is followed by a space and another full
                // stop, such as: `{.} .`
                if (next && nextNext && next.type === 'WhiteSpaceNode' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(nextNext) === '.') {
                    continue;
                }
                // Remove `child` from parent.
                child.children.splice(position, 1);
                // Add the punctuation mark at the end of the previous node.
                previous.children.push(grandchild);
                // Update position.
                if (grandchild.position && previous.position) {
                    previous.position.end = grandchild.position.end;
                }
                position--;
            } else if (next && next.type === 'WordNode') {
                // Remove `child` from parent.
                child.children.splice(position, 1);
                // Add the punctuation mark at the start of the next node.
                next.children.unshift(grandchild);
                if (grandchild.position && next.position) {
                    next.position.start = grandchild.position.start;
                }
            }
        }
    }
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/make-initial-white-space-siblings.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Paragraph} Paragraph
 * @typedef {import('nlcst').Root} Root
 */ __turbopack_esm__({
    "makeInitialWhiteSpaceSiblings": (()=>makeInitialWhiteSpaceSiblings)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit-children/lib/index.js [app-rsc] (ecmascript)");
;
const makeInitialWhiteSpaceSiblings = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["visitChildren"])(/**
   * @type {import('unist-util-visit-children').Visitor<Paragraph | Root>}
   */ function(child, index, parent) {
    if ('children' in child && child.children) {
        const head = child.children[0];
        if (head && head.type === 'WhiteSpaceNode') {
            child.children.shift();
            parent.children.splice(index, 0, head);
            const next = child.children[0];
            if (next && next.position && child.position) {
                child.position.start = next.position.start;
            }
        }
    }
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/make-final-white-space-siblings.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Paragraph} Paragraph
 * @typedef {import('nlcst').Root} Root
 */ __turbopack_esm__({
    "makeFinalWhiteSpaceSiblings": (()=>makeFinalWhiteSpaceSiblings)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-modify-children/lib/index.js [app-rsc] (ecmascript)");
;
const makeFinalWhiteSpaceSiblings = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["modifyChildren"])(/**
   * @type {import('unist-util-modify-children').Modifier<Paragraph | Root>}
   */ function(child, index, parent) {
    if ('children' in child) {
        const tail = child.children[child.children.length - 1];
        if (tail && tail.type === 'WhiteSpaceNode') {
            child.children.pop() // Remove `tail`.
            ;
            parent.children.splice(index + 1, 0, tail);
            const previous = child.children[child.children.length - 1];
            if (previous && previous.position && child.position) {
                child.position.end = previous.position.end;
            }
            // Next, iterate over the current node again.
            return index;
        }
    }
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/break-implicit-sentences.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Paragraph} Paragraph
 * @typedef {import('nlcst').Sentence} Sentence
 */ __turbopack_esm__({
    "breakImplicitSentences": (()=>breakImplicitSentences)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-modify-children/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)");
;
;
const breakImplicitSentences = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["modifyChildren"])(/**
   * @type {import('unist-util-modify-children').Modifier<Paragraph>}
   */ function(child, index, parent) {
    if (child.type !== 'SentenceNode') {
        return;
    }
    const children = child.children;
    // Ignore first and last child.
    let position = 0;
    while(++position < children.length - 1){
        const node = children[position];
        if (node.type !== 'WhiteSpaceNode' || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(node).split(/\r\n|\r|\n/).length < 3) {
            continue;
        }
        child.children = children.slice(0, position);
        /** @type {Sentence} */ const insertion = {
            type: 'SentenceNode',
            children: children.slice(position + 1)
        };
        const tail = children[position - 1];
        const head = children[position + 1];
        parent.children.splice(index + 1, 0, node, insertion);
        if (child.position && tail.position && head.position) {
            const end = child.position.end;
            child.position.end = tail.position.end;
            insertion.position = {
                start: head.position.start,
                end
            };
        }
        return index + 1;
    }
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/remove-empty-nodes.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Paragraph} Paragraph
 * @typedef {import('nlcst').Root} Root
 */ __turbopack_esm__({
    "removeEmptyNodes": (()=>removeEmptyNodes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-modify-children/lib/index.js [app-rsc] (ecmascript)");
;
const removeEmptyNodes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$modify$2d$children$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["modifyChildren"])(/**
   * @type {import('unist-util-modify-children').Modifier<Paragraph | Root>}
   */ function(child, index, parent) {
    if ('children' in child && child.children.length === 0) {
        parent.children.splice(index, 1);
        // Next, iterate over the node *now* at the current position (which was the
        // next node).
        return index;
    }
});
}}),
"[project]/apps/website/docs/node_modules/parse-latin/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Nodes} Nodes
 * @typedef {import('nlcst').Parents} Parents
 * @typedef {import('nlcst').Paragraph} Paragraph
 * @typedef {import('nlcst').Root} Root
 * @typedef {import('nlcst').RootContent} RootContent
 * @typedef {import('nlcst').Sentence} Sentence
 * @typedef {import('nlcst').SentenceContent} SentenceContent
 * @typedef {import('vfile').VFile} VFile
 */ /**
 * @template {Nodes} Node
 *   Node type.
 * @callback Plugin
 *   Transform a node.
 * @param {Node} node
 *   The node.
 * @returns {undefined | void}
 *   Nothing.
 */ __turbopack_esm__({
    "ParseLatin": (()=>ParseLatin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/expressions.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$initial$2d$word$2d$symbol$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-initial-word-symbol.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$final$2d$word$2d$symbol$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-final-word-symbol.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$inner$2d$word$2d$symbol$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-inner-word-symbol.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$inner$2d$word$2d$slash$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-inner-word-slash.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$initialisms$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-initialisms.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$patch$2d$position$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/patch-position.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$non$2d$word$2d$sentences$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-non-word-sentences.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$affix$2d$symbol$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-affix-symbol.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$initial$2d$lower$2d$case$2d$letter$2d$sentences$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-initial-lower-case-letter-sentences.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$initial$2d$digit$2d$sentences$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-initial-digit-sentences.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$prefix$2d$exceptions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-prefix-exceptions.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$affix$2d$exceptions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-affix-exceptions.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$remaining$2d$full$2d$stops$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/merge-remaining-full-stops.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$make$2d$initial$2d$white$2d$space$2d$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/make-initial-white-space-siblings.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$make$2d$final$2d$white$2d$space$2d$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/make-final-white-space-siblings.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$break$2d$implicit$2d$sentences$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/break-implicit-sentences.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$remove$2d$empty$2d$nodes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/plugin/remove-empty-nodes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
class ParseLatin {
    /**
   * Create a new parser.
   *
   * This additionally supports `retext`-like call: where an instance is
   * created for each file, and the file is given on construction.
   *
   * @param {string | null | undefined} [doc]
   *   Value to parse (optional).
   * @param {VFile | null | undefined} [file]
   *   Corresponding file (optional).
   */ constructor(doc, file){
        const value = file || doc;
        /** @type {string | undefined} */ this.doc = value ? String(value) : undefined;
        /** @type {Array<Plugin<Root>>} */ this.tokenizeRootPlugins = [
            ...this.tokenizeRootPlugins
        ];
        /** @type {Array<Plugin<Paragraph>>} */ this.tokenizeParagraphPlugins = [
            ...this.tokenizeParagraphPlugins
        ];
        /** @type {Array<Plugin<Sentence>>} */ this.tokenizeSentencePlugins = [
            ...this.tokenizeSentencePlugins
        ];
    }
    /**
   * Turn natural language into a syntax tree.
   *
   * @param {string | null | undefined} [value]
   *   Value to parse (optional).
   * @returns {Root}
   *   Tree.
   */ parse(value) {
        return this.tokenizeRoot(value || this.doc);
    }
    /**
   * Parse as a root.
   *
   * @param {string | null | undefined} [value]
   *   Value to parse (optional).
   * @returns {Root}
   *   Built tree.
   */ tokenizeRoot(value) {
        const paragraph = this.tokenizeParagraph(value);
        /** @type {Root} */ const result = {
            type: 'RootNode',
            children: splitNode(paragraph, 'WhiteSpaceNode', __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["newLine"])
        };
        let index = -1;
        while(this.tokenizeRootPlugins[++index]){
            this.tokenizeRootPlugins[index](result);
        }
        return result;
    }
    /**
   * Parse as a paragraph.
   *
   * @param {string | null | undefined} [value]
   *   Value to parse (optional).
   * @returns {Paragraph}
   *   Built tree.
   */ tokenizeParagraph(value) {
        const sentence = this.tokenizeSentence(value);
        /** @type {Paragraph} */ const result = {
            type: 'ParagraphNode',
            children: splitNode(sentence, 'PunctuationNode', __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["terminalMarker"])
        };
        let index = -1;
        while(this.tokenizeParagraphPlugins[++index]){
            this.tokenizeParagraphPlugins[index](result);
        }
        return result;
    }
    /**
   * Parse as a sentence.
   *
   * @param {string | null | undefined} [value]
   *   Value to parse (optional).
   * @returns {Sentence}
   *   Built tree.
   */ tokenizeSentence(value) {
        const children = this.tokenize(value);
        /** @type {Sentence} */ const result = {
            type: 'SentenceNode',
            children
        };
        let index = -1;
        while(this.tokenizeSentencePlugins[++index]){
            this.tokenizeSentencePlugins[index](result);
        }
        return result;
    }
    /**
   *  Transform a `value` into a list of nlcsts.
   *
   * @param {string | null | undefined} [value]
   *   Value to parse (optional).
   * @returns {Array<SentenceContent>}
   *   Built sentence content.
   */ tokenize(value) {
        /** @type {Array<SentenceContent>} */ const children = [];
        if (!value) {
            return children;
        }
        const currentPoint = {
            line: 1,
            column: 1,
            offset: 0
        };
        let from = 0;
        let index = 0;
        let start = {
            ...currentPoint
        };
        /** @type {SentenceContent['type'] | undefined} */ let previousType;
        /** @type {string | undefined} */ let previous;
        while(index < value.length){
            const current = value.charAt(index);
            const currentType = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["whiteSpace"].test(current) ? 'WhiteSpaceNode' : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["punctuation"].test(current) ? 'PunctuationNode' : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["word"].test(current) ? 'WordNode' : 'SymbolNode';
            if (from < index && previousType && currentType && !(previousType === currentType && // Words or white space continue.
            (previousType === 'WordNode' || previousType === 'WhiteSpaceNode' || // Same character of punctuation or symbol also continues.
            current === previous || // Surrogates of  punctuation or symbol also continue.
            __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$expressions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["surrogates"].test(current)))) {
                // Flush the previous queue.
                children.push(createNode(previousType, value.slice(from, index)));
                from = index;
                start = {
                    ...currentPoint
                };
            }
            if (current === '\r' || current === '\n' && previous !== '\r') {
                currentPoint.line++;
                currentPoint.column = 1;
            } else if (current !== '\n') {
                currentPoint.column++;
            }
            currentPoint.offset++;
            previousType = currentType;
            previous = current;
            index++;
        }
        if (previousType && from < index) {
            children.push(createNode(previousType, value.slice(from, index)));
        }
        return children;
        "TURBOPACK unreachable";
        /**
     * @param {SentenceContent['type']} type
     *   Node type to build.
     * @param {string} value
     *   Value.
     * @returns {SentenceContent}
     *   Node.
     */ function createNode(type, value) {
            return type === 'WordNode' ? {
                type: 'WordNode',
                children: [
                    {
                        type: 'TextNode',
                        value,
                        position: {
                            start,
                            end: {
                                ...currentPoint
                            }
                        }
                    }
                ],
                position: {
                    start,
                    end: {
                        ...currentPoint
                    }
                }
            } : {
                type,
                value,
                position: {
                    start,
                    end: {
                        ...currentPoint
                    }
                }
            };
        }
    }
}
/**
 * List of transforms handling a sentence.
 */ ParseLatin.prototype.tokenizeSentencePlugins = [
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$initial$2d$word$2d$symbol$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mergeInitialWordSymbol"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$final$2d$word$2d$symbol$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mergeFinalWordSymbol"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$inner$2d$word$2d$symbol$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mergeInnerWordSymbol"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$inner$2d$word$2d$slash$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mergeInnerWordSlash"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$initialisms$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mergeInitialisms"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$patch$2d$position$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["patchPosition"]
];
/**
 * List of transforms handling a paragraph.
 */ ParseLatin.prototype.tokenizeParagraphPlugins = [
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$non$2d$word$2d$sentences$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mergeNonWordSentences"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$affix$2d$symbol$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mergeAffixSymbol"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$initial$2d$lower$2d$case$2d$letter$2d$sentences$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mergeInitialLowerCaseLetterSentences"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$initial$2d$digit$2d$sentences$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mergeInitialDigitSentences"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$prefix$2d$exceptions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mergePrefixExceptions"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$affix$2d$exceptions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mergeAffixExceptions"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$merge$2d$remaining$2d$full$2d$stops$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mergeRemainingFullStops"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$make$2d$initial$2d$white$2d$space$2d$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["makeInitialWhiteSpaceSiblings"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$make$2d$final$2d$white$2d$space$2d$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["makeFinalWhiteSpaceSiblings"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$break$2d$implicit$2d$sentences$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["breakImplicitSentences"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$remove$2d$empty$2d$nodes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["removeEmptyNodes"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$patch$2d$position$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["patchPosition"]
];
/**
 * List of transforms handling a root.
 */ ParseLatin.prototype.tokenizeRootPlugins = [
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$make$2d$initial$2d$white$2d$space$2d$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["makeInitialWhiteSpaceSiblings"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$make$2d$final$2d$white$2d$space$2d$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["makeFinalWhiteSpaceSiblings"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$remove$2d$empty$2d$nodes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["removeEmptyNodes"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$plugin$2f$patch$2d$position$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["patchPosition"]
];
/**
 * A function that splits one node into several nodes.
 *
 * @template {Parents} Node
 *   Node type.
 * @param {Node} node
 *   Node to split.
 * @param {RegExp} expression
 *   Split on this regex.
 * @param {Node['children'][number]['type']} childType
 *   Split this node type.
 * @returns {Array<Node>}
 *   The given node, split into several nodes.
 */ function splitNode(node, childType, expression) {
    /** @type {Array<Node>} */ const result = [];
    let index = -1;
    let start = 0;
    while(++index < node.children.length){
        const token = node.children[index];
        if (index === node.children.length - 1 || token.type === childType && expression.test((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(token))) {
            /** @type {Node} */ // @ts-expect-error: fine
            const parent = {
                type: node.type,
                children: node.children.slice(start, index + 1)
            };
            const first = node.children[start];
            const last = token;
            if (first.position && last.position) {
                parent.position = {
                    start: first.position.start,
                    end: last.position.end
                };
            }
            result.push(parent);
            start = index + 1;
        }
    }
    return result;
}
}}),
"[project]/apps/website/docs/node_modules/array-iterate/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "arrayIterate": (()=>arrayIterate)
});
const own = {}.hasOwnProperty;
function arrayIterate(values, callbackFn, thisArg) {
    let index = -1;
    if (!values) {
        throw new Error('Iterate requires that |this| not be ' + values);
    }
    if (!own.call(values, 'length')) {
        throw new Error('Iterate requires that |this| has a `length`');
    }
    if (typeof callbackFn !== 'function') {
        throw new TypeError('`callback` must be a function');
    }
    // The length might change, so we do not cache it.
    while(++index < values.length){
        // Skip missing values.
        if (!(index in values)) {
            continue;
        }
        const result = callbackFn.call(thisArg, values[index], index, values);
        // If `callback` returns a `number`, move `index` over to `number`.
        if (typeof result === 'number') {
            // Make sure that negative numbers do not break the loop.
            if (result < 0) {
                index = 0;
            }
            index = result - 1;
        }
    }
}
}}),
"[project]/apps/website/docs/node_modules/unist-util-modify-children/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 */ /**
 * @template {Parent} Kind
 *   Node type.
 * @callback Modifier
 *   Callback called for each `child` in `parent` later given to `modify`.
 * @param {Kind['children'][number]} child
 *   Child of `parent`.
 * @param {number} index
 *   Position of `child` in `parent`.
 * @param {Kind} parent
 *   Parent node.
 * @returns {number | undefined | void}
 *   Position to move to next (optional).
 */ /**
 * @template {Parent} Kind
 *   Node type.
 * @callback Modify
 *   Modify children of `parent`.
 * @param {Kind} parent
 *   Parent node.
 * @returns {undefined}
 *   Nothing.
 */ __turbopack_esm__({
    "modifyChildren": (()=>modifyChildren)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$array$2d$iterate$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/array-iterate/lib/index.js [app-rsc] (ecmascript)");
;
function modifyChildren(modifier) {
    return modify;
    "TURBOPACK unreachable";
    /** @type {Modify<Kind>} */ function modify(parent) {
        if (!parent || !parent.children) {
            throw new Error('Missing children in `parent` for `modifier`');
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$array$2d$iterate$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["arrayIterate"])(parent.children, iteratee, parent);
    }
    /**
   * Pass the context as the third argument to `modifier`.
   *
   * @this {Kind}
   * @param {Node} node
   * @param {number} index
   * @returns {number | undefined | void}
   */ function iteratee(node, index) {
        return modifier(node, index, this);
    }
}
}}),
"[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Nodes} Nodes
 */ /** @type {Readonly<Array<Nodes>>} */ __turbopack_esm__({
    "toString": (()=>toString)
});
const emptyNodes = [];
function toString(value) {
    let index = -1;
    if (!value || !Array.isArray(value) && !value.type) {
        throw new Error('Expected node, not `' + value + '`');
    }
    if ('value' in value) return value.value;
    const children = (Array.isArray(value) ? value : value.children) || emptyNodes;
    /** @type {Array<string>} */ const values = [];
    while(++index < children.length){
        values[index] = toString(children[index]);
    }
    return values.join('');
}
}}),
"[project]/apps/website/docs/node_modules/unist-util-visit-children/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Parent} Parent
 */ /**
 * @template {Parent} Kind
 *   Node type.
 * @callback Visitor
 *   Callback called for each `child` in `parent` later given to `visit`.
 * @param {Kind['children'][number]} child
 *   Child of parent.
 * @param {number} index
 *   Position of `child` in parent.
 * @param {Kind} parent
 *   Parent node.
 * @returns {undefined}
 *   Nothing.
 */ /**
 * @template {Parent} Kind
 *   Node type.
 * @callback Visit
 *   Function to call the bound `visitor` for each child in `parent`.
 * @param {Kind} node
 *   Parent node.
 * @returns {undefined}
 *   Nothing.
 */ /**
 * Wrap `visitor` to be called for each child in the nodes later given to
 * `visit`.
 *
 * @template {Parent} Kind
 *   Node type.
 * @param {Visitor<Kind>} visitor
 *   Callback called for each `child` in `parent` later given to `visit`.
 * @returns {Visit<Kind>}
 *   Function to call the bound `visitor` for each child in `parent`.
 */ __turbopack_esm__({
    "visitChildren": (()=>visitChildren)
});
function visitChildren(visitor) {
    return visit;
    "TURBOPACK unreachable";
    /** @type {Visit<Kind>} */ function visit(parent) {
        const children = parent && parent.children;
        let index = -1;
        if (!children) {
            throw new Error('Missing children in `parent` for `visit`');
        }
        while(++index in children){
            visitor(children[index], index, parent);
        }
    }
}
}}),
"[project]/apps/website/docs/node_modules/retext-latin/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Root} Root
 */ __turbopack_esm__({
    "default": (()=>retextLatin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-latin/lib/index.js [app-rsc] (ecmascript)");
;
function retextLatin() {
    // @ts-expect-error -- TS in JSDoc doesn’t understand `this`.
    // eslint-disable-next-line unicorn/no-this-assignment
    const self = this;
    self.parser = parser;
    /** @type {import('unified').Parser<Root>} */ function parser(value) {
        const parser = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$latin$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ParseLatin"]();
        add(parser.tokenizeParagraphPlugins, self.data('nlcstParagraphExtensions'));
        add(parser.tokenizeRootPlugins, self.data('nlcstRootExtensions'));
        add(parser.tokenizeSentencePlugins, self.data('nlcstSentenceExtensions'));
        return parser.parse(value);
    }
}
/**
 * @template T
 * @param {Array<T>} list
 * @param {Array<T> | undefined} values
 */ function add(list, values) {
    if (values) list.unshift(...values);
}
}}),
"[project]/apps/website/docs/node_modules/retext-stringify/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('nlcst').Root} Root
 */ __turbopack_esm__({
    "default": (()=>retextStringify)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)");
;
function retextStringify() {
    // eslint-disable-next-line unicorn/no-this-assignment
    const self = // @ts-expect-error -- TS in JSDoc doesn’t understand `this`.
    this;
    self.compiler = compiler;
}
/** @type {import('unified').Compiler<Root, string>} */ function compiler(tree) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(tree);
}
}}),
"[project]/apps/website/docs/node_modules/retext/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// Note: types exposed from `index.d.ts`.
__turbopack_esm__({
    "retext": (()=>retext)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unified$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unified/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$retext$2d$latin$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/retext-latin/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$retext$2d$stringify$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/retext-stringify/lib/index.js [app-rsc] (ecmascript)");
;
;
;
const retext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unified$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unified"])().use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$retext$2d$latin$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]).use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$retext$2d$stringify$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]).freeze();
}}),
"[project]/apps/website/docs/node_modules/retext-smartypants/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Parents, Punctuation, Root, SentenceContent, Symbol} from 'nlcst'
 */ /**
 * @callback Method
 *   Transform.
 * @param {State} state
 *   Info passed around.
 * @param {Punctuation | Symbol} node
 *   Node.
 * @param {number} index
 *   Position of `node` in `parent`.
 * @param {Parents} parent
 *   Parent of `node`.
 * @returns {boolean | undefined | void}
 *   Whether to remove the node (`true`); or not (otherwise).
 *
 * @typedef Options
 *   Configuration.
 * @property {'all' | boolean | null | undefined} [backticks=true]
 *   Transform backticks (default: `true`); when `true`, turns double
 *   backticks into an opening double quote and double straight single quotes
 *   into a closing double quote; when `'all'`, does that and turns single
 *   backticks into an opening single quote and a straight single quotes into
 *   a closing single smart quote; `quotes: false` must be used with
 *   `backticks: 'all'`.
 * @property {QuoteCharacterMap | null | undefined} [closingQuotes]
 *   Closing quotes to use (default: `{double: '”', single: '’'}`).
 * @property {'inverted' | 'oldschool' | boolean | null | undefined} [dashes=true]
 *   Transform dashes (default: `true`);
 *   when `true`, turns two dashes into an em dash character;
 *   when `'oldschool'`, turns three dashes into an em dash and two into an en
 *   dash;
 *   when `'inverted'`, turns three dashes into an en dash and two into an em
 *   dash.
 * @property {'spaced' | 'unspaced' | boolean | null | undefined} [ellipses=true]
 *   Transform triple dots (default: `true`).
 *   when `'spaced'`, turns triple dots with spaces into ellipses;
 *   when `'unspaced'`, turns triple dots without spaces into ellipses;
 *   when `true`, turns triple dots with or without spaces into ellipses.
 * @property {QuoteCharacterMap | null | undefined} [openingQuotes]
 *   Opening quotes to use (default: `{double: '“', single: '‘'}`).
 * @property {boolean | null | undefined} [quotes=true]
 *   Transform straight quotes into smart quotes (default: `true`).
 *
 * @typedef State
 *   Info passed around.
 * @property {Quotes} close
 *   Closing quotes.
 * @property {Quotes} open
 *   Opening quotes.
 *
 * @typedef QuoteCharacterMap
 *   Quote characters.
 * @property {string} double
 *   Character to use for double quotes.
 * @property {string} single
 *   Character to use for single quotes.
 *
 * @typedef {[string, string]} Quotes
 *   Quotes.
 */ __turbopack_esm__({
    "default": (()=>retextSmartypants)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit/lib/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/nlcst-to-string/lib/index.js [app-rsc] (ecmascript)");
;
;
/** @type {Quotes} */ const defaultClosingQuotes = [
    '”',
    '’'
];
/** @type {Quotes} */ const defaultOpeningQuotes = [
    '“',
    '‘'
];
/** @type {Readonly<Options>} */ const emptyOptions = {};
function retextSmartypants(options) {
    const settings = options || emptyOptions;
    /** @type {Array<Method>} */ const methods = [];
    if (settings.quotes !== false) {
        methods.push(quotesDefault);
    }
    if (settings.ellipses === 'spaced') {
        methods.push(ellipsesSpaced);
    } else if (settings.ellipses === 'unspaced') {
        methods.push(ellipsesUnspaced);
    } else if (settings.ellipses !== false) {
        methods.push(ellipsesDefault);
    }
    if (settings.backticks === 'all') {
        if (settings.quotes !== false) {
            throw new Error("Cannot accept `backticks: 'all'` with `quotes: true`");
        }
        methods.push(backticksAll);
    } else if (settings.backticks !== false) {
        methods.push(backticksDefault);
    }
    if (settings.dashes === 'inverted') {
        methods.push(dashesInverted);
    } else if (settings.dashes === 'oldschool') {
        methods.push(dashesOldschool);
    } else if (settings.dashes !== false) {
        methods.push(dashesDefault);
    }
    /** @type {State} */ const state = {
        close: settings.closingQuotes ? [
            settings.closingQuotes.double,
            settings.closingQuotes.single
        ] : defaultClosingQuotes,
        open: settings.openingQuotes ? [
            settings.openingQuotes.double,
            settings.openingQuotes.single
        ] : defaultOpeningQuotes
    };
    /**
   * Transform.
   *
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */ return function(tree) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(tree, function(node, position, parent) {
            let index = -1;
            if (parent && position !== undefined && (node.type === 'PunctuationNode' || node.type === 'SymbolNode')) {
                while(++index < methods.length){
                    const result = methods[index](state, node, position, parent);
                    if (result === true) {
                        console.log('drop', node);
                        parent.children.splice(position, 1);
                        return position;
                    }
                }
            }
        });
    };
}
/**
 * Transform single and double backticks and single quotes into smart quotes.
 *
 * @type {Method}
 */ function backticksAll(state, node, index, parent) {
    backticksDefault(state, node, index, parent);
    if (node.value === '`') {
        node.value = '‘';
    } else if (node.value === "'") {
        node.value = '’';
    }
}
/**
 * Transform double backticks and single quotes into smart quotes.
 *
 * @type {Method}
 */ function backticksDefault(_, node) {
    if (node.value === '``') {
        node.value = '“';
    } else if (node.value === "''") {
        node.value = '”';
    }
}
/**
 * Transform two dashes into an em dash.
 *
 * @type {Method}
 */ function dashesDefault(_, node) {
    if (node.value === '--') {
        node.value = '—';
    }
}
/**
 * Transform three dashes into an en dash, and two into an em dash.
 *
 * @type {Method}
 */ function dashesInverted(_, node, index, parent) {
    const next = parent.children[index + 1];
    if (node.value === '—' && next && next.type === 'PunctuationNode' && next.value === '-') {
        next.value = '–';
        return true;
    }
    if (node.value === '---') {
        node.value = '–';
    } else if (node.value === '--') {
        node.value = '—';
    }
}
/**
 * Transform three dashes into an em dash, and two into an en dash.
 *
 * @type {Method}
 */ function dashesOldschool(_, node, index, parent) {
    const next = parent.children[index + 1];
    if (node.value === '–' && next && next.type === 'PunctuationNode' && next.value === '-') {
        next.value = '—';
        return true;
    }
    if (node.value === '---') {
        node.value = '—';
    } else if (node.value === '--') {
        node.value = '–';
    }
}
/**
 * Transform multiple dots into unicode ellipses.
 *
 * @type {Method}
 */ function ellipsesDefault(_, node, index, parent) {
    ellipsesSpaced(_, node, index, parent);
    ellipsesUnspaced(_, node, index, parent);
}
/**
 * Transform multiple dots with spaces into unicode ellipses.
 *
 * @type {Method}
 */ function ellipsesSpaced(_, node, index, parent) {
    const value = node.value;
    const siblings = parent.children;
    if (!/^\.+$/.test(value)) {
        return;
    }
    // Search for dot-nodes with whitespace between.
    /** @type {Array<SentenceContent>} */ const nodes = [];
    let position = index;
    let count = 1;
    // It’s possible that the node is merged with an adjacent word-node.  In that
    // code, we cannot transform it because there’s no reference to the
    // grandparent.
    while(--position > 0){
        let sibling = siblings[position];
        if (sibling.type !== 'WhiteSpaceNode') {
            break;
        }
        const queue = sibling;
        sibling = siblings[--position];
        if (sibling && (sibling.type === 'PunctuationNode' || sibling.type === 'SymbolNode') && /^\.+$/.test(sibling.value)) {
            nodes.push(queue, sibling);
            count++;
            continue;
        }
        break;
    }
    if (count < 3) {
        return;
    }
    siblings.splice(index - nodes.length, nodes.length);
    node.value = '…';
}
/**
 * Transform multiple dots without spaces into unicode ellipses.
 *
 * @type {Method}
 */ function ellipsesUnspaced(_, node) {
    // Simple node with three dots and without whitespace.
    if (/^\.{3,}$/.test(node.value)) {
        node.value = '…';
    }
}
/**
 * Transform straight single- and double quotes into smart quotes.
 *
 * @type {Method}
 */ // eslint-disable-next-line complexity
function quotesDefault(state, node, index, parent) {
    const siblings = parent.children;
    const value = node.value;
    if (value !== '"' && value !== "'") {
        return;
    }
    const quoteIndex = value === '"' ? 0 : 1;
    const previous = siblings[index - 1];
    const next = siblings[index + 1];
    const nextNext = siblings[index + 2];
    const nextValue = next ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$nlcst$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(next) : '';
    if (next && (next.type === 'PunctuationNode' || next.type === 'SymbolNode') && (!nextNext || nextNext.type !== 'WordNode')) {
        // Special case if the very first character is a quote followed by
        // punctuation at a non-word-break. Close the quotes by brute force.
        node.value = state.close[quoteIndex];
    } else if (next && (next.type === 'PunctuationNode' || next.type === 'SymbolNode') && (nextValue === '"' || nextValue === "'") && nextNext && nextNext.type === 'WordNode') {
        // Special case for double sets of quotes:
        // `He said, "'Quoted' words in a larger quote."`
        node.value = state.open[quoteIndex];
        next.value = state.open[nextValue === '"' ? 0 : 1];
    } else if (next && /^\d\ds$/.test(nextValue)) {
        // Special case for decade abbreviations: `the '80s`
        node.value = state.close[quoteIndex];
    } else if (previous && (previous.type === 'WhiteSpaceNode' || previous.type === 'PunctuationNode' || previous.type === 'SymbolNode') && next && next.type === 'WordNode') {
        // Get most opening single quotes.
        node.value = state.open[quoteIndex];
    } else if (previous && previous.type !== 'WhiteSpaceNode' && previous.type !== 'SymbolNode' && previous.type !== 'PunctuationNode') {
        // Closing quotes.
        node.value = state.close[quoteIndex];
    } else if (!next || next.type === 'WhiteSpaceNode' || value === "'" && nextValue === 's') {
        node.value = state.close[quoteIndex];
    } else {
        node.value = state.open[quoteIndex];
    }
}
}}),
"[project]/apps/website/docs/node_modules/remark-smartypants/dist/plugin.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$retext$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/retext/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$retext$2d$smartypants$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/retext-smartypants/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit/lib/index.js [app-rsc] (ecmascript) <locals>");
;
;
;
const VISITED_NODES = new Set([
    "text",
    "inlineCode",
    "paragraph"
]);
const IGNORED_HTML_ELEMENTS = new Set([
    "style",
    "script"
]);
const check = (node, index, parent)=>{
    return parent && (parent.type !== "mdxJsxTextElement" || "name" in parent && typeof parent.name === "string" && !IGNORED_HTML_ELEMENTS.has(parent.name)) && VISITED_NODES.has(node.type) && (isLiteral(node) || isParagraph(node));
};
/**
 * remark plugin to implement SmartyPants.
 */ const remarkSmartypants = (options)=>{
    const processor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$retext$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["retext"])().use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$retext$2d$smartypants$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"], {
        ...options,
        // Do not replace ellipses, dashes, backticks because they change string
        // length, and we couldn't guarantee right splice of text in second visit of
        // tree
        ellipses: false,
        dashes: false,
        backticks: false
    });
    const processor2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$retext$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["retext"])().use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$retext$2d$smartypants$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"], {
        ...options,
        // Do not replace quotes because they are already replaced in the first
        // processor
        quotes: false
    });
    return (tree)=>{
        let allText = "";
        let startIndex = 0;
        const nodes = [];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(tree, check, (node)=>{
            if (isLiteral(node)) {
                allText += node.type === "text" ? node.value : "A".repeat(node.value.length);
            } else if (isParagraph(node)) {
                // Inject a "fake" space because otherwise, when concatenated below,
                // smartypants will fail to recognize opening quotes at the start of
                // paragraphs
                allText += " ";
            }
            nodes.push(node);
        });
        // Concat all text into one string, to properly replace quotes around links
        // and bold text
        allText = processor.processSync(allText).toString();
        for (const node of nodes){
            if (isLiteral(node)) {
                const endIndex = startIndex + node.value.length;
                if (node.type === "text") {
                    const processedText = allText.slice(startIndex, endIndex);
                    node.value = processor2.processSync(processedText).toString();
                }
                startIndex = endIndex;
            } else if (isParagraph(node)) {
                // Skip over the space we added above
                startIndex += 1;
            }
        }
    };
};
function isLiteral(node) {
    return "value" in node && typeof node.value === "string";
}
function isParagraph(node) {
    return node.type === "paragraph";
}
const __TURBOPACK__default__export__ = remarkSmartypants;
}}),
"[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * This module is compiled away!
 *
 * Parsing markdown comes with a couple of constants, such as minimum or maximum
 * sizes of certain sequences.
 * Additionally, there are a couple symbols used inside micromark.
 * These are all defined here, but compiled away by scripts.
 */ __turbopack_esm__({
    "constants": (()=>constants)
});
const constants = {
    attentionSideAfter: 2,
    attentionSideBefore: 1,
    atxHeadingOpeningFenceSizeMax: 6,
    autolinkDomainSizeMax: 63,
    autolinkSchemeSizeMax: 32,
    cdataOpeningString: 'CDATA[',
    characterGroupPunctuation: 2,
    characterGroupWhitespace: 1,
    characterReferenceDecimalSizeMax: 7,
    characterReferenceHexadecimalSizeMax: 6,
    characterReferenceNamedSizeMax: 31,
    codeFencedSequenceSizeMin: 3,
    contentTypeContent: 'content',
    contentTypeDocument: 'document',
    contentTypeFlow: 'flow',
    contentTypeString: 'string',
    contentTypeText: 'text',
    hardBreakPrefixSizeMin: 2,
    htmlBasic: 6,
    htmlCdata: 5,
    htmlComment: 2,
    htmlComplete: 7,
    htmlDeclaration: 4,
    htmlInstruction: 3,
    htmlRawSizeMax: 8,
    htmlRaw: 1,
    linkResourceDestinationBalanceMax: 32,
    linkReferenceSizeMax: 999,
    listItemValueSizeMax: 10,
    numericBaseDecimal: 10,
    numericBaseHexadecimal: 0x10,
    tabSize: 4,
    thematicBreakMarkerCountMin: 3,
    v8MaxSafeChunkSize: 10_000 // V8 (and potentially others) have problems injecting giant arrays into other arrays, hence we operate in chunks.
};
}}),
"[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * This module is compiled away!
 *
 * Here is the list of all types of tokens exposed by micromark, with a short
 * explanation of what they include and where they are found.
 * In picking names, generally, the rule is to be as explicit as possible
 * instead of reusing names.
 * For example, there is a `definitionDestination` and a `resourceDestination`,
 * instead of one shared name.
 */ // Note: when changing the next record, you must also change `TokenTypeMap`
// in `micromark-util-types/index.d.ts`.
__turbopack_esm__({
    "types": (()=>types)
});
const types = {
    // Generic type for data, such as in a title, a destination, etc.
    data: 'data',
    // Generic type for syntactic whitespace (tabs, virtual spaces, spaces).
    // Such as, between a fenced code fence and an info string.
    whitespace: 'whitespace',
    // Generic type for line endings (line feed, carriage return, carriage return +
    // line feed).
    lineEnding: 'lineEnding',
    // A line ending, but ending a blank line.
    lineEndingBlank: 'lineEndingBlank',
    // Generic type for whitespace (tabs, virtual spaces, spaces) at the start of a
    // line.
    linePrefix: 'linePrefix',
    // Generic type for whitespace (tabs, virtual spaces, spaces) at the end of a
    // line.
    lineSuffix: 'lineSuffix',
    // Whole ATX heading:
    //
    // ```markdown
    // #
    // ## Alpha
    // ### Bravo ###
    // ```
    //
    // Includes `atxHeadingSequence`, `whitespace`, `atxHeadingText`.
    atxHeading: 'atxHeading',
    // Sequence of number signs in an ATX heading (`###`).
    atxHeadingSequence: 'atxHeadingSequence',
    // Content in an ATX heading (`alpha`).
    // Includes text.
    atxHeadingText: 'atxHeadingText',
    // Whole autolink (`<https://example.com>` or `<admin@example.com>`)
    // Includes `autolinkMarker` and `autolinkProtocol` or `autolinkEmail`.
    autolink: 'autolink',
    // Email autolink w/o markers (`admin@example.com`)
    autolinkEmail: 'autolinkEmail',
    // Marker around an `autolinkProtocol` or `autolinkEmail` (`<` or `>`).
    autolinkMarker: 'autolinkMarker',
    // Protocol autolink w/o markers (`https://example.com`)
    autolinkProtocol: 'autolinkProtocol',
    // A whole character escape (`\-`).
    // Includes `escapeMarker` and `characterEscapeValue`.
    characterEscape: 'characterEscape',
    // The escaped character (`-`).
    characterEscapeValue: 'characterEscapeValue',
    // A whole character reference (`&amp;`, `&#8800;`, or `&#x1D306;`).
    // Includes `characterReferenceMarker`, an optional
    // `characterReferenceMarkerNumeric`, in which case an optional
    // `characterReferenceMarkerHexadecimal`, and a `characterReferenceValue`.
    characterReference: 'characterReference',
    // The start or end marker (`&` or `;`).
    characterReferenceMarker: 'characterReferenceMarker',
    // Mark reference as numeric (`#`).
    characterReferenceMarkerNumeric: 'characterReferenceMarkerNumeric',
    // Mark reference as numeric (`x` or `X`).
    characterReferenceMarkerHexadecimal: 'characterReferenceMarkerHexadecimal',
    // Value of character reference w/o markers (`amp`, `8800`, or `1D306`).
    characterReferenceValue: 'characterReferenceValue',
    // Whole fenced code:
    //
    // ````markdown
    // ```js
    // alert(1)
    // ```
    // ````
    codeFenced: 'codeFenced',
    // A fenced code fence, including whitespace, sequence, info, and meta
    // (` ```js `).
    codeFencedFence: 'codeFencedFence',
    // Sequence of grave accent or tilde characters (` ``` `) in a fence.
    codeFencedFenceSequence: 'codeFencedFenceSequence',
    // Info word (`js`) in a fence.
    // Includes string.
    codeFencedFenceInfo: 'codeFencedFenceInfo',
    // Meta words (`highlight="1"`) in a fence.
    // Includes string.
    codeFencedFenceMeta: 'codeFencedFenceMeta',
    // A line of code.
    codeFlowValue: 'codeFlowValue',
    // Whole indented code:
    //
    // ```markdown
    //     alert(1)
    // ```
    //
    // Includes `lineEnding`, `linePrefix`, and `codeFlowValue`.
    codeIndented: 'codeIndented',
    // A text code (``` `alpha` ```).
    // Includes `codeTextSequence`, `codeTextData`, `lineEnding`, and can include
    // `codeTextPadding`.
    codeText: 'codeText',
    codeTextData: 'codeTextData',
    // A space or line ending right after or before a tick.
    codeTextPadding: 'codeTextPadding',
    // A text code fence (` `` `).
    codeTextSequence: 'codeTextSequence',
    // Whole content:
    //
    // ```markdown
    // [a]: b
    // c
    // =
    // d
    // ```
    //
    // Includes `paragraph` and `definition`.
    content: 'content',
    // Whole definition:
    //
    // ```markdown
    // [micromark]: https://github.com/micromark/micromark
    // ```
    //
    // Includes `definitionLabel`, `definitionMarker`, `whitespace`,
    // `definitionDestination`, and optionally `lineEnding` and `definitionTitle`.
    definition: 'definition',
    // Destination of a definition (`https://github.com/micromark/micromark` or
    // `<https://github.com/micromark/micromark>`).
    // Includes `definitionDestinationLiteral` or `definitionDestinationRaw`.
    definitionDestination: 'definitionDestination',
    // Enclosed destination of a definition
    // (`<https://github.com/micromark/micromark>`).
    // Includes `definitionDestinationLiteralMarker` and optionally
    // `definitionDestinationString`.
    definitionDestinationLiteral: 'definitionDestinationLiteral',
    // Markers of an enclosed definition destination (`<` or `>`).
    definitionDestinationLiteralMarker: 'definitionDestinationLiteralMarker',
    // Unenclosed destination of a definition
    // (`https://github.com/micromark/micromark`).
    // Includes `definitionDestinationString`.
    definitionDestinationRaw: 'definitionDestinationRaw',
    // Text in an destination (`https://github.com/micromark/micromark`).
    // Includes string.
    definitionDestinationString: 'definitionDestinationString',
    // Label of a definition (`[micromark]`).
    // Includes `definitionLabelMarker` and `definitionLabelString`.
    definitionLabel: 'definitionLabel',
    // Markers of a definition label (`[` or `]`).
    definitionLabelMarker: 'definitionLabelMarker',
    // Value of a definition label (`micromark`).
    // Includes string.
    definitionLabelString: 'definitionLabelString',
    // Marker between a label and a destination (`:`).
    definitionMarker: 'definitionMarker',
    // Title of a definition (`"x"`, `'y'`, or `(z)`).
    // Includes `definitionTitleMarker` and optionally `definitionTitleString`.
    definitionTitle: 'definitionTitle',
    // Marker around a title of a definition (`"`, `'`, `(`, or `)`).
    definitionTitleMarker: 'definitionTitleMarker',
    // Data without markers in a title (`z`).
    // Includes string.
    definitionTitleString: 'definitionTitleString',
    // Emphasis (`*alpha*`).
    // Includes `emphasisSequence` and `emphasisText`.
    emphasis: 'emphasis',
    // Sequence of emphasis markers (`*` or `_`).
    emphasisSequence: 'emphasisSequence',
    // Emphasis text (`alpha`).
    // Includes text.
    emphasisText: 'emphasisText',
    // The character escape marker (`\`).
    escapeMarker: 'escapeMarker',
    // A hard break created with a backslash (`\\n`).
    // Note: does not include the line ending.
    hardBreakEscape: 'hardBreakEscape',
    // A hard break created with trailing spaces (`  \n`).
    // Does not include the line ending.
    hardBreakTrailing: 'hardBreakTrailing',
    // Flow HTML:
    //
    // ```markdown
    // <div
    // ```
    //
    // Inlcudes `lineEnding`, `htmlFlowData`.
    htmlFlow: 'htmlFlow',
    htmlFlowData: 'htmlFlowData',
    // HTML in text (the tag in `a <i> b`).
    // Includes `lineEnding`, `htmlTextData`.
    htmlText: 'htmlText',
    htmlTextData: 'htmlTextData',
    // Whole image (`![alpha](bravo)`, `![alpha][bravo]`, `![alpha][]`, or
    // `![alpha]`).
    // Includes `label` and an optional `resource` or `reference`.
    image: 'image',
    // Whole link label (`[*alpha*]`).
    // Includes `labelLink` or `labelImage`, `labelText`, and `labelEnd`.
    label: 'label',
    // Text in an label (`*alpha*`).
    // Includes text.
    labelText: 'labelText',
    // Start a link label (`[`).
    // Includes a `labelMarker`.
    labelLink: 'labelLink',
    // Start an image label (`![`).
    // Includes `labelImageMarker` and `labelMarker`.
    labelImage: 'labelImage',
    // Marker of a label (`[` or `]`).
    labelMarker: 'labelMarker',
    // Marker to start an image (`!`).
    labelImageMarker: 'labelImageMarker',
    // End a label (`]`).
    // Includes `labelMarker`.
    labelEnd: 'labelEnd',
    // Whole link (`[alpha](bravo)`, `[alpha][bravo]`, `[alpha][]`, or `[alpha]`).
    // Includes `label` and an optional `resource` or `reference`.
    link: 'link',
    // Whole paragraph:
    //
    // ```markdown
    // alpha
    // bravo.
    // ```
    //
    // Includes text.
    paragraph: 'paragraph',
    // A reference (`[alpha]` or `[]`).
    // Includes `referenceMarker` and an optional `referenceString`.
    reference: 'reference',
    // A reference marker (`[` or `]`).
    referenceMarker: 'referenceMarker',
    // Reference text (`alpha`).
    // Includes string.
    referenceString: 'referenceString',
    // A resource (`(https://example.com "alpha")`).
    // Includes `resourceMarker`, an optional `resourceDestination` with an optional
    // `whitespace` and `resourceTitle`.
    resource: 'resource',
    // A resource destination (`https://example.com`).
    // Includes `resourceDestinationLiteral` or `resourceDestinationRaw`.
    resourceDestination: 'resourceDestination',
    // A literal resource destination (`<https://example.com>`).
    // Includes `resourceDestinationLiteralMarker` and optionally
    // `resourceDestinationString`.
    resourceDestinationLiteral: 'resourceDestinationLiteral',
    // A resource destination marker (`<` or `>`).
    resourceDestinationLiteralMarker: 'resourceDestinationLiteralMarker',
    // A raw resource destination (`https://example.com`).
    // Includes `resourceDestinationString`.
    resourceDestinationRaw: 'resourceDestinationRaw',
    // Resource destination text (`https://example.com`).
    // Includes string.
    resourceDestinationString: 'resourceDestinationString',
    // A resource marker (`(` or `)`).
    resourceMarker: 'resourceMarker',
    // A resource title (`"alpha"`, `'alpha'`, or `(alpha)`).
    // Includes `resourceTitleMarker` and optionally `resourceTitleString`.
    resourceTitle: 'resourceTitle',
    // A resource title marker (`"`, `'`, `(`, or `)`).
    resourceTitleMarker: 'resourceTitleMarker',
    // Resource destination title (`alpha`).
    // Includes string.
    resourceTitleString: 'resourceTitleString',
    // Whole setext heading:
    //
    // ```markdown
    // alpha
    // bravo
    // =====
    // ```
    //
    // Includes `setextHeadingText`, `lineEnding`, `linePrefix`, and
    // `setextHeadingLine`.
    setextHeading: 'setextHeading',
    // Content in a setext heading (`alpha\nbravo`).
    // Includes text.
    setextHeadingText: 'setextHeadingText',
    // Underline in a setext heading, including whitespace suffix (`==`).
    // Includes `setextHeadingLineSequence`.
    setextHeadingLine: 'setextHeadingLine',
    // Sequence of equals or dash characters in underline in a setext heading (`-`).
    setextHeadingLineSequence: 'setextHeadingLineSequence',
    // Strong (`**alpha**`).
    // Includes `strongSequence` and `strongText`.
    strong: 'strong',
    // Sequence of strong markers (`**` or `__`).
    strongSequence: 'strongSequence',
    // Strong text (`alpha`).
    // Includes text.
    strongText: 'strongText',
    // Whole thematic break:
    //
    // ```markdown
    // * * *
    // ```
    //
    // Includes `thematicBreakSequence` and `whitespace`.
    thematicBreak: 'thematicBreak',
    // A sequence of one or more thematic break markers (`***`).
    thematicBreakSequence: 'thematicBreakSequence',
    // Whole block quote:
    //
    // ```markdown
    // > a
    // >
    // > b
    // ```
    //
    // Includes `blockQuotePrefix` and flow.
    blockQuote: 'blockQuote',
    // The `>` or `> ` of a block quote.
    blockQuotePrefix: 'blockQuotePrefix',
    // The `>` of a block quote prefix.
    blockQuoteMarker: 'blockQuoteMarker',
    // The optional ` ` of a block quote prefix.
    blockQuotePrefixWhitespace: 'blockQuotePrefixWhitespace',
    // Whole ordered list:
    //
    // ```markdown
    // 1. a
    //    b
    // ```
    //
    // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
    // lines.
    listOrdered: 'listOrdered',
    // Whole unordered list:
    //
    // ```markdown
    // - a
    //   b
    // ```
    //
    // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
    // lines.
    listUnordered: 'listUnordered',
    // The indent of further list item lines.
    listItemIndent: 'listItemIndent',
    // A marker, as in, `*`, `+`, `-`, `.`, or `)`.
    listItemMarker: 'listItemMarker',
    // The thing that starts a list item, such as `1. `.
    // Includes `listItemValue` if ordered, `listItemMarker`, and
    // `listItemPrefixWhitespace` (unless followed by a line ending).
    listItemPrefix: 'listItemPrefix',
    // The whitespace after a marker.
    listItemPrefixWhitespace: 'listItemPrefixWhitespace',
    // The numerical value of an ordered item.
    listItemValue: 'listItemValue',
    // Internal types used for subtokenizers, compiled away
    chunkDocument: 'chunkDocument',
    chunkContent: 'chunkContent',
    chunkFlow: 'chunkFlow',
    chunkText: 'chunkText',
    chunkString: 'chunkString'
};
}}),
"[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Character codes.
 *
 * This module is compiled away!
 *
 * micromark works based on character codes.
 * This module contains constants for the ASCII block and the replacement
 * character.
 * A couple of them are handled in a special way, such as the line endings
 * (CR, LF, and CR+LF, commonly known as end-of-line: EOLs), the tab (horizontal
 * tab) and its expansion based on what column it’s at (virtual space),
 * and the end-of-file (eof) character.
 * As values are preprocessed before handling them, the actual characters LF,
 * CR, HT, and NUL (which is present as the replacement character), are
 * guaranteed to not exist.
 *
 * Unicode basic latin block.
 */ __turbopack_esm__({
    "codes": (()=>codes)
});
const codes = {
    carriageReturn: -5,
    lineFeed: -4,
    carriageReturnLineFeed: -3,
    horizontalTab: -2,
    virtualSpace: -1,
    eof: null,
    nul: 0,
    soh: 1,
    stx: 2,
    etx: 3,
    eot: 4,
    enq: 5,
    ack: 6,
    bel: 7,
    bs: 8,
    ht: 9,
    lf: 10,
    vt: 11,
    ff: 12,
    cr: 13,
    so: 14,
    si: 15,
    dle: 16,
    dc1: 17,
    dc2: 18,
    dc3: 19,
    dc4: 20,
    nak: 21,
    syn: 22,
    etb: 23,
    can: 24,
    em: 25,
    sub: 26,
    esc: 27,
    fs: 28,
    gs: 29,
    rs: 30,
    us: 31,
    space: 32,
    exclamationMark: 33,
    quotationMark: 34,
    numberSign: 35,
    dollarSign: 36,
    percentSign: 37,
    ampersand: 38,
    apostrophe: 39,
    leftParenthesis: 40,
    rightParenthesis: 41,
    asterisk: 42,
    plusSign: 43,
    comma: 44,
    dash: 45,
    dot: 46,
    slash: 47,
    digit0: 48,
    digit1: 49,
    digit2: 50,
    digit3: 51,
    digit4: 52,
    digit5: 53,
    digit6: 54,
    digit7: 55,
    digit8: 56,
    digit9: 57,
    colon: 58,
    semicolon: 59,
    lessThan: 60,
    equalsTo: 61,
    greaterThan: 62,
    questionMark: 63,
    atSign: 64,
    uppercaseA: 65,
    uppercaseB: 66,
    uppercaseC: 67,
    uppercaseD: 68,
    uppercaseE: 69,
    uppercaseF: 70,
    uppercaseG: 71,
    uppercaseH: 72,
    uppercaseI: 73,
    uppercaseJ: 74,
    uppercaseK: 75,
    uppercaseL: 76,
    uppercaseM: 77,
    uppercaseN: 78,
    uppercaseO: 79,
    uppercaseP: 80,
    uppercaseQ: 81,
    uppercaseR: 82,
    uppercaseS: 83,
    uppercaseT: 84,
    uppercaseU: 85,
    uppercaseV: 86,
    uppercaseW: 87,
    uppercaseX: 88,
    uppercaseY: 89,
    uppercaseZ: 90,
    leftSquareBracket: 91,
    backslash: 92,
    rightSquareBracket: 93,
    caret: 94,
    underscore: 95,
    graveAccent: 96,
    lowercaseA: 97,
    lowercaseB: 98,
    lowercaseC: 99,
    lowercaseD: 100,
    lowercaseE: 101,
    lowercaseF: 102,
    lowercaseG: 103,
    lowercaseH: 104,
    lowercaseI: 105,
    lowercaseJ: 106,
    lowercaseK: 107,
    lowercaseL: 108,
    lowercaseM: 109,
    lowercaseN: 110,
    lowercaseO: 111,
    lowercaseP: 112,
    lowercaseQ: 113,
    lowercaseR: 114,
    lowercaseS: 115,
    lowercaseT: 116,
    lowercaseU: 117,
    lowercaseV: 118,
    lowercaseW: 119,
    lowercaseX: 120,
    lowercaseY: 121,
    lowercaseZ: 122,
    leftCurlyBrace: 123,
    verticalBar: 124,
    rightCurlyBrace: 125,
    tilde: 126,
    del: 127,
    // Unicode Specials block.
    byteOrderMarker: 65_279,
    // Unicode Specials block.
    replacementCharacter: 65_533 // `�`
};
}}),
"[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/values.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * This module is compiled away!
 *
 * While micromark works based on character codes, this module includes the
 * string versions of ’em.
 * The C0 block, except for LF, CR, HT, and w/ the replacement character added,
 * are available here.
 */ __turbopack_esm__({
    "values": (()=>values)
});
const values = {
    ht: '\t',
    lf: '\n',
    cr: '\r',
    space: ' ',
    exclamationMark: '!',
    quotationMark: '"',
    numberSign: '#',
    dollarSign: '$',
    percentSign: '%',
    ampersand: '&',
    apostrophe: "'",
    leftParenthesis: '(',
    rightParenthesis: ')',
    asterisk: '*',
    plusSign: '+',
    comma: ',',
    dash: '-',
    dot: '.',
    slash: '/',
    digit0: '0',
    digit1: '1',
    digit2: '2',
    digit3: '3',
    digit4: '4',
    digit5: '5',
    digit6: '6',
    digit7: '7',
    digit8: '8',
    digit9: '9',
    colon: ':',
    semicolon: ';',
    lessThan: '<',
    equalsTo: '=',
    greaterThan: '>',
    questionMark: '?',
    atSign: '@',
    uppercaseA: 'A',
    uppercaseB: 'B',
    uppercaseC: 'C',
    uppercaseD: 'D',
    uppercaseE: 'E',
    uppercaseF: 'F',
    uppercaseG: 'G',
    uppercaseH: 'H',
    uppercaseI: 'I',
    uppercaseJ: 'J',
    uppercaseK: 'K',
    uppercaseL: 'L',
    uppercaseM: 'M',
    uppercaseN: 'N',
    uppercaseO: 'O',
    uppercaseP: 'P',
    uppercaseQ: 'Q',
    uppercaseR: 'R',
    uppercaseS: 'S',
    uppercaseT: 'T',
    uppercaseU: 'U',
    uppercaseV: 'V',
    uppercaseW: 'W',
    uppercaseX: 'X',
    uppercaseY: 'Y',
    uppercaseZ: 'Z',
    leftSquareBracket: '[',
    backslash: '\\',
    rightSquareBracket: ']',
    caret: '^',
    underscore: '_',
    graveAccent: '`',
    lowercaseA: 'a',
    lowercaseB: 'b',
    lowercaseC: 'c',
    lowercaseD: 'd',
    lowercaseE: 'e',
    lowercaseF: 'f',
    lowercaseG: 'g',
    lowercaseH: 'h',
    lowercaseI: 'i',
    lowercaseJ: 'j',
    lowercaseK: 'k',
    lowercaseL: 'l',
    lowercaseM: 'm',
    lowercaseN: 'n',
    lowercaseO: 'o',
    lowercaseP: 'p',
    lowercaseQ: 'q',
    lowercaseR: 'r',
    lowercaseS: 's',
    lowercaseT: 't',
    lowercaseU: 'u',
    lowercaseV: 'v',
    lowercaseW: 'w',
    lowercaseX: 'x',
    lowercaseY: 'y',
    lowercaseZ: 'z',
    leftCurlyBrace: '{',
    verticalBar: '|',
    rightCurlyBrace: '}',
    tilde: '~',
    replacementCharacter: '�'
};
}}),
"[project]/apps/website/docs/node_modules/micromark-util-subtokenize/dev/lib/splice-buffer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "SpliceBuffer": (()=>SpliceBuffer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
;
class SpliceBuffer {
    /**
   * @param {ReadonlyArray<T> | null | undefined} [initial]
   *   Initial items (optional).
   * @returns
   *   Splice buffer.
   */ constructor(initial){
        /** @type {Array<T>} */ this.left = initial ? [
            ...initial
        ] : [];
        /** @type {Array<T>} */ this.right = [];
    }
    /**
   * Array access;
   * does not move the cursor.
   *
   * @param {number} index
   *   Index.
   * @return {T}
   *   Item.
   */ get(index) {
        if (index < 0 || index >= this.left.length + this.right.length) {
            throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');
        }
        if (index < this.left.length) return this.left[index];
        return this.right[this.right.length - index + this.left.length - 1];
    }
    /**
   * The length of the splice buffer, one greater than the largest index in the
   * array.
   */ get length() {
        return this.left.length + this.right.length;
    }
    /**
   * Remove and return `list[0]`;
   * moves the cursor to `0`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */ shift() {
        this.setCursor(0);
        return this.right.pop();
    }
    /**
   * Slice the buffer to get an array;
   * does not move the cursor.
   *
   * @param {number} start
   *   Start.
   * @param {number | null | undefined} [end]
   *   End (optional).
   * @returns {Array<T>}
   *   Array of items.
   */ slice(start, end) {
        /** @type {number} */ const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;
        if (stop < this.left.length) {
            return this.left.slice(start, stop);
        }
        if (start > this.left.length) {
            return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();
        }
        return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());
    }
    /**
   * Mimics the behavior of Array.prototype.splice() except for the change of
   * interface necessary to avoid segfaults when patching in very large arrays.
   *
   * This operation moves cursor is moved to `start` and results in the cursor
   * placed after any inserted items.
   *
   * @param {number} start
   *   Start;
   *   zero-based index at which to start changing the array;
   *   negative numbers count backwards from the end of the array and values
   *   that are out-of bounds are clamped to the appropriate end of the array.
   * @param {number | null | undefined} [deleteCount=0]
   *   Delete count (default: `0`);
   *   maximum number of elements to delete, starting from start.
   * @param {Array<T> | null | undefined} [items=[]]
   *   Items to include in place of the deleted items (default: `[]`).
   * @return {Array<T>}
   *   Any removed items.
   */ splice(start, deleteCount, items) {
        /** @type {number} */ const count = deleteCount || 0;
        this.setCursor(Math.trunc(start));
        const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);
        if (items) chunkedPush(this.left, items);
        return removed.reverse();
    }
    /**
   * Remove and return the highest-numbered item in the array, so
   * `list[list.length - 1]`;
   * Moves the cursor to `length`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */ pop() {
        this.setCursor(Number.POSITIVE_INFINITY);
        return this.left.pop();
    }
    /**
   * Inserts a single item to the high-numbered side of the array;
   * moves the cursor to `length`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */ push(item) {
        this.setCursor(Number.POSITIVE_INFINITY);
        this.left.push(item);
    }
    /**
   * Inserts many items to the high-numbered side of the array.
   * Moves the cursor to `length`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */ pushMany(items) {
        this.setCursor(Number.POSITIVE_INFINITY);
        chunkedPush(this.left, items);
    }
    /**
   * Inserts a single item to the low-numbered side of the array;
   * Moves the cursor to `0`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */ unshift(item) {
        this.setCursor(0);
        this.right.push(item);
    }
    /**
   * Inserts many items to the low-numbered side of the array;
   * moves the cursor to `0`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */ unshiftMany(items) {
        this.setCursor(0);
        chunkedPush(this.right, items.reverse());
    }
    /**
   * Move the cursor to a specific position in the array. Requires
   * time proportional to the distance moved.
   *
   * If `n < 0`, the cursor will end up at the beginning.
   * If `n > length`, the cursor will end up at the end.
   *
   * @param {number} n
   *   Position.
   * @return {undefined}
   *   Nothing.
   */ setCursor(n) {
        if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;
        if (n < this.left.length) {
            // Move cursor to the this.left
            const removed = this.left.splice(n, Number.POSITIVE_INFINITY);
            chunkedPush(this.right, removed.reverse());
        } else {
            // Move cursor to the this.right
            const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);
            chunkedPush(this.left, removed.reverse());
        }
    }
}
/**
 * Avoid stack overflow by pushing items onto the stack in segments
 *
 * @template T
 *   Item type.
 * @param {Array<T>} list
 *   List to inject into.
 * @param {ReadonlyArray<T>} right
 *   Items to inject.
 * @return {undefined}
 *   Nothing.
 */ function chunkedPush(list, right) {
    /** @type {number} */ let chunkStart = 0;
    if (right.length < __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].v8MaxSafeChunkSize) {
        list.push(...right);
    } else {
        while(chunkStart < right.length){
            list.push(...right.slice(chunkStart, chunkStart + __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].v8MaxSafeChunkSize));
            chunkStart += __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].v8MaxSafeChunkSize;
        }
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-util-subtokenize/dev/index.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Chunk, Event, Token} from 'micromark-util-types'
 */ __turbopack_esm__({
    "subtokenize": (()=>subtokenize)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$subtokenize$2f$dev$2f$lib$2f$splice$2d$buffer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-subtokenize/dev/lib/splice-buffer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-chunked/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
;
;
;
;
;
function subtokenize(eventsArray) {
    /** @type {Record<string, number>} */ const jumps = {};
    let index = -1;
    /** @type {Event} */ let event;
    /** @type {number | undefined} */ let lineIndex;
    /** @type {number} */ let otherIndex;
    /** @type {Event} */ let otherEvent;
    /** @type {Array<Event>} */ let parameters;
    /** @type {Array<Event>} */ let subevents;
    /** @type {boolean | undefined} */ let more;
    const events = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$subtokenize$2f$dev$2f$lib$2f$splice$2d$buffer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SpliceBuffer"](eventsArray);
    while(++index < events.length){
        while(index in jumps){
            index = jumps[index];
        }
        event = events.get(index);
        // Add a hook for the GFM tasklist extension, which needs to know if text
        // is in the first content of a list item.
        if (index && event[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkFlow && events.get(index - 1)[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].listItemPrefix) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(event[1]._tokenizer, 'expected `_tokenizer` on subtokens');
            subevents = event[1]._tokenizer.events;
            otherIndex = 0;
            if (otherIndex < subevents.length && subevents[otherIndex][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank) {
                otherIndex += 2;
            }
            if (otherIndex < subevents.length && subevents[otherIndex][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].content) {
                while(++otherIndex < subevents.length){
                    if (subevents[otherIndex][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].content) {
                        break;
                    }
                    if (subevents[otherIndex][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkText) {
                        subevents[otherIndex][1]._isInFirstContentOfListItem = true;
                        otherIndex++;
                    }
                }
            }
        }
        // Enter.
        if (event[0] === 'enter') {
            if (event[1].contentType) {
                Object.assign(jumps, subcontent(events, index));
                index = jumps[index];
                more = true;
            }
        } else if (event[1]._container) {
            otherIndex = index;
            lineIndex = undefined;
            while(otherIndex--){
                otherEvent = events.get(otherIndex);
                if (otherEvent[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding || otherEvent[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank) {
                    if (otherEvent[0] === 'enter') {
                        if (lineIndex) {
                            events.get(lineIndex)[1].type = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank;
                        }
                        otherEvent[1].type = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding;
                        lineIndex = otherIndex;
                    }
                } else if (otherEvent[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix) {
                // Move past.
                } else {
                    break;
                }
            }
            if (lineIndex) {
                // Fix position.
                event[1].end = {
                    ...events.get(lineIndex)[1].start
                };
                // Switch container exit w/ line endings.
                parameters = events.slice(lineIndex, index);
                parameters.unshift(event);
                events.splice(lineIndex, index - lineIndex + 1, parameters);
            }
        }
    }
    // The changes to the `events` buffer must be copied back into the eventsArray
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["splice"])(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));
    return !more;
}
/**
 * Tokenize embedded tokens.
 *
 * @param {SpliceBuffer<Event>} events
 *   Events.
 * @param {number} eventIndex
 *   Index.
 * @returns {Record<string, number>}
 *   Gaps.
 */ function subcontent(events, eventIndex) {
    const token = events.get(eventIndex)[1];
    const context = events.get(eventIndex)[2];
    let startPosition = eventIndex - 1;
    /** @type {Array<number>} */ const startPositions = [];
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(token.contentType, 'expected `contentType` on subtokens');
    const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);
    const childEvents = tokenizer.events;
    /** @type {Array<[number, number]>} */ const jumps = [];
    /** @type {Record<string, number>} */ const gaps = {};
    /** @type {Array<Chunk>} */ let stream;
    /** @type {Token | undefined} */ let previous;
    let index = -1;
    /** @type {Token | undefined} */ let current = token;
    let adjust = 0;
    let start = 0;
    const breaks = [
        start
    ];
    // Loop forward through the linked tokens to pass them in order to the
    // subtokenizer.
    while(current){
        // Find the position of the event for this token.
        while(events.get(++startPosition)[1] !== current){
        // Empty.
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(!previous || current.previous === previous, 'expected previous to match');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(!previous || previous.next === current, 'expected next to match');
        startPositions.push(startPosition);
        if (!current._tokenizer) {
            stream = context.sliceStream(current);
            if (!current.next) {
                stream.push(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof);
            }
            if (previous) {
                tokenizer.defineSkip(current.start);
            }
            if (current._isInFirstContentOfListItem) {
                tokenizer._gfmTasklistFirstContentOfListItem = true;
            }
            tokenizer.write(stream);
            if (current._isInFirstContentOfListItem) {
                tokenizer._gfmTasklistFirstContentOfListItem = undefined;
            }
        }
        // Unravel the next token.
        previous = current;
        current = current.next;
    }
    // Now, loop back through all events (and linked tokens), to figure out which
    // parts belong where.
    current = token;
    while(++index < childEvents.length){
        if (// Find a void token that includes a break.
        childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(current, 'expected a current token');
            start = index + 1;
            breaks.push(start);
            // Help GC.
            current._tokenizer = undefined;
            current.previous = undefined;
            current = current.next;
        }
    }
    // Help GC.
    tokenizer.events = [];
    // If there’s one more token (which is the cases for lines that end in an
    // EOF), that’s perfect: the last point we found starts it.
    // If there isn’t then make sure any remaining content is added to it.
    if (current) {
        // Help GC.
        current._tokenizer = undefined;
        current.previous = undefined;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(!current.next, 'expected no next token');
    } else {
        breaks.pop();
    }
    // Now splice the events from the subtokenizer into the current events,
    // moving back to front so that splice indices aren’t affected.
    index = breaks.length;
    while(index--){
        const slice = childEvents.slice(breaks[index], breaks[index + 1]);
        const start = startPositions.pop();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(start !== undefined, 'expected a start position when splicing');
        jumps.push([
            start,
            start + slice.length - 1
        ]);
        events.splice(start, 2, slice);
    }
    jumps.reverse();
    index = -1;
    while(++index < jumps.length){
        gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
        adjust += jumps[index][1] - jumps[index][0] - 1;
    }
    return gaps;
}
}}),
"[project]/apps/website/docs/node_modules/micromark-util-chunked/dev/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "push": (()=>push),
    "splice": (()=>splice)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
;
function splice(list, start, remove, items) {
    const end = list.length;
    let chunkStart = 0;
    /** @type {Array<unknown>} */ let parameters;
    // Make start between zero and `end` (included).
    if (start < 0) {
        start = -start > end ? 0 : end + start;
    } else {
        start = start > end ? end : start;
    }
    remove = remove > 0 ? remove : 0;
    // No need to chunk the items if there’s only a couple (10k) items.
    if (items.length < __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].v8MaxSafeChunkSize) {
        parameters = Array.from(items);
        parameters.unshift(start, remove);
        // @ts-expect-error Hush, it’s fine.
        list.splice(...parameters);
    } else {
        // Delete `remove` items starting from `start`
        if (remove) list.splice(start, remove);
        // Insert the items in chunks to not cause stack overflows.
        while(chunkStart < items.length){
            parameters = items.slice(chunkStart, chunkStart + __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].v8MaxSafeChunkSize);
            parameters.unshift(start, 0);
            // @ts-expect-error Hush, it’s fine.
            list.splice(...parameters);
            chunkStart += __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].v8MaxSafeChunkSize;
            start += __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].v8MaxSafeChunkSize;
        }
    }
}
function push(list, items) {
    if (list.length > 0) {
        splice(list, list.length, 0, items);
        return list;
    }
    return items;
}
}}),
"[project]/apps/website/docs/node_modules/micromark/dev/lib/postprocess.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Event} from 'micromark-util-types'
 */ __turbopack_esm__({
    "postprocess": (()=>postprocess)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$subtokenize$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-subtokenize/dev/index.js [app-rsc] (ecmascript) <locals>");
;
function postprocess(events) {
    while(!(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$subtokenize$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["subtokenize"])(events)){
    // Empty
    }
    return events;
}
}}),
"[project]/apps/website/docs/node_modules/micromark/dev/lib/initialize/text.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   Code,
 *   InitialConstruct,
 *   Initializer,
 *   Resolver,
 *   State,
 *   TokenizeContext
 * } from 'micromark-util-types'
 */ __turbopack_esm__({
    "resolver": (()=>resolver),
    "string": (()=>string),
    "text": (()=>text)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
;
;
const resolver = {
    resolveAll: createResolver()
};
const string = initializeFactory('string');
const text = initializeFactory('text');
/**
 * @param {'string' | 'text'} field
 *   Field.
 * @returns {InitialConstruct}
 *   Construct.
 */ function initializeFactory(field) {
    return {
        resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),
        tokenize: initializeText
    };
    "TURBOPACK unreachable";
    /**
   * @this {TokenizeContext}
   *   Context.
   * @type {Initializer}
   */ function initializeText(effects) {
        const self = this;
        const constructs = this.parser.constructs[field];
        const text = effects.attempt(constructs, start, notText);
        return start;
        "TURBOPACK unreachable";
        /** @type {State} */ function start(code) {
            return atBreak(code) ? text(code) : notText(code);
        }
        /** @type {State} */ function notText(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
                effects.consume(code);
                return;
            }
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].data);
            effects.consume(code);
            return data;
        }
        /** @type {State} */ function data(code) {
            if (atBreak(code)) {
                effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].data);
                return text(code);
            }
            // Data.
            effects.consume(code);
            return data;
        }
        /**
     * @param {Code} code
     *   Code.
     * @returns {boolean}
     *   Whether the code is a break.
     */ function atBreak(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
                return true;
            }
            const list = constructs[code];
            let index = -1;
            if (list) {
                // Always populated by defaults.
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(Array.isArray(list), 'expected `disable.null` to be populated');
                while(++index < list.length){
                    const item = list[index];
                    if (!item.previous || item.previous.call(self, self.previous)) {
                        return true;
                    }
                }
            }
            return false;
        }
    }
}
/**
 * @param {Resolver | undefined} [extraResolver]
 *   Resolver.
 * @returns {Resolver}
 *   Resolver.
 */ function createResolver(extraResolver) {
    return resolveAllText;
    "TURBOPACK unreachable";
    /** @type {Resolver} */ function resolveAllText(events, context) {
        let index = -1;
        /** @type {number | undefined} */ let enter;
        // A rather boring computation (to merge adjacent `data` events) which
        // improves mm performance by 29%.
        while(++index <= events.length){
            if (enter === undefined) {
                if (events[index] && events[index][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].data) {
                    enter = index;
                    index++;
                }
            } else if (!events[index] || events[index][1].type !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].data) {
                // Don’t do anything if there is one data token.
                if (index !== enter + 2) {
                    events[enter][1].end = events[index - 1][1].end;
                    events.splice(enter + 2, index - enter - 2);
                    index = enter + 2;
                }
                enter = undefined;
            }
        }
        return extraResolver ? extraResolver(events, context) : events;
    }
}
/**
 * A rather ugly set of instructions which again looks at chunks in the input
 * stream.
 * The reason to do this here is that it is *much* faster to parse in reverse.
 * And that we can’t hook into `null` to split the line suffix before an EOF.
 * To do: figure out if we can make this into a clean utility, or even in core.
 * As it will be useful for GFMs literal autolink extension (and maybe even
 * tables?)
 *
 * @type {Resolver}
 */ function resolveAllLineSuffixes(events, context) {
    let eventIndex = 0 // Skip first.
    ;
    while(++eventIndex <= events.length){
        if ((eventIndex === events.length || events[eventIndex][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding) && events[eventIndex - 1][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].data) {
            const data = events[eventIndex - 1][1];
            const chunks = context.sliceStream(data);
            let index = chunks.length;
            let bufferIndex = -1;
            let size = 0;
            /** @type {boolean | undefined} */ let tabs;
            while(index--){
                const chunk = chunks[index];
                if (typeof chunk === 'string') {
                    bufferIndex = chunk.length;
                    while(chunk.charCodeAt(bufferIndex - 1) === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].space){
                        size++;
                        bufferIndex--;
                    }
                    if (bufferIndex) break;
                    bufferIndex = -1;
                } else if (chunk === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab) {
                    tabs = true;
                    size++;
                } else if (chunk === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].virtualSpace) {
                // Empty
                } else {
                    // Replacement character, exit.
                    index++;
                    break;
                }
            }
            if (size) {
                const token = {
                    type: eventIndex === events.length || tabs || size < __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].hardBreakPrefixSizeMin ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineSuffix : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].hardBreakTrailing,
                    start: {
                        _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,
                        _index: data.start._index + index,
                        line: data.end.line,
                        column: data.end.column - size,
                        offset: data.end.offset - size
                    },
                    end: {
                        ...data.end
                    }
                };
                data.end = {
                    ...token.start
                };
                if (data.start.offset === data.end.offset) {
                    Object.assign(data, token);
                } else {
                    events.splice(eventIndex, 0, [
                        'enter',
                        token,
                        context
                    ], [
                        'exit',
                        token,
                        context
                    ]);
                    eventIndex += 2;
                }
            }
            eventIndex++;
        }
    }
    return events;
}
}}),
"[project]/apps/website/docs/node_modules/micromark/dev/lib/constructs.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Extension} from 'micromark-util-types'
 */ __turbopack_esm__({
    "attentionMarkers": (()=>attentionMarkers),
    "contentInitial": (()=>contentInitial),
    "disable": (()=>disable),
    "document": (()=>document),
    "flow": (()=>flow),
    "flowInitial": (()=>flowInitial),
    "insideSpan": (()=>insideSpan),
    "string": (()=>string),
    "text": (()=>text)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/list.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$block$2d$quote$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/block-quote.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$definition$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/definition.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$code$2d$indented$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/code-indented.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$heading$2d$atx$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/heading-atx.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$thematic$2d$break$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/thematic-break.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$setext$2d$underline$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/setext-underline.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$html$2d$flow$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/html-flow.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$code$2d$fenced$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/code-fenced.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$character$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/character-reference.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$character$2d$escape$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/character-escape.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$line$2d$ending$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/line-ending.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$label$2d$start$2d$image$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/label-start-image.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$attention$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/attention.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$autolink$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/autolink.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$html$2d$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/html-text.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$label$2d$start$2d$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/label-start-link.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$hard$2d$break$2d$escape$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$label$2d$end$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/label-end.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$code$2d$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/code-text.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$initialize$2f$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark/dev/lib/initialize/text.js [app-rsc] (ecmascript)");
;
;
;
const document = {
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].asterisk]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["list"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].plusSign]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["list"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dash]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["list"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].digit0]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["list"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].digit1]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["list"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].digit2]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["list"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].digit3]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["list"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].digit4]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["list"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].digit5]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["list"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].digit6]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["list"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].digit7]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["list"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].digit8]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["list"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].digit9]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["list"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$block$2d$quote$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["blockQuote"]
};
const contentInitial = {
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$definition$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["definition"]
};
const flowInitial = {
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$code$2d$indented$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codeIndented"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].virtualSpace]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$code$2d$indented$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codeIndented"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].space]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$code$2d$indented$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codeIndented"]
};
const flow = {
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].numberSign]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$heading$2d$atx$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["headingAtx"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].asterisk]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$thematic$2d$break$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["thematicBreak"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dash]: [
        __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$setext$2d$underline$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["setextUnderline"],
        __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$thematic$2d$break$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["thematicBreak"]
    ],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$html$2d$flow$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["htmlFlow"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].equalsTo]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$setext$2d$underline$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["setextUnderline"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].underscore]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$thematic$2d$break$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["thematicBreak"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].graveAccent]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$code$2d$fenced$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codeFenced"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].tilde]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$code$2d$fenced$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codeFenced"]
};
const string = {
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].ampersand]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$character$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["characterReference"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$character$2d$escape$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["characterEscape"]
};
const text = {
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].carriageReturn]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$line$2d$ending$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["lineEnding"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lineFeed]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$line$2d$ending$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["lineEnding"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].carriageReturnLineFeed]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$line$2d$ending$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["lineEnding"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].exclamationMark]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$label$2d$start$2d$image$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["labelStartImage"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].ampersand]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$character$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["characterReference"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].asterisk]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$attention$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["attention"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan]: [
        __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$autolink$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["autolink"],
        __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$html$2d$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["htmlText"]
    ],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$label$2d$start$2d$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["labelStartLink"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash]: [
        __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$hard$2d$break$2d$escape$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["hardBreakEscape"],
        __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$character$2d$escape$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["characterEscape"]
    ],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$label$2d$end$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["labelEnd"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].underscore]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$attention$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["attention"],
    [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].graveAccent]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$code$2d$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codeText"]
};
const insideSpan = {
    null: [
        __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$attention$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["attention"],
        __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$initialize$2f$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["resolver"]
    ]
};
const attentionMarkers = {
    null: [
        __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].asterisk,
        __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].underscore
    ]
};
const disable = {
    null: []
};
}}),
"[project]/apps/website/docs/node_modules/micromark/dev/lib/initialize/content.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   InitialConstruct,
 *   Initializer,
 *   State,
 *   TokenizeContext,
 *   Token
 * } from 'micromark-util-types'
 */ __turbopack_esm__({
    "content": (()=>content)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-factory-space/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
;
;
;
;
const content = {
    tokenize: initializeContent
};
/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Initializer}
 *   Content.
 */ function initializeContent(effects) {
    const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);
    /** @type {Token} */ let previous;
    return contentStart;
    "TURBOPACK unreachable";
    /** @type {State} */ function afterContentStartConstruct(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code), 'expected eol or eof');
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            effects.consume(code);
            return;
        }
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
        effects.consume(code);
        effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, contentStart, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix);
    }
    /** @type {State} */ function paragraphInitial(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code), 'expected anything other than a line ending or EOF');
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].paragraph);
        return lineStart(code);
    }
    /** @type {State} */ function lineStart(code) {
        const token = effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkText, {
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeText,
            previous
        });
        if (previous) {
            previous.next = token;
        }
        previous = token;
        return data(code);
    }
    /** @type {State} */ function data(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkText);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].paragraph);
            effects.consume(code);
            return;
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkText);
            return lineStart;
        }
        // Data.
        effects.consume(code);
        return data;
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark/dev/lib/initialize/document.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   Construct,
 *   ContainerState,
 *   InitialConstruct,
 *   Initializer,
 *   Point,
 *   State,
 *   TokenizeContext,
 *   Tokenizer,
 *   Token
 * } from 'micromark-util-types'
 */ /**
 * @typedef {[Construct, ContainerState]} StackItem
 *   Construct and its state.
 */ __turbopack_esm__({
    "document": (()=>document)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-chunked/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-factory-space/dev/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
const document = {
    tokenize: initializeDocument
};
/** @type {Construct} */ const containerConstruct = {
    tokenize: tokenizeContainer
};
/**
 * @this {TokenizeContext}
 *   Self.
 * @type {Initializer}
 *   Initializer.
 */ function initializeDocument(effects) {
    const self = this;
    /** @type {Array<StackItem>} */ const stack = [];
    let continued = 0;
    /** @type {TokenizeContext | undefined} */ let childFlow;
    /** @type {Token | undefined} */ let childToken;
    /** @type {number} */ let lineStartOffset;
    return start;
    "TURBOPACK unreachable";
    /** @type {State} */ function start(code) {
        // First we iterate through the open blocks, starting with the root
        // document, and descending through last children down to the last open
        // block.
        // Each block imposes a condition that the line must satisfy if the block is
        // to remain open.
        // For example, a block quote requires a `>` character.
        // A paragraph requires a non-blank line.
        // In this phase we may match all or just some of the open blocks.
        // But we cannot close unmatched blocks yet, because we may have a lazy
        // continuation line.
        if (continued < stack.length) {
            const item = stack[continued];
            self.containerState = item[1];
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(item[0].continuation, 'expected `continuation` to be defined on container construct');
            return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);
        }
        // Done.
        return checkNewContainers(code);
    }
    /** @type {State} */ function documentContinue(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(self.containerState, 'expected `containerState` to be defined after continuation');
        continued++;
        // Note: this field is called `_closeFlow` but it also closes containers.
        // Perhaps a good idea to rename it but it’s already used in the wild by
        // extensions.
        if (self.containerState._closeFlow) {
            self.containerState._closeFlow = undefined;
            if (childFlow) {
                closeFlow();
            }
            // Note: this algorithm for moving events around is similar to the
            // algorithm when dealing with lazy lines in `writeToChild`.
            const indexBeforeExits = self.events.length;
            let indexBeforeFlow = indexBeforeExits;
            /** @type {Point | undefined} */ let point;
            // Find the flow chunk.
            while(indexBeforeFlow--){
                if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkFlow) {
                    point = self.events[indexBeforeFlow][1].end;
                    break;
                }
            }
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(point, 'could not find previous flow chunk');
            exitContainers(continued);
            // Fix positions.
            let index = indexBeforeExits;
            while(index < self.events.length){
                self.events[index][1].end = {
                    ...point
                };
                index++;
            }
            // Inject the exits earlier (they’re still also at the end).
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["splice"])(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));
            // Discard the duplicate exits.
            self.events.length = index;
            return checkNewContainers(code);
        }
        return start(code);
    }
    /** @type {State} */ function checkNewContainers(code) {
        // Next, after consuming the continuation markers for existing blocks, we
        // look for new block starts (e.g. `>` for a block quote).
        // If we encounter a new block start, we close any blocks unmatched in
        // step 1 before creating the new block as a child of the last matched
        // block.
        if (continued === stack.length) {
            // No need to `check` whether there’s a container, of `exitContainers`
            // would be moot.
            // We can instead immediately `attempt` to parse one.
            if (!childFlow) {
                return documentContinued(code);
            }
            // If we have concrete content, such as block HTML or fenced code,
            // we can’t have containers “pierce” into them, so we can immediately
            // start.
            if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
                return flowStart(code);
            }
            // If we do have flow, it could still be a blank line,
            // but we’d be interrupting it w/ a new container if there’s a current
            // construct.
            // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer
            // needed in micromark-extension-gfm-table@1.0.6).
            self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);
        }
        // Check if there is a new container.
        self.containerState = {};
        return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);
    }
    /** @type {State} */ function thereIsANewContainer(code) {
        if (childFlow) closeFlow();
        exitContainers(continued);
        return documentContinued(code);
    }
    /** @type {State} */ function thereIsNoNewContainer(code) {
        self.parser.lazy[self.now().line] = continued !== stack.length;
        lineStartOffset = self.now().offset;
        return flowStart(code);
    }
    /** @type {State} */ function documentContinued(code) {
        // Try new containers.
        self.containerState = {};
        return effects.attempt(containerConstruct, containerContinue, flowStart)(code);
    }
    /** @type {State} */ function containerContinue(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(self.currentConstruct, 'expected `currentConstruct` to be defined on tokenizer');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(self.containerState, 'expected `containerState` to be defined on tokenizer');
        continued++;
        stack.push([
            self.currentConstruct,
            self.containerState
        ]);
        // Try another.
        return documentContinued(code);
    }
    /** @type {State} */ function flowStart(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            if (childFlow) closeFlow();
            exitContainers(0);
            effects.consume(code);
            return;
        }
        childFlow = childFlow || self.parser.flow(self.now());
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkFlow, {
            _tokenizer: childFlow,
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeFlow,
            previous: childToken
        });
        return flowContinue(code);
    }
    /** @type {State} */ function flowContinue(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            writeToChild(effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkFlow), true);
            exitContainers(0);
            effects.consume(code);
            return;
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            effects.consume(code);
            writeToChild(effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkFlow));
            // Get ready for the next line.
            continued = 0;
            self.interrupt = undefined;
            return start;
        }
        effects.consume(code);
        return flowContinue;
    }
    /**
   * @param {Token} token
   *   Token.
   * @param {boolean | undefined} [endOfFile]
   *   Whether the token is at the end of the file (default: `false`).
   * @returns {undefined}
   *   Nothing.
   */ function writeToChild(token, endOfFile) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(childFlow, 'expected `childFlow` to be defined when continuing');
        const stream = self.sliceStream(token);
        if (endOfFile) stream.push(null);
        token.previous = childToken;
        if (childToken) childToken.next = token;
        childToken = token;
        childFlow.defineSkip(token.start);
        childFlow.write(stream);
        // Alright, so we just added a lazy line:
        //
        // ```markdown
        // > a
        // b.
        //
        // Or:
        //
        // > ~~~c
        // d
        //
        // Or:
        //
        // > | e |
        // f
        // ```
        //
        // The construct in the second example (fenced code) does not accept lazy
        // lines, so it marked itself as done at the end of its first line, and
        // then the content construct parses `d`.
        // Most constructs in markdown match on the first line: if the first line
        // forms a construct, a non-lazy line can’t “unmake” it.
        //
        // The construct in the third example is potentially a GFM table, and
        // those are *weird*.
        // It *could* be a table, from the first line, if the following line
        // matches a condition.
        // In this case, that second line is lazy, which “unmakes” the first line
        // and turns the whole into one content block.
        //
        // We’ve now parsed the non-lazy and the lazy line, and can figure out
        // whether the lazy line started a new flow block.
        // If it did, we exit the current containers between the two flow blocks.
        if (self.parser.lazy[token.start.line]) {
            let index = childFlow.events.length;
            while(index--){
                if (// The token starts before the line ending…
                childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…
                (!childFlow.events[index][1].end || // …or ends after it.
                childFlow.events[index][1].end.offset > lineStartOffset)) {
                    // Exit: there’s still something open, which means it’s a lazy line
                    // part of something.
                    return;
                }
            }
            // Note: this algorithm for moving events around is similar to the
            // algorithm when closing flow in `documentContinue`.
            const indexBeforeExits = self.events.length;
            let indexBeforeFlow = indexBeforeExits;
            /** @type {boolean | undefined} */ let seen;
            /** @type {Point | undefined} */ let point;
            // Find the previous chunk (the one before the lazy line).
            while(indexBeforeFlow--){
                if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkFlow) {
                    if (seen) {
                        point = self.events[indexBeforeFlow][1].end;
                        break;
                    }
                    seen = true;
                }
            }
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(point, 'could not find previous flow chunk');
            exitContainers(continued);
            // Fix positions.
            index = indexBeforeExits;
            while(index < self.events.length){
                self.events[index][1].end = {
                    ...point
                };
                index++;
            }
            // Inject the exits earlier (they’re still also at the end).
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["splice"])(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));
            // Discard the duplicate exits.
            self.events.length = index;
        }
    }
    /**
   * @param {number} size
   *   Size.
   * @returns {undefined}
   *   Nothing.
   */ function exitContainers(size) {
        let index = stack.length;
        // Exit open containers.
        while(index-- > size){
            const entry = stack[index];
            self.containerState = entry[1];
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(entry[0].exit, 'expected `exit` to be defined on container construct');
            entry[0].exit.call(self, effects);
        }
        stack.length = size;
    }
    function closeFlow() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(self.containerState, 'expected `containerState` to be defined when closing flow');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(childFlow, 'expected `childFlow` to be defined when closing it');
        childFlow.write([
            __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof
        ]);
        childToken = undefined;
        childFlow = undefined;
        self.containerState._closeFlow = undefined;
    }
}
/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 *   Tokenizer.
 */ function tokenizeContainer(effects, ok, nok) {
    // Always populated by defaults.
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(this.parser.constructs.disable.null, 'expected `disable.null` to be populated');
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, effects.attempt(this.parser.constructs.document, ok, nok), __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix, this.parser.constructs.disable.null.includes('codeIndented') ? undefined : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].tabSize);
}
}}),
"[project]/apps/website/docs/node_modules/micromark/dev/lib/initialize/flow.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   InitialConstruct,
 *   Initializer,
 *   State,
 *   TokenizeContext
 * } from 'micromark-util-types'
 */ __turbopack_esm__({
    "flow": (()=>flow)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$blank$2d$line$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/blank-line.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-factory-space/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$content$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/content.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
const flow = {
    tokenize: initializeFlow
};
/**
 * @this {TokenizeContext}
 *   Self.
 * @type {Initializer}
 *   Initializer.
 */ function initializeFlow(effects) {
    const self = this;
    const initial = effects.attempt(// Try to parse a blank line.
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$blank$2d$line$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["blankLine"], atBlankEnding, // Try to parse initial flow (essentially, only code).
    effects.attempt(this.parser.constructs.flowInitial, afterConstruct, (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$content$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["content"], afterConstruct)), __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix)));
    return initial;
    "TURBOPACK unreachable";
    /** @type {State} */ function atBlankEnding(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code), 'expected eol or eof');
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            effects.consume(code);
            return;
        }
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank);
        effects.consume(code);
        effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank);
        self.currentConstruct = undefined;
        return initial;
    }
    /** @type {State} */ function afterConstruct(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code), 'expected eol or eof');
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            effects.consume(code);
            return;
        }
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
        effects.consume(code);
        effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
        self.currentConstruct = undefined;
        return initial;
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark/dev/lib/create-tokenizer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   Chunk,
 *   Code,
 *   ConstructRecord,
 *   Construct,
 *   Effects,
 *   InitialConstruct,
 *   ParseContext,
 *   Point,
 *   State,
 *   TokenizeContext,
 *   Token
 * } from 'micromark-util-types'
 */ /**
 * @callback Restore
 *   Restore the state.
 * @returns {undefined}
 *   Nothing.
 *
 * @typedef Info
 *   Info.
 * @property {Restore} restore
 *   Restore.
 * @property {number} from
 *   From.
 *
 * @callback ReturnHandle
 *   Handle a successful run.
 * @param {Construct} construct
 *   Construct.
 * @param {Info} info
 *   Info.
 * @returns {undefined}
 *   Nothing.
 */ __turbopack_esm__({
    "createTokenizer": (()=>createTokenizer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/debug/src/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-chunked/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$resolve$2d$all$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-resolve-all/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/values.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const debug = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])('micromark');
function createTokenizer(parser, initialize, from) {
    /** @type {Point} */ let point = {
        _bufferIndex: -1,
        _index: 0,
        line: from && from.line || 1,
        column: from && from.column || 1,
        offset: from && from.offset || 0
    };
    /** @type {Record<string, number>} */ const columnStart = {};
    /** @type {Array<Construct>} */ const resolveAllConstructs = [];
    /** @type {Array<Chunk>} */ let chunks = [];
    /** @type {Array<Token>} */ let stack = [];
    /** @type {boolean | undefined} */ let consumed = true;
    /**
   * Tools used for tokenizing.
   *
   * @type {Effects}
   */ const effects = {
        attempt: constructFactory(onsuccessfulconstruct),
        check: constructFactory(onsuccessfulcheck),
        consume,
        enter,
        exit,
        interrupt: constructFactory(onsuccessfulcheck, {
            interrupt: true
        })
    };
    /**
   * State and tools for resolving and serializing.
   *
   * @type {TokenizeContext}
   */ const context = {
        code: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof,
        containerState: {},
        defineSkip,
        events: [],
        now,
        parser,
        previous: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof,
        sliceSerialize,
        sliceStream,
        write
    };
    /**
   * The state function.
   *
   * @type {State | undefined}
   */ let state = initialize.tokenize.call(context, effects);
    /**
   * Track which character we expect to be consumed, to catch bugs.
   *
   * @type {Code}
   */ let expectedCode;
    if (initialize.resolveAll) {
        resolveAllConstructs.push(initialize);
    }
    return context;
    "TURBOPACK unreachable";
    /** @type {TokenizeContext['write']} */ function write(slice) {
        chunks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["push"])(chunks, slice);
        main();
        // Exit if we’re not done, resolve might change stuff.
        if (chunks[chunks.length - 1] !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            return [];
        }
        addResult(initialize, 0);
        // Otherwise, resolve, and exit.
        context.events = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$resolve$2d$all$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["resolveAll"])(resolveAllConstructs, context.events, context);
        return context.events;
    }
    //
    // Tools.
    //
    /** @type {TokenizeContext['sliceSerialize']} */ function sliceSerialize(token, expandTabs) {
        return serializeChunks(sliceStream(token), expandTabs);
    }
    /** @type {TokenizeContext['sliceStream']} */ function sliceStream(token) {
        return sliceChunks(chunks, token);
    }
    /** @type {TokenizeContext['now']} */ function now() {
        // This is a hot path, so we clone manually instead of `Object.assign({}, point)`
        const { _bufferIndex, _index, line, column, offset } = point;
        return {
            _bufferIndex,
            _index,
            line,
            column,
            offset
        };
    }
    /** @type {TokenizeContext['defineSkip']} */ function defineSkip(value) {
        columnStart[value.line] = value.column;
        accountForPotentialSkip();
        debug('position: define skip: `%j`', point);
    }
    //
    // State management.
    //
    /**
   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
   * `consume`).
   * Here is where we walk through the chunks, which either include strings of
   * several characters, or numerical character codes.
   * The reason to do this in a loop instead of a call is so the stack can
   * drain.
   *
   * @returns {undefined}
   *   Nothing.
   */ function main() {
        /** @type {number} */ let chunkIndex;
        while(point._index < chunks.length){
            const chunk = chunks[point._index];
            // If we’re in a buffer chunk, loop through it.
            if (typeof chunk === 'string') {
                chunkIndex = point._index;
                if (point._bufferIndex < 0) {
                    point._bufferIndex = 0;
                }
                while(point._index === chunkIndex && point._bufferIndex < chunk.length){
                    go(chunk.charCodeAt(point._bufferIndex));
                }
            } else {
                go(chunk);
            }
        }
    }
    /**
   * Deal with one code.
   *
   * @param {Code} code
   *   Code.
   * @returns {undefined}
   *   Nothing.
   */ function go(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(consumed === true, 'expected character to be consumed');
        consumed = undefined;
        debug('main: passing `%s` to %s', code, state && state.name);
        expectedCode = code;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof state === 'function', 'expected state');
        state = state(code);
    }
    /** @type {Effects['consume']} */ function consume(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === expectedCode, 'expected given code to equal expected code');
        debug('consume: `%s`', code);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(consumed === undefined, 'expected code to not have been consumed: this might be because `return x(code)` instead of `return x` was used');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === null ? context.events.length === 0 || context.events[context.events.length - 1][0] === 'exit' : context.events[context.events.length - 1][0] === 'enter', 'expected last token to be open');
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            point.line++;
            point.column = 1;
            point.offset += code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].carriageReturnLineFeed ? 2 : 1;
            accountForPotentialSkip();
            debug('position: after eol: `%j`', point);
        } else if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].virtualSpace) {
            point.column++;
            point.offset++;
        }
        // Not in a string chunk.
        if (point._bufferIndex < 0) {
            point._index++;
        } else {
            point._bufferIndex++;
            // At end of string chunk.
            if (point._bufferIndex === // Points w/ non-negative `_bufferIndex` reference
            // strings.
            /** @type {string} */ chunks[point._index].length) {
                point._bufferIndex = -1;
                point._index++;
            }
        }
        // Expose the previous character.
        context.previous = code;
        // Mark as consumed.
        consumed = true;
    }
    /** @type {Effects['enter']} */ function enter(type, fields) {
        /** @type {Token} */ // @ts-expect-error Patch instead of assign required fields to help GC.
        const token = fields || {};
        token.type = type;
        token.start = now();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof type === 'string', 'expected string type');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(type.length > 0, 'expected non-empty string');
        debug('enter: `%s`', type);
        context.events.push([
            'enter',
            token,
            context
        ]);
        stack.push(token);
        return token;
    }
    /** @type {Effects['exit']} */ function exit(type) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof type === 'string', 'expected string type');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(type.length > 0, 'expected non-empty string');
        const token = stack.pop();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(token, 'cannot close w/o open tokens');
        token.end = now();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(type === token.type, 'expected exit token to match current token');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(!(token.start._index === token.end._index && token.start._bufferIndex === token.end._bufferIndex), 'expected non-empty token (`' + type + '`)');
        debug('exit: `%s`', token.type);
        context.events.push([
            'exit',
            token,
            context
        ]);
        return token;
    }
    /**
   * Use results.
   *
   * @type {ReturnHandle}
   */ function onsuccessfulconstruct(construct, info) {
        addResult(construct, info.from);
    }
    /**
   * Discard results.
   *
   * @type {ReturnHandle}
   */ function onsuccessfulcheck(_, info) {
        info.restore();
    }
    /**
   * Factory to attempt/check/interrupt.
   *
   * @param {ReturnHandle} onreturn
   *   Callback.
   * @param {{interrupt?: boolean | undefined} | undefined} [fields]
   *   Fields.
   */ function constructFactory(onreturn, fields) {
        return hook;
        "TURBOPACK unreachable";
        /**
     * Handle either an object mapping codes to constructs, a list of
     * constructs, or a single construct.
     *
     * @param {Array<Construct> | ConstructRecord | Construct} constructs
     *   Constructs.
     * @param {State} returnState
     *   State.
     * @param {State | undefined} [bogusState]
     *   State.
     * @returns {State}
     *   State.
     */ function hook(constructs, returnState, bogusState) {
            /** @type {ReadonlyArray<Construct>} */ let listOfConstructs;
            /** @type {number} */ let constructIndex;
            /** @type {Construct} */ let currentConstruct;
            /** @type {Info} */ let info;
            return Array.isArray(constructs) ? /* c8 ignore next 1 */ handleListOfConstructs(constructs) : 'tokenize' in constructs ? handleListOfConstructs([
                constructs
            ]) : handleMapOfConstructs(constructs);
            "TURBOPACK unreachable";
            /**
       * Handle a list of construct.
       *
       * @param {ConstructRecord} map
       *   Constructs.
       * @returns {State}
       *   State.
       */ function handleMapOfConstructs(map) {
                return start;
                "TURBOPACK unreachable";
                /** @type {State} */ function start(code) {
                    const left = code !== null && map[code];
                    const all = code !== null && map.null;
                    const list = [
                        // To do: add more extension tests.
                        /* c8 ignore next 2 */ ...Array.isArray(left) ? left : left ? [
                            left
                        ] : [],
                        ...Array.isArray(all) ? all : all ? [
                            all
                        ] : []
                    ];
                    return handleListOfConstructs(list)(code);
                }
            }
            /**
       * Handle a list of construct.
       *
       * @param {ReadonlyArray<Construct>} list
       *   Constructs.
       * @returns {State}
       *   State.
       */ function handleListOfConstructs(list) {
                listOfConstructs = list;
                constructIndex = 0;
                if (list.length === 0) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(bogusState, 'expected `bogusState` to be given');
                    return bogusState;
                }
                return handleConstruct(list[constructIndex]);
            }
            /**
       * Handle a single construct.
       *
       * @param {Construct} construct
       *   Construct.
       * @returns {State}
       *   State.
       */ function handleConstruct(construct) {
                return start;
                "TURBOPACK unreachable";
                /** @type {State} */ function start(code) {
                    // To do: not needed to store if there is no bogus state, probably?
                    // Currently doesn’t work because `inspect` in document does a check
                    // w/o a bogus, which doesn’t make sense. But it does seem to help perf
                    // by not storing.
                    info = store();
                    currentConstruct = construct;
                    if (!construct.partial) {
                        context.currentConstruct = construct;
                    }
                    // Always populated by defaults.
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(context.parser.constructs.disable.null, 'expected `disable.null` to be populated');
                    if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
                        return nok(code);
                    }
                    return construct.tokenize.call(// If we do have fields, create an object w/ `context` as its
                    // prototype.
                    // This allows a “live binding”, which is needed for `interrupt`.
                    fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);
                }
            }
            /** @type {State} */ function ok(code) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === expectedCode, 'expected code');
                consumed = true;
                onreturn(currentConstruct, info);
                return returnState;
            }
            /** @type {State} */ function nok(code) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === expectedCode, 'expected code');
                consumed = true;
                info.restore();
                if (++constructIndex < listOfConstructs.length) {
                    return handleConstruct(listOfConstructs[constructIndex]);
                }
                return bogusState;
            }
        }
    }
    /**
   * @param {Construct} construct
   *   Construct.
   * @param {number} from
   *   From.
   * @returns {undefined}
   *   Nothing.
   */ function addResult(construct, from) {
        if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
            resolveAllConstructs.push(construct);
        }
        if (construct.resolve) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["splice"])(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));
        }
        if (construct.resolveTo) {
            context.events = construct.resolveTo(context.events, context);
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(construct.partial || context.events.length === 0 || context.events[context.events.length - 1][0] === 'exit', 'expected last token to end');
    }
    /**
   * Store state.
   *
   * @returns {Info}
   *   Info.
   */ function store() {
        const startPoint = now();
        const startPrevious = context.previous;
        const startCurrentConstruct = context.currentConstruct;
        const startEventsIndex = context.events.length;
        const startStack = Array.from(stack);
        return {
            from: startEventsIndex,
            restore
        };
        "TURBOPACK unreachable";
        /**
     * Restore state.
     *
     * @returns {undefined}
     *   Nothing.
     */ function restore() {
            point = startPoint;
            context.previous = startPrevious;
            context.currentConstruct = startCurrentConstruct;
            context.events.length = startEventsIndex;
            stack = startStack;
            accountForPotentialSkip();
            debug('position: restore: `%j`', point);
        }
    }
    /**
   * Move the current point a bit forward in the line when it’s on a column
   * skip.
   *
   * @returns {undefined}
   *   Nothing.
   */ function accountForPotentialSkip() {
        if (point.line in columnStart && point.column < 2) {
            point.column = columnStart[point.line];
            point.offset += columnStart[point.line] - 1;
        }
    }
}
/**
 * Get the chunks from a slice of chunks in the range of a token.
 *
 * @param {ReadonlyArray<Chunk>} chunks
 *   Chunks.
 * @param {Pick<Token, 'end' | 'start'>} token
 *   Token.
 * @returns {Array<Chunk>}
 *   Chunks.
 */ function sliceChunks(chunks, token) {
    const startIndex = token.start._index;
    const startBufferIndex = token.start._bufferIndex;
    const endIndex = token.end._index;
    const endBufferIndex = token.end._bufferIndex;
    /** @type {Array<Chunk>} */ let view;
    if (startIndex === endIndex) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(endBufferIndex > -1, 'expected non-negative end buffer index');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(startBufferIndex > -1, 'expected non-negative start buffer index');
        // @ts-expect-error `_bufferIndex` is used on string chunks.
        view = [
            chunks[startIndex].slice(startBufferIndex, endBufferIndex)
        ];
    } else {
        view = chunks.slice(startIndex, endIndex);
        if (startBufferIndex > -1) {
            const head = view[0];
            if (typeof head === 'string') {
                view[0] = head.slice(startBufferIndex);
            } else {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(startBufferIndex === 0, 'expected `startBufferIndex` to be `0`');
                view.shift();
            }
        }
        if (endBufferIndex > 0) {
            // @ts-expect-error `_bufferIndex` is used on string chunks.
            view.push(chunks[endIndex].slice(0, endBufferIndex));
        }
    }
    return view;
}
/**
 * Get the string value of a slice of chunks.
 *
 * @param {ReadonlyArray<Chunk>} chunks
 *   Chunks.
 * @param {boolean | undefined} [expandTabs=false]
 *   Whether to expand tabs (default: `false`).
 * @returns {string}
 *   Result.
 */ function serializeChunks(chunks, expandTabs) {
    let index = -1;
    /** @type {Array<string>} */ const result = [];
    /** @type {boolean | undefined} */ let atTab;
    while(++index < chunks.length){
        const chunk = chunks[index];
        /** @type {string} */ let value;
        if (typeof chunk === 'string') {
            value = chunk;
        } else switch(chunk){
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].carriageReturn:
                {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].cr;
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lineFeed:
                {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].lf;
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].carriageReturnLineFeed:
                {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].cr + __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].lf;
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab:
                {
                    value = expandTabs ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].space : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].ht;
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].virtualSpace:
                {
                    if (!expandTabs && atTab) continue;
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].space;
                    break;
                }
            default:
                {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof chunk === 'number', 'expected number');
                    // Currently only replacement character.
                    value = String.fromCharCode(chunk);
                }
        }
        atTab = chunk === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab;
        result.push(value);
    }
    return result.join('');
}
}}),
"[project]/apps/website/docs/node_modules/micromark/dev/lib/parse.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   Create,
 *   FullNormalizedExtension,
 *   InitialConstruct,
 *   ParseContext,
 *   ParseOptions
 * } from 'micromark-util-types'
 */ __turbopack_esm__({
    "parse": (()=>parse)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$combine$2d$extensions$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-combine-extensions/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$constructs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark/dev/lib/constructs.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$initialize$2f$content$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark/dev/lib/initialize/content.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$initialize$2f$document$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark/dev/lib/initialize/document.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$initialize$2f$flow$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark/dev/lib/initialize/flow.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$initialize$2f$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark/dev/lib/initialize/text.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$create$2d$tokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark/dev/lib/create-tokenizer.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
function parse(options) {
    const settings = options || {};
    const constructs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$combine$2d$extensions$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["combineExtensions"])([
        __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$constructs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__,
        ...settings.extensions || []
    ]);
    /** @type {ParseContext} */ const parser = {
        constructs,
        content: create(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$initialize$2f$content$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["content"]),
        defined: [],
        document: create(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$initialize$2f$document$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["document"]),
        flow: create(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$initialize$2f$flow$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["flow"]),
        lazy: {},
        string: create(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$initialize$2f$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["string"]),
        text: create(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$initialize$2f$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["text"])
    };
    return parser;
    "TURBOPACK unreachable";
    /**
   * @param {InitialConstruct} initial
   *   Construct to start with.
   * @returns {Create}
   *   Create a tokenizer.
   */ function create(initial) {
        return creator;
        "TURBOPACK unreachable";
        /** @type {Create} */ function creator(from) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$create$2d$tokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createTokenizer"])(parser, initial, from);
        }
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark/dev/lib/preprocess.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'
 */ /**
 * @callback Preprocessor
 *   Preprocess a value.
 * @param {Value} value
 *   Value.
 * @param {Encoding | null | undefined} [encoding]
 *   Encoding when `value` is a typed array (optional).
 * @param {boolean | null | undefined} [end=false]
 *   Whether this is the last chunk (default: `false`).
 * @returns {Array<Chunk>}
 *   Chunks.
 */ __turbopack_esm__({
    "preprocess": (()=>preprocess)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
;
const search = /[\0\t\n\r]/g;
function preprocess() {
    let column = 1;
    let buffer = '';
    /** @type {boolean | undefined} */ let start = true;
    /** @type {boolean | undefined} */ let atCarriageReturn;
    return preprocessor;
    "TURBOPACK unreachable";
    /** @type {Preprocessor} */ // eslint-disable-next-line complexity
    function preprocessor(value, encoding, end) {
        /** @type {Array<Chunk>} */ const chunks = [];
        /** @type {RegExpMatchArray | null} */ let match;
        /** @type {number} */ let next;
        /** @type {number} */ let startPosition;
        /** @type {number} */ let endPosition;
        /** @type {Code} */ let code;
        value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));
        startPosition = 0;
        buffer = '';
        if (start) {
            // To do: `markdown-rs` actually parses BOMs (byte order mark).
            if (value.charCodeAt(0) === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].byteOrderMarker) {
                startPosition++;
            }
            start = undefined;
        }
        while(startPosition < value.length){
            search.lastIndex = startPosition;
            match = search.exec(value);
            endPosition = match && match.index !== undefined ? match.index : value.length;
            code = value.charCodeAt(endPosition);
            if (!match) {
                buffer = value.slice(startPosition);
                break;
            }
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lf && startPosition === endPosition && atCarriageReturn) {
                chunks.push(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].carriageReturnLineFeed);
                atCarriageReturn = undefined;
            } else {
                if (atCarriageReturn) {
                    chunks.push(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].carriageReturn);
                    atCarriageReturn = undefined;
                }
                if (startPosition < endPosition) {
                    chunks.push(value.slice(startPosition, endPosition));
                    column += endPosition - startPosition;
                }
                switch(code){
                    case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].nul:
                        {
                            chunks.push(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].replacementCharacter);
                            column++;
                            break;
                        }
                    case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].ht:
                        {
                            next = Math.ceil(column / __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].tabSize) * __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].tabSize;
                            chunks.push(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab);
                            while(column++ < next)chunks.push(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].virtualSpace);
                            break;
                        }
                    case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lf:
                        {
                            chunks.push(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lineFeed);
                            column = 1;
                            break;
                        }
                    default:
                        {
                            atCarriageReturn = true;
                            column = 1;
                        }
                }
            }
            startPosition = endPosition + 1;
        }
        if (end) {
            if (atCarriageReturn) chunks.push(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].carriageReturn);
            if (buffer) chunks.push(buffer);
            chunks.push(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof);
        }
        return chunks;
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-util-combine-extensions/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   Extension,
 *   Handles,
 *   HtmlExtension,
 *   NormalizedExtension
 * } from 'micromark-util-types'
 */ __turbopack_esm__({
    "combineExtensions": (()=>combineExtensions),
    "combineHtmlExtensions": (()=>combineHtmlExtensions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-chunked/dev/index.js [app-rsc] (ecmascript)");
;
const hasOwnProperty = {}.hasOwnProperty;
function combineExtensions(extensions) {
    /** @type {NormalizedExtension} */ const all = {};
    let index = -1;
    while(++index < extensions.length){
        syntaxExtension(all, extensions[index]);
    }
    return all;
}
/**
 * Merge `extension` into `all`.
 *
 * @param {NormalizedExtension} all
 *   Extension to merge into.
 * @param {Extension} extension
 *   Extension to merge.
 * @returns {undefined}
 *   Nothing.
 */ function syntaxExtension(all, extension) {
    /** @type {keyof Extension} */ let hook;
    for(hook in extension){
        const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;
        /** @type {Record<string, unknown>} */ const left = maybe || (all[hook] = {});
        /** @type {Record<string, unknown> | undefined} */ const right = extension[hook];
        /** @type {string} */ let code;
        if (right) {
            for(code in right){
                if (!hasOwnProperty.call(left, code)) left[code] = [];
                const value = right[code];
                constructs(// @ts-expect-error Looks like a list.
                left[code], Array.isArray(value) ? value : value ? [
                    value
                ] : []);
            }
        }
    }
}
/**
 * Merge `list` into `existing` (both lists of constructs).
 * Mutates `existing`.
 *
 * @param {Array<unknown>} existing
 *   List of constructs to merge into.
 * @param {Array<unknown>} list
 *   List of constructs to merge.
 * @returns {undefined}
 *   Nothing.
 */ function constructs(existing, list) {
    let index = -1;
    /** @type {Array<unknown>} */ const before = [];
    while(++index < list.length){
        // @ts-expect-error Looks like an object.
        ;
        (list[index].add === 'after' ? existing : before).push(list[index]);
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["splice"])(existing, 0, 0, before);
}
function combineHtmlExtensions(htmlExtensions) {
    /** @type {HtmlExtension} */ const handlers = {};
    let index = -1;
    while(++index < htmlExtensions.length){
        htmlExtension(handlers, htmlExtensions[index]);
    }
    return handlers;
}
/**
 * Merge `extension` into `all`.
 *
 * @param {HtmlExtension} all
 *   Extension to merge into.
 * @param {HtmlExtension} extension
 *   Extension to merge.
 * @returns {undefined}
 *   Nothing.
 */ function htmlExtension(all, extension) {
    /** @type {keyof HtmlExtension} */ let hook;
    for(hook in extension){
        const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;
        const left = maybe || (all[hook] = {});
        const right = extension[hook];
        /** @type {keyof Handles} */ let type;
        if (right) {
            for(type in right){
                // @ts-expect-error assume document vs regular handler are managed correctly.
                left[type] = right[type];
            }
        }
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Code} from 'micromark-util-types'
 */ __turbopack_esm__({
    "asciiAlpha": (()=>asciiAlpha),
    "asciiAlphanumeric": (()=>asciiAlphanumeric),
    "asciiAtext": (()=>asciiAtext),
    "asciiControl": (()=>asciiControl),
    "asciiDigit": (()=>asciiDigit),
    "asciiHexDigit": (()=>asciiHexDigit),
    "asciiPunctuation": (()=>asciiPunctuation),
    "markdownLineEnding": (()=>markdownLineEnding),
    "markdownLineEndingOrSpace": (()=>markdownLineEndingOrSpace),
    "markdownSpace": (()=>markdownSpace),
    "unicodePunctuation": (()=>unicodePunctuation),
    "unicodeWhitespace": (()=>unicodeWhitespace)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
;
const asciiAlpha = regexCheck(/[A-Za-z]/);
const asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
const asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
function asciiControl(code) {
    return(// Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code !== null && (code < __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].space || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].del));
}
const asciiDigit = regexCheck(/\d/);
const asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
function markdownLineEnding(code) {
    return code !== null && code < __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab;
}
function markdownLineEndingOrSpace(code) {
    return code !== null && (code < __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].nul || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].space);
}
function markdownSpace(code) {
    return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].virtualSpace || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].space;
}
const unicodePunctuation = regexCheck(/\p{P}|\p{S}/u);
const unicodeWhitespace = regexCheck(/\s/);
/**
 * Create a code check from a regex.
 *
 * @param {RegExp} regex
 *   Expression.
 * @returns {(code: Code) => boolean}
 *   Check.
 */ function regexCheck(regex) {
    return check;
    "TURBOPACK unreachable";
    /**
   * Check whether a code matches the bound regex.
   *
   * @param {Code} code
   *   Character code.
   * @returns {boolean}
   *   Whether the character code matches the bound regex.
   */ function check(code) {
        return code !== null && code > -1 && regex.test(String.fromCharCode(code));
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-factory-space/dev/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Effects, State, TokenType} from 'micromark-util-types'
 */ __turbopack_esm__({
    "factorySpace": (()=>factorySpace)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
;
function factorySpace(effects, ok, type, max) {
    const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
    let size = 0;
    return start;
    "TURBOPACK unreachable";
    /** @type {State} */ function start(code) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code)) {
            effects.enter(type);
            return prefix(code);
        }
        return ok(code);
    }
    /** @type {State} */ function prefix(code) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code) && size++ < limit) {
            effects.consume(code);
            return prefix;
        }
        effects.exit(type);
        return ok(code);
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-factory-label/dev/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   Effects,
 *   State,
 *   TokenizeContext,
 *   TokenType
 * } from 'micromark-util-types'
 */ __turbopack_esm__({
    "factoryLabel": (()=>factoryLabel)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
;
;
;
function factoryLabel(effects, ok, nok, type, markerType, stringType) {
    const self = this;
    let size = 0;
    /** @type {boolean} */ let seen;
    return start;
    "TURBOPACK unreachable";
    /**
   * Start of label.
   *
   * ```markdown
   * > | [a]
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket, 'expected `[`');
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        effects.enter(stringType);
        return atBreak;
    }
    /**
   * In label, at something, before something else.
   *
   * ```markdown
   * > | [a]
   *      ^
   * ```
   *
   * @type {State}
   */ function atBreak(code) {
        if (size > __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].linkReferenceSizeMax || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket && !seen || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].caret && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {
            return nok(code);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket) {
            effects.exit(stringType);
            effects.enter(markerType);
            effects.consume(code);
            effects.exit(markerType);
            effects.exit(type);
            return ok;
        }
        // To do: indent? Link chunks and EOLs together?
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return atBreak;
        }
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkString, {
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeString
        });
        return labelInside(code);
    }
    /**
   * In label, in text.
   *
   * ```markdown
   * > | [a]
   *      ^
   * ```
   *
   * @type {State}
   */ function labelInside(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code) || size++ > __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].linkReferenceSizeMax) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkString);
            return atBreak(code);
        }
        effects.consume(code);
        if (!seen) seen = !(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? labelEscape : labelInside;
    }
    /**
   * After `\`, at a special character.
   *
   * ```markdown
   * > | [a\*a]
   *        ^
   * ```
   *
   * @type {State}
   */ function labelEscape(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket) {
            effects.consume(code);
            size++;
            return labelInside;
        }
        return labelInside(code);
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-util-normalize-identifier/dev/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "normalizeIdentifier": (()=>normalizeIdentifier)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/values.js [app-rsc] (ecmascript)");
;
function normalizeIdentifier(value) {
    return value// Collapse markdown whitespace.
    .replace(/[\t\n\r ]+/g, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].space)// Trim.
    .replace(/^ | $/g, '')// Some characters are considered “uppercase”, but if their lowercase
    // counterpart is uppercased will result in a different uppercase
    // character.
    // Hence, to get that form, we perform both lower- and uppercase.
    // Upper case makes sure keys will not interact with default prototypal
    // methods: no method is uppercase.
    .toLowerCase().toUpperCase();
}
}}),
"[project]/apps/website/docs/node_modules/micromark-factory-whitespace/dev/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Effects, State} from 'micromark-util-types'
 */ __turbopack_esm__({
    "factoryWhitespace": (()=>factoryWhitespace)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-factory-space/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
;
;
;
function factoryWhitespace(effects, ok) {
    /** @type {boolean} */ let seen;
    return start;
    "TURBOPACK unreachable";
    /** @type {State} */ function start(code) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            seen = true;
            return start;
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code)) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, start, seen ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineSuffix)(code);
        }
        return ok(code);
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-factory-destination/dev/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Effects, State, TokenType} from 'micromark-util-types'
 */ __turbopack_esm__({
    "factoryDestination": (()=>factoryDestination)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
;
;
function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
    const limit = max || Number.POSITIVE_INFINITY;
    let balance = 0;
    return start;
    "TURBOPACK unreachable";
    /**
   * Start of destination.
   *
   * ```markdown
   * > | <aa>
   *     ^
   * > | aa
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan) {
            effects.enter(type);
            effects.enter(literalType);
            effects.enter(literalMarkerType);
            effects.consume(code);
            effects.exit(literalMarkerType);
            return enclosedBefore;
        }
        // ASCII control, space, closing paren.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].space || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["asciiControl"])(code)) {
            return nok(code);
        }
        effects.enter(type);
        effects.enter(rawType);
        effects.enter(stringType);
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkString, {
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeString
        });
        return raw(code);
    }
    /**
   * After `<`, at an enclosed destination.
   *
   * ```markdown
   * > | <aa>
   *      ^
   * ```
   *
   * @type {State}
   */ function enclosedBefore(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            effects.enter(literalMarkerType);
            effects.consume(code);
            effects.exit(literalMarkerType);
            effects.exit(literalType);
            effects.exit(type);
            return ok;
        }
        effects.enter(stringType);
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkString, {
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeString
        });
        return enclosed(code);
    }
    /**
   * In enclosed destination.
   *
   * ```markdown
   * > | <aa>
   *      ^
   * ```
   *
   * @type {State}
   */ function enclosed(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkString);
            effects.exit(stringType);
            return enclosedBefore(code);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            return nok(code);
        }
        effects.consume(code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? enclosedEscape : enclosed;
    }
    /**
   * After `\`, at a special character.
   *
   * ```markdown
   * > | <a\*a>
   *        ^
   * ```
   *
   * @type {State}
   */ function enclosedEscape(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash) {
            effects.consume(code);
            return enclosed;
        }
        return enclosed(code);
    }
    /**
   * In raw destination.
   *
   * ```markdown
   * > | aa
   *     ^
   * ```
   *
   * @type {State}
   */ function raw(code) {
        if (!balance && (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code))) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkString);
            effects.exit(stringType);
            effects.exit(rawType);
            effects.exit(type);
            return ok(code);
        }
        if (balance < limit && code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis) {
            effects.consume(code);
            balance++;
            return raw;
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis) {
            effects.consume(code);
            balance--;
            return raw;
        }
        // ASCII control (but *not* `\0`) and space and `(`.
        // Note: in `markdown-rs`, `\0` exists in codes, in `micromark-js` it
        // doesn’t.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].space || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["asciiControl"])(code)) {
            return nok(code);
        }
        effects.consume(code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? rawEscape : raw;
    }
    /**
   * After `\`, at special character.
   *
   * ```markdown
   * > | a\*a
   *       ^
   * ```
   *
   * @type {State}
   */ function rawEscape(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash) {
            effects.consume(code);
            return raw;
        }
        return raw(code);
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-factory-title/dev/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   Code,
 *   Effects,
 *   State,
 *   TokenType
 * } from 'micromark-util-types'
 */ __turbopack_esm__({
    "factoryTitle": (()=>factoryTitle)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-factory-space/dev/index.js [app-rsc] (ecmascript)");
;
;
;
function factoryTitle(effects, ok, nok, type, markerType, stringType) {
    /** @type {NonNullable<Code>} */ let marker;
    return start;
    "TURBOPACK unreachable";
    /**
   * Start of title.
   *
   * ```markdown
   * > | "a"
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].quotationMark || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].apostrophe || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis) {
            effects.enter(type);
            effects.enter(markerType);
            effects.consume(code);
            effects.exit(markerType);
            marker = code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis : code;
            return begin;
        }
        return nok(code);
    }
    /**
   * After opening marker.
   *
   * This is also used at the closing marker.
   *
   * ```markdown
   * > | "a"
   *      ^
   * ```
   *
   * @type {State}
   */ function begin(code) {
        if (code === marker) {
            effects.enter(markerType);
            effects.consume(code);
            effects.exit(markerType);
            effects.exit(type);
            return ok;
        }
        effects.enter(stringType);
        return atBreak(code);
    }
    /**
   * At something, before something else.
   *
   * ```markdown
   * > | "a"
   *      ^
   * ```
   *
   * @type {State}
   */ function atBreak(code) {
        if (code === marker) {
            effects.exit(stringType);
            return begin(marker);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            return nok(code);
        }
        // Note: blank lines can’t exist in content.
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            // To do: use `space_or_tab_eol_with_options`, connect.
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, atBreak, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix);
        }
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkString, {
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeString
        });
        return inside(code);
    }
    /**
   *
   *
   * @type {State}
   */ function inside(code) {
        if (code === marker || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkString);
            return atBreak(code);
        }
        effects.consume(code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? escape : inside;
    }
    /**
   * After `\`, at a special character.
   *
   * ```markdown
   * > | "a\*b"
   *      ^
   * ```
   *
   * @type {State}
   */ function escape(code) {
        if (code === marker || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash) {
            effects.consume(code);
            return inside;
        }
        return inside(code);
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-util-html-tag-name/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * List of lowercase HTML “block” tag names.
 *
 * The list, when parsing HTML (flow), results in more relaxed rules (condition
 * 6).
 * Because they are known blocks, the HTML-like syntax doesn’t have to be
 * strictly parsed.
 * For tag names not in this list, a more strict algorithm (condition 7) is used
 * to detect whether the HTML-like syntax is seen as HTML (flow) or not.
 *
 * This is copied from:
 * <https://spec.commonmark.org/0.30/#html-blocks>.
 *
 * > 👉 **Note**: `search` was added in `CommonMark@0.31`.
 */ __turbopack_esm__({
    "htmlBlockNames": (()=>htmlBlockNames),
    "htmlRawNames": (()=>htmlRawNames)
});
const htmlBlockNames = [
    'address',
    'article',
    'aside',
    'base',
    'basefont',
    'blockquote',
    'body',
    'caption',
    'center',
    'col',
    'colgroup',
    'dd',
    'details',
    'dialog',
    'dir',
    'div',
    'dl',
    'dt',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'frame',
    'frameset',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'head',
    'header',
    'hr',
    'html',
    'iframe',
    'legend',
    'li',
    'link',
    'main',
    'menu',
    'menuitem',
    'nav',
    'noframes',
    'ol',
    'optgroup',
    'option',
    'p',
    'param',
    'search',
    'section',
    'summary',
    'table',
    'tbody',
    'td',
    'tfoot',
    'th',
    'thead',
    'title',
    'tr',
    'track',
    'ul'
];
const htmlRawNames = [
    'pre',
    'script',
    'style',
    'textarea'
];
}}),
"[project]/apps/website/docs/node_modules/character-entities/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Map of named character references.
 *
 * @type {Record<string, string>}
 */ __turbopack_esm__({
    "characterEntities": (()=>characterEntities)
});
const characterEntities = {
    AElig: 'Æ',
    AMP: '&',
    Aacute: 'Á',
    Abreve: 'Ă',
    Acirc: 'Â',
    Acy: 'А',
    Afr: '𝔄',
    Agrave: 'À',
    Alpha: 'Α',
    Amacr: 'Ā',
    And: '⩓',
    Aogon: 'Ą',
    Aopf: '𝔸',
    ApplyFunction: '⁡',
    Aring: 'Å',
    Ascr: '𝒜',
    Assign: '≔',
    Atilde: 'Ã',
    Auml: 'Ä',
    Backslash: '∖',
    Barv: '⫧',
    Barwed: '⌆',
    Bcy: 'Б',
    Because: '∵',
    Bernoullis: 'ℬ',
    Beta: 'Β',
    Bfr: '𝔅',
    Bopf: '𝔹',
    Breve: '˘',
    Bscr: 'ℬ',
    Bumpeq: '≎',
    CHcy: 'Ч',
    COPY: '©',
    Cacute: 'Ć',
    Cap: '⋒',
    CapitalDifferentialD: 'ⅅ',
    Cayleys: 'ℭ',
    Ccaron: 'Č',
    Ccedil: 'Ç',
    Ccirc: 'Ĉ',
    Cconint: '∰',
    Cdot: 'Ċ',
    Cedilla: '¸',
    CenterDot: '·',
    Cfr: 'ℭ',
    Chi: 'Χ',
    CircleDot: '⊙',
    CircleMinus: '⊖',
    CirclePlus: '⊕',
    CircleTimes: '⊗',
    ClockwiseContourIntegral: '∲',
    CloseCurlyDoubleQuote: '”',
    CloseCurlyQuote: '’',
    Colon: '∷',
    Colone: '⩴',
    Congruent: '≡',
    Conint: '∯',
    ContourIntegral: '∮',
    Copf: 'ℂ',
    Coproduct: '∐',
    CounterClockwiseContourIntegral: '∳',
    Cross: '⨯',
    Cscr: '𝒞',
    Cup: '⋓',
    CupCap: '≍',
    DD: 'ⅅ',
    DDotrahd: '⤑',
    DJcy: 'Ђ',
    DScy: 'Ѕ',
    DZcy: 'Џ',
    Dagger: '‡',
    Darr: '↡',
    Dashv: '⫤',
    Dcaron: 'Ď',
    Dcy: 'Д',
    Del: '∇',
    Delta: 'Δ',
    Dfr: '𝔇',
    DiacriticalAcute: '´',
    DiacriticalDot: '˙',
    DiacriticalDoubleAcute: '˝',
    DiacriticalGrave: '`',
    DiacriticalTilde: '˜',
    Diamond: '⋄',
    DifferentialD: 'ⅆ',
    Dopf: '𝔻',
    Dot: '¨',
    DotDot: '⃜',
    DotEqual: '≐',
    DoubleContourIntegral: '∯',
    DoubleDot: '¨',
    DoubleDownArrow: '⇓',
    DoubleLeftArrow: '⇐',
    DoubleLeftRightArrow: '⇔',
    DoubleLeftTee: '⫤',
    DoubleLongLeftArrow: '⟸',
    DoubleLongLeftRightArrow: '⟺',
    DoubleLongRightArrow: '⟹',
    DoubleRightArrow: '⇒',
    DoubleRightTee: '⊨',
    DoubleUpArrow: '⇑',
    DoubleUpDownArrow: '⇕',
    DoubleVerticalBar: '∥',
    DownArrow: '↓',
    DownArrowBar: '⤓',
    DownArrowUpArrow: '⇵',
    DownBreve: '̑',
    DownLeftRightVector: '⥐',
    DownLeftTeeVector: '⥞',
    DownLeftVector: '↽',
    DownLeftVectorBar: '⥖',
    DownRightTeeVector: '⥟',
    DownRightVector: '⇁',
    DownRightVectorBar: '⥗',
    DownTee: '⊤',
    DownTeeArrow: '↧',
    Downarrow: '⇓',
    Dscr: '𝒟',
    Dstrok: 'Đ',
    ENG: 'Ŋ',
    ETH: 'Ð',
    Eacute: 'É',
    Ecaron: 'Ě',
    Ecirc: 'Ê',
    Ecy: 'Э',
    Edot: 'Ė',
    Efr: '𝔈',
    Egrave: 'È',
    Element: '∈',
    Emacr: 'Ē',
    EmptySmallSquare: '◻',
    EmptyVerySmallSquare: '▫',
    Eogon: 'Ę',
    Eopf: '𝔼',
    Epsilon: 'Ε',
    Equal: '⩵',
    EqualTilde: '≂',
    Equilibrium: '⇌',
    Escr: 'ℰ',
    Esim: '⩳',
    Eta: 'Η',
    Euml: 'Ë',
    Exists: '∃',
    ExponentialE: 'ⅇ',
    Fcy: 'Ф',
    Ffr: '𝔉',
    FilledSmallSquare: '◼',
    FilledVerySmallSquare: '▪',
    Fopf: '𝔽',
    ForAll: '∀',
    Fouriertrf: 'ℱ',
    Fscr: 'ℱ',
    GJcy: 'Ѓ',
    GT: '>',
    Gamma: 'Γ',
    Gammad: 'Ϝ',
    Gbreve: 'Ğ',
    Gcedil: 'Ģ',
    Gcirc: 'Ĝ',
    Gcy: 'Г',
    Gdot: 'Ġ',
    Gfr: '𝔊',
    Gg: '⋙',
    Gopf: '𝔾',
    GreaterEqual: '≥',
    GreaterEqualLess: '⋛',
    GreaterFullEqual: '≧',
    GreaterGreater: '⪢',
    GreaterLess: '≷',
    GreaterSlantEqual: '⩾',
    GreaterTilde: '≳',
    Gscr: '𝒢',
    Gt: '≫',
    HARDcy: 'Ъ',
    Hacek: 'ˇ',
    Hat: '^',
    Hcirc: 'Ĥ',
    Hfr: 'ℌ',
    HilbertSpace: 'ℋ',
    Hopf: 'ℍ',
    HorizontalLine: '─',
    Hscr: 'ℋ',
    Hstrok: 'Ħ',
    HumpDownHump: '≎',
    HumpEqual: '≏',
    IEcy: 'Е',
    IJlig: 'Ĳ',
    IOcy: 'Ё',
    Iacute: 'Í',
    Icirc: 'Î',
    Icy: 'И',
    Idot: 'İ',
    Ifr: 'ℑ',
    Igrave: 'Ì',
    Im: 'ℑ',
    Imacr: 'Ī',
    ImaginaryI: 'ⅈ',
    Implies: '⇒',
    Int: '∬',
    Integral: '∫',
    Intersection: '⋂',
    InvisibleComma: '⁣',
    InvisibleTimes: '⁢',
    Iogon: 'Į',
    Iopf: '𝕀',
    Iota: 'Ι',
    Iscr: 'ℐ',
    Itilde: 'Ĩ',
    Iukcy: 'І',
    Iuml: 'Ï',
    Jcirc: 'Ĵ',
    Jcy: 'Й',
    Jfr: '𝔍',
    Jopf: '𝕁',
    Jscr: '𝒥',
    Jsercy: 'Ј',
    Jukcy: 'Є',
    KHcy: 'Х',
    KJcy: 'Ќ',
    Kappa: 'Κ',
    Kcedil: 'Ķ',
    Kcy: 'К',
    Kfr: '𝔎',
    Kopf: '𝕂',
    Kscr: '𝒦',
    LJcy: 'Љ',
    LT: '<',
    Lacute: 'Ĺ',
    Lambda: 'Λ',
    Lang: '⟪',
    Laplacetrf: 'ℒ',
    Larr: '↞',
    Lcaron: 'Ľ',
    Lcedil: 'Ļ',
    Lcy: 'Л',
    LeftAngleBracket: '⟨',
    LeftArrow: '←',
    LeftArrowBar: '⇤',
    LeftArrowRightArrow: '⇆',
    LeftCeiling: '⌈',
    LeftDoubleBracket: '⟦',
    LeftDownTeeVector: '⥡',
    LeftDownVector: '⇃',
    LeftDownVectorBar: '⥙',
    LeftFloor: '⌊',
    LeftRightArrow: '↔',
    LeftRightVector: '⥎',
    LeftTee: '⊣',
    LeftTeeArrow: '↤',
    LeftTeeVector: '⥚',
    LeftTriangle: '⊲',
    LeftTriangleBar: '⧏',
    LeftTriangleEqual: '⊴',
    LeftUpDownVector: '⥑',
    LeftUpTeeVector: '⥠',
    LeftUpVector: '↿',
    LeftUpVectorBar: '⥘',
    LeftVector: '↼',
    LeftVectorBar: '⥒',
    Leftarrow: '⇐',
    Leftrightarrow: '⇔',
    LessEqualGreater: '⋚',
    LessFullEqual: '≦',
    LessGreater: '≶',
    LessLess: '⪡',
    LessSlantEqual: '⩽',
    LessTilde: '≲',
    Lfr: '𝔏',
    Ll: '⋘',
    Lleftarrow: '⇚',
    Lmidot: 'Ŀ',
    LongLeftArrow: '⟵',
    LongLeftRightArrow: '⟷',
    LongRightArrow: '⟶',
    Longleftarrow: '⟸',
    Longleftrightarrow: '⟺',
    Longrightarrow: '⟹',
    Lopf: '𝕃',
    LowerLeftArrow: '↙',
    LowerRightArrow: '↘',
    Lscr: 'ℒ',
    Lsh: '↰',
    Lstrok: 'Ł',
    Lt: '≪',
    Map: '⤅',
    Mcy: 'М',
    MediumSpace: ' ',
    Mellintrf: 'ℳ',
    Mfr: '𝔐',
    MinusPlus: '∓',
    Mopf: '𝕄',
    Mscr: 'ℳ',
    Mu: 'Μ',
    NJcy: 'Њ',
    Nacute: 'Ń',
    Ncaron: 'Ň',
    Ncedil: 'Ņ',
    Ncy: 'Н',
    NegativeMediumSpace: '​',
    NegativeThickSpace: '​',
    NegativeThinSpace: '​',
    NegativeVeryThinSpace: '​',
    NestedGreaterGreater: '≫',
    NestedLessLess: '≪',
    NewLine: '\n',
    Nfr: '𝔑',
    NoBreak: '⁠',
    NonBreakingSpace: ' ',
    Nopf: 'ℕ',
    Not: '⫬',
    NotCongruent: '≢',
    NotCupCap: '≭',
    NotDoubleVerticalBar: '∦',
    NotElement: '∉',
    NotEqual: '≠',
    NotEqualTilde: '≂̸',
    NotExists: '∄',
    NotGreater: '≯',
    NotGreaterEqual: '≱',
    NotGreaterFullEqual: '≧̸',
    NotGreaterGreater: '≫̸',
    NotGreaterLess: '≹',
    NotGreaterSlantEqual: '⩾̸',
    NotGreaterTilde: '≵',
    NotHumpDownHump: '≎̸',
    NotHumpEqual: '≏̸',
    NotLeftTriangle: '⋪',
    NotLeftTriangleBar: '⧏̸',
    NotLeftTriangleEqual: '⋬',
    NotLess: '≮',
    NotLessEqual: '≰',
    NotLessGreater: '≸',
    NotLessLess: '≪̸',
    NotLessSlantEqual: '⩽̸',
    NotLessTilde: '≴',
    NotNestedGreaterGreater: '⪢̸',
    NotNestedLessLess: '⪡̸',
    NotPrecedes: '⊀',
    NotPrecedesEqual: '⪯̸',
    NotPrecedesSlantEqual: '⋠',
    NotReverseElement: '∌',
    NotRightTriangle: '⋫',
    NotRightTriangleBar: '⧐̸',
    NotRightTriangleEqual: '⋭',
    NotSquareSubset: '⊏̸',
    NotSquareSubsetEqual: '⋢',
    NotSquareSuperset: '⊐̸',
    NotSquareSupersetEqual: '⋣',
    NotSubset: '⊂⃒',
    NotSubsetEqual: '⊈',
    NotSucceeds: '⊁',
    NotSucceedsEqual: '⪰̸',
    NotSucceedsSlantEqual: '⋡',
    NotSucceedsTilde: '≿̸',
    NotSuperset: '⊃⃒',
    NotSupersetEqual: '⊉',
    NotTilde: '≁',
    NotTildeEqual: '≄',
    NotTildeFullEqual: '≇',
    NotTildeTilde: '≉',
    NotVerticalBar: '∤',
    Nscr: '𝒩',
    Ntilde: 'Ñ',
    Nu: 'Ν',
    OElig: 'Œ',
    Oacute: 'Ó',
    Ocirc: 'Ô',
    Ocy: 'О',
    Odblac: 'Ő',
    Ofr: '𝔒',
    Ograve: 'Ò',
    Omacr: 'Ō',
    Omega: 'Ω',
    Omicron: 'Ο',
    Oopf: '𝕆',
    OpenCurlyDoubleQuote: '“',
    OpenCurlyQuote: '‘',
    Or: '⩔',
    Oscr: '𝒪',
    Oslash: 'Ø',
    Otilde: 'Õ',
    Otimes: '⨷',
    Ouml: 'Ö',
    OverBar: '‾',
    OverBrace: '⏞',
    OverBracket: '⎴',
    OverParenthesis: '⏜',
    PartialD: '∂',
    Pcy: 'П',
    Pfr: '𝔓',
    Phi: 'Φ',
    Pi: 'Π',
    PlusMinus: '±',
    Poincareplane: 'ℌ',
    Popf: 'ℙ',
    Pr: '⪻',
    Precedes: '≺',
    PrecedesEqual: '⪯',
    PrecedesSlantEqual: '≼',
    PrecedesTilde: '≾',
    Prime: '″',
    Product: '∏',
    Proportion: '∷',
    Proportional: '∝',
    Pscr: '𝒫',
    Psi: 'Ψ',
    QUOT: '"',
    Qfr: '𝔔',
    Qopf: 'ℚ',
    Qscr: '𝒬',
    RBarr: '⤐',
    REG: '®',
    Racute: 'Ŕ',
    Rang: '⟫',
    Rarr: '↠',
    Rarrtl: '⤖',
    Rcaron: 'Ř',
    Rcedil: 'Ŗ',
    Rcy: 'Р',
    Re: 'ℜ',
    ReverseElement: '∋',
    ReverseEquilibrium: '⇋',
    ReverseUpEquilibrium: '⥯',
    Rfr: 'ℜ',
    Rho: 'Ρ',
    RightAngleBracket: '⟩',
    RightArrow: '→',
    RightArrowBar: '⇥',
    RightArrowLeftArrow: '⇄',
    RightCeiling: '⌉',
    RightDoubleBracket: '⟧',
    RightDownTeeVector: '⥝',
    RightDownVector: '⇂',
    RightDownVectorBar: '⥕',
    RightFloor: '⌋',
    RightTee: '⊢',
    RightTeeArrow: '↦',
    RightTeeVector: '⥛',
    RightTriangle: '⊳',
    RightTriangleBar: '⧐',
    RightTriangleEqual: '⊵',
    RightUpDownVector: '⥏',
    RightUpTeeVector: '⥜',
    RightUpVector: '↾',
    RightUpVectorBar: '⥔',
    RightVector: '⇀',
    RightVectorBar: '⥓',
    Rightarrow: '⇒',
    Ropf: 'ℝ',
    RoundImplies: '⥰',
    Rrightarrow: '⇛',
    Rscr: 'ℛ',
    Rsh: '↱',
    RuleDelayed: '⧴',
    SHCHcy: 'Щ',
    SHcy: 'Ш',
    SOFTcy: 'Ь',
    Sacute: 'Ś',
    Sc: '⪼',
    Scaron: 'Š',
    Scedil: 'Ş',
    Scirc: 'Ŝ',
    Scy: 'С',
    Sfr: '𝔖',
    ShortDownArrow: '↓',
    ShortLeftArrow: '←',
    ShortRightArrow: '→',
    ShortUpArrow: '↑',
    Sigma: 'Σ',
    SmallCircle: '∘',
    Sopf: '𝕊',
    Sqrt: '√',
    Square: '□',
    SquareIntersection: '⊓',
    SquareSubset: '⊏',
    SquareSubsetEqual: '⊑',
    SquareSuperset: '⊐',
    SquareSupersetEqual: '⊒',
    SquareUnion: '⊔',
    Sscr: '𝒮',
    Star: '⋆',
    Sub: '⋐',
    Subset: '⋐',
    SubsetEqual: '⊆',
    Succeeds: '≻',
    SucceedsEqual: '⪰',
    SucceedsSlantEqual: '≽',
    SucceedsTilde: '≿',
    SuchThat: '∋',
    Sum: '∑',
    Sup: '⋑',
    Superset: '⊃',
    SupersetEqual: '⊇',
    Supset: '⋑',
    THORN: 'Þ',
    TRADE: '™',
    TSHcy: 'Ћ',
    TScy: 'Ц',
    Tab: '\t',
    Tau: 'Τ',
    Tcaron: 'Ť',
    Tcedil: 'Ţ',
    Tcy: 'Т',
    Tfr: '𝔗',
    Therefore: '∴',
    Theta: 'Θ',
    ThickSpace: '  ',
    ThinSpace: ' ',
    Tilde: '∼',
    TildeEqual: '≃',
    TildeFullEqual: '≅',
    TildeTilde: '≈',
    Topf: '𝕋',
    TripleDot: '⃛',
    Tscr: '𝒯',
    Tstrok: 'Ŧ',
    Uacute: 'Ú',
    Uarr: '↟',
    Uarrocir: '⥉',
    Ubrcy: 'Ў',
    Ubreve: 'Ŭ',
    Ucirc: 'Û',
    Ucy: 'У',
    Udblac: 'Ű',
    Ufr: '𝔘',
    Ugrave: 'Ù',
    Umacr: 'Ū',
    UnderBar: '_',
    UnderBrace: '⏟',
    UnderBracket: '⎵',
    UnderParenthesis: '⏝',
    Union: '⋃',
    UnionPlus: '⊎',
    Uogon: 'Ų',
    Uopf: '𝕌',
    UpArrow: '↑',
    UpArrowBar: '⤒',
    UpArrowDownArrow: '⇅',
    UpDownArrow: '↕',
    UpEquilibrium: '⥮',
    UpTee: '⊥',
    UpTeeArrow: '↥',
    Uparrow: '⇑',
    Updownarrow: '⇕',
    UpperLeftArrow: '↖',
    UpperRightArrow: '↗',
    Upsi: 'ϒ',
    Upsilon: 'Υ',
    Uring: 'Ů',
    Uscr: '𝒰',
    Utilde: 'Ũ',
    Uuml: 'Ü',
    VDash: '⊫',
    Vbar: '⫫',
    Vcy: 'В',
    Vdash: '⊩',
    Vdashl: '⫦',
    Vee: '⋁',
    Verbar: '‖',
    Vert: '‖',
    VerticalBar: '∣',
    VerticalLine: '|',
    VerticalSeparator: '❘',
    VerticalTilde: '≀',
    VeryThinSpace: ' ',
    Vfr: '𝔙',
    Vopf: '𝕍',
    Vscr: '𝒱',
    Vvdash: '⊪',
    Wcirc: 'Ŵ',
    Wedge: '⋀',
    Wfr: '𝔚',
    Wopf: '𝕎',
    Wscr: '𝒲',
    Xfr: '𝔛',
    Xi: 'Ξ',
    Xopf: '𝕏',
    Xscr: '𝒳',
    YAcy: 'Я',
    YIcy: 'Ї',
    YUcy: 'Ю',
    Yacute: 'Ý',
    Ycirc: 'Ŷ',
    Ycy: 'Ы',
    Yfr: '𝔜',
    Yopf: '𝕐',
    Yscr: '𝒴',
    Yuml: 'Ÿ',
    ZHcy: 'Ж',
    Zacute: 'Ź',
    Zcaron: 'Ž',
    Zcy: 'З',
    Zdot: 'Ż',
    ZeroWidthSpace: '​',
    Zeta: 'Ζ',
    Zfr: 'ℨ',
    Zopf: 'ℤ',
    Zscr: '𝒵',
    aacute: 'á',
    abreve: 'ă',
    ac: '∾',
    acE: '∾̳',
    acd: '∿',
    acirc: 'â',
    acute: '´',
    acy: 'а',
    aelig: 'æ',
    af: '⁡',
    afr: '𝔞',
    agrave: 'à',
    alefsym: 'ℵ',
    aleph: 'ℵ',
    alpha: 'α',
    amacr: 'ā',
    amalg: '⨿',
    amp: '&',
    and: '∧',
    andand: '⩕',
    andd: '⩜',
    andslope: '⩘',
    andv: '⩚',
    ang: '∠',
    ange: '⦤',
    angle: '∠',
    angmsd: '∡',
    angmsdaa: '⦨',
    angmsdab: '⦩',
    angmsdac: '⦪',
    angmsdad: '⦫',
    angmsdae: '⦬',
    angmsdaf: '⦭',
    angmsdag: '⦮',
    angmsdah: '⦯',
    angrt: '∟',
    angrtvb: '⊾',
    angrtvbd: '⦝',
    angsph: '∢',
    angst: 'Å',
    angzarr: '⍼',
    aogon: 'ą',
    aopf: '𝕒',
    ap: '≈',
    apE: '⩰',
    apacir: '⩯',
    ape: '≊',
    apid: '≋',
    apos: "'",
    approx: '≈',
    approxeq: '≊',
    aring: 'å',
    ascr: '𝒶',
    ast: '*',
    asymp: '≈',
    asympeq: '≍',
    atilde: 'ã',
    auml: 'ä',
    awconint: '∳',
    awint: '⨑',
    bNot: '⫭',
    backcong: '≌',
    backepsilon: '϶',
    backprime: '‵',
    backsim: '∽',
    backsimeq: '⋍',
    barvee: '⊽',
    barwed: '⌅',
    barwedge: '⌅',
    bbrk: '⎵',
    bbrktbrk: '⎶',
    bcong: '≌',
    bcy: 'б',
    bdquo: '„',
    becaus: '∵',
    because: '∵',
    bemptyv: '⦰',
    bepsi: '϶',
    bernou: 'ℬ',
    beta: 'β',
    beth: 'ℶ',
    between: '≬',
    bfr: '𝔟',
    bigcap: '⋂',
    bigcirc: '◯',
    bigcup: '⋃',
    bigodot: '⨀',
    bigoplus: '⨁',
    bigotimes: '⨂',
    bigsqcup: '⨆',
    bigstar: '★',
    bigtriangledown: '▽',
    bigtriangleup: '△',
    biguplus: '⨄',
    bigvee: '⋁',
    bigwedge: '⋀',
    bkarow: '⤍',
    blacklozenge: '⧫',
    blacksquare: '▪',
    blacktriangle: '▴',
    blacktriangledown: '▾',
    blacktriangleleft: '◂',
    blacktriangleright: '▸',
    blank: '␣',
    blk12: '▒',
    blk14: '░',
    blk34: '▓',
    block: '█',
    bne: '=⃥',
    bnequiv: '≡⃥',
    bnot: '⌐',
    bopf: '𝕓',
    bot: '⊥',
    bottom: '⊥',
    bowtie: '⋈',
    boxDL: '╗',
    boxDR: '╔',
    boxDl: '╖',
    boxDr: '╓',
    boxH: '═',
    boxHD: '╦',
    boxHU: '╩',
    boxHd: '╤',
    boxHu: '╧',
    boxUL: '╝',
    boxUR: '╚',
    boxUl: '╜',
    boxUr: '╙',
    boxV: '║',
    boxVH: '╬',
    boxVL: '╣',
    boxVR: '╠',
    boxVh: '╫',
    boxVl: '╢',
    boxVr: '╟',
    boxbox: '⧉',
    boxdL: '╕',
    boxdR: '╒',
    boxdl: '┐',
    boxdr: '┌',
    boxh: '─',
    boxhD: '╥',
    boxhU: '╨',
    boxhd: '┬',
    boxhu: '┴',
    boxminus: '⊟',
    boxplus: '⊞',
    boxtimes: '⊠',
    boxuL: '╛',
    boxuR: '╘',
    boxul: '┘',
    boxur: '└',
    boxv: '│',
    boxvH: '╪',
    boxvL: '╡',
    boxvR: '╞',
    boxvh: '┼',
    boxvl: '┤',
    boxvr: '├',
    bprime: '‵',
    breve: '˘',
    brvbar: '¦',
    bscr: '𝒷',
    bsemi: '⁏',
    bsim: '∽',
    bsime: '⋍',
    bsol: '\\',
    bsolb: '⧅',
    bsolhsub: '⟈',
    bull: '•',
    bullet: '•',
    bump: '≎',
    bumpE: '⪮',
    bumpe: '≏',
    bumpeq: '≏',
    cacute: 'ć',
    cap: '∩',
    capand: '⩄',
    capbrcup: '⩉',
    capcap: '⩋',
    capcup: '⩇',
    capdot: '⩀',
    caps: '∩︀',
    caret: '⁁',
    caron: 'ˇ',
    ccaps: '⩍',
    ccaron: 'č',
    ccedil: 'ç',
    ccirc: 'ĉ',
    ccups: '⩌',
    ccupssm: '⩐',
    cdot: 'ċ',
    cedil: '¸',
    cemptyv: '⦲',
    cent: '¢',
    centerdot: '·',
    cfr: '𝔠',
    chcy: 'ч',
    check: '✓',
    checkmark: '✓',
    chi: 'χ',
    cir: '○',
    cirE: '⧃',
    circ: 'ˆ',
    circeq: '≗',
    circlearrowleft: '↺',
    circlearrowright: '↻',
    circledR: '®',
    circledS: 'Ⓢ',
    circledast: '⊛',
    circledcirc: '⊚',
    circleddash: '⊝',
    cire: '≗',
    cirfnint: '⨐',
    cirmid: '⫯',
    cirscir: '⧂',
    clubs: '♣',
    clubsuit: '♣',
    colon: ':',
    colone: '≔',
    coloneq: '≔',
    comma: ',',
    commat: '@',
    comp: '∁',
    compfn: '∘',
    complement: '∁',
    complexes: 'ℂ',
    cong: '≅',
    congdot: '⩭',
    conint: '∮',
    copf: '𝕔',
    coprod: '∐',
    copy: '©',
    copysr: '℗',
    crarr: '↵',
    cross: '✗',
    cscr: '𝒸',
    csub: '⫏',
    csube: '⫑',
    csup: '⫐',
    csupe: '⫒',
    ctdot: '⋯',
    cudarrl: '⤸',
    cudarrr: '⤵',
    cuepr: '⋞',
    cuesc: '⋟',
    cularr: '↶',
    cularrp: '⤽',
    cup: '∪',
    cupbrcap: '⩈',
    cupcap: '⩆',
    cupcup: '⩊',
    cupdot: '⊍',
    cupor: '⩅',
    cups: '∪︀',
    curarr: '↷',
    curarrm: '⤼',
    curlyeqprec: '⋞',
    curlyeqsucc: '⋟',
    curlyvee: '⋎',
    curlywedge: '⋏',
    curren: '¤',
    curvearrowleft: '↶',
    curvearrowright: '↷',
    cuvee: '⋎',
    cuwed: '⋏',
    cwconint: '∲',
    cwint: '∱',
    cylcty: '⌭',
    dArr: '⇓',
    dHar: '⥥',
    dagger: '†',
    daleth: 'ℸ',
    darr: '↓',
    dash: '‐',
    dashv: '⊣',
    dbkarow: '⤏',
    dblac: '˝',
    dcaron: 'ď',
    dcy: 'д',
    dd: 'ⅆ',
    ddagger: '‡',
    ddarr: '⇊',
    ddotseq: '⩷',
    deg: '°',
    delta: 'δ',
    demptyv: '⦱',
    dfisht: '⥿',
    dfr: '𝔡',
    dharl: '⇃',
    dharr: '⇂',
    diam: '⋄',
    diamond: '⋄',
    diamondsuit: '♦',
    diams: '♦',
    die: '¨',
    digamma: 'ϝ',
    disin: '⋲',
    div: '÷',
    divide: '÷',
    divideontimes: '⋇',
    divonx: '⋇',
    djcy: 'ђ',
    dlcorn: '⌞',
    dlcrop: '⌍',
    dollar: '$',
    dopf: '𝕕',
    dot: '˙',
    doteq: '≐',
    doteqdot: '≑',
    dotminus: '∸',
    dotplus: '∔',
    dotsquare: '⊡',
    doublebarwedge: '⌆',
    downarrow: '↓',
    downdownarrows: '⇊',
    downharpoonleft: '⇃',
    downharpoonright: '⇂',
    drbkarow: '⤐',
    drcorn: '⌟',
    drcrop: '⌌',
    dscr: '𝒹',
    dscy: 'ѕ',
    dsol: '⧶',
    dstrok: 'đ',
    dtdot: '⋱',
    dtri: '▿',
    dtrif: '▾',
    duarr: '⇵',
    duhar: '⥯',
    dwangle: '⦦',
    dzcy: 'џ',
    dzigrarr: '⟿',
    eDDot: '⩷',
    eDot: '≑',
    eacute: 'é',
    easter: '⩮',
    ecaron: 'ě',
    ecir: '≖',
    ecirc: 'ê',
    ecolon: '≕',
    ecy: 'э',
    edot: 'ė',
    ee: 'ⅇ',
    efDot: '≒',
    efr: '𝔢',
    eg: '⪚',
    egrave: 'è',
    egs: '⪖',
    egsdot: '⪘',
    el: '⪙',
    elinters: '⏧',
    ell: 'ℓ',
    els: '⪕',
    elsdot: '⪗',
    emacr: 'ē',
    empty: '∅',
    emptyset: '∅',
    emptyv: '∅',
    emsp13: ' ',
    emsp14: ' ',
    emsp: ' ',
    eng: 'ŋ',
    ensp: ' ',
    eogon: 'ę',
    eopf: '𝕖',
    epar: '⋕',
    eparsl: '⧣',
    eplus: '⩱',
    epsi: 'ε',
    epsilon: 'ε',
    epsiv: 'ϵ',
    eqcirc: '≖',
    eqcolon: '≕',
    eqsim: '≂',
    eqslantgtr: '⪖',
    eqslantless: '⪕',
    equals: '=',
    equest: '≟',
    equiv: '≡',
    equivDD: '⩸',
    eqvparsl: '⧥',
    erDot: '≓',
    erarr: '⥱',
    escr: 'ℯ',
    esdot: '≐',
    esim: '≂',
    eta: 'η',
    eth: 'ð',
    euml: 'ë',
    euro: '€',
    excl: '!',
    exist: '∃',
    expectation: 'ℰ',
    exponentiale: 'ⅇ',
    fallingdotseq: '≒',
    fcy: 'ф',
    female: '♀',
    ffilig: 'ﬃ',
    fflig: 'ﬀ',
    ffllig: 'ﬄ',
    ffr: '𝔣',
    filig: 'ﬁ',
    fjlig: 'fj',
    flat: '♭',
    fllig: 'ﬂ',
    fltns: '▱',
    fnof: 'ƒ',
    fopf: '𝕗',
    forall: '∀',
    fork: '⋔',
    forkv: '⫙',
    fpartint: '⨍',
    frac12: '½',
    frac13: '⅓',
    frac14: '¼',
    frac15: '⅕',
    frac16: '⅙',
    frac18: '⅛',
    frac23: '⅔',
    frac25: '⅖',
    frac34: '¾',
    frac35: '⅗',
    frac38: '⅜',
    frac45: '⅘',
    frac56: '⅚',
    frac58: '⅝',
    frac78: '⅞',
    frasl: '⁄',
    frown: '⌢',
    fscr: '𝒻',
    gE: '≧',
    gEl: '⪌',
    gacute: 'ǵ',
    gamma: 'γ',
    gammad: 'ϝ',
    gap: '⪆',
    gbreve: 'ğ',
    gcirc: 'ĝ',
    gcy: 'г',
    gdot: 'ġ',
    ge: '≥',
    gel: '⋛',
    geq: '≥',
    geqq: '≧',
    geqslant: '⩾',
    ges: '⩾',
    gescc: '⪩',
    gesdot: '⪀',
    gesdoto: '⪂',
    gesdotol: '⪄',
    gesl: '⋛︀',
    gesles: '⪔',
    gfr: '𝔤',
    gg: '≫',
    ggg: '⋙',
    gimel: 'ℷ',
    gjcy: 'ѓ',
    gl: '≷',
    glE: '⪒',
    gla: '⪥',
    glj: '⪤',
    gnE: '≩',
    gnap: '⪊',
    gnapprox: '⪊',
    gne: '⪈',
    gneq: '⪈',
    gneqq: '≩',
    gnsim: '⋧',
    gopf: '𝕘',
    grave: '`',
    gscr: 'ℊ',
    gsim: '≳',
    gsime: '⪎',
    gsiml: '⪐',
    gt: '>',
    gtcc: '⪧',
    gtcir: '⩺',
    gtdot: '⋗',
    gtlPar: '⦕',
    gtquest: '⩼',
    gtrapprox: '⪆',
    gtrarr: '⥸',
    gtrdot: '⋗',
    gtreqless: '⋛',
    gtreqqless: '⪌',
    gtrless: '≷',
    gtrsim: '≳',
    gvertneqq: '≩︀',
    gvnE: '≩︀',
    hArr: '⇔',
    hairsp: ' ',
    half: '½',
    hamilt: 'ℋ',
    hardcy: 'ъ',
    harr: '↔',
    harrcir: '⥈',
    harrw: '↭',
    hbar: 'ℏ',
    hcirc: 'ĥ',
    hearts: '♥',
    heartsuit: '♥',
    hellip: '…',
    hercon: '⊹',
    hfr: '𝔥',
    hksearow: '⤥',
    hkswarow: '⤦',
    hoarr: '⇿',
    homtht: '∻',
    hookleftarrow: '↩',
    hookrightarrow: '↪',
    hopf: '𝕙',
    horbar: '―',
    hscr: '𝒽',
    hslash: 'ℏ',
    hstrok: 'ħ',
    hybull: '⁃',
    hyphen: '‐',
    iacute: 'í',
    ic: '⁣',
    icirc: 'î',
    icy: 'и',
    iecy: 'е',
    iexcl: '¡',
    iff: '⇔',
    ifr: '𝔦',
    igrave: 'ì',
    ii: 'ⅈ',
    iiiint: '⨌',
    iiint: '∭',
    iinfin: '⧜',
    iiota: '℩',
    ijlig: 'ĳ',
    imacr: 'ī',
    image: 'ℑ',
    imagline: 'ℐ',
    imagpart: 'ℑ',
    imath: 'ı',
    imof: '⊷',
    imped: 'Ƶ',
    in: '∈',
    incare: '℅',
    infin: '∞',
    infintie: '⧝',
    inodot: 'ı',
    int: '∫',
    intcal: '⊺',
    integers: 'ℤ',
    intercal: '⊺',
    intlarhk: '⨗',
    intprod: '⨼',
    iocy: 'ё',
    iogon: 'į',
    iopf: '𝕚',
    iota: 'ι',
    iprod: '⨼',
    iquest: '¿',
    iscr: '𝒾',
    isin: '∈',
    isinE: '⋹',
    isindot: '⋵',
    isins: '⋴',
    isinsv: '⋳',
    isinv: '∈',
    it: '⁢',
    itilde: 'ĩ',
    iukcy: 'і',
    iuml: 'ï',
    jcirc: 'ĵ',
    jcy: 'й',
    jfr: '𝔧',
    jmath: 'ȷ',
    jopf: '𝕛',
    jscr: '𝒿',
    jsercy: 'ј',
    jukcy: 'є',
    kappa: 'κ',
    kappav: 'ϰ',
    kcedil: 'ķ',
    kcy: 'к',
    kfr: '𝔨',
    kgreen: 'ĸ',
    khcy: 'х',
    kjcy: 'ќ',
    kopf: '𝕜',
    kscr: '𝓀',
    lAarr: '⇚',
    lArr: '⇐',
    lAtail: '⤛',
    lBarr: '⤎',
    lE: '≦',
    lEg: '⪋',
    lHar: '⥢',
    lacute: 'ĺ',
    laemptyv: '⦴',
    lagran: 'ℒ',
    lambda: 'λ',
    lang: '⟨',
    langd: '⦑',
    langle: '⟨',
    lap: '⪅',
    laquo: '«',
    larr: '←',
    larrb: '⇤',
    larrbfs: '⤟',
    larrfs: '⤝',
    larrhk: '↩',
    larrlp: '↫',
    larrpl: '⤹',
    larrsim: '⥳',
    larrtl: '↢',
    lat: '⪫',
    latail: '⤙',
    late: '⪭',
    lates: '⪭︀',
    lbarr: '⤌',
    lbbrk: '❲',
    lbrace: '{',
    lbrack: '[',
    lbrke: '⦋',
    lbrksld: '⦏',
    lbrkslu: '⦍',
    lcaron: 'ľ',
    lcedil: 'ļ',
    lceil: '⌈',
    lcub: '{',
    lcy: 'л',
    ldca: '⤶',
    ldquo: '“',
    ldquor: '„',
    ldrdhar: '⥧',
    ldrushar: '⥋',
    ldsh: '↲',
    le: '≤',
    leftarrow: '←',
    leftarrowtail: '↢',
    leftharpoondown: '↽',
    leftharpoonup: '↼',
    leftleftarrows: '⇇',
    leftrightarrow: '↔',
    leftrightarrows: '⇆',
    leftrightharpoons: '⇋',
    leftrightsquigarrow: '↭',
    leftthreetimes: '⋋',
    leg: '⋚',
    leq: '≤',
    leqq: '≦',
    leqslant: '⩽',
    les: '⩽',
    lescc: '⪨',
    lesdot: '⩿',
    lesdoto: '⪁',
    lesdotor: '⪃',
    lesg: '⋚︀',
    lesges: '⪓',
    lessapprox: '⪅',
    lessdot: '⋖',
    lesseqgtr: '⋚',
    lesseqqgtr: '⪋',
    lessgtr: '≶',
    lesssim: '≲',
    lfisht: '⥼',
    lfloor: '⌊',
    lfr: '𝔩',
    lg: '≶',
    lgE: '⪑',
    lhard: '↽',
    lharu: '↼',
    lharul: '⥪',
    lhblk: '▄',
    ljcy: 'љ',
    ll: '≪',
    llarr: '⇇',
    llcorner: '⌞',
    llhard: '⥫',
    lltri: '◺',
    lmidot: 'ŀ',
    lmoust: '⎰',
    lmoustache: '⎰',
    lnE: '≨',
    lnap: '⪉',
    lnapprox: '⪉',
    lne: '⪇',
    lneq: '⪇',
    lneqq: '≨',
    lnsim: '⋦',
    loang: '⟬',
    loarr: '⇽',
    lobrk: '⟦',
    longleftarrow: '⟵',
    longleftrightarrow: '⟷',
    longmapsto: '⟼',
    longrightarrow: '⟶',
    looparrowleft: '↫',
    looparrowright: '↬',
    lopar: '⦅',
    lopf: '𝕝',
    loplus: '⨭',
    lotimes: '⨴',
    lowast: '∗',
    lowbar: '_',
    loz: '◊',
    lozenge: '◊',
    lozf: '⧫',
    lpar: '(',
    lparlt: '⦓',
    lrarr: '⇆',
    lrcorner: '⌟',
    lrhar: '⇋',
    lrhard: '⥭',
    lrm: '‎',
    lrtri: '⊿',
    lsaquo: '‹',
    lscr: '𝓁',
    lsh: '↰',
    lsim: '≲',
    lsime: '⪍',
    lsimg: '⪏',
    lsqb: '[',
    lsquo: '‘',
    lsquor: '‚',
    lstrok: 'ł',
    lt: '<',
    ltcc: '⪦',
    ltcir: '⩹',
    ltdot: '⋖',
    lthree: '⋋',
    ltimes: '⋉',
    ltlarr: '⥶',
    ltquest: '⩻',
    ltrPar: '⦖',
    ltri: '◃',
    ltrie: '⊴',
    ltrif: '◂',
    lurdshar: '⥊',
    luruhar: '⥦',
    lvertneqq: '≨︀',
    lvnE: '≨︀',
    mDDot: '∺',
    macr: '¯',
    male: '♂',
    malt: '✠',
    maltese: '✠',
    map: '↦',
    mapsto: '↦',
    mapstodown: '↧',
    mapstoleft: '↤',
    mapstoup: '↥',
    marker: '▮',
    mcomma: '⨩',
    mcy: 'м',
    mdash: '—',
    measuredangle: '∡',
    mfr: '𝔪',
    mho: '℧',
    micro: 'µ',
    mid: '∣',
    midast: '*',
    midcir: '⫰',
    middot: '·',
    minus: '−',
    minusb: '⊟',
    minusd: '∸',
    minusdu: '⨪',
    mlcp: '⫛',
    mldr: '…',
    mnplus: '∓',
    models: '⊧',
    mopf: '𝕞',
    mp: '∓',
    mscr: '𝓂',
    mstpos: '∾',
    mu: 'μ',
    multimap: '⊸',
    mumap: '⊸',
    nGg: '⋙̸',
    nGt: '≫⃒',
    nGtv: '≫̸',
    nLeftarrow: '⇍',
    nLeftrightarrow: '⇎',
    nLl: '⋘̸',
    nLt: '≪⃒',
    nLtv: '≪̸',
    nRightarrow: '⇏',
    nVDash: '⊯',
    nVdash: '⊮',
    nabla: '∇',
    nacute: 'ń',
    nang: '∠⃒',
    nap: '≉',
    napE: '⩰̸',
    napid: '≋̸',
    napos: 'ŉ',
    napprox: '≉',
    natur: '♮',
    natural: '♮',
    naturals: 'ℕ',
    nbsp: ' ',
    nbump: '≎̸',
    nbumpe: '≏̸',
    ncap: '⩃',
    ncaron: 'ň',
    ncedil: 'ņ',
    ncong: '≇',
    ncongdot: '⩭̸',
    ncup: '⩂',
    ncy: 'н',
    ndash: '–',
    ne: '≠',
    neArr: '⇗',
    nearhk: '⤤',
    nearr: '↗',
    nearrow: '↗',
    nedot: '≐̸',
    nequiv: '≢',
    nesear: '⤨',
    nesim: '≂̸',
    nexist: '∄',
    nexists: '∄',
    nfr: '𝔫',
    ngE: '≧̸',
    nge: '≱',
    ngeq: '≱',
    ngeqq: '≧̸',
    ngeqslant: '⩾̸',
    nges: '⩾̸',
    ngsim: '≵',
    ngt: '≯',
    ngtr: '≯',
    nhArr: '⇎',
    nharr: '↮',
    nhpar: '⫲',
    ni: '∋',
    nis: '⋼',
    nisd: '⋺',
    niv: '∋',
    njcy: 'њ',
    nlArr: '⇍',
    nlE: '≦̸',
    nlarr: '↚',
    nldr: '‥',
    nle: '≰',
    nleftarrow: '↚',
    nleftrightarrow: '↮',
    nleq: '≰',
    nleqq: '≦̸',
    nleqslant: '⩽̸',
    nles: '⩽̸',
    nless: '≮',
    nlsim: '≴',
    nlt: '≮',
    nltri: '⋪',
    nltrie: '⋬',
    nmid: '∤',
    nopf: '𝕟',
    not: '¬',
    notin: '∉',
    notinE: '⋹̸',
    notindot: '⋵̸',
    notinva: '∉',
    notinvb: '⋷',
    notinvc: '⋶',
    notni: '∌',
    notniva: '∌',
    notnivb: '⋾',
    notnivc: '⋽',
    npar: '∦',
    nparallel: '∦',
    nparsl: '⫽⃥',
    npart: '∂̸',
    npolint: '⨔',
    npr: '⊀',
    nprcue: '⋠',
    npre: '⪯̸',
    nprec: '⊀',
    npreceq: '⪯̸',
    nrArr: '⇏',
    nrarr: '↛',
    nrarrc: '⤳̸',
    nrarrw: '↝̸',
    nrightarrow: '↛',
    nrtri: '⋫',
    nrtrie: '⋭',
    nsc: '⊁',
    nsccue: '⋡',
    nsce: '⪰̸',
    nscr: '𝓃',
    nshortmid: '∤',
    nshortparallel: '∦',
    nsim: '≁',
    nsime: '≄',
    nsimeq: '≄',
    nsmid: '∤',
    nspar: '∦',
    nsqsube: '⋢',
    nsqsupe: '⋣',
    nsub: '⊄',
    nsubE: '⫅̸',
    nsube: '⊈',
    nsubset: '⊂⃒',
    nsubseteq: '⊈',
    nsubseteqq: '⫅̸',
    nsucc: '⊁',
    nsucceq: '⪰̸',
    nsup: '⊅',
    nsupE: '⫆̸',
    nsupe: '⊉',
    nsupset: '⊃⃒',
    nsupseteq: '⊉',
    nsupseteqq: '⫆̸',
    ntgl: '≹',
    ntilde: 'ñ',
    ntlg: '≸',
    ntriangleleft: '⋪',
    ntrianglelefteq: '⋬',
    ntriangleright: '⋫',
    ntrianglerighteq: '⋭',
    nu: 'ν',
    num: '#',
    numero: '№',
    numsp: ' ',
    nvDash: '⊭',
    nvHarr: '⤄',
    nvap: '≍⃒',
    nvdash: '⊬',
    nvge: '≥⃒',
    nvgt: '>⃒',
    nvinfin: '⧞',
    nvlArr: '⤂',
    nvle: '≤⃒',
    nvlt: '<⃒',
    nvltrie: '⊴⃒',
    nvrArr: '⤃',
    nvrtrie: '⊵⃒',
    nvsim: '∼⃒',
    nwArr: '⇖',
    nwarhk: '⤣',
    nwarr: '↖',
    nwarrow: '↖',
    nwnear: '⤧',
    oS: 'Ⓢ',
    oacute: 'ó',
    oast: '⊛',
    ocir: '⊚',
    ocirc: 'ô',
    ocy: 'о',
    odash: '⊝',
    odblac: 'ő',
    odiv: '⨸',
    odot: '⊙',
    odsold: '⦼',
    oelig: 'œ',
    ofcir: '⦿',
    ofr: '𝔬',
    ogon: '˛',
    ograve: 'ò',
    ogt: '⧁',
    ohbar: '⦵',
    ohm: 'Ω',
    oint: '∮',
    olarr: '↺',
    olcir: '⦾',
    olcross: '⦻',
    oline: '‾',
    olt: '⧀',
    omacr: 'ō',
    omega: 'ω',
    omicron: 'ο',
    omid: '⦶',
    ominus: '⊖',
    oopf: '𝕠',
    opar: '⦷',
    operp: '⦹',
    oplus: '⊕',
    or: '∨',
    orarr: '↻',
    ord: '⩝',
    order: 'ℴ',
    orderof: 'ℴ',
    ordf: 'ª',
    ordm: 'º',
    origof: '⊶',
    oror: '⩖',
    orslope: '⩗',
    orv: '⩛',
    oscr: 'ℴ',
    oslash: 'ø',
    osol: '⊘',
    otilde: 'õ',
    otimes: '⊗',
    otimesas: '⨶',
    ouml: 'ö',
    ovbar: '⌽',
    par: '∥',
    para: '¶',
    parallel: '∥',
    parsim: '⫳',
    parsl: '⫽',
    part: '∂',
    pcy: 'п',
    percnt: '%',
    period: '.',
    permil: '‰',
    perp: '⊥',
    pertenk: '‱',
    pfr: '𝔭',
    phi: 'φ',
    phiv: 'ϕ',
    phmmat: 'ℳ',
    phone: '☎',
    pi: 'π',
    pitchfork: '⋔',
    piv: 'ϖ',
    planck: 'ℏ',
    planckh: 'ℎ',
    plankv: 'ℏ',
    plus: '+',
    plusacir: '⨣',
    plusb: '⊞',
    pluscir: '⨢',
    plusdo: '∔',
    plusdu: '⨥',
    pluse: '⩲',
    plusmn: '±',
    plussim: '⨦',
    plustwo: '⨧',
    pm: '±',
    pointint: '⨕',
    popf: '𝕡',
    pound: '£',
    pr: '≺',
    prE: '⪳',
    prap: '⪷',
    prcue: '≼',
    pre: '⪯',
    prec: '≺',
    precapprox: '⪷',
    preccurlyeq: '≼',
    preceq: '⪯',
    precnapprox: '⪹',
    precneqq: '⪵',
    precnsim: '⋨',
    precsim: '≾',
    prime: '′',
    primes: 'ℙ',
    prnE: '⪵',
    prnap: '⪹',
    prnsim: '⋨',
    prod: '∏',
    profalar: '⌮',
    profline: '⌒',
    profsurf: '⌓',
    prop: '∝',
    propto: '∝',
    prsim: '≾',
    prurel: '⊰',
    pscr: '𝓅',
    psi: 'ψ',
    puncsp: ' ',
    qfr: '𝔮',
    qint: '⨌',
    qopf: '𝕢',
    qprime: '⁗',
    qscr: '𝓆',
    quaternions: 'ℍ',
    quatint: '⨖',
    quest: '?',
    questeq: '≟',
    quot: '"',
    rAarr: '⇛',
    rArr: '⇒',
    rAtail: '⤜',
    rBarr: '⤏',
    rHar: '⥤',
    race: '∽̱',
    racute: 'ŕ',
    radic: '√',
    raemptyv: '⦳',
    rang: '⟩',
    rangd: '⦒',
    range: '⦥',
    rangle: '⟩',
    raquo: '»',
    rarr: '→',
    rarrap: '⥵',
    rarrb: '⇥',
    rarrbfs: '⤠',
    rarrc: '⤳',
    rarrfs: '⤞',
    rarrhk: '↪',
    rarrlp: '↬',
    rarrpl: '⥅',
    rarrsim: '⥴',
    rarrtl: '↣',
    rarrw: '↝',
    ratail: '⤚',
    ratio: '∶',
    rationals: 'ℚ',
    rbarr: '⤍',
    rbbrk: '❳',
    rbrace: '}',
    rbrack: ']',
    rbrke: '⦌',
    rbrksld: '⦎',
    rbrkslu: '⦐',
    rcaron: 'ř',
    rcedil: 'ŗ',
    rceil: '⌉',
    rcub: '}',
    rcy: 'р',
    rdca: '⤷',
    rdldhar: '⥩',
    rdquo: '”',
    rdquor: '”',
    rdsh: '↳',
    real: 'ℜ',
    realine: 'ℛ',
    realpart: 'ℜ',
    reals: 'ℝ',
    rect: '▭',
    reg: '®',
    rfisht: '⥽',
    rfloor: '⌋',
    rfr: '𝔯',
    rhard: '⇁',
    rharu: '⇀',
    rharul: '⥬',
    rho: 'ρ',
    rhov: 'ϱ',
    rightarrow: '→',
    rightarrowtail: '↣',
    rightharpoondown: '⇁',
    rightharpoonup: '⇀',
    rightleftarrows: '⇄',
    rightleftharpoons: '⇌',
    rightrightarrows: '⇉',
    rightsquigarrow: '↝',
    rightthreetimes: '⋌',
    ring: '˚',
    risingdotseq: '≓',
    rlarr: '⇄',
    rlhar: '⇌',
    rlm: '‏',
    rmoust: '⎱',
    rmoustache: '⎱',
    rnmid: '⫮',
    roang: '⟭',
    roarr: '⇾',
    robrk: '⟧',
    ropar: '⦆',
    ropf: '𝕣',
    roplus: '⨮',
    rotimes: '⨵',
    rpar: ')',
    rpargt: '⦔',
    rppolint: '⨒',
    rrarr: '⇉',
    rsaquo: '›',
    rscr: '𝓇',
    rsh: '↱',
    rsqb: ']',
    rsquo: '’',
    rsquor: '’',
    rthree: '⋌',
    rtimes: '⋊',
    rtri: '▹',
    rtrie: '⊵',
    rtrif: '▸',
    rtriltri: '⧎',
    ruluhar: '⥨',
    rx: '℞',
    sacute: 'ś',
    sbquo: '‚',
    sc: '≻',
    scE: '⪴',
    scap: '⪸',
    scaron: 'š',
    sccue: '≽',
    sce: '⪰',
    scedil: 'ş',
    scirc: 'ŝ',
    scnE: '⪶',
    scnap: '⪺',
    scnsim: '⋩',
    scpolint: '⨓',
    scsim: '≿',
    scy: 'с',
    sdot: '⋅',
    sdotb: '⊡',
    sdote: '⩦',
    seArr: '⇘',
    searhk: '⤥',
    searr: '↘',
    searrow: '↘',
    sect: '§',
    semi: ';',
    seswar: '⤩',
    setminus: '∖',
    setmn: '∖',
    sext: '✶',
    sfr: '𝔰',
    sfrown: '⌢',
    sharp: '♯',
    shchcy: 'щ',
    shcy: 'ш',
    shortmid: '∣',
    shortparallel: '∥',
    shy: '­',
    sigma: 'σ',
    sigmaf: 'ς',
    sigmav: 'ς',
    sim: '∼',
    simdot: '⩪',
    sime: '≃',
    simeq: '≃',
    simg: '⪞',
    simgE: '⪠',
    siml: '⪝',
    simlE: '⪟',
    simne: '≆',
    simplus: '⨤',
    simrarr: '⥲',
    slarr: '←',
    smallsetminus: '∖',
    smashp: '⨳',
    smeparsl: '⧤',
    smid: '∣',
    smile: '⌣',
    smt: '⪪',
    smte: '⪬',
    smtes: '⪬︀',
    softcy: 'ь',
    sol: '/',
    solb: '⧄',
    solbar: '⌿',
    sopf: '𝕤',
    spades: '♠',
    spadesuit: '♠',
    spar: '∥',
    sqcap: '⊓',
    sqcaps: '⊓︀',
    sqcup: '⊔',
    sqcups: '⊔︀',
    sqsub: '⊏',
    sqsube: '⊑',
    sqsubset: '⊏',
    sqsubseteq: '⊑',
    sqsup: '⊐',
    sqsupe: '⊒',
    sqsupset: '⊐',
    sqsupseteq: '⊒',
    squ: '□',
    square: '□',
    squarf: '▪',
    squf: '▪',
    srarr: '→',
    sscr: '𝓈',
    ssetmn: '∖',
    ssmile: '⌣',
    sstarf: '⋆',
    star: '☆',
    starf: '★',
    straightepsilon: 'ϵ',
    straightphi: 'ϕ',
    strns: '¯',
    sub: '⊂',
    subE: '⫅',
    subdot: '⪽',
    sube: '⊆',
    subedot: '⫃',
    submult: '⫁',
    subnE: '⫋',
    subne: '⊊',
    subplus: '⪿',
    subrarr: '⥹',
    subset: '⊂',
    subseteq: '⊆',
    subseteqq: '⫅',
    subsetneq: '⊊',
    subsetneqq: '⫋',
    subsim: '⫇',
    subsub: '⫕',
    subsup: '⫓',
    succ: '≻',
    succapprox: '⪸',
    succcurlyeq: '≽',
    succeq: '⪰',
    succnapprox: '⪺',
    succneqq: '⪶',
    succnsim: '⋩',
    succsim: '≿',
    sum: '∑',
    sung: '♪',
    sup1: '¹',
    sup2: '²',
    sup3: '³',
    sup: '⊃',
    supE: '⫆',
    supdot: '⪾',
    supdsub: '⫘',
    supe: '⊇',
    supedot: '⫄',
    suphsol: '⟉',
    suphsub: '⫗',
    suplarr: '⥻',
    supmult: '⫂',
    supnE: '⫌',
    supne: '⊋',
    supplus: '⫀',
    supset: '⊃',
    supseteq: '⊇',
    supseteqq: '⫆',
    supsetneq: '⊋',
    supsetneqq: '⫌',
    supsim: '⫈',
    supsub: '⫔',
    supsup: '⫖',
    swArr: '⇙',
    swarhk: '⤦',
    swarr: '↙',
    swarrow: '↙',
    swnwar: '⤪',
    szlig: 'ß',
    target: '⌖',
    tau: 'τ',
    tbrk: '⎴',
    tcaron: 'ť',
    tcedil: 'ţ',
    tcy: 'т',
    tdot: '⃛',
    telrec: '⌕',
    tfr: '𝔱',
    there4: '∴',
    therefore: '∴',
    theta: 'θ',
    thetasym: 'ϑ',
    thetav: 'ϑ',
    thickapprox: '≈',
    thicksim: '∼',
    thinsp: ' ',
    thkap: '≈',
    thksim: '∼',
    thorn: 'þ',
    tilde: '˜',
    times: '×',
    timesb: '⊠',
    timesbar: '⨱',
    timesd: '⨰',
    tint: '∭',
    toea: '⤨',
    top: '⊤',
    topbot: '⌶',
    topcir: '⫱',
    topf: '𝕥',
    topfork: '⫚',
    tosa: '⤩',
    tprime: '‴',
    trade: '™',
    triangle: '▵',
    triangledown: '▿',
    triangleleft: '◃',
    trianglelefteq: '⊴',
    triangleq: '≜',
    triangleright: '▹',
    trianglerighteq: '⊵',
    tridot: '◬',
    trie: '≜',
    triminus: '⨺',
    triplus: '⨹',
    trisb: '⧍',
    tritime: '⨻',
    trpezium: '⏢',
    tscr: '𝓉',
    tscy: 'ц',
    tshcy: 'ћ',
    tstrok: 'ŧ',
    twixt: '≬',
    twoheadleftarrow: '↞',
    twoheadrightarrow: '↠',
    uArr: '⇑',
    uHar: '⥣',
    uacute: 'ú',
    uarr: '↑',
    ubrcy: 'ў',
    ubreve: 'ŭ',
    ucirc: 'û',
    ucy: 'у',
    udarr: '⇅',
    udblac: 'ű',
    udhar: '⥮',
    ufisht: '⥾',
    ufr: '𝔲',
    ugrave: 'ù',
    uharl: '↿',
    uharr: '↾',
    uhblk: '▀',
    ulcorn: '⌜',
    ulcorner: '⌜',
    ulcrop: '⌏',
    ultri: '◸',
    umacr: 'ū',
    uml: '¨',
    uogon: 'ų',
    uopf: '𝕦',
    uparrow: '↑',
    updownarrow: '↕',
    upharpoonleft: '↿',
    upharpoonright: '↾',
    uplus: '⊎',
    upsi: 'υ',
    upsih: 'ϒ',
    upsilon: 'υ',
    upuparrows: '⇈',
    urcorn: '⌝',
    urcorner: '⌝',
    urcrop: '⌎',
    uring: 'ů',
    urtri: '◹',
    uscr: '𝓊',
    utdot: '⋰',
    utilde: 'ũ',
    utri: '▵',
    utrif: '▴',
    uuarr: '⇈',
    uuml: 'ü',
    uwangle: '⦧',
    vArr: '⇕',
    vBar: '⫨',
    vBarv: '⫩',
    vDash: '⊨',
    vangrt: '⦜',
    varepsilon: 'ϵ',
    varkappa: 'ϰ',
    varnothing: '∅',
    varphi: 'ϕ',
    varpi: 'ϖ',
    varpropto: '∝',
    varr: '↕',
    varrho: 'ϱ',
    varsigma: 'ς',
    varsubsetneq: '⊊︀',
    varsubsetneqq: '⫋︀',
    varsupsetneq: '⊋︀',
    varsupsetneqq: '⫌︀',
    vartheta: 'ϑ',
    vartriangleleft: '⊲',
    vartriangleright: '⊳',
    vcy: 'в',
    vdash: '⊢',
    vee: '∨',
    veebar: '⊻',
    veeeq: '≚',
    vellip: '⋮',
    verbar: '|',
    vert: '|',
    vfr: '𝔳',
    vltri: '⊲',
    vnsub: '⊂⃒',
    vnsup: '⊃⃒',
    vopf: '𝕧',
    vprop: '∝',
    vrtri: '⊳',
    vscr: '𝓋',
    vsubnE: '⫋︀',
    vsubne: '⊊︀',
    vsupnE: '⫌︀',
    vsupne: '⊋︀',
    vzigzag: '⦚',
    wcirc: 'ŵ',
    wedbar: '⩟',
    wedge: '∧',
    wedgeq: '≙',
    weierp: '℘',
    wfr: '𝔴',
    wopf: '𝕨',
    wp: '℘',
    wr: '≀',
    wreath: '≀',
    wscr: '𝓌',
    xcap: '⋂',
    xcirc: '◯',
    xcup: '⋃',
    xdtri: '▽',
    xfr: '𝔵',
    xhArr: '⟺',
    xharr: '⟷',
    xi: 'ξ',
    xlArr: '⟸',
    xlarr: '⟵',
    xmap: '⟼',
    xnis: '⋻',
    xodot: '⨀',
    xopf: '𝕩',
    xoplus: '⨁',
    xotime: '⨂',
    xrArr: '⟹',
    xrarr: '⟶',
    xscr: '𝓍',
    xsqcup: '⨆',
    xuplus: '⨄',
    xutri: '△',
    xvee: '⋁',
    xwedge: '⋀',
    yacute: 'ý',
    yacy: 'я',
    ycirc: 'ŷ',
    ycy: 'ы',
    yen: '¥',
    yfr: '𝔶',
    yicy: 'ї',
    yopf: '𝕪',
    yscr: '𝓎',
    yucy: 'ю',
    yuml: 'ÿ',
    zacute: 'ź',
    zcaron: 'ž',
    zcy: 'з',
    zdot: 'ż',
    zeetrf: 'ℨ',
    zeta: 'ζ',
    zfr: '𝔷',
    zhcy: 'ж',
    zigrarr: '⇝',
    zopf: '𝕫',
    zscr: '𝓏',
    zwj: '‍',
    zwnj: '‌'
};
}}),
"[project]/apps/website/docs/node_modules/decode-named-character-reference/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "decodeNamedCharacterReference": (()=>decodeNamedCharacterReference)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$character$2d$entities$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/character-entities/index.js [app-rsc] (ecmascript)");
;
const own = {}.hasOwnProperty;
function decodeNamedCharacterReference(value) {
    return own.call(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$character$2d$entities$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["characterEntities"], value) ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$character$2d$entities$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["characterEntities"][value] : false;
}
}}),
"[project]/apps/website/docs/node_modules/micromark-util-resolve-all/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'
 */ /**
 * Call all `resolveAll`s.
 *
 * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs
 *   List of constructs, optionally with `resolveAll`s.
 * @param {Array<Event>} events
 *   List of events.
 * @param {TokenizeContext} context
 *   Context used by `tokenize`.
 * @returns {Array<Event>}
 *   Changed events.
 */ __turbopack_esm__({
    "resolveAll": (()=>resolveAll)
});
function resolveAll(constructs, events, context) {
    /** @type {Array<Resolver>} */ const called = [];
    let index = -1;
    while(++index < constructs.length){
        const resolve = constructs[index].resolveAll;
        if (resolve && !called.includes(resolve)) {
            events = resolve(events, context);
            called.push(resolve);
        }
    }
    return events;
}
}}),
"[project]/apps/website/docs/node_modules/micromark-util-classify-character/dev/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Code} from 'micromark-util-types'
 */ __turbopack_esm__({
    "classifyCharacter": (()=>classifyCharacter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
;
;
function classifyCharacter(code) {
    if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"])(code)) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].characterGroupWhitespace;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodePunctuation"])(code)) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].characterGroupPunctuation;
    }
}
}}),
"[project]/apps/website/docs/node_modules/ms/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Helpers.
 */ var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */ module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
        return parse(val);
    } else if (type === 'number' && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */ function parse(str) {
    str = String(str);
    if (str.length > 100) {
        return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
        return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch(type){
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
            return n * y;
        case 'weeks':
        case 'week':
        case 'w':
            return n * w;
        case 'days':
        case 'day':
        case 'd':
            return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
            return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
            return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
            return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
            return n;
        default:
            return undefined;
    }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
    }
    if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
    }
    if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
    }
    if (msAbs >= s) {
        return Math.round(ms / s) + 's';
    }
    return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
    }
    if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
    }
    if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
    }
    if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
    }
    return ms + ' ms';
}
/**
 * Pluralization helper.
 */ function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}
}}),
"[project]/apps/website/docs/node_modules/debug/src/common.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */ function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = __turbopack_require__("[project]/apps/website/docs/node_modules/ms/index.js [app-rsc] (ecmascript)");
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key)=>{
        createDebug[key] = env[key];
    });
    /**
	* The currently active debug mode names, and names to skip.
	*/ createDebug.names = [];
    createDebug.skips = [];
    /**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/ createDebug.formatters = {};
    /**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/ function selectColor(namespace) {
        let hash = 0;
        for(let i = 0; i < namespace.length; i++){
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    /**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/ function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
            // Disabled?
            if (!debug.enabled) {
                return;
            }
            const self = debug;
            // Set `diff` timestamp
            const curr = Number(new Date());
            const ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== 'string') {
                // Anything else let's inspect with %O
                args.unshift('%O');
            }
            // Apply any `formatters` transformations
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format)=>{
                // If we encounter an escaped % then don't increase the array index
                if (match === '%%') {
                    return '%';
                }
                index++;
                const formatter = createDebug.formatters[format];
                if (typeof formatter === 'function') {
                    const val = args[index];
                    match = formatter.call(self, val);
                    // Now we need to remove `args[index]` since it's inlined in the `format`
                    args.splice(index, 1);
                    index--;
                }
                return match;
            });
            // Apply env-specific formatting (colors, etc.)
            createDebug.formatArgs.call(self, args);
            const logFn = self.log || createDebug.log;
            logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.
        Object.defineProperty(debug, 'enabled', {
            enumerable: true,
            configurable: false,
            get: ()=>{
                if (enableOverride !== null) {
                    return enableOverride;
                }
                if (namespacesCache !== createDebug.namespaces) {
                    namespacesCache = createDebug.namespaces;
                    enabledCache = createDebug.enabled(namespace);
                }
                return enabledCache;
            },
            set: (v)=>{
                enableOverride = v;
            }
        });
        // Env-specific initialization logic for debug instances
        if (typeof createDebug.init === 'function') {
            createDebug.init(debug);
        }
        return debug;
    }
    function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
    }
    /**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/ function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        const split = (typeof namespaces === 'string' ? namespaces : '').trim().replace(' ', ',').split(',').filter(Boolean);
        for (const ns of split){
            if (ns[0] === '-') {
                createDebug.skips.push(ns.slice(1));
            } else {
                createDebug.names.push(ns);
            }
        }
    }
    /**
	 * Checks if the given string matches a namespace template, honoring
	 * asterisks as wildcards.
	 *
	 * @param {String} search
	 * @param {String} template
	 * @return {Boolean}
	 */ function matchesTemplate(search, template) {
        let searchIndex = 0;
        let templateIndex = 0;
        let starIndex = -1;
        let matchIndex = 0;
        while(searchIndex < search.length){
            if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {
                // Match character or proceed with wildcard
                if (template[templateIndex] === '*') {
                    starIndex = templateIndex;
                    matchIndex = searchIndex;
                    templateIndex++; // Skip the '*'
                } else {
                    searchIndex++;
                    templateIndex++;
                }
            } else if (starIndex !== -1) {
                // Backtrack to the last '*' and try to match more characters
                templateIndex = starIndex + 1;
                matchIndex++;
                searchIndex = matchIndex;
            } else {
                return false; // No match
            }
        }
        // Handle trailing '*' in template
        while(templateIndex < template.length && template[templateIndex] === '*'){
            templateIndex++;
        }
        return templateIndex === template.length;
    }
    /**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/ function disable() {
        const namespaces = [
            ...createDebug.names,
            ...createDebug.skips.map((namespace)=>'-' + namespace)
        ].join(',');
        createDebug.enable('');
        return namespaces;
    }
    /**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/ function enabled(name) {
        for (const skip of createDebug.skips){
            if (matchesTemplate(name, skip)) {
                return false;
            }
        }
        for (const ns of createDebug.names){
            if (matchesTemplate(name, ns)) {
                return true;
            }
        }
        return false;
    }
    /**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/ function coerce(val) {
        if (val instanceof Error) {
            return val.stack || val.message;
        }
        return val;
    }
    /**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/ function destroy() {
        console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    }
    createDebug.enable(createDebug.load());
    return createDebug;
}
module.exports = setup;
}}),
"[project]/apps/website/docs/node_modules/debug/src/node.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Module dependencies.
 */ const tty = __turbopack_require__("[externals]/tty [external] (tty, cjs)");
const util = __turbopack_require__("[externals]/util [external] (util, cjs)");
/**
 * This is the Node.js implementation of `debug()`.
 */ exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.destroy = util.deprecate(()=>{}, 'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
/**
 * Colors.
 */ exports.colors = [
    6,
    2,
    3,
    4,
    5,
    1
];
try {
    // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
    // eslint-disable-next-line import/no-extraneous-dependencies
    const supportsColor = (()=>{
        const e = new Error("Cannot find module 'supports-color'");
        e.code = 'MODULE_NOT_FOUND';
        throw e;
    })();
    if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [
            20,
            21,
            26,
            27,
            32,
            33,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            56,
            57,
            62,
            63,
            68,
            69,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            92,
            93,
            98,
            99,
            112,
            113,
            128,
            129,
            134,
            135,
            148,
            149,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            178,
            179,
            184,
            185,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            214,
            215,
            220,
            221
        ];
    }
} catch (error) {
// Swallow - we only care if `supports-color` is available; it doesn't have to be.
}
/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */ exports.inspectOpts = Object.keys(process.env).filter((key)=>{
    return /^debug_/i.test(key);
}).reduce((obj, key)=>{
    // Camel-case
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k)=>{
        return k.toUpperCase();
    });
    // Coerce string value into JS value
    let val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
    } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
    } else if (val === 'null') {
        val = null;
    } else {
        val = Number(val);
    }
    obj[prop] = val;
    return obj;
}, {});
/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */ function useColors() {
    return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
}
/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    const { namespace: name, useColors } = this;
    if (useColors) {
        const c = this.color;
        const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
        const prefix = `  ${colorCode};1m${name} \u001B[0m`;
        args[0] = prefix + args[0].split('\n').join('\n' + prefix);
        args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
    } else {
        args[0] = getDate() + name + ' ' + args[0];
    }
}
function getDate() {
    if (exports.inspectOpts.hideDate) {
        return '';
    }
    return new Date().toISOString() + ' ';
}
/**
 * Invokes `util.formatWithOptions()` with the specified arguments and writes to stderr.
 */ function log(...args) {
    return process.stderr.write(util.formatWithOptions(exports.inspectOpts, ...args) + '\n');
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    if (namespaces) {
        process.env.DEBUG = namespaces;
    } else {
        // If you set a process.env field to null or undefined, it gets cast to the
        // string 'null' or 'undefined'. Just delete instead.
        delete process.env.DEBUG;
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    return process.env.DEBUG;
}
/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */ function init(debug) {
    debug.inspectOpts = {};
    const keys = Object.keys(exports.inspectOpts);
    for(let i = 0; i < keys.length; i++){
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
}
module.exports = __turbopack_require__("[project]/apps/website/docs/node_modules/debug/src/common.js [app-rsc] (ecmascript)")(exports);
const { formatters } = module.exports;
/**
 * Map %o to `util.inspect()`, all on a single line.
 */ formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split('\n').map((str)=>str.trim()).join(' ');
};
/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */ formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
};
}}),
"[project]/apps/website/docs/node_modules/debug/src/browser.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/* eslint-env browser */ /**
 * This is the web browser implementation of `debug()`.
 */ exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (()=>{
    let warned = false;
    return ()=>{
        if (!warned) {
            warned = true;
            console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
        }
    };
})();
/**
 * Colors.
 */ exports.colors = [
    '#0000CC',
    '#0000FF',
    '#0033CC',
    '#0033FF',
    '#0066CC',
    '#0066FF',
    '#0099CC',
    '#0099FF',
    '#00CC00',
    '#00CC33',
    '#00CC66',
    '#00CC99',
    '#00CCCC',
    '#00CCFF',
    '#3300CC',
    '#3300FF',
    '#3333CC',
    '#3333FF',
    '#3366CC',
    '#3366FF',
    '#3399CC',
    '#3399FF',
    '#33CC00',
    '#33CC33',
    '#33CC66',
    '#33CC99',
    '#33CCCC',
    '#33CCFF',
    '#6600CC',
    '#6600FF',
    '#6633CC',
    '#6633FF',
    '#66CC00',
    '#66CC33',
    '#9900CC',
    '#9900FF',
    '#9933CC',
    '#9933FF',
    '#99CC00',
    '#99CC33',
    '#CC0000',
    '#CC0033',
    '#CC0066',
    '#CC0099',
    '#CC00CC',
    '#CC00FF',
    '#CC3300',
    '#CC3333',
    '#CC3366',
    '#CC3399',
    '#CC33CC',
    '#CC33FF',
    '#CC6600',
    '#CC6633',
    '#CC9900',
    '#CC9933',
    '#CCCC00',
    '#CCCC33',
    '#FF0000',
    '#FF0033',
    '#FF0066',
    '#FF0099',
    '#FF00CC',
    '#FF00FF',
    '#FF3300',
    '#FF3333',
    '#FF3366',
    '#FF3399',
    '#FF33CC',
    '#FF33FF',
    '#FF6600',
    '#FF6633',
    '#FF9900',
    '#FF9933',
    '#FFCC00',
    '#FFCC33'
];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */ // eslint-disable-next-line complexity
function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
    }
    let m;
    // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    // eslint-disable-next-line no-return-assign
    return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);
    if (!this.useColors) {
        return;
    }
    const c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');
    // The final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match)=>{
        if (match === '%%') {
            return;
        }
        index++;
        if (match === '%c') {
            // We only are interested in the *last* %c
            // (the user may have provided their own)
            lastC = index;
        }
    });
    args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */ exports.log = console.debug || console.log || (()=>{});
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    try {
        if (namespaces) {
            exports.storage.setItem('debug', namespaces);
        } else {
            exports.storage.removeItem('debug');
        }
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    let r;
    try {
        r = exports.storage.getItem('debug');
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== 'undefined' && 'env' in process) {
        r = process.env.DEBUG;
    }
    return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */ function localstorage() {
    try {
        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
        // The Browser also has localStorage in the global context.
        return localStorage;
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
module.exports = __turbopack_require__("[project]/apps/website/docs/node_modules/debug/src/common.js [app-rsc] (ecmascript)")(exports);
const { formatters } = module.exports;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */ formatters.j = function(v) {
    try {
        return JSON.stringify(v);
    } catch (error) {
        return '[UnexpectedJSONParseError]: ' + error.message;
    }
};
}}),
"[project]/apps/website/docs/node_modules/debug/src/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */ if (typeof process === 'undefined' || process.type === 'renderer' || ("TURBOPACK compile-time value", false) === true || process.__nwjs) {
    module.exports = __turbopack_require__("[project]/apps/website/docs/node_modules/debug/src/browser.js [app-rsc] (ecmascript)");
} else {
    module.exports = __turbopack_require__("[project]/apps/website/docs/node_modules/debug/src/node.js [app-rsc] (ecmascript)");
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-string/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('mdast').Nodes} Nodes
 *
 * @typedef Options
 *   Configuration (optional).
 * @property {boolean | null | undefined} [includeImageAlt=true]
 *   Whether to use `alt` for `image`s (default: `true`).
 * @property {boolean | null | undefined} [includeHtml=true]
 *   Whether to use `value` of HTML (default: `true`).
 */ /** @type {Options} */ __turbopack_esm__({
    "toString": (()=>toString)
});
const emptyOptions = {};
function toString(value, options) {
    const settings = options || emptyOptions;
    const includeImageAlt = typeof settings.includeImageAlt === 'boolean' ? settings.includeImageAlt : true;
    const includeHtml = typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true;
    return one(value, includeImageAlt, includeHtml);
}
/**
 * One node or several nodes.
 *
 * @param {unknown} value
 *   Thing to serialize.
 * @param {boolean} includeImageAlt
 *   Include image `alt`s.
 * @param {boolean} includeHtml
 *   Include HTML.
 * @returns {string}
 *   Serialized node.
 */ function one(value, includeImageAlt, includeHtml) {
    if (node(value)) {
        if ('value' in value) {
            return value.type === 'html' && !includeHtml ? '' : value.value;
        }
        if (includeImageAlt && 'alt' in value && value.alt) {
            return value.alt;
        }
        if ('children' in value) {
            return all(value.children, includeImageAlt, includeHtml);
        }
    }
    if (Array.isArray(value)) {
        return all(value, includeImageAlt, includeHtml);
    }
    return '';
}
/**
 * Serialize a list of nodes.
 *
 * @param {Array<unknown>} values
 *   Thing to serialize.
 * @param {boolean} includeImageAlt
 *   Include image `alt`s.
 * @param {boolean} includeHtml
 *   Include HTML.
 * @returns {string}
 *   Serialized nodes.
 */ function all(values, includeImageAlt, includeHtml) {
    /** @type {Array<string>} */ const result = [];
    let index = -1;
    while(++index < values.length){
        result[index] = one(values[index], includeImageAlt, includeHtml);
    }
    return result.join('');
}
/**
 * Check if `value` looks like a node.
 *
 * @param {unknown} value
 *   Thing.
 * @returns {value is Nodes}
 *   Whether `value` is a node.
 */ function node(value) {
    return Boolean(value && typeof value === 'object');
}
}}),
"[project]/apps/website/docs/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "decodeNumericCharacterReference": (()=>decodeNumericCharacterReference)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/values.js [app-rsc] (ecmascript)");
;
function decodeNumericCharacterReference(value, base) {
    const code = Number.parseInt(value, base);
    if (// C0 except for HT, LF, FF, CR, space.
    code < __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].ht || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].vt || code > __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].cr && code < __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].space || code > __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].tilde && code < 160 || code > 55_295 && code < 57_344 || code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */ (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */ // Out of range
    code > 1_114_111) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].replacementCharacter;
    }
    return String.fromCodePoint(code);
}
}}),
"[project]/apps/website/docs/node_modules/micromark-util-decode-string/dev/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "decodeString": (()=>decodeString)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$decode$2d$named$2d$character$2d$reference$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/decode-named-character-reference/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$decode$2d$numeric$2d$character$2d$reference$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
;
;
;
const characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function decodeString(value) {
    return value.replace(characterEscapeOrReference, decode);
}
/**
 * @param {string} $0
 *   Match.
 * @param {string} $1
 *   Character escape.
 * @param {string} $2
 *   Character reference.
 * @returns {string}
 *   Decoded value
 */ function decode($0, $1, $2) {
    if ($1) {
        // Escape.
        return $1;
    }
    // Reference.
    const head = $2.charCodeAt(0);
    if (head === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].numberSign) {
        const head = $2.charCodeAt(1);
        const hex = head === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseX || head === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].uppercaseX;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$decode$2d$numeric$2d$character$2d$reference$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["decodeNumericCharacterReference"])($2.slice(hex ? 2 : 1), hex ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].numericBaseHexadecimal : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].numericBaseDecimal);
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$decode$2d$named$2d$character$2d$reference$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["decodeNamedCharacterReference"])($2) || $0;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-from-markdown/dev/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   Break,
 *   Blockquote,
 *   Code,
 *   Definition,
 *   Emphasis,
 *   Heading,
 *   Html,
 *   Image,
 *   InlineCode,
 *   Link,
 *   ListItem,
 *   List,
 *   Nodes,
 *   Paragraph,
 *   PhrasingContent,
 *   ReferenceType,
 *   Root,
 *   Strong,
 *   Text,
 *   ThematicBreak
 * } from 'mdast'
 * @import {
 *   Encoding,
 *   Event,
 *   Token,
 *   Value
 * } from 'micromark-util-types'
 * @import {Point} from 'unist'
 * @import {
 *   CompileContext,
 *   CompileData,
 *   Config,
 *   Extension,
 *   Handle,
 *   OnEnterError,
 *   Options
 * } from './types.js'
 */ __turbopack_esm__({
    "fromMarkdown": (()=>fromMarkdown)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$postprocess$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark/dev/lib/postprocess.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$parse$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark/dev/lib/parse.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$preprocess$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark/dev/lib/preprocess.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-stringify-position/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-string/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$normalize$2d$identifier$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-normalize-identifier/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$decode$2d$string$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-decode-string/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$decode$2d$named$2d$character$2d$reference$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/decode-named-character-reference/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$decode$2d$numeric$2d$character$2d$reference$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
;
const own = {}.hasOwnProperty;
function fromMarkdown(value, encoding, options) {
    if (typeof encoding !== 'string') {
        options = encoding;
        encoding = undefined;
    }
    return compiler(options)((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$postprocess$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["postprocess"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$parse$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["parse"])(options).document().write((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2f$dev$2f$lib$2f$preprocess$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["preprocess"])()(value, encoding, true))));
}
/**
 * Note this compiler only understand complete buffering, not streaming.
 *
 * @param {Options | null | undefined} [options]
 */ function compiler(options) {
    /** @type {Config} */ const config = {
        transforms: [],
        canContainEols: [
            'emphasis',
            'fragment',
            'heading',
            'paragraph',
            'strong'
        ],
        enter: {
            autolink: opener(link),
            autolinkProtocol: onenterdata,
            autolinkEmail: onenterdata,
            atxHeading: opener(heading),
            blockQuote: opener(blockQuote),
            characterEscape: onenterdata,
            characterReference: onenterdata,
            codeFenced: opener(codeFlow),
            codeFencedFenceInfo: buffer,
            codeFencedFenceMeta: buffer,
            codeIndented: opener(codeFlow, buffer),
            codeText: opener(codeText, buffer),
            codeTextData: onenterdata,
            data: onenterdata,
            codeFlowValue: onenterdata,
            definition: opener(definition),
            definitionDestinationString: buffer,
            definitionLabelString: buffer,
            definitionTitleString: buffer,
            emphasis: opener(emphasis),
            hardBreakEscape: opener(hardBreak),
            hardBreakTrailing: opener(hardBreak),
            htmlFlow: opener(html, buffer),
            htmlFlowData: onenterdata,
            htmlText: opener(html, buffer),
            htmlTextData: onenterdata,
            image: opener(image),
            label: buffer,
            link: opener(link),
            listItem: opener(listItem),
            listItemValue: onenterlistitemvalue,
            listOrdered: opener(list, onenterlistordered),
            listUnordered: opener(list),
            paragraph: opener(paragraph),
            reference: onenterreference,
            referenceString: buffer,
            resourceDestinationString: buffer,
            resourceTitleString: buffer,
            setextHeading: opener(heading),
            strong: opener(strong),
            thematicBreak: opener(thematicBreak)
        },
        exit: {
            atxHeading: closer(),
            atxHeadingSequence: onexitatxheadingsequence,
            autolink: closer(),
            autolinkEmail: onexitautolinkemail,
            autolinkProtocol: onexitautolinkprotocol,
            blockQuote: closer(),
            characterEscapeValue: onexitdata,
            characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
            characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
            characterReferenceValue: onexitcharacterreferencevalue,
            characterReference: onexitcharacterreference,
            codeFenced: closer(onexitcodefenced),
            codeFencedFence: onexitcodefencedfence,
            codeFencedFenceInfo: onexitcodefencedfenceinfo,
            codeFencedFenceMeta: onexitcodefencedfencemeta,
            codeFlowValue: onexitdata,
            codeIndented: closer(onexitcodeindented),
            codeText: closer(onexitcodetext),
            codeTextData: onexitdata,
            data: onexitdata,
            definition: closer(),
            definitionDestinationString: onexitdefinitiondestinationstring,
            definitionLabelString: onexitdefinitionlabelstring,
            definitionTitleString: onexitdefinitiontitlestring,
            emphasis: closer(),
            hardBreakEscape: closer(onexithardbreak),
            hardBreakTrailing: closer(onexithardbreak),
            htmlFlow: closer(onexithtmlflow),
            htmlFlowData: onexitdata,
            htmlText: closer(onexithtmltext),
            htmlTextData: onexitdata,
            image: closer(onexitimage),
            label: onexitlabel,
            labelText: onexitlabeltext,
            lineEnding: onexitlineending,
            link: closer(onexitlink),
            listItem: closer(),
            listOrdered: closer(),
            listUnordered: closer(),
            paragraph: closer(),
            referenceString: onexitreferencestring,
            resourceDestinationString: onexitresourcedestinationstring,
            resourceTitleString: onexitresourcetitlestring,
            resource: onexitresource,
            setextHeading: closer(onexitsetextheading),
            setextHeadingLineSequence: onexitsetextheadinglinesequence,
            setextHeadingText: onexitsetextheadingtext,
            strong: closer(),
            thematicBreak: closer()
        }
    };
    configure(config, (options || {}).mdastExtensions || []);
    /** @type {CompileData} */ const data = {};
    return compile;
    "TURBOPACK unreachable";
    /**
   * Turn micromark events into an mdast tree.
   *
   * @param {Array<Event>} events
   *   Events.
   * @returns {Root}
   *   mdast tree.
   */ function compile(events) {
        /** @type {Root} */ let tree = {
            type: 'root',
            children: []
        };
        /** @type {Omit<CompileContext, 'sliceSerialize'>} */ const context = {
            stack: [
                tree
            ],
            tokenStack: [],
            config,
            enter,
            exit,
            buffer,
            resume,
            data
        };
        /** @type {Array<number>} */ const listStack = [];
        let index = -1;
        while(++index < events.length){
            // We preprocess lists to add `listItem` tokens, and to infer whether
            // items the list itself are spread out.
            if (events[index][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].listOrdered || events[index][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].listUnordered) {
                if (events[index][0] === 'enter') {
                    listStack.push(index);
                } else {
                    const tail = listStack.pop();
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof tail === 'number', 'expected list ot be open');
                    index = prepareList(events, tail, index);
                }
            }
        }
        index = -1;
        while(++index < events.length){
            const handler = config[events[index][0]];
            if (own.call(handler, events[index][1].type)) {
                handler[events[index][1].type].call(Object.assign({
                    sliceSerialize: events[index][2].sliceSerialize
                }, context), events[index][1]);
            }
        }
        // Handle tokens still being open.
        if (context.tokenStack.length > 0) {
            const tail = context.tokenStack[context.tokenStack.length - 1];
            const handler = tail[1] || defaultOnError;
            handler.call(context, undefined, tail[0]);
        }
        // Figure out `root` position.
        tree.position = {
            start: point(events.length > 0 ? events[0][1].start : {
                line: 1,
                column: 1,
                offset: 0
            }),
            end: point(events.length > 0 ? events[events.length - 2][1].end : {
                line: 1,
                column: 1,
                offset: 0
            })
        };
        // Call transforms.
        index = -1;
        while(++index < config.transforms.length){
            tree = config.transforms[index](tree) || tree;
        }
        return tree;
    }
    /**
   * @param {Array<Event>} events
   * @param {number} start
   * @param {number} length
   * @returns {number}
   */ function prepareList(events, start, length) {
        let index = start - 1;
        let containerBalance = -1;
        let listSpread = false;
        /** @type {Token | undefined} */ let listItem;
        /** @type {number | undefined} */ let lineIndex;
        /** @type {number | undefined} */ let firstBlankLineIndex;
        /** @type {boolean | undefined} */ let atMarker;
        while(++index <= length){
            const event = events[index];
            switch(event[1].type){
                case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].listUnordered:
                case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].listOrdered:
                case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].blockQuote:
                    {
                        if (event[0] === 'enter') {
                            containerBalance++;
                        } else {
                            containerBalance--;
                        }
                        atMarker = undefined;
                        break;
                    }
                case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank:
                    {
                        if (event[0] === 'enter') {
                            if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {
                                firstBlankLineIndex = index;
                            }
                            atMarker = undefined;
                        }
                        break;
                    }
                case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix:
                case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].listItemValue:
                case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].listItemMarker:
                case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].listItemPrefix:
                case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].listItemPrefixWhitespace:
                    {
                        break;
                    }
                default:
                    {
                        atMarker = undefined;
                    }
            }
            if (!containerBalance && event[0] === 'enter' && event[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].listItemPrefix || containerBalance === -1 && event[0] === 'exit' && (event[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].listUnordered || event[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].listOrdered)) {
                if (listItem) {
                    let tailIndex = index;
                    lineIndex = undefined;
                    while(tailIndex--){
                        const tailEvent = events[tailIndex];
                        if (tailEvent[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding || tailEvent[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank) {
                            if (tailEvent[0] === 'exit') continue;
                            if (lineIndex) {
                                events[lineIndex][1].type = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank;
                                listSpread = true;
                            }
                            tailEvent[1].type = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding;
                            lineIndex = tailIndex;
                        } else if (tailEvent[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix || tailEvent[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].blockQuotePrefix || tailEvent[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].blockQuotePrefixWhitespace || tailEvent[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].blockQuoteMarker || tailEvent[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].listItemIndent) {
                        // Empty
                        } else {
                            break;
                        }
                    }
                    if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
                        listItem._spread = true;
                    }
                    // Fix position.
                    listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);
                    events.splice(lineIndex || index, 0, [
                        'exit',
                        listItem,
                        event[2]
                    ]);
                    index++;
                    length++;
                }
                // Create a new list item.
                if (event[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].listItemPrefix) {
                    /** @type {Token} */ const item = {
                        type: 'listItem',
                        _spread: false,
                        start: Object.assign({}, event[1].start),
                        // @ts-expect-error: we’ll add `end` in a second.
                        end: undefined
                    };
                    listItem = item;
                    events.splice(index, 0, [
                        'enter',
                        item,
                        event[2]
                    ]);
                    index++;
                    length++;
                    firstBlankLineIndex = undefined;
                    atMarker = true;
                }
            }
        }
        events[start][1]._spread = listSpread;
        return length;
    }
    /**
   * Create an opener handle.
   *
   * @param {(token: Token) => Nodes} create
   *   Create a node.
   * @param {Handle | undefined} [and]
   *   Optional function to also run.
   * @returns {Handle}
   *   Handle.
   */ function opener(create, and) {
        return open;
        "TURBOPACK unreachable";
        /**
     * @this {CompileContext}
     * @param {Token} token
     * @returns {undefined}
     */ function open(token) {
            enter.call(this, create(token), token);
            if (and) and.call(this, token);
        }
    }
    /**
   * @type {CompileContext['buffer']}
   */ function buffer() {
        this.stack.push({
            type: 'fragment',
            children: []
        });
    }
    /**
   * @type {CompileContext['enter']}
   */ function enter(node, token, errorHandler) {
        const parent = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(parent, 'expected `parent`');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])('children' in parent, 'expected `parent`');
        /** @type {Array<Nodes>} */ const siblings = parent.children;
        siblings.push(node);
        this.stack.push(node);
        this.tokenStack.push([
            token,
            errorHandler || undefined
        ]);
        node.position = {
            start: point(token.start),
            // @ts-expect-error: `end` will be patched later.
            end: undefined
        };
    }
    /**
   * Create a closer handle.
   *
   * @param {Handle | undefined} [and]
   *   Optional function to also run.
   * @returns {Handle}
   *   Handle.
   */ function closer(and) {
        return close;
        "TURBOPACK unreachable";
        /**
     * @this {CompileContext}
     * @param {Token} token
     * @returns {undefined}
     */ function close(token) {
            if (and) and.call(this, token);
            exit.call(this, token);
        }
    }
    /**
   * @type {CompileContext['exit']}
   */ function exit(token, onExitError) {
        const node = this.stack.pop();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected `node`');
        const open = this.tokenStack.pop();
        if (!open) {
            throw new Error('Cannot close `' + token.type + '` (' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"])({
                start: token.start,
                end: token.end
            }) + '): it’s not open');
        } else if (open[0].type !== token.type) {
            if (onExitError) {
                onExitError.call(this, token, open[0]);
            } else {
                const handler = open[1] || defaultOnError;
                handler.call(this, token, open[0]);
            }
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type !== 'fragment', 'unexpected fragment `exit`ed');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.position, 'expected `position` to be defined');
        node.position.end = point(token.end);
    }
    /**
   * @type {CompileContext['resume']}
   */ function resume() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(this.stack.pop());
    }
    //
    // Handlers.
    //
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onenterlistordered() {
        this.data.expectingFirstListItemValue = true;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onenterlistitemvalue(token) {
        if (this.data.expectingFirstListItemValue) {
            const ancestor = this.stack[this.stack.length - 2];
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(ancestor, 'expected nodes on stack');
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(ancestor.type === 'list', 'expected list on stack');
            ancestor.start = Number.parseInt(this.sliceSerialize(token), __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].numericBaseDecimal);
            this.data.expectingFirstListItemValue = undefined;
        }
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcodefencedfenceinfo() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'code', 'expected code on stack');
        node.lang = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcodefencedfencemeta() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'code', 'expected code on stack');
        node.meta = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcodefencedfence() {
        // Exit if this is the closing fence.
        if (this.data.flowCodeInside) return;
        this.buffer();
        this.data.flowCodeInside = true;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcodefenced() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'code', 'expected code on stack');
        node.value = data.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, '');
        this.data.flowCodeInside = undefined;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcodeindented() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'code', 'expected code on stack');
        node.value = data.replace(/(\r?\n|\r)$/g, '');
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitdefinitionlabelstring(token) {
        const label = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'definition', 'expected definition on stack');
        node.label = label;
        node.identifier = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$normalize$2d$identifier$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeIdentifier"])(this.sliceSerialize(token)).toLowerCase();
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitdefinitiontitlestring() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'definition', 'expected definition on stack');
        node.title = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitdefinitiondestinationstring() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'definition', 'expected definition on stack');
        node.url = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitatxheadingsequence(token) {
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'heading', 'expected heading on stack');
        if (!node.depth) {
            const depth = this.sliceSerialize(token).length;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(depth === 1 || depth === 2 || depth === 3 || depth === 4 || depth === 5 || depth === 6, 'expected `depth` between `1` and `6`');
            node.depth = depth;
        }
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitsetextheadingtext() {
        this.data.setextHeadingSlurpLineEnding = true;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitsetextheadinglinesequence(token) {
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'heading', 'expected heading on stack');
        node.depth = this.sliceSerialize(token).codePointAt(0) === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].equalsTo ? 1 : 2;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitsetextheading() {
        this.data.setextHeadingSlurpLineEnding = undefined;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onenterdata(token) {
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])('children' in node, 'expected parent on stack');
        /** @type {Array<Nodes>} */ const siblings = node.children;
        let tail = siblings[siblings.length - 1];
        if (!tail || tail.type !== 'text') {
            // Add a new text node.
            tail = text();
            tail.position = {
                start: point(token.start),
                // @ts-expect-error: we’ll add `end` later.
                end: undefined
            };
            siblings.push(tail);
        }
        this.stack.push(tail);
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitdata(token) {
        const tail = this.stack.pop();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tail, 'expected a `node` to be on the stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])('value' in tail, 'expected a `literal` to be on the stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tail.position, 'expected `node` to have an open position');
        tail.value += this.sliceSerialize(token);
        tail.position.end = point(token.end);
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitlineending(token) {
        const context = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(context, 'expected `node`');
        // If we’re at a hard break, include the line ending in there.
        if (this.data.atHardBreak) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])('children' in context, 'expected `parent`');
            const tail = context.children[context.children.length - 1];
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tail.position, 'expected tail to have a starting position');
            tail.position.end = point(token.end);
            this.data.atHardBreak = undefined;
            return;
        }
        if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {
            onenterdata.call(this, token);
            onexitdata.call(this, token);
        }
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexithardbreak() {
        this.data.atHardBreak = true;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexithtmlflow() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'html', 'expected html on stack');
        node.value = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexithtmltext() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'html', 'expected html on stack');
        node.value = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcodetext() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'inlineCode', 'expected inline code on stack');
        node.value = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitlink() {
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'link', 'expected link on stack');
        // Note: there are also `identifier` and `label` fields on this link node!
        // These are used / cleaned here.
        // To do: clean.
        if (this.data.inReference) {
            /** @type {ReferenceType} */ const referenceType = this.data.referenceType || 'shortcut';
            node.type += 'Reference';
            // @ts-expect-error: mutate.
            node.referenceType = referenceType;
            // @ts-expect-error: mutate.
            delete node.url;
            delete node.title;
        } else {
            // @ts-expect-error: mutate.
            delete node.identifier;
            // @ts-expect-error: mutate.
            delete node.label;
        }
        this.data.referenceType = undefined;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitimage() {
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'image', 'expected image on stack');
        // Note: there are also `identifier` and `label` fields on this link node!
        // These are used / cleaned here.
        // To do: clean.
        if (this.data.inReference) {
            /** @type {ReferenceType} */ const referenceType = this.data.referenceType || 'shortcut';
            node.type += 'Reference';
            // @ts-expect-error: mutate.
            node.referenceType = referenceType;
            // @ts-expect-error: mutate.
            delete node.url;
            delete node.title;
        } else {
            // @ts-expect-error: mutate.
            delete node.identifier;
            // @ts-expect-error: mutate.
            delete node.label;
        }
        this.data.referenceType = undefined;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitlabeltext(token) {
        const string = this.sliceSerialize(token);
        const ancestor = this.stack[this.stack.length - 2];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(ancestor, 'expected ancestor on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(ancestor.type === 'image' || ancestor.type === 'link', 'expected image or link on stack');
        // @ts-expect-error: stash this on the node, as it might become a reference
        // later.
        ancestor.label = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$decode$2d$string$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["decodeString"])(string);
        // @ts-expect-error: same as above.
        ancestor.identifier = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$normalize$2d$identifier$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeIdentifier"])(string).toLowerCase();
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitlabel() {
        const fragment = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(fragment, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(fragment.type === 'fragment', 'expected fragment on stack');
        const value = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'image' || node.type === 'link', 'expected image or link on stack');
        // Assume a reference.
        this.data.inReference = true;
        if (node.type === 'link') {
            /** @type {Array<PhrasingContent>} */ const children = fragment.children;
            node.children = children;
        } else {
            node.alt = value;
        }
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitresourcedestinationstring() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'image' || node.type === 'link', 'expected image or link on stack');
        node.url = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitresourcetitlestring() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'image' || node.type === 'link', 'expected image or link on stack');
        node.title = data;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitresource() {
        this.data.inReference = undefined;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onenterreference() {
        this.data.referenceType = 'collapsed';
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitreferencestring(token) {
        const label = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'image' || node.type === 'link', 'expected image reference or link reference on stack');
        // @ts-expect-error: stash this on the node, as it might become a reference
        // later.
        node.label = label;
        // @ts-expect-error: same as above.
        node.identifier = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$normalize$2d$identifier$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeIdentifier"])(this.sliceSerialize(token)).toLowerCase();
        this.data.referenceType = 'full';
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcharacterreferencemarker(token) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(token.type === 'characterReferenceMarkerNumeric' || token.type === 'characterReferenceMarkerHexadecimal');
        this.data.characterReferenceType = token.type;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcharacterreferencevalue(token) {
        const data = this.sliceSerialize(token);
        const type = this.data.characterReferenceType;
        /** @type {string} */ let value;
        if (type) {
            value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$decode$2d$numeric$2d$character$2d$reference$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["decodeNumericCharacterReference"])(data, type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].characterReferenceMarkerNumeric ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].numericBaseDecimal : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].numericBaseHexadecimal);
            this.data.characterReferenceType = undefined;
        } else {
            const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$decode$2d$named$2d$character$2d$reference$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["decodeNamedCharacterReference"])(data);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(result !== false, 'expected reference to decode');
            value = result;
        }
        const tail = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tail, 'expected `node`');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])('value' in tail, 'expected `node.value`');
        tail.value += value;
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitcharacterreference(token) {
        const tail = this.stack.pop();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tail, 'expected `node`');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tail.position, 'expected `node.position`');
        tail.position.end = point(token.end);
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitautolinkprotocol(token) {
        onexitdata.call(this, token);
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'link', 'expected link on stack');
        node.url = this.sliceSerialize(token);
    }
    /**
   * @this {CompileContext}
   * @type {Handle}
   */ function onexitautolinkemail(token) {
        onexitdata.call(this, token);
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node, 'expected node on stack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'link', 'expected link on stack');
        node.url = 'mailto:' + this.sliceSerialize(token);
    }
    //
    // Creaters.
    //
    /** @returns {Blockquote} */ function blockQuote() {
        return {
            type: 'blockquote',
            children: []
        };
    }
    /** @returns {Code} */ function codeFlow() {
        return {
            type: 'code',
            lang: null,
            meta: null,
            value: ''
        };
    }
    /** @returns {InlineCode} */ function codeText() {
        return {
            type: 'inlineCode',
            value: ''
        };
    }
    /** @returns {Definition} */ function definition() {
        return {
            type: 'definition',
            identifier: '',
            label: null,
            title: null,
            url: ''
        };
    }
    /** @returns {Emphasis} */ function emphasis() {
        return {
            type: 'emphasis',
            children: []
        };
    }
    /** @returns {Heading} */ function heading() {
        return {
            type: 'heading',
            // @ts-expect-error `depth` will be set later.
            depth: 0,
            children: []
        };
    }
    /** @returns {Break} */ function hardBreak() {
        return {
            type: 'break'
        };
    }
    /** @returns {Html} */ function html() {
        return {
            type: 'html',
            value: ''
        };
    }
    /** @returns {Image} */ function image() {
        return {
            type: 'image',
            title: null,
            url: '',
            alt: null
        };
    }
    /** @returns {Link} */ function link() {
        return {
            type: 'link',
            title: null,
            url: '',
            children: []
        };
    }
    /**
   * @param {Token} token
   * @returns {List}
   */ function list(token) {
        return {
            type: 'list',
            ordered: token.type === 'listOrdered',
            start: null,
            spread: token._spread,
            children: []
        };
    }
    /**
   * @param {Token} token
   * @returns {ListItem}
   */ function listItem(token) {
        return {
            type: 'listItem',
            spread: token._spread,
            checked: null,
            children: []
        };
    }
    /** @returns {Paragraph} */ function paragraph() {
        return {
            type: 'paragraph',
            children: []
        };
    }
    /** @returns {Strong} */ function strong() {
        return {
            type: 'strong',
            children: []
        };
    }
    /** @returns {Text} */ function text() {
        return {
            type: 'text',
            value: ''
        };
    }
    /** @returns {ThematicBreak} */ function thematicBreak() {
        return {
            type: 'thematicBreak'
        };
    }
}
/**
 * Copy a point-like value.
 *
 * @param {Point} d
 *   Point-like value.
 * @returns {Point}
 *   unist point.
 */ function point(d) {
    return {
        line: d.line,
        column: d.column,
        offset: d.offset
    };
}
/**
 * @param {Config} combined
 * @param {Array<Array<Extension> | Extension>} extensions
 * @returns {undefined}
 */ function configure(combined, extensions) {
    let index = -1;
    while(++index < extensions.length){
        const value = extensions[index];
        if (Array.isArray(value)) {
            configure(combined, value);
        } else {
            extension(combined, value);
        }
    }
}
/**
 * @param {Config} combined
 * @param {Extension} extension
 * @returns {undefined}
 */ function extension(combined, extension) {
    /** @type {keyof Extension} */ let key;
    for(key in extension){
        if (own.call(extension, key)) {
            switch(key){
                case 'canContainEols':
                    {
                        const right = extension[key];
                        if (right) {
                            combined[key].push(...right);
                        }
                        break;
                    }
                case 'transforms':
                    {
                        const right = extension[key];
                        if (right) {
                            combined[key].push(...right);
                        }
                        break;
                    }
                case 'enter':
                case 'exit':
                    {
                        const right = extension[key];
                        if (right) {
                            Object.assign(combined[key], right);
                        }
                        break;
                    }
            }
        }
    }
}
/** @type {OnEnterError} */ function defaultOnError(left, right) {
    if (left) {
        throw new Error('Cannot close `' + left.type + '` (' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"])({
            start: left.start,
            end: left.end
        }) + '): a different token (`' + right.type + '`, ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"])({
            start: right.start,
            end: right.end
        }) + ') is open');
    } else {
        throw new Error('Cannot close document, a token (`' + right.type + '`, ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"])({
            start: right.start,
            end: right.end
        }) + ') is still open');
    }
}
}}),
"[project]/apps/website/docs/node_modules/remark-parse/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions
 * @typedef {import('unified').Parser<Root>} Parser
 * @typedef {import('unified').Processor<Root>} Processor
 */ /**
 * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options
 */ __turbopack_esm__({
    "default": (()=>remarkParse)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$from$2d$markdown$2f$dev$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-from-markdown/dev/lib/index.js [app-rsc] (ecmascript)");
;
function remarkParse(options) {
    /** @type {Processor} */ // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.
    const self = this;
    self.parser = parser;
    /**
   * @type {Parser}
   */ function parser(doc) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$from$2d$markdown$2f$dev$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fromMarkdown"])(doc, {
            ...self.data('settings'),
            ...options,
            // Note: these options are not in the readme.
            // The goal is for them to be set by plugins on `data` instead of being
            // passed by users.
            extensions: self.data('micromarkExtensions') || [],
            mdastExtensions: self.data('fromMarkdownExtensions') || []
        });
    }
}
}}),
"[project]/apps/website/docs/node_modules/acorn-jsx/xhtml.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports = {
    quot: '\u0022',
    amp: '&',
    apos: '\u0027',
    lt: '<',
    gt: '>',
    nbsp: '\u00A0',
    iexcl: '\u00A1',
    cent: '\u00A2',
    pound: '\u00A3',
    curren: '\u00A4',
    yen: '\u00A5',
    brvbar: '\u00A6',
    sect: '\u00A7',
    uml: '\u00A8',
    copy: '\u00A9',
    ordf: '\u00AA',
    laquo: '\u00AB',
    not: '\u00AC',
    shy: '\u00AD',
    reg: '\u00AE',
    macr: '\u00AF',
    deg: '\u00B0',
    plusmn: '\u00B1',
    sup2: '\u00B2',
    sup3: '\u00B3',
    acute: '\u00B4',
    micro: '\u00B5',
    para: '\u00B6',
    middot: '\u00B7',
    cedil: '\u00B8',
    sup1: '\u00B9',
    ordm: '\u00BA',
    raquo: '\u00BB',
    frac14: '\u00BC',
    frac12: '\u00BD',
    frac34: '\u00BE',
    iquest: '\u00BF',
    Agrave: '\u00C0',
    Aacute: '\u00C1',
    Acirc: '\u00C2',
    Atilde: '\u00C3',
    Auml: '\u00C4',
    Aring: '\u00C5',
    AElig: '\u00C6',
    Ccedil: '\u00C7',
    Egrave: '\u00C8',
    Eacute: '\u00C9',
    Ecirc: '\u00CA',
    Euml: '\u00CB',
    Igrave: '\u00CC',
    Iacute: '\u00CD',
    Icirc: '\u00CE',
    Iuml: '\u00CF',
    ETH: '\u00D0',
    Ntilde: '\u00D1',
    Ograve: '\u00D2',
    Oacute: '\u00D3',
    Ocirc: '\u00D4',
    Otilde: '\u00D5',
    Ouml: '\u00D6',
    times: '\u00D7',
    Oslash: '\u00D8',
    Ugrave: '\u00D9',
    Uacute: '\u00DA',
    Ucirc: '\u00DB',
    Uuml: '\u00DC',
    Yacute: '\u00DD',
    THORN: '\u00DE',
    szlig: '\u00DF',
    agrave: '\u00E0',
    aacute: '\u00E1',
    acirc: '\u00E2',
    atilde: '\u00E3',
    auml: '\u00E4',
    aring: '\u00E5',
    aelig: '\u00E6',
    ccedil: '\u00E7',
    egrave: '\u00E8',
    eacute: '\u00E9',
    ecirc: '\u00EA',
    euml: '\u00EB',
    igrave: '\u00EC',
    iacute: '\u00ED',
    icirc: '\u00EE',
    iuml: '\u00EF',
    eth: '\u00F0',
    ntilde: '\u00F1',
    ograve: '\u00F2',
    oacute: '\u00F3',
    ocirc: '\u00F4',
    otilde: '\u00F5',
    ouml: '\u00F6',
    divide: '\u00F7',
    oslash: '\u00F8',
    ugrave: '\u00F9',
    uacute: '\u00FA',
    ucirc: '\u00FB',
    uuml: '\u00FC',
    yacute: '\u00FD',
    thorn: '\u00FE',
    yuml: '\u00FF',
    OElig: '\u0152',
    oelig: '\u0153',
    Scaron: '\u0160',
    scaron: '\u0161',
    Yuml: '\u0178',
    fnof: '\u0192',
    circ: '\u02C6',
    tilde: '\u02DC',
    Alpha: '\u0391',
    Beta: '\u0392',
    Gamma: '\u0393',
    Delta: '\u0394',
    Epsilon: '\u0395',
    Zeta: '\u0396',
    Eta: '\u0397',
    Theta: '\u0398',
    Iota: '\u0399',
    Kappa: '\u039A',
    Lambda: '\u039B',
    Mu: '\u039C',
    Nu: '\u039D',
    Xi: '\u039E',
    Omicron: '\u039F',
    Pi: '\u03A0',
    Rho: '\u03A1',
    Sigma: '\u03A3',
    Tau: '\u03A4',
    Upsilon: '\u03A5',
    Phi: '\u03A6',
    Chi: '\u03A7',
    Psi: '\u03A8',
    Omega: '\u03A9',
    alpha: '\u03B1',
    beta: '\u03B2',
    gamma: '\u03B3',
    delta: '\u03B4',
    epsilon: '\u03B5',
    zeta: '\u03B6',
    eta: '\u03B7',
    theta: '\u03B8',
    iota: '\u03B9',
    kappa: '\u03BA',
    lambda: '\u03BB',
    mu: '\u03BC',
    nu: '\u03BD',
    xi: '\u03BE',
    omicron: '\u03BF',
    pi: '\u03C0',
    rho: '\u03C1',
    sigmaf: '\u03C2',
    sigma: '\u03C3',
    tau: '\u03C4',
    upsilon: '\u03C5',
    phi: '\u03C6',
    chi: '\u03C7',
    psi: '\u03C8',
    omega: '\u03C9',
    thetasym: '\u03D1',
    upsih: '\u03D2',
    piv: '\u03D6',
    ensp: '\u2002',
    emsp: '\u2003',
    thinsp: '\u2009',
    zwnj: '\u200C',
    zwj: '\u200D',
    lrm: '\u200E',
    rlm: '\u200F',
    ndash: '\u2013',
    mdash: '\u2014',
    lsquo: '\u2018',
    rsquo: '\u2019',
    sbquo: '\u201A',
    ldquo: '\u201C',
    rdquo: '\u201D',
    bdquo: '\u201E',
    dagger: '\u2020',
    Dagger: '\u2021',
    bull: '\u2022',
    hellip: '\u2026',
    permil: '\u2030',
    prime: '\u2032',
    Prime: '\u2033',
    lsaquo: '\u2039',
    rsaquo: '\u203A',
    oline: '\u203E',
    frasl: '\u2044',
    euro: '\u20AC',
    image: '\u2111',
    weierp: '\u2118',
    real: '\u211C',
    trade: '\u2122',
    alefsym: '\u2135',
    larr: '\u2190',
    uarr: '\u2191',
    rarr: '\u2192',
    darr: '\u2193',
    harr: '\u2194',
    crarr: '\u21B5',
    lArr: '\u21D0',
    uArr: '\u21D1',
    rArr: '\u21D2',
    dArr: '\u21D3',
    hArr: '\u21D4',
    forall: '\u2200',
    part: '\u2202',
    exist: '\u2203',
    empty: '\u2205',
    nabla: '\u2207',
    isin: '\u2208',
    notin: '\u2209',
    ni: '\u220B',
    prod: '\u220F',
    sum: '\u2211',
    minus: '\u2212',
    lowast: '\u2217',
    radic: '\u221A',
    prop: '\u221D',
    infin: '\u221E',
    ang: '\u2220',
    and: '\u2227',
    or: '\u2228',
    cap: '\u2229',
    cup: '\u222A',
    'int': '\u222B',
    there4: '\u2234',
    sim: '\u223C',
    cong: '\u2245',
    asymp: '\u2248',
    ne: '\u2260',
    equiv: '\u2261',
    le: '\u2264',
    ge: '\u2265',
    sub: '\u2282',
    sup: '\u2283',
    nsub: '\u2284',
    sube: '\u2286',
    supe: '\u2287',
    oplus: '\u2295',
    otimes: '\u2297',
    perp: '\u22A5',
    sdot: '\u22C5',
    lceil: '\u2308',
    rceil: '\u2309',
    lfloor: '\u230A',
    rfloor: '\u230B',
    lang: '\u2329',
    rang: '\u232A',
    loz: '\u25CA',
    spades: '\u2660',
    clubs: '\u2663',
    hearts: '\u2665',
    diams: '\u2666'
};
}}),
"[project]/apps/website/docs/node_modules/acorn-jsx/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const XHTMLEntities = __turbopack_require__("[project]/apps/website/docs/node_modules/acorn-jsx/xhtml.js [app-rsc] (ecmascript)");
const hexNumber = /^[\da-fA-F]+$/;
const decimalNumber = /^\d+$/;
// The map to `acorn-jsx` tokens from `acorn` namespace objects.
const acornJsxMap = new WeakMap();
// Get the original tokens for the given `acorn` namespace object.
function getJsxTokens(acorn) {
    acorn = acorn.Parser.acorn || acorn;
    let acornJsx = acornJsxMap.get(acorn);
    if (!acornJsx) {
        const tt = acorn.tokTypes;
        const TokContext = acorn.TokContext;
        const TokenType = acorn.TokenType;
        const tc_oTag = new TokContext('<tag', false);
        const tc_cTag = new TokContext('</tag', false);
        const tc_expr = new TokContext('<tag>...</tag>', true, true);
        const tokContexts = {
            tc_oTag: tc_oTag,
            tc_cTag: tc_cTag,
            tc_expr: tc_expr
        };
        const tokTypes = {
            jsxName: new TokenType('jsxName'),
            jsxText: new TokenType('jsxText', {
                beforeExpr: true
            }),
            jsxTagStart: new TokenType('jsxTagStart', {
                startsExpr: true
            }),
            jsxTagEnd: new TokenType('jsxTagEnd')
        };
        tokTypes.jsxTagStart.updateContext = function() {
            this.context.push(tc_expr); // treat as beginning of JSX expression
            this.context.push(tc_oTag); // start opening tag context
            this.exprAllowed = false;
        };
        tokTypes.jsxTagEnd.updateContext = function(prevType) {
            let out = this.context.pop();
            if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {
                this.context.pop();
                this.exprAllowed = this.curContext() === tc_expr;
            } else {
                this.exprAllowed = true;
            }
        };
        acornJsx = {
            tokContexts: tokContexts,
            tokTypes: tokTypes
        };
        acornJsxMap.set(acorn, acornJsx);
    }
    return acornJsx;
}
// Transforms JSX element name to string.
function getQualifiedJSXName(object) {
    if (!object) return object;
    if (object.type === 'JSXIdentifier') return object.name;
    if (object.type === 'JSXNamespacedName') return object.namespace.name + ':' + object.name.name;
    if (object.type === 'JSXMemberExpression') return getQualifiedJSXName(object.object) + '.' + getQualifiedJSXName(object.property);
}
module.exports = function(options) {
    options = options || {};
    return function(Parser) {
        return plugin({
            allowNamespaces: options.allowNamespaces !== false,
            allowNamespacedObjects: !!options.allowNamespacedObjects
        }, Parser);
    };
};
// This is `tokTypes` of the peer dep.
// This can be different instances from the actual `tokTypes` this plugin uses.
Object.defineProperty(module.exports, "tokTypes", {
    get: function get_tokTypes() {
        return getJsxTokens(__turbopack_require__("[project]/apps/website/docs/node_modules/acorn/dist/acorn.js [app-rsc] (ecmascript)")).tokTypes;
    },
    configurable: true,
    enumerable: true
});
function plugin(options, Parser) {
    const acorn = Parser.acorn || __turbopack_require__("[project]/apps/website/docs/node_modules/acorn/dist/acorn.js [app-rsc] (ecmascript)");
    const acornJsx = getJsxTokens(acorn);
    const tt = acorn.tokTypes;
    const tok = acornJsx.tokTypes;
    const tokContexts = acorn.tokContexts;
    const tc_oTag = acornJsx.tokContexts.tc_oTag;
    const tc_cTag = acornJsx.tokContexts.tc_cTag;
    const tc_expr = acornJsx.tokContexts.tc_expr;
    const isNewLine = acorn.isNewLine;
    const isIdentifierStart = acorn.isIdentifierStart;
    const isIdentifierChar = acorn.isIdentifierChar;
    return class extends Parser {
        // Expose actual `tokTypes` and `tokContexts` to other plugins.
        static get acornJsx() {
            return acornJsx;
        }
        // Reads inline JSX contents token.
        jsx_readToken() {
            let out = '', chunkStart = this.pos;
            for(;;){
                if (this.pos >= this.input.length) this.raise(this.start, 'Unterminated JSX contents');
                let ch = this.input.charCodeAt(this.pos);
                switch(ch){
                    case 60:
                    case 123:
                        if (this.pos === this.start) {
                            if (ch === 60 && this.exprAllowed) {
                                ++this.pos;
                                return this.finishToken(tok.jsxTagStart);
                            }
                            return this.getTokenFromCode(ch);
                        }
                        out += this.input.slice(chunkStart, this.pos);
                        return this.finishToken(tok.jsxText, out);
                    case 38:
                        out += this.input.slice(chunkStart, this.pos);
                        out += this.jsx_readEntity();
                        chunkStart = this.pos;
                        break;
                    case 62:
                    case 125:
                        this.raise(this.pos, "Unexpected token `" + this.input[this.pos] + "`. Did you mean `" + (ch === 62 ? "&gt;" : "&rbrace;") + "` or " + "`{\"" + this.input[this.pos] + "\"}" + "`?");
                    default:
                        if (isNewLine(ch)) {
                            out += this.input.slice(chunkStart, this.pos);
                            out += this.jsx_readNewLine(true);
                            chunkStart = this.pos;
                        } else {
                            ++this.pos;
                        }
                }
            }
        }
        jsx_readNewLine(normalizeCRLF) {
            let ch = this.input.charCodeAt(this.pos);
            let out;
            ++this.pos;
            if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {
                ++this.pos;
                out = normalizeCRLF ? '\n' : '\r\n';
            } else {
                out = String.fromCharCode(ch);
            }
            if (this.options.locations) {
                ++this.curLine;
                this.lineStart = this.pos;
            }
            return out;
        }
        jsx_readString(quote) {
            let out = '', chunkStart = ++this.pos;
            for(;;){
                if (this.pos >= this.input.length) this.raise(this.start, 'Unterminated string constant');
                let ch = this.input.charCodeAt(this.pos);
                if (ch === quote) break;
                if (ch === 38) {
                    out += this.input.slice(chunkStart, this.pos);
                    out += this.jsx_readEntity();
                    chunkStart = this.pos;
                } else if (isNewLine(ch)) {
                    out += this.input.slice(chunkStart, this.pos);
                    out += this.jsx_readNewLine(false);
                    chunkStart = this.pos;
                } else {
                    ++this.pos;
                }
            }
            out += this.input.slice(chunkStart, this.pos++);
            return this.finishToken(tt.string, out);
        }
        jsx_readEntity() {
            let str = '', count = 0, entity;
            let ch = this.input[this.pos];
            if (ch !== '&') this.raise(this.pos, 'Entity must start with an ampersand');
            let startPos = ++this.pos;
            while(this.pos < this.input.length && count++ < 10){
                ch = this.input[this.pos++];
                if (ch === ';') {
                    if (str[0] === '#') {
                        if (str[1] === 'x') {
                            str = str.substr(2);
                            if (hexNumber.test(str)) entity = String.fromCharCode(parseInt(str, 16));
                        } else {
                            str = str.substr(1);
                            if (decimalNumber.test(str)) entity = String.fromCharCode(parseInt(str, 10));
                        }
                    } else {
                        entity = XHTMLEntities[str];
                    }
                    break;
                }
                str += ch;
            }
            if (!entity) {
                this.pos = startPos;
                return '&';
            }
            return entity;
        }
        // Read a JSX identifier (valid tag or attribute name).
        //
        // Optimized version since JSX identifiers can't contain
        // escape characters and so can be read as single slice.
        // Also assumes that first character was already checked
        // by isIdentifierStart in readToken.
        jsx_readWord() {
            let ch, start = this.pos;
            do {
                ch = this.input.charCodeAt(++this.pos);
            }while (isIdentifierChar(ch) || ch === 45) // '-'
            return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));
        }
        // Parse next token as JSX identifier
        jsx_parseIdentifier() {
            let node = this.startNode();
            if (this.type === tok.jsxName) node.name = this.value;
            else if (this.type.keyword) node.name = this.type.keyword;
            else this.unexpected();
            this.next();
            return this.finishNode(node, 'JSXIdentifier');
        }
        // Parse namespaced identifier.
        jsx_parseNamespacedName() {
            let startPos = this.start, startLoc = this.startLoc;
            let name = this.jsx_parseIdentifier();
            if (!options.allowNamespaces || !this.eat(tt.colon)) return name;
            var node = this.startNodeAt(startPos, startLoc);
            node.namespace = name;
            node.name = this.jsx_parseIdentifier();
            return this.finishNode(node, 'JSXNamespacedName');
        }
        // Parses element name in any form - namespaced, member
        // or single identifier.
        jsx_parseElementName() {
            if (this.type === tok.jsxTagEnd) return '';
            let startPos = this.start, startLoc = this.startLoc;
            let node = this.jsx_parseNamespacedName();
            if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !options.allowNamespacedObjects) {
                this.unexpected();
            }
            while(this.eat(tt.dot)){
                let newNode = this.startNodeAt(startPos, startLoc);
                newNode.object = node;
                newNode.property = this.jsx_parseIdentifier();
                node = this.finishNode(newNode, 'JSXMemberExpression');
            }
            return node;
        }
        // Parses any type of JSX attribute value.
        jsx_parseAttributeValue() {
            switch(this.type){
                case tt.braceL:
                    let node = this.jsx_parseExpressionContainer();
                    if (node.expression.type === 'JSXEmptyExpression') this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');
                    return node;
                case tok.jsxTagStart:
                case tt.string:
                    return this.parseExprAtom();
                default:
                    this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');
            }
        }
        // JSXEmptyExpression is unique type since it doesn't actually parse anything,
        // and so it should start at the end of last read token (left brace) and finish
        // at the beginning of the next one (right brace).
        jsx_parseEmptyExpression() {
            let node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
            return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);
        }
        // Parses JSX expression enclosed into curly brackets.
        jsx_parseExpressionContainer() {
            let node = this.startNode();
            this.next();
            node.expression = this.type === tt.braceR ? this.jsx_parseEmptyExpression() : this.parseExpression();
            this.expect(tt.braceR);
            return this.finishNode(node, 'JSXExpressionContainer');
        }
        // Parses following JSX attribute name-value pair.
        jsx_parseAttribute() {
            let node = this.startNode();
            if (this.eat(tt.braceL)) {
                this.expect(tt.ellipsis);
                node.argument = this.parseMaybeAssign();
                this.expect(tt.braceR);
                return this.finishNode(node, 'JSXSpreadAttribute');
            }
            node.name = this.jsx_parseNamespacedName();
            node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;
            return this.finishNode(node, 'JSXAttribute');
        }
        // Parses JSX opening tag starting after '<'.
        jsx_parseOpeningElementAt(startPos, startLoc) {
            let node = this.startNodeAt(startPos, startLoc);
            node.attributes = [];
            let nodeName = this.jsx_parseElementName();
            if (nodeName) node.name = nodeName;
            while(this.type !== tt.slash && this.type !== tok.jsxTagEnd)node.attributes.push(this.jsx_parseAttribute());
            node.selfClosing = this.eat(tt.slash);
            this.expect(tok.jsxTagEnd);
            return this.finishNode(node, nodeName ? 'JSXOpeningElement' : 'JSXOpeningFragment');
        }
        // Parses JSX closing tag starting after '</'.
        jsx_parseClosingElementAt(startPos, startLoc) {
            let node = this.startNodeAt(startPos, startLoc);
            let nodeName = this.jsx_parseElementName();
            if (nodeName) node.name = nodeName;
            this.expect(tok.jsxTagEnd);
            return this.finishNode(node, nodeName ? 'JSXClosingElement' : 'JSXClosingFragment');
        }
        // Parses entire JSX element, including it's opening tag
        // (starting after '<'), attributes, contents and closing tag.
        jsx_parseElementAt(startPos, startLoc) {
            let node = this.startNodeAt(startPos, startLoc);
            let children = [];
            let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);
            let closingElement = null;
            if (!openingElement.selfClosing) {
                contents: for(;;){
                    switch(this.type){
                        case tok.jsxTagStart:
                            startPos = this.start;
                            startLoc = this.startLoc;
                            this.next();
                            if (this.eat(tt.slash)) {
                                closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);
                                break contents;
                            }
                            children.push(this.jsx_parseElementAt(startPos, startLoc));
                            break;
                        case tok.jsxText:
                            children.push(this.parseExprAtom());
                            break;
                        case tt.braceL:
                            children.push(this.jsx_parseExpressionContainer());
                            break;
                        default:
                            this.unexpected();
                    }
                }
                if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
                    this.raise(closingElement.start, 'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');
                }
            }
            let fragmentOrElement = openingElement.name ? 'Element' : 'Fragment';
            node['opening' + fragmentOrElement] = openingElement;
            node['closing' + fragmentOrElement] = closingElement;
            node.children = children;
            if (this.type === tt.relational && this.value === "<") {
                this.raise(this.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
            }
            return this.finishNode(node, 'JSX' + fragmentOrElement);
        }
        // Parse JSX text
        jsx_parseText() {
            let node = this.parseLiteral(this.value);
            node.type = "JSXText";
            return node;
        }
        // Parses entire JSX element from current position.
        jsx_parseElement() {
            let startPos = this.start, startLoc = this.startLoc;
            this.next();
            return this.jsx_parseElementAt(startPos, startLoc);
        }
        parseExprAtom(refShortHandDefaultPos) {
            if (this.type === tok.jsxText) return this.jsx_parseText();
            else if (this.type === tok.jsxTagStart) return this.jsx_parseElement();
            else return super.parseExprAtom(refShortHandDefaultPos);
        }
        readToken(code) {
            let context = this.curContext();
            if (context === tc_expr) return this.jsx_readToken();
            if (context === tc_oTag || context === tc_cTag) {
                if (isIdentifierStart(code)) return this.jsx_readWord();
                if (code == 62) {
                    ++this.pos;
                    return this.finishToken(tok.jsxTagEnd);
                }
                if ((code === 34 || code === 39) && context == tc_oTag) return this.jsx_readString(code);
            }
            if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {
                ++this.pos;
                return this.finishToken(tok.jsxTagStart);
            }
            return super.readToken(code);
        }
        updateContext(prevType) {
            if (this.type == tt.braceL) {
                var curContext = this.curContext();
                if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);
                else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);
                else super.updateContext(prevType);
                this.exprAllowed = true;
            } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {
                this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore
                this.context.push(tc_cTag); // reconsider as closing tag context
                this.exprAllowed = false;
            } else {
                return super.updateContext(prevType);
            }
        }
    };
}
}}),
"[project]/apps/website/docs/node_modules/estree-util-visit/lib/color.node.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @param {string} d
 * @returns {string}
 */ __turbopack_esm__({
    "color": (()=>color)
});
function color(d) {
    return '\u001B[33m' + d + '\u001B[39m';
}
}}),
"[project]/apps/website/docs/node_modules/estree-util-visit/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('estree-jsx').Node} Node
 */ /**
 * @typedef {CONTINUE | EXIT | SKIP} Action
 *   Union of the action types.
 *
 * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple
 *   List with one or two values, the first an action, the second an index.
 *
 * @typedef {number} Index
 *   Move to the sibling at `index` next (after node itself is completely
 *   traversed), when moving in an array.
 *
 *   Useful if mutating the tree, such as removing the node the visitor is
 *   currently on, or any of its previous siblings.
 *   Results less than 0 or greater than or equal to `children.length` stop
 *   traversing the parent.
 */ /**
 * @callback Visitor
 *   Handle a node.
 *
 *   Visitors are free to transform `node`.
 *   They can also transform the parent of node (the last of `ancestors`).
 *
 *   Replacing `node` itself, if `SKIP` is not returned, still causes its
 *   descendants to be walked (which is a bug).
 *
 *   When adding or removing previous siblings of `node`, the `Visitor` should
 *   return a new `Index` to specify the sibling to traverse after `node` is
 *   traversed.
 *   Adding or removing next siblings of `node` is handled as expected without
 *   needing to return a new `Index`.
 * @param {Node} node
 *   Found node.
 * @param {string | undefined} key
 *   Field at which `node` lives in its parent (or where a list of nodes lives).
 * @param {number | undefined} index
 *   Index where `node` lives if `parent[key]` is an array.
 * @param {Array<Node>} ancestors
 *   Ancestors of `node`.
 * @returns {Action | ActionTuple | Index | null | undefined | void}
 *   What to do next.
 *
 *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.
 *   An `Action` is treated as a tuple of `[Action]`.
 *
 *   Passing a tuple back only makes sense if the `Action` is `SKIP`.
 *   When the `Action` is `EXIT`, that action can be returned.
 *   When the `Action` is `CONTINUE`, `Index` can be returned.
 */ /**
 * @typedef Visitors
 *   Handle nodes when entering (preorder) and leaving (postorder).
 * @property {Visitor | null | undefined} [enter]
 *   Handle nodes when entering (preorder) (optional).
 * @property {Visitor | null | undefined} [leave]
 *   Handle nodes when leaving (postorder) (optional).
 */ __turbopack_esm__({
    "CONTINUE": (()=>CONTINUE),
    "EXIT": (()=>EXIT),
    "SKIP": (()=>SKIP),
    "visit": (()=>visit)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$color$2e$node$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-util-visit/lib/color.node.js [app-rsc] (ecmascript)");
;
const own = {}.hasOwnProperty;
const CONTINUE = Symbol('continue');
const EXIT = Symbol('exit');
const SKIP = Symbol('skip');
function visit(tree, visitor) {
    /** @type {Visitor | undefined} */ let enter;
    /** @type {Visitor | undefined} */ let leave;
    if (typeof visitor === 'function') {
        enter = visitor;
    } else if (visitor && typeof visitor === 'object') {
        if (visitor.enter) enter = visitor.enter;
        if (visitor.leave) leave = visitor.leave;
    }
    build(tree, undefined, undefined, [])();
    /**
   * @param {Node} node
   * @param {string | undefined} key
   * @param {number | undefined} index
   * @param {Array<Node>} parents
   */ function build(node, key, index, parents) {
        if (nodelike(node)) {
            visit.displayName = 'node (' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$color$2e$node$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["color"])(node.type) + ')';
        }
        return visit;
        "TURBOPACK unreachable";
        /**
     * @returns {ActionTuple}
     */ function visit() {
            /** @type {ActionTuple} */ const result = enter ? toResult(enter(node, key, index, parents)) : [];
            if (result[0] === EXIT) {
                return result;
            }
            if (result[0] !== SKIP) {
                /** @type {keyof node} */ let cKey;
                for(cKey in node){
                    if (own.call(node, cKey) && node[cKey] && typeof node[cKey] === 'object' && // @ts-expect-error: custom esast extension.
                    cKey !== 'data' && // @ts-expect-error: custom esast extension.
                    cKey !== 'position') {
                        const grandparents = parents.concat(node);
                        /** @type {unknown} */ const value = node[cKey];
                        if (Array.isArray(value)) {
                            const nodes = value;
                            let cIndex = 0;
                            while(cIndex > -1 && cIndex < nodes.length){
                                const subvalue = nodes[cIndex];
                                if (nodelike(subvalue)) {
                                    const subresult = build(subvalue, cKey, cIndex, grandparents)();
                                    if (subresult[0] === EXIT) return subresult;
                                    cIndex = typeof subresult[1] === 'number' ? subresult[1] : cIndex + 1;
                                } else {
                                    cIndex++;
                                }
                            }
                        } else if (nodelike(value)) {
                            const subresult = build(value, cKey, undefined, grandparents)();
                            if (subresult[0] === EXIT) return subresult;
                        }
                    }
                }
            }
            return leave ? toResult(leave(node, key, index, parents)) : result;
        }
    }
}
/**
 * Turn a return value into a clean result.
 *
 * @param {Action | ActionTuple | Index | null | undefined | void} value
 *   Valid return values from visitors.
 * @returns {ActionTuple}
 *   Clean result.
 */ function toResult(value) {
    if (Array.isArray(value)) {
        return value;
    }
    if (typeof value === 'number') {
        return [
            CONTINUE,
            value
        ];
    }
    return [
        value
    ];
}
/**
 * Check if something looks like a node.
 *
 * @param {unknown} value
 *   Anything.
 * @returns {value is Node}
 *   Whether `value` looks like a node.
 */ function nodelike(value) {
    return Boolean(value && typeof value === 'object' && 'type' in value && typeof value.type === 'string' && value.type.length > 0);
}
}}),
"[project]/apps/website/docs/node_modules/micromark-util-events-to-acorn/dev/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('acorn').Comment} Comment
 * @typedef {import('acorn').Node} AcornNode
 * @typedef {import('acorn').Options} AcornOptions
 * @typedef {import('acorn').Token} Token
 * @typedef {import('estree').Node} EstreeNode
 * @typedef {import('estree').Program} Program
 * @typedef {import('micromark-util-types').Chunk} Chunk
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Point} MicromarkPoint
 * @typedef {import('micromark-util-types').TokenType} TokenType
 * @typedef {import('unist').Point} UnistPoint
 */ /**
 * @typedef Acorn
 *   Acorn-like interface.
 * @property {import('acorn').parse} parse
 *   Parse a program.
 * @property {import('acorn').parseExpressionAt} parseExpressionAt
 *   Parse an expression.
 *
 * @typedef AcornLoc
 * @property {number} line
 * @property {number} column
 *
 * @typedef AcornErrorFields
 * @property {number} raisedAt
 * @property {number} pos
 * @property {AcornLoc} loc
 *
 * @typedef {Error & AcornErrorFields} AcornError
 *
 * @typedef Options
 *   Configuration.
 * @property {Acorn} acorn
 *   Typically `acorn`, object with `parse` and `parseExpressionAt` fields (required).
 * @property {Array<TokenType>} tokenTypes
 *   Names of (void) tokens to consider as data; `'lineEnding'` is always
 *   included (required).
 * @property {AcornOptions | null | undefined} [acornOptions]
 *   Configuration for `acorn` (optional).
 * @property {MicromarkPoint | null | undefined} [start]
 *   Place where events start (optional, required if `allowEmpty`).
 * @property {string | null | undefined} [prefix='']
 *   Text to place before events (default: `''`).
 * @property {string | null | undefined} [suffix='']
 *   Text to place after events (default: `''`).
 * @property {boolean | null | undefined} [expression=false]
 *   Whether this is a program or expression (default: `false`).
 * @property {boolean | null | undefined} [allowEmpty=false]
 *   Whether an empty expression is allowed (programs are always allowed to
 *   be empty) (default: `false`).
 *
 * @typedef Result
 *   Result.
 * @property {Program | undefined} estree
 *   Program.
 * @property {AcornError | undefined} error
 *   Error if unparseable
 * @property {boolean} swallow
 *   Whether the error, if there is one, can be swallowed and more JavaScript
 *   could be valid.
 *
 * @typedef {[number, MicromarkPoint]} Stop
 *
 * @typedef Collection
 * @property {string} value
 * @property {Array<Stop>} stops
 */ __turbopack_esm__({
    "eventsToAcorn": (()=>eventsToAcorn)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/vfile-message/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-util-visit/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/values.js [app-rsc] (ecmascript)");
;
;
;
;
function eventsToAcorn(events, options) {
    const prefix = options.prefix || '';
    const suffix = options.suffix || '';
    const acornOptions = Object.assign({}, options.acornOptions);
    /** @type {Array<Comment>} */ const comments = [];
    /** @type {Array<Token>} */ const tokens = [];
    const onComment = acornOptions.onComment;
    const onToken = acornOptions.onToken;
    let swallow = false;
    /** @type {AcornNode | undefined} */ let estree;
    /** @type {AcornError | undefined} */ let exception;
    /** @type {AcornOptions} */ const acornConfig = Object.assign({}, acornOptions, {
        onComment: comments,
        preserveParens: true
    });
    if (onToken) {
        acornConfig.onToken = tokens;
    }
    const collection = collect(events, options.tokenTypes);
    const source = collection.value;
    const value = prefix + source + suffix;
    const isEmptyExpression = options.expression && empty(source);
    if (isEmptyExpression && !options.allowEmpty) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected empty expression', {
            place: parseOffsetToUnistPoint(0),
            ruleId: 'unexpected-empty-expression',
            source: 'micromark-extension-mdx-expression'
        });
    }
    try {
        estree = options.expression && !isEmptyExpression ? options.acorn.parseExpressionAt(value, 0, acornConfig) : options.acorn.parse(value, acornConfig);
    } catch (error_) {
        const error = error_;
        const point = parseOffsetToUnistPoint(error.pos);
        error.message = String(error.message).replace(/ \(\d+:\d+\)$/, '');
        // Always defined in our unist points that come from micromark.
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(point.offset !== undefined, 'expected `offset`');
        error.pos = point.offset;
        error.loc = {
            line: point.line,
            column: point.column - 1
        };
        exception = error;
        swallow = error.raisedAt >= prefix.length + source.length || // Broken comments are raised at their start, not their end.
        error.message === 'Unterminated comment';
    }
    if (estree && options.expression && !isEmptyExpression) {
        if (empty(value.slice(estree.end, value.length - suffix.length))) {
            estree = {
                type: 'Program',
                start: 0,
                end: prefix.length + source.length,
                // @ts-expect-error: It’s good.
                body: [
                    {
                        type: 'ExpressionStatement',
                        expression: estree,
                        start: 0,
                        end: prefix.length + source.length
                    }
                ],
                sourceType: 'module',
                comments: []
            };
        } else {
            const point = parseOffsetToUnistPoint(estree.end);
            const error = new Error('Unexpected content after expression');
            // Always defined in our unist points that come from micromark.
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(point.offset !== undefined, 'expected `offset`');
            error.pos = point.offset;
            error.loc = {
                line: point.line,
                column: point.column - 1
            };
            exception = error;
            estree = undefined;
        }
    }
    if (estree) {
        // @ts-expect-error: acorn *does* allow comments
        estree.comments = comments;
        // @ts-expect-error: acorn looks enough like estree.
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["visit"])(estree, function(esnode, field, index, parents) {
            let context = parents[parents.length - 1];
            /** @type {number | string | undefined} */ let prop = field;
            // Remove non-standard `ParenthesizedExpression`.
            // @ts-expect-error: included in acorn.
            if (esnode.type === 'ParenthesizedExpression' && context && prop) {
                /* c8 ignore next 5 */ if (typeof index === 'number') {
                    // @ts-expect-error: indexable.
                    context = context[prop];
                    prop = index;
                }
                // @ts-expect-error: indexable.
                context[prop] = esnode.expression;
            }
            fixPosition(esnode);
        });
        // Comment positions are fixed by `visit` because they’re in the tree.
        if (Array.isArray(onComment)) {
            onComment.push(...comments);
        } else if (typeof onComment === 'function') {
            for (const comment of comments){
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(comment.loc, 'expected `loc` on comment');
                onComment(comment.type === 'Block', comment.value, comment.start, comment.end, comment.loc.start, comment.loc.end);
            }
        }
        for (const token of tokens){
            // Ignore tokens that ends in prefix or start in suffix:
            if (token.end <= prefix.length || token.start - prefix.length >= source.length) {
                continue;
            }
            fixPosition(token);
            if (Array.isArray(onToken)) {
                onToken.push(token);
            } else {
                // `tokens` are not added if `onToken` is not defined, so it must be a
                // function.
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof onToken === 'function', 'expected function');
                onToken(token);
            }
        }
    }
    // @ts-expect-error: It’s a program now.
    return {
        estree,
        error: exception,
        swallow
    };
    "TURBOPACK unreachable";
    /**
   * Update the position of a node.
   *
   * @param {AcornNode | EstreeNode | Token} nodeOrToken
   * @returns {undefined}
   */ function fixPosition(nodeOrToken) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])('start' in nodeOrToken, 'expected `start` in node or token from acorn');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])('end' in nodeOrToken, 'expected `end` in node or token from acorn');
        const pointStart = parseOffsetToUnistPoint(nodeOrToken.start);
        const pointEnd = parseOffsetToUnistPoint(nodeOrToken.end);
        // Always defined in our unist points that come from micromark.
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(pointStart.offset !== undefined, 'expected `offset`');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(pointEnd.offset !== undefined, 'expected `offset`');
        nodeOrToken.start = pointStart.offset;
        nodeOrToken.end = pointEnd.offset;
        nodeOrToken.loc = {
            start: {
                line: pointStart.line,
                column: pointStart.column - 1,
                offset: pointStart.offset
            },
            end: {
                line: pointEnd.line,
                column: pointEnd.column - 1,
                offset: pointEnd.offset
            }
        };
        nodeOrToken.range = [
            nodeOrToken.start,
            nodeOrToken.end
        ];
    }
    /**
   * Turn an arbitrary offset into the parsed value, into a point in the source
   * value.
   *
   * @param {number} acornOffset
   * @returns {UnistPoint}
   */ function parseOffsetToUnistPoint(acornOffset) {
        let sourceOffset = acornOffset - prefix.length;
        if (sourceOffset < 0) {
            sourceOffset = 0;
        } else if (sourceOffset > source.length) {
            sourceOffset = source.length;
        }
        let point = relativeToPoint(collection.stops, sourceOffset);
        if (!point) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(options.start, 'empty expressions are need `options.start` being passed');
            point = {
                line: options.start.line,
                column: options.start.column,
                offset: options.start.offset
            };
        }
        return point;
    }
}
/**
 * @param {string} value
 * @returns {boolean}
 */ function empty(value) {
    return /^\s*$/.test(value// Multiline comments.
    .replace(/\/\*[\s\S]*?\*\//g, '')// Line comments.
    // EOF instead of EOL is specifically not allowed, because that would
    // mean the closing brace is on the commented-out line
    .replace(/\/\/[^\r\n]*(\r\n|\n|\r)/g, ''));
}
// Port from <https://github.com/wooorm/markdown-rs/blob/e692ab0/src/util/mdx_collect.rs#L15>.
/**
 * @param {Array<Event>} events
 * @param {Array<TokenType>} tokenTypes
 * @returns {Collection}
 */ function collect(events, tokenTypes) {
    /** @type {Collection} */ const result = {
        value: '',
        stops: []
    };
    let index = -1;
    while(++index < events.length){
        const event = events[index];
        // Assume void.
        if (event[0] === 'enter') {
            const type = event[1].type;
            if (type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding || tokenTypes.includes(type)) {
                const chunks = event[2].sliceStream(event[1]);
                // Drop virtual spaces.
                while(chunks.length > 0 && chunks[0] === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].virtualSpace){
                    chunks.shift();
                }
                const value = serializeChunks(chunks);
                result.stops.push([
                    result.value.length,
                    event[1].start
                ]);
                result.value += value;
                result.stops.push([
                    result.value.length,
                    event[1].end
                ]);
            }
        }
    }
    return result;
}
// Port from <https://github.com/wooorm/markdown-rs/blob/e692ab0/src/util/location.rs#L91>.
/**
 * Turn a relative offset into an absolute offset.
 *
 * @param {Array<Stop>} stops
 * @param {number} relative
 * @returns {UnistPoint | undefined}
 */ function relativeToPoint(stops, relative) {
    let index = 0;
    while(index < stops.length && stops[index][0] <= relative){
        index += 1;
    }
    // There are no points: that only occurs if there was an empty string.
    if (index === 0) {
        return undefined;
    }
    const [stopRelative, stopAbsolute] = stops[index - 1];
    const rest = relative - stopRelative;
    return {
        line: stopAbsolute.line,
        column: stopAbsolute.column + rest,
        offset: stopAbsolute.offset + rest
    };
}
// Copy from <https://github.com/micromark/micromark/blob/ce3593a/packages/micromark/dev/lib/create-tokenizer.js#L595>
// To do: expose that?
/**
 * Get the string value of a slice of chunks.
 *
 * @param {Array<Chunk>} chunks
 * @returns {string}
 */ function serializeChunks(chunks) {
    let index = -1;
    /** @type {Array<string>} */ const result = [];
    /** @type {boolean | undefined} */ let atTab;
    while(++index < chunks.length){
        const chunk = chunks[index];
        /** @type {string} */ let value;
        if (typeof chunk === 'string') {
            value = chunk;
        } else switch(chunk){
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].carriageReturn:
                {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].cr;
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lineFeed:
                {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].lf;
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].carriageReturnLineFeed:
                {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].cr + __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].lf;
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab:
                {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].ht;
                    break;
                }
            /* c8 ignore next 6 */ case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].virtualSpace:
                {
                    if (atTab) continue;
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].space;
                    break;
                }
            default:
                {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof chunk === 'number', 'expected number');
                    // Currently only replacement character.
                    // eslint-disable-next-line unicorn/prefer-code-point
                    value = String.fromCharCode(chunk);
                }
        }
        atTab = chunk === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab;
        result.push(value);
    }
    return result.join('');
}
}}),
"[project]/apps/website/docs/node_modules/unist-util-position-from-estree/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Point} UnistPoint
 * @typedef {import('unist').Position} UnistPosition
 */ /**
 * @typedef {[start: number | null | undefined, end: number | null | undefined]} RangeLike
 *
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 *
 * @typedef LocLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 *
 * @typedef NodeLike
 * @property {LocLike | null | undefined} [loc]
 * @property {RangeLike | null | undefined} [range]
 * @property {number | null | undefined} [start]
 * @property {number | null | undefined} [end]
 */ /**
 * Turn an estree `node` into a unist `position`.
 *
 * @param {NodeLike | null | undefined} [node]
 *   estree node.
 * @returns {UnistPosition | undefined}
 *   unist position.
 */ __turbopack_esm__({
    "positionFromEstree": (()=>positionFromEstree)
});
function positionFromEstree(node) {
    const nodeLike = node || {};
    const loc = nodeLike.loc || {};
    const range = nodeLike.range || [
        undefined,
        undefined
    ];
    const start = pointOrUndefined(loc.start, range[0] || nodeLike.start);
    const end = pointOrUndefined(loc.end, range[1] || nodeLike.end);
    if (start && end) {
        return {
            start,
            end
        };
    }
}
/**
 * @param {unknown} estreePoint
 *   estree point.
 * @param {unknown} estreeOffset
 *  estree offset.
 * @returns {UnistPoint | undefined}
 *   unist point.
 */ function pointOrUndefined(estreePoint, estreeOffset) {
    if (estreePoint && typeof estreePoint === 'object') {
        const line = 'line' in estreePoint ? numberOrUndefined(estreePoint.line) : undefined;
        const column = 'column' in estreePoint ? numberOrUndefined(estreePoint.column) : undefined;
        if (line && column !== undefined) {
            return {
                line,
                column: column + 1,
                offset: numberOrUndefined(estreeOffset)
            };
        }
    }
}
/**
 * @param {unknown} value
 * @returns {number | undefined}
 */ function numberOrUndefined(value) {
    return typeof value === 'number' && value > -1 ? value : undefined;
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-mdxjs-esm/dev/lib/syntax.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn
 * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ /**
 * @typedef Options
 *   Configuration (required).
 * @property {Acorn} acorn
 *   Acorn parser to use (required).
 * @property {AcornOptions | null | undefined} [acornOptions]
 *   Configuration for acorn (default: `{ecmaVersion: 2024, locations: true,
 *   sourceType: 'module'}`); all fields except `locations` can be set.
 * @property {boolean | null | undefined} [addResult=false]
 *   Whether to add `estree` fields to tokens with results from acorn
 *   (default: `false`).
 */ __turbopack_esm__({
    "mdxjsEsm": (()=>mdxjsEsm)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-events-to-acorn/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/vfile-message/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-position-from-estree/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$blank$2d$line$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/blank-line.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
const blankLineBefore = {
    tokenize: tokenizeNextBlank,
    partial: true
};
const trouble = 'https://github.com/micromark/micromark-extension-mdxjs-esm';
const allowedAcornTypes = new Set([
    'ExportAllDeclaration',
    'ExportDefaultDeclaration',
    'ExportNamedDeclaration',
    'ImportDeclaration'
]);
function mdxjsEsm(options) {
    const exportImportConstruct = {
        tokenize: tokenizeExportImport,
        concrete: true
    };
    if (!options || !options.acorn || !options.acorn.parse) {
        throw new Error('Expected an `acorn` instance passed in as `options.acorn`');
    }
    const acorn = options.acorn;
    const acornOptions = Object.assign({
        ecmaVersion: 2024,
        sourceType: 'module'
    }, options.acornOptions, {
        locations: true
    });
    return {
        flow: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseE]: exportImportConstruct,
            [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseI]: exportImportConstruct
        }
    };
    "TURBOPACK unreachable";
    /**
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeExportImport(effects, ok, nok) {
        const self = this;
        const definedModuleSpecifiers = self.parser.definedModuleSpecifiers || (self.parser.definedModuleSpecifiers = []);
        const eventStart = this.events.length + 1 // Add the main `mdxjsEsm` token
        ;
        let buffer = '';
        return self.interrupt ? nok : start;
        "TURBOPACK unreachable";
        /**
     * Start of MDX ESM.
     *
     * ```markdown
     * > | import a from 'b'
     *     ^
     * ```
     *
     * @type {State}
     */ function start(code) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseE || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseI, 'expected `e` or `i`');
            // Only at the start of a line, not at whitespace or in a container.
            if (self.now().column > 1) return nok(code);
            effects.enter('mdxjsEsm');
            effects.enter('mdxjsEsmData');
            effects.consume(code);
            // eslint-disable-next-line unicorn/prefer-code-point
            buffer += String.fromCharCode(code);
            return word;
        }
        /**
     * In keyword.
     *
     * ```markdown
     * > | import a from 'b'
     *     ^^^^^^
     * ```
     *
     * @type {State}
     */ function word(code) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["asciiAlpha"])(code)) {
                effects.consume(code);
                // @ts-expect-error: definitely a number.
                // eslint-disable-next-line unicorn/prefer-code-point
                buffer += String.fromCharCode(code);
                return word;
            }
            if ((buffer === 'import' || buffer === 'export') && code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].space) {
                effects.consume(code);
                return inside;
            }
            return nok(code);
        }
        /**
     * In data.
     *
     * ```markdown
     * > | import a from 'b'
     *           ^
     * ```
     *
     * @type {State}
     */ function inside(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
                effects.exit('mdxjsEsmData');
                return lineStart(code);
            }
            effects.consume(code);
            return inside;
        }
        /**
     * At line ending.
     *
     * ```markdown
     * > | import a from 'b'
     *                      ^
     *   | export {a}
     * ```
     *
     * @type {State}
     */ function lineStart(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
                return atEnd(code);
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
                return effects.check(blankLineBefore, atEnd, continuationStart)(code);
            }
            effects.enter('mdxjsEsmData');
            return inside(code);
        }
        /**
     * At line ending that continues.
     *
     * ```markdown
     * > | import a from 'b'
     *                      ^
     *   | export {a}
     * ```
     *
     * @type {State}
     */ function continuationStart(code) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code));
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return lineStart;
        }
        /**
     * At end of line (blank or eof).
     *
     * ```markdown
     * > | import a from 'b'
     *                      ^
     * ```
     *
     * @type {State}
     */ function atEnd(code) {
            const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["eventsToAcorn"])(self.events.slice(eventStart), {
                acorn,
                acornOptions,
                tokenTypes: [
                    'mdxjsEsmData'
                ],
                prefix: definedModuleSpecifiers.length > 0 ? 'var ' + definedModuleSpecifiers.join(',') + '\n' : ''
            });
            if (result.error) {
                // There’s an error, which could be solved with more content, and there
                // is more content.
                if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && result.swallow) {
                    return continuationStart(code);
                }
                const error = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Could not parse import/exports with acorn', {
                    cause: result.error,
                    place: {
                        line: result.error.loc.line,
                        column: result.error.loc.column + 1,
                        offset: result.error.pos
                    },
                    ruleId: 'acorn',
                    source: 'micromark-extension-mdxjs-esm'
                });
                error.url = trouble + '#could-not-parse-importexports-with-acorn';
                throw error;
            }
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(result.estree, 'expected `estree` to be defined');
            // Remove the `VariableDeclaration`.
            if (definedModuleSpecifiers.length > 0) {
                const declaration = result.estree.body.shift();
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(declaration);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(declaration.type === 'VariableDeclaration');
            }
            let index = -1;
            while(++index < result.estree.body.length){
                const node = result.estree.body[index];
                if (!allowedAcornTypes.has(node.type)) {
                    const error = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected `' + node.type + '` in code: only import/exports are supported', {
                        place: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"])(node),
                        ruleId: 'non-esm',
                        source: 'micromark-extension-mdxjs-esm'
                    });
                    error.url = trouble + '#unexpected-type-in-code-only-importexports-are-supported';
                    throw error;
                }
                // Otherwise, when we’re not interrupting (hacky, because `interrupt` is
                // used to parse containers and “sniff” if this is ESM), collect all the
                // local values that are imported.
                if (node.type === 'ImportDeclaration' && !self.interrupt) {
                    let index = -1;
                    while(++index < node.specifiers.length){
                        const specifier = node.specifiers[index];
                        definedModuleSpecifiers.push(specifier.local.name);
                    }
                }
            }
            Object.assign(effects.exit('mdxjsEsm'), options.addResult ? {
                estree: result.estree
            } : undefined);
            return ok(code);
        }
    }
}
/** @type {Tokenizer} */ function tokenizeNextBlank(effects, ok, nok) {
    return start;
    "TURBOPACK unreachable";
    /**
   * @type {State}
   */ function start(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code));
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank);
        effects.consume(code);
        effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank);
        return effects.attempt(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$blank$2d$line$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["blankLine"], ok, nok);
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-factory-mdx-expression/dev/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Program} from 'estree'
 * @import {Acorn, AcornOptions} from 'micromark-util-events-to-acorn'
 * @import {Effects, Point, State, TokenType, TokenizeContext} from 'micromark-util-types'
 */ /**
 * @typedef MdxSignalOk
 *   Good result.
 * @property {'ok'} type
 *   Type.
 * @property {Program | undefined} estree
 *   Value.
 *
 * @typedef MdxSignalNok
 *   Bad result.
 * @property {'nok'} type
 *   Type.
 * @property {VFileMessage} message
 *   Value.
 *
 * @typedef {MdxSignalNok | MdxSignalOk} MdxSignal
 */ __turbopack_esm__({
    "factoryMdxExpression": (()=>factoryMdxExpression)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/vfile-message/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-factory-space/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-events-to-acorn/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-position-from-estree/lib/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
// Tab-size to eat has to be the same as what we serialize as.
// While in some places in markdown that’s 4, in JS it’s more common as 2.
// Which is what’s also in `mdast-util-mdx-jsx`:
// <https://github.com/syntax-tree/mdast-util-mdx-jsx/blob/40b951b/lib/index.js#L52>
const indentSize = 2;
const trouble = 'https://github.com/micromark/micromark-extension-mdx-expression/tree/main/packages/micromark-extension-mdx-expression';
const unexpectedEndOfFileHash = '#unexpected-end-of-file-in-expression-expected-a-corresponding-closing-brace-for-';
const unexpectedLazyHash = '#unexpected-lazy-line-in-expression-in-container-expected-line-to-be-prefixed';
const nonSpreadHash = '#unexpected-type-in-code-expected-an-object-spread-spread';
const spreadExtraHash = '#unexpected-extra-content-in-spread-only-a-single-spread-is-supported';
const acornHash = '#could-not-parse-expression-with-acorn';
function factoryMdxExpression(effects, ok, type, markerType, chunkType, acorn, acornOptions, addResult, spread, allowEmpty, allowLazy) {
    const self = this;
    const eventStart = this.events.length + 3 // Add main and marker token
    ;
    let size = 0;
    /** @type {Point} */ let pointStart;
    /** @type {Error} */ let lastCrash;
    return start;
    "TURBOPACK unreachable";
    /**
   * Start of an MDX expression.
   *
   * ```markdown
   * > | a {Math.PI} c
   *       ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace, 'expected `{`');
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        pointStart = self.now();
        return before;
    }
    /**
   * Before data.
   *
   * ```markdown
   * > | a {Math.PI} c
   *        ^
   * ```
   *
   * @type {State}
   */ function before(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            if (lastCrash) throw lastCrash;
            const error = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected end of file in expression, expected a corresponding closing brace for `{`', {
                place: self.now(),
                ruleId: 'unexpected-eof',
                source: 'micromark-extension-mdx-expression'
            });
            error.url = trouble + unexpectedEndOfFileHash;
            throw error;
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return eolAfter;
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightCurlyBrace && size === 0) {
            /** @type {MdxSignal} */ const next = acorn ? mdxExpressionParse.call(self, acorn, acornOptions, chunkType, eventStart, pointStart, allowEmpty || false, spread || false) : {
                type: 'ok',
                estree: undefined
            };
            if (next.type === 'ok') {
                effects.enter(markerType);
                effects.consume(code);
                effects.exit(markerType);
                const token = effects.exit(type);
                if (addResult && next.estree) {
                    Object.assign(token, {
                        estree: next.estree
                    });
                }
                return ok;
            }
            lastCrash = next.message;
            effects.enter(chunkType);
            effects.consume(code);
            return inside;
        }
        effects.enter(chunkType);
        return inside(code);
    }
    /**
   * In data.
   *
   * ```markdown
   * > | a {Math.PI} c
   *        ^
   * ```
   *
   * @type {State}
   */ function inside(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightCurlyBrace && size === 0 || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            effects.exit(chunkType);
            return before(code);
        }
        // Don’t count if gnostic.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace && !acorn) {
            size += 1;
        } else if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightCurlyBrace) {
            size -= 1;
        }
        effects.consume(code);
        return inside;
    }
    /**
   * After eol.
   *
   * ```markdown
   *   | a {b +
   * > | c} d
   *     ^
   * ```
   *
   * @type {State}
   */ function eolAfter(code) {
        const now = self.now();
        // Lazy continuation in a flow expression (or flow tag) is a syntax error.
        if (now.line !== pointStart.line && !allowLazy && self.parser.lazy[now.line]) {
            const error = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected lazy line in expression in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc', {
                place: self.now(),
                ruleId: 'unexpected-lazy',
                source: 'micromark-extension-mdx-expression'
            });
            error.url = trouble + unexpectedLazyHash;
            throw error;
        }
        // Note: `markdown-rs` uses `4`, but we use `2`.
        //
        // Idea: investigate if we’d need to use more complex stripping.
        // Take this example:
        //
        // ```markdown
        // >  aaa <b c={`
        // >      d
        // >  `} /> eee
        // ```
        //
        // Currently, the “paragraph” starts at `> | aaa`, so for the next line
        // here we split it into `>␠|␠␠|␠␠␠d` (prefix, this indent here,
        // expression data).
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code)) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, before, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix, indentSize + 1)(code);
        }
        return before(code);
    }
}
/**
 * Mix of `markdown-rs`’s `parse_expression` and `MdxExpressionParse`
 * functionality, to wrap our `eventsToAcorn`.
 *
 * In the future, the plan is to realise the rust way, which allows arbitrary
 * parsers.
 *
 * @this {TokenizeContext}
 * @param {Acorn} acorn
 * @param {AcornOptions | null | undefined} acornOptions
 * @param {TokenType} chunkType
 * @param {number} eventStart
 * @param {Point} pointStart
 * @param {boolean} allowEmpty
 * @param {boolean} spread
 * @returns {MdxSignal}
 */ // eslint-disable-next-line max-params
function mdxExpressionParse(acorn, acornOptions, chunkType, eventStart, pointStart, allowEmpty, spread) {
    // Gnostic mode: parse w/ acorn.
    const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["eventsToAcorn"])(this.events.slice(eventStart), {
        acorn,
        tokenTypes: [
            chunkType
        ],
        acornOptions,
        start: pointStart,
        expression: true,
        allowEmpty,
        prefix: spread ? '({' : '',
        suffix: spread ? '})' : ''
    });
    const estree = result.estree;
    // Get the spread value.
    if (spread && estree) {
        // Should always be the case as we wrap in `d={}`
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(estree.type === 'Program', 'expected program');
        const head = estree.body[0];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(head, 'expected body');
        if (head.type !== 'ExpressionStatement' || head.expression.type !== 'ObjectExpression') {
            const place = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"])(head);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(place, 'expected position');
            const error = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected `' + head.type + '` in code: expected an object spread (`{...spread}`)', {
                place: place.start,
                ruleId: 'non-spread',
                source: 'micromark-extension-mdx-expression'
            });
            error.url = trouble + nonSpreadHash;
            throw error;
        }
        if (head.expression.properties[1]) {
            const place = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"])(head.expression.properties[1]);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(place, 'expected position');
            const error = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected extra content in spread: only a single spread is supported', {
                place: place.start,
                ruleId: 'spread-extra',
                source: 'micromark-extension-mdx-expression'
            });
            error.url = trouble + spreadExtraHash;
            throw error;
        }
        if (head.expression.properties[0] && head.expression.properties[0].type !== 'SpreadElement') {
            const place = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"])(head.expression.properties[0]);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(place, 'expected position');
            const error = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected `' + head.expression.properties[0].type + '` in code: only spread elements are supported', {
                place: place.start,
                ruleId: 'non-spread',
                source: 'micromark-extension-mdx-expression'
            });
            error.url = trouble + nonSpreadHash;
            throw error;
        }
    }
    if (result.error) {
        const error = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Could not parse expression with acorn', {
            cause: result.error,
            place: {
                line: result.error.loc.line,
                column: result.error.loc.column + 1,
                offset: result.error.pos
            },
            ruleId: 'acorn',
            source: 'micromark-extension-mdx-expression'
        });
        error.url = trouble + acornHash;
        return {
            type: 'nok',
            message: error
        };
    }
    return {
        type: 'ok',
        estree
    };
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-mdx-expression/dev/lib/syntax.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn
 * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ /**
 * @typedef Options
 *   Configuration (optional).
 * @property {Acorn | null | undefined} [acorn]
 *   Acorn parser to use (optional).
 * @property {AcornOptions | null | undefined} [acornOptions]
 *   Configuration for acorn (default: `{ecmaVersion: 2024, locations: true,
 *   sourceType: 'module'}`).
 *
 *   All fields except `locations` can be set.
 * @property {boolean | null | undefined} [addResult=false]
 *   Whether to add `estree` fields to tokens with results from acorn (default:
 *   `false`).
 * @property {boolean | null | undefined} [spread=false]
 *   Undocumented option to parse only a spread (used by
 *   `micromark-extension-mdx-jsx` to parse spread attributes) (default:
 *   `false`).
 * @property {boolean | null | undefined} [allowEmpty=true]
 *   Undocumented option to disallow empty attributes (used by
 *   `micromark-extension-mdx-jsx` to prohobit empty attribute values)
 *   (default: `false`).
 */ __turbopack_esm__({
    "mdxExpression": (()=>mdxExpression)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-factory-mdx-expression/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-factory-space/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
;
;
;
;
;
function mdxExpression(options) {
    const options_ = options || {};
    const addResult = options_.addResult;
    const acorn = options_.acorn;
    // Hidden: `micromark-extension-mdx-jsx` supports expressions in tags,
    // and one of them is only “spread” elements.
    // It also has expressions that are not allowed to be empty (`<x y={}/>`).
    // Instead of duplicating code there, this are two small hidden feature here
    // to test that behavior.
    const spread = options_.spread;
    let allowEmpty = options_.allowEmpty;
    /** @type {AcornOptions} */ let acornOptions;
    if (allowEmpty === null || allowEmpty === undefined) {
        allowEmpty = true;
    }
    if (acorn) {
        if (!acorn.parseExpressionAt) {
            throw new Error('Expected a proper `acorn` instance passed in as `options.acorn`');
        }
        acornOptions = Object.assign({
            ecmaVersion: 2024,
            sourceType: 'module'
        }, options_.acornOptions);
    } else if (options_.acornOptions || options_.addResult) {
        throw new Error('Expected an `acorn` instance passed in as `options.acorn`');
    }
    return {
        flow: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace]: {
                name: 'mdxFlowExpression',
                tokenize: tokenizeFlowExpression,
                concrete: true
            }
        },
        text: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace]: {
                name: 'mdxTextExpression',
                tokenize: tokenizeTextExpression
            }
        }
    };
    "TURBOPACK unreachable";
    /**
   * MDX expression (flow).
   *
   * ```markdown
   * > | {Math.PI}
   *     ^^^^^^^^^
   * ```
   *
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeFlowExpression(effects, ok, nok) {
        const self = this;
        return start;
        "TURBOPACK unreachable";
        /**
     * Start of an MDX expression (flow).
     *
     * ```markdown
     * > | {Math.PI}
     *     ^
     * ```
     *
     * @type {State}
     */ function start(code) {
            // To do: in `markdown-rs`, constructs need to parse the indent themselves.
            // This should also be introduced in `micromark-js`.
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace, 'expected `{`');
            return before(code);
        }
        /**
     * After optional whitespace, before expression.
     *
     * ```markdown
     * > | {Math.PI}
     *     ^
     * ```
     *
     * @type {State}
     */ function before(code) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factoryMdxExpression"].call(self, effects, after, 'mdxFlowExpression', 'mdxFlowExpressionMarker', 'mdxFlowExpressionChunk', acorn, acornOptions, addResult, spread, allowEmpty)(code);
        }
        /**
     * After expression.
     *
     * ```markdown
     * > | {Math.PI}
     *              ^
     * ```
     *
     * @type {State}
     */ function after(code) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, end, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].whitespace)(code) : end(code);
        }
        /**
     * After expression, after optional whitespace.
     *
     * ```markdown
     * > | {Math.PI}␠␊
     *               ^
     * ```
     *
     * @type {State}
     */ function end(code) {
            // We want to allow tags directly after expressions.
            //
            // This case is useful:
            //
            // ```mdx
            // <a>{b}</a>
            // ```
            //
            // This case is not (very?) useful:
            //
            // ```mdx
            // {a}<b/>
            // ```
            //
            // …but it would be tougher than needed to disallow.
            //
            // To allow that, here we call the flow construct of
            // `micromark-extension-mdx-jsx`, and there we call this one.
            //
            // It would introduce a cyclical interdependency if we test JSX and
            // expressions here.
            // Because the JSX extension already uses parts of this monorepo, we
            // instead test it there.
            const lessThanValue = self.parser.constructs.flow[__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan];
            const constructs = Array.isArray(lessThanValue) ? lessThanValue : /* c8 ignore next 3 -- always a list when normalized. */ lessThanValue ? [
                lessThanValue
            ] : [];
            const jsxTag = constructs.find(function(d) {
                return d.name === 'mdxJsxFlowTag';
            });
            /* c8 ignore next 3 -- this is tested in `micromark-extension-mdx-jsx` */ if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan && jsxTag) {
                return effects.attempt(jsxTag, end, nok)(code);
            }
            return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code) ? ok(code) : nok(code);
        }
    }
    /**
   * MDX expression (text).
   *
   * ```markdown
   * > | a {Math.PI} c.
   *       ^^^^^^^^^
   * ```
   *
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeTextExpression(effects, ok) {
        const self = this;
        return start;
        "TURBOPACK unreachable";
        /**
     * Start of an MDX expression (text).
     *
     * ```markdown
     * > | a {Math.PI} c.
     *       ^
     * ```
     *
     *
     * @type {State}
     */ function start(code) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace, 'expected `{`');
            return __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factoryMdxExpression"].call(self, effects, ok, 'mdxTextExpression', 'mdxTextExpressionMarker', 'mdxTextExpressionChunk', acorn, acornOptions, addResult, spread, allowEmpty, true)(code);
        }
    }
}
}}),
"[project]/apps/website/docs/node_modules/estree-util-is-identifier-name/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef Options
 *   Configuration.
 * @property {boolean | null | undefined} [jsx=false]
 *   Support JSX identifiers (default: `false`).
 */ __turbopack_esm__({
    "cont": (()=>cont),
    "name": (()=>name),
    "start": (()=>start)
});
const startRe = /[$_\p{ID_Start}]/u;
const contRe = /[$_\u{200C}\u{200D}\p{ID_Continue}]/u;
const contReJsx = /[-$_\u{200C}\u{200D}\p{ID_Continue}]/u;
const nameRe = /^[$_\p{ID_Start}][$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;
const nameReJsx = /^[$_\p{ID_Start}][-$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;
/** @type {Options} */ const emptyOptions = {};
function start(code) {
    return code ? startRe.test(String.fromCodePoint(code)) : false;
}
function cont(code, options) {
    const settings = options || emptyOptions;
    const re = settings.jsx ? contReJsx : contRe;
    return code ? re.test(String.fromCodePoint(code)) : false;
}
function name(name, options) {
    const settings = options || emptyOptions;
    const re = settings.jsx ? nameReJsx : nameRe;
    return re.test(name);
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Acorn, AcornOptions} from 'micromark-util-events-to-acorn'
 * @import {Code, Effects, State, TokenizeContext, TokenType} from 'micromark-util-types'
 */ __turbopack_esm__({
    "factoryTag": (()=>factoryTag)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-util-is-identifier-name/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-factory-mdx-expression/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/vfile-message/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const trouble = 'https://github.com/micromark/micromark-extension-mdx-jsx';
function factoryTag(effects, ok, nok, acorn, acornOptions, addResult, allowLazy, tagType, tagMarkerType, tagClosingMarkerType, tagSelfClosingMarker, tagNameType, tagNamePrimaryType, tagNameMemberMarkerType, tagNameMemberType, tagNamePrefixMarkerType, tagNameLocalType, tagExpressionAttributeType, tagExpressionAttributeMarkerType, tagExpressionAttributeValueType, tagAttributeType, tagAttributeNameType, tagAttributeNamePrimaryType, tagAttributeNamePrefixMarkerType, tagAttributeNameLocalType, tagAttributeInitializerMarkerType, tagAttributeValueLiteralType, tagAttributeValueLiteralMarkerType, tagAttributeValueLiteralValueType, tagAttributeValueExpressionType, tagAttributeValueExpressionMarkerType, tagAttributeValueExpressionValueType) {
    const self = this;
    /** @type {State} */ let returnState;
    /** @type {NonNullable<Code> | undefined} */ let marker;
    return start;
    "TURBOPACK unreachable";
    /**
   * Start of MDX: JSX.
   *
   * ```markdown
   * > | a <B /> c
   *       ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan, 'expected `<`');
        effects.enter(tagType);
        effects.enter(tagMarkerType);
        effects.consume(code);
        effects.exit(tagMarkerType);
        return startAfter;
    }
    /**
   * After `<`.
   *
   * ```markdown
   * > | a <B /> c
   *        ^
   * ```
   *
   * @type {State}
   */ function startAfter(code) {
        // Deviate from JSX, which allows arbitrary whitespace.
        // See: <https://github.com/micromark/micromark-extension-mdx-jsx/issues/7>.
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code)) {
            return nok(code);
        }
        // Any other ES whitespace does not get this treatment.
        returnState = nameBefore;
        return esWhitespaceStart(code);
    }
    /**
   * Before name, self slash, or end of tag for fragments.
   *
   * ```markdown
   * > | a <B> c
   *        ^
   * > | a </B> c
   *        ^
   * > | a <> b
   *        ^
   * ```
   *
   * @type {State}
   */ function nameBefore(code) {
        // Closing tag.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash) {
            effects.enter(tagClosingMarkerType);
            effects.consume(code);
            effects.exit(tagClosingMarkerType);
            returnState = closingTagNameBefore;
            return esWhitespaceStart;
        }
        // Fragment opening tag.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            return tagEnd(code);
        }
        // Start of a name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["start"])(code)) {
            effects.enter(tagNameType);
            effects.enter(tagNamePrimaryType);
            effects.consume(code);
            return primaryName;
        }
        crash(code, 'before name', 'a character that can start a name, such as a letter, `$`, or `_`' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].exclamationMark ? ' (note: to create a comment in MDX, use `{/* text */}`)' : ''));
    }
    /**
   * Before name of closing tag or end of closing fragment tag.
   *
   * ```markdown
   * > | a </> b
   *         ^
   * > | a </B> c
   *         ^
   * ```
   *
   * @type {State}
   */ function closingTagNameBefore(code) {
        // Fragment closing tag.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            return tagEnd(code);
        }
        // Start of a closing tag name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["start"])(code)) {
            effects.enter(tagNameType);
            effects.enter(tagNamePrimaryType);
            effects.consume(code);
            return primaryName;
        }
        crash(code, 'before name', 'a character that can start a name, such as a letter, `$`, or `_`' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].asterisk || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash ? ' (note: JS comments in JSX tags are not supported in MDX)' : ''));
    }
    /**
   * In primary name.
   *
   * ```markdown
   * > | a <Bc> d
   *         ^
   * ```
   *
   * @type {State}
   */ function primaryName(code) {
        // Continuation of name: remain.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["cont"])(code, {
            jsx: true
        })) {
            effects.consume(code);
            return primaryName;
        }
        // End of name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dot || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].colon || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"])(code)) {
            effects.exit(tagNamePrimaryType);
            returnState = primaryNameAfter;
            return esWhitespaceStart(code);
        }
        crash(code, 'in name', 'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].atSign ? ' (note: to create a link in MDX, use `[text](url)`)' : ''));
    }
    /**
   * After primary name.
   *
   * ```markdown
   * > | a <b.c> d
   *         ^
   * > | a <b:c> d
   *         ^
   * ```
   *
   * @type {State}
   */ function primaryNameAfter(code) {
        // Start of a member name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dot) {
            effects.enter(tagNameMemberMarkerType);
            effects.consume(code);
            effects.exit(tagNameMemberMarkerType);
            returnState = memberNameBefore;
            return esWhitespaceStart;
        }
        // Start of a local name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].colon) {
            effects.enter(tagNamePrefixMarkerType);
            effects.consume(code);
            effects.exit(tagNamePrefixMarkerType);
            returnState = localNameBefore;
            return esWhitespaceStart;
        }
        // End of name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["start"])(code)) {
            effects.exit(tagNameType);
            return attributeBefore(code);
        }
        crash(code, 'after name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * Before member name.
   *
   * ```markdown
   * > | a <b.c> d
   *          ^
   * ```
   *
   * @type {State}
   */ function memberNameBefore(code) {
        // Start of a member name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["start"])(code)) {
            effects.enter(tagNameMemberType);
            effects.consume(code);
            return memberName;
        }
        crash(code, 'before member name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * In member name.
   *
   * ```markdown
   * > | a <b.cd> e
   *           ^
   * ```
   *
   * @type {State}
   */ function memberName(code) {
        // Continuation of name: remain.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["cont"])(code, {
            jsx: true
        })) {
            effects.consume(code);
            return memberName;
        }
        // End of name.
        // Note: no `:` allowed here.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dot || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"])(code)) {
            effects.exit(tagNameMemberType);
            returnState = memberNameAfter;
            return esWhitespaceStart(code);
        }
        crash(code, 'in member name', 'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].atSign ? ' (note: to create a link in MDX, use `[text](url)`)' : ''));
    }
    /**
   * After member name.
   *
   * ```markdown
   * > | a <b.c> d
   *           ^
   * > | a <b.c.d> e
   *           ^
   * ```
   *
   * @type {State}
   */ function memberNameAfter(code) {
        // Start another member name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dot) {
            effects.enter(tagNameMemberMarkerType);
            effects.consume(code);
            effects.exit(tagNameMemberMarkerType);
            returnState = memberNameBefore;
            return esWhitespaceStart;
        }
        // End of name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["start"])(code)) {
            effects.exit(tagNameType);
            return attributeBefore(code);
        }
        crash(code, 'after member name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * Local member name.
   *
   * ```markdown
   * > | a <b:c> d
   *          ^
   * ```
   *
   * @type {State}
   */ function localNameBefore(code) {
        // Start of a local name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["start"])(code)) {
            effects.enter(tagNameLocalType);
            effects.consume(code);
            return localName;
        }
        crash(code, 'before local name', 'a character that can start a name, such as a letter, `$`, or `_`' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].plusSign || code !== null && code > __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dot && code < __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].colon ? ' (note: to create a link in MDX, use `[text](url)`)' : ''));
    }
    /**
   * In local name.
   *
   * ```markdown
   * > | a <b:cd> e
   *           ^
   * ```
   *
   * @type {State}
   */ function localName(code) {
        // Continuation of name: remain.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["cont"])(code, {
            jsx: true
        })) {
            effects.consume(code);
            return localName;
        }
        // End of local name (note that we don’t expect another colon, or a member).
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"])(code)) {
            effects.exit(tagNameLocalType);
            returnState = localNameAfter;
            return esWhitespaceStart(code);
        }
        crash(code, 'in local name', 'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * After local name.
   *
   * This is like as `primary_name_after`, but we don’t expect colons or
   * periods.
   *
   * ```markdown
   * > | a <b.c> d
   *           ^
   * > | a <b.c.d> e
   *           ^
   * ```
   *
   * @type {State}
   */ function localNameAfter(code) {
        // End of name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["start"])(code)) {
            effects.exit(tagNameType);
            return attributeBefore(code);
        }
        crash(code, 'after local name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * Before attribute.
   *
   * ```markdown
   * > | a <b /> c
   *          ^
   * > | a <b > c
   *          ^
   * > | a <b {...c}> d
   *          ^
   * > | a <b c> d
   *          ^
   * ```
   *
   * @type {State}
   */ function attributeBefore(code) {
        // Self-closing.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash) {
            effects.enter(tagSelfClosingMarker);
            effects.consume(code);
            effects.exit(tagSelfClosingMarker);
            returnState = selfClosing;
            return esWhitespaceStart;
        }
        // End of tag.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            return tagEnd(code);
        }
        // Attribute expression.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factoryMdxExpression"].call(self, effects, attributeExpressionAfter, tagExpressionAttributeType, tagExpressionAttributeMarkerType, tagExpressionAttributeValueType, acorn, acornOptions, addResult, true, false, allowLazy)(code);
        }
        // Start of an attribute name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["start"])(code)) {
            effects.enter(tagAttributeType);
            effects.enter(tagAttributeNameType);
            effects.enter(tagAttributeNamePrimaryType);
            effects.consume(code);
            return attributePrimaryName;
        }
        crash(code, 'before attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * After attribute expression.
   *
   * ```markdown
   * > | a <b {c} d/> e
   *             ^
   * ```
   *
   * @type {State}
   */ function attributeExpressionAfter(code) {
        returnState = attributeBefore;
        return esWhitespaceStart(code);
    }
    /**
   * In primary attribute name.
   *
   * ```markdown
   * > | a <b cd/> e
   *           ^
   * > | a <b c:d> e
   *           ^
   * > | a <b c=d> e
   *           ^
   * ```
   *
   * @type {State}
   */ function attributePrimaryName(code) {
        // Continuation of name: remain.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["cont"])(code, {
            jsx: true
        })) {
            effects.consume(code);
            return attributePrimaryName;
        }
        // End of attribute name or tag.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].colon || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].equalsTo || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"])(code)) {
            effects.exit(tagAttributeNamePrimaryType);
            returnState = attributePrimaryNameAfter;
            return esWhitespaceStart(code);
        }
        crash(code, 'in attribute name', 'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag');
    }
    /**
   * After primary attribute name.
   *
   * ```markdown
   * > | a <b c/> d
   *           ^
   * > | a <b c:d> e
   *           ^
   * > | a <b c=d> e
   *           ^
   * ```
   *
   * @type {State}
   */ function attributePrimaryNameAfter(code) {
        // Start of a local name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].colon) {
            effects.enter(tagAttributeNamePrefixMarkerType);
            effects.consume(code);
            effects.exit(tagAttributeNamePrefixMarkerType);
            returnState = attributeLocalNameBefore;
            return esWhitespaceStart;
        }
        // Initializer: start of an attribute value.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].equalsTo) {
            effects.exit(tagAttributeNameType);
            effects.enter(tagAttributeInitializerMarkerType);
            effects.consume(code);
            effects.exit(tagAttributeInitializerMarkerType);
            returnState = attributeValueBefore;
            return esWhitespaceStart;
        }
        // End of tag / new attribute.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"])(code) || code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["start"])(code)) {
            effects.exit(tagAttributeNameType);
            effects.exit(tagAttributeType);
            returnState = attributeBefore;
            return esWhitespaceStart(code);
        }
        crash(code, 'after attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag');
    }
    /**
   * Before local attribute name.
   *
   * ```markdown
   * > | a <b c:d/> e
   *            ^
   * ```
   *
   * @type {State}
   */ function attributeLocalNameBefore(code) {
        // Start of a local name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["start"])(code)) {
            effects.enter(tagAttributeNameLocalType);
            effects.consume(code);
            return attributeLocalName;
        }
        crash(code, 'before local attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag');
    }
    /**
   * In local attribute name.
   *
   * ```markdown
   * > | a <b c:de/> f
   *             ^
   * > | a <b c:d=e/> f
   *             ^
   * ```
   *
   * @type {State}
   */ function attributeLocalName(code) {
        // Continuation of name: remain.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["cont"])(code, {
            jsx: true
        })) {
            effects.consume(code);
            return attributeLocalName;
        }
        // End of local name (note that we don’t expect another colon).
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].equalsTo || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"])(code)) {
            effects.exit(tagAttributeNameLocalType);
            effects.exit(tagAttributeNameType);
            returnState = attributeLocalNameAfter;
            return esWhitespaceStart(code);
        }
        crash(code, 'in local attribute name', 'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag');
    }
    /**
   * After local attribute name.
   *
   * ```markdown
   * > | a <b c:d/> f
   *             ^
   * > | a <b c:d=e/> f
   *             ^
   * ```
   *
   * @type {State}
   */ function attributeLocalNameAfter(code) {
        // Start of an attribute value.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].equalsTo) {
            effects.enter(tagAttributeInitializerMarkerType);
            effects.consume(code);
            effects.exit(tagAttributeInitializerMarkerType);
            returnState = attributeValueBefore;
            return esWhitespaceStart;
        }
        // End of name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["start"])(code)) {
            effects.exit(tagAttributeType);
            return attributeBefore(code);
        }
        crash(code, 'after local attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag');
    }
    /**
   * After `=`, before value.
   *
   * ```markdown
   * > | a <b c="d"/> e
   *            ^
   * > | a <b c={d}/> e
   *            ^
   * ```
   *
   * @type {State}
   */ function attributeValueBefore(code) {
        // Start of double- or single quoted value.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].quotationMark || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].apostrophe) {
            effects.enter(tagAttributeValueLiteralType);
            effects.enter(tagAttributeValueLiteralMarkerType);
            effects.consume(code);
            effects.exit(tagAttributeValueLiteralMarkerType);
            marker = code;
            return attributeValueQuotedStart;
        }
        // Attribute value expression.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factoryMdxExpression"].call(self, effects, attributeValueExpressionAfter, tagAttributeValueExpressionType, tagAttributeValueExpressionMarkerType, tagAttributeValueExpressionValueType, acorn, acornOptions, addResult, false, false, allowLazy)(code);
        }
        crash(code, 'before attribute value', 'a character that can start an attribute value, such as `"`, `\'`, or `{`' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan ? ' (note: to use an element or fragment as a prop value in MDX, use `{<element />}`)' : ''));
    }
    /**
   * After attribute value expression.
   *
   * ```markdown
   * > | a <b c={d} e/> f
   *               ^
   * ```
   *
   * @type {State}
   */ function attributeValueExpressionAfter(code) {
        effects.exit(tagAttributeType);
        returnState = attributeBefore;
        return esWhitespaceStart(code);
    }
    /**
   * Before quoted literal attribute value.
   *
   * ```markdown
   * > | a <b c="d"/> e
   *            ^
   * ```
   *
   * @type {State}
   */ function attributeValueQuotedStart(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(marker !== undefined, 'expected `marker` to be defined');
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            crash(code, 'in attribute value', 'a corresponding closing quote `' + String.fromCodePoint(marker) + '`');
        }
        if (code === marker) {
            effects.enter(tagAttributeValueLiteralMarkerType);
            effects.consume(code);
            effects.exit(tagAttributeValueLiteralMarkerType);
            effects.exit(tagAttributeValueLiteralType);
            effects.exit(tagAttributeType);
            marker = undefined;
            returnState = attributeBefore;
            return esWhitespaceStart;
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            returnState = attributeValueQuotedStart;
            return esWhitespaceStart(code);
        }
        effects.enter(tagAttributeValueLiteralValueType);
        return attributeValueQuoted(code);
    }
    /**
   * In quoted literal attribute value.
   *
   * ```markdown
   * > | a <b c="d"/> e
   *             ^
   * ```
   *
   * @type {State}
   */ function attributeValueQuoted(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === marker || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            effects.exit(tagAttributeValueLiteralValueType);
            return attributeValueQuotedStart(code);
        }
        effects.consume(code);
        return attributeValueQuoted;
    }
    /**
   * After self-closing slash.
   *
   * ```markdown
   * > | a <b/> c
   *          ^
   * ```
   *
   * @type {State}
   */ function selfClosing(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            return tagEnd(code);
        }
        crash(code, 'after self-closing slash', '`>` to end the tag' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].asterisk || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash ? ' (note: JS comments in JSX tags are not supported in MDX)' : ''));
    }
    /**
   * At final `>`.
   *
   * ```markdown
   * > | a <b> c
   *         ^
   * ```
   *
   * @type {State}
   */ function tagEnd(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan, 'expected `>`');
        effects.enter(tagMarkerType);
        effects.consume(code);
        effects.exit(tagMarkerType);
        effects.exit(tagType);
        return ok;
    }
    /**
   * Before optional ECMAScript whitespace.
   *
   * ```markdown
   * > | a <a b> c
   *         ^
   * ```
   *
   * @type {State}
   */ function esWhitespaceStart(code) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return esWhitespaceEolAfter;
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"])(code)) {
            effects.enter('esWhitespace');
            return esWhitespaceInside(code);
        }
        return returnState(code);
    }
    /**
   * In ECMAScript whitespace.
   *
   * ```markdown
   * > | a <a  b> c
   *          ^
   * ```
   *
   * @type {State}
   */ function esWhitespaceInside(code) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            effects.exit('esWhitespace');
            return esWhitespaceStart(code);
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"])(code)) {
            effects.consume(code);
            return esWhitespaceInside;
        }
        effects.exit('esWhitespace');
        return returnState(code);
    }
    /**
   * After eol in whitespace.
   *
   * ```markdown
   * > | a <a\nb> c
   *          ^
   * ```
   *
   * @type {State}
   */ function esWhitespaceEolAfter(code) {
        // Lazy continuation in a flow tag is a syntax error.
        if (!allowLazy && self.parser.lazy[self.now().line]) {
            const error = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected lazy line in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc', self.now(), 'micromark-extension-mdx-jsx:unexpected-lazy');
            error.url = trouble + '#unexpected-lazy-line-in-container-expected-line-to-be';
            throw error;
        }
        return esWhitespaceStart(code);
    }
    /**
   * Crash at a nonconforming character.
   *
   * @param {Code} code
   * @param {string} at
   * @param {string} expect
   */ function crash(code, at, expect) {
        const error = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected ' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof ? 'end of file' : 'character `' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].graveAccent ? '` ` `' : String.fromCodePoint(code)) + '` (' + serializeCharCode(code) + ')') + ' ' + at + ', expected ' + expect, self.now(), 'micromark-extension-mdx-jsx:unexpected-' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof ? 'eof' : 'character'));
        error.url = trouble + (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof ? '#unexpected-end-of-file-at-expected-expect' : '#unexpected-character-at-expected-expect');
        throw error;
    }
}
/**
 * @param {NonNullable<Code>} code
 * @returns {string}
 */ function serializeCharCode(code) {
    return 'U+' + code.toString(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].numericBaseHexadecimal).toUpperCase().padStart(4, '0');
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options} from 'micromark-extension-mdx-jsx'
 * @import {Acorn} from 'micromark-util-events-to-acorn'
 * @import {Construct, State, TokenizeContext, Tokenizer} from 'micromark-util-types'
 */ __turbopack_esm__({
    "jsxFlow": (()=>jsxFlow)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$factory$2d$tag$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-factory-space/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
;
;
;
;
;
function jsxFlow(acorn, options) {
    return {
        name: 'mdxJsxFlowTag',
        tokenize: tokenizeJsxFlow,
        concrete: true
    };
    "TURBOPACK unreachable";
    /**
   * MDX JSX (flow).
   *
   * ```markdown
   * > | <A />
   *     ^^^^^
   * ```
   *
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeJsxFlow(effects, ok, nok) {
        const self = this;
        return start;
        "TURBOPACK unreachable";
        /**
     * Start of MDX: JSX (flow).
     *
     * ```markdown
     * > | <A />
     *     ^
     * ```
     *
     * @type {State}
     */ function start(code) {
            // To do: in `markdown-rs`, constructs need to parse the indent themselves.
            // This should also be introduced in `micromark-js`.
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan, 'expected `<`');
            return before(code);
        }
        /**
     * After optional whitespace, before of MDX JSX (flow).
     *
     * ```markdown
     * > | <A />
     *     ^
     * ```
     *
     * @type {State}
     */ function before(code) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$factory$2d$tag$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factoryTag"].call(self, effects, after, nok, acorn, options.acornOptions, options.addResult, false, 'mdxJsxFlowTag', 'mdxJsxFlowTagMarker', 'mdxJsxFlowTagClosingMarker', 'mdxJsxFlowTagSelfClosingMarker', 'mdxJsxFlowTagName', 'mdxJsxFlowTagNamePrimary', 'mdxJsxFlowTagNameMemberMarker', 'mdxJsxFlowTagNameMember', 'mdxJsxFlowTagNamePrefixMarker', 'mdxJsxFlowTagNameLocal', 'mdxJsxFlowTagExpressionAttribute', 'mdxJsxFlowTagExpressionAttributeMarker', 'mdxJsxFlowTagExpressionAttributeValue', 'mdxJsxFlowTagAttribute', 'mdxJsxFlowTagAttributeName', 'mdxJsxFlowTagAttributeNamePrimary', 'mdxJsxFlowTagAttributeNamePrefixMarker', 'mdxJsxFlowTagAttributeNameLocal', 'mdxJsxFlowTagAttributeInitializerMarker', 'mdxJsxFlowTagAttributeValueLiteral', 'mdxJsxFlowTagAttributeValueLiteralMarker', 'mdxJsxFlowTagAttributeValueLiteralValue', 'mdxJsxFlowTagAttributeValueExpression', 'mdxJsxFlowTagAttributeValueExpressionMarker', 'mdxJsxFlowTagAttributeValueExpressionValue')(code);
        }
        /**
     * After an MDX JSX (flow) tag.
     *
     * ```markdown
     * > | <A>
     *        ^
     * ```
     *
     * @type {State}
     */ function after(code) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, end, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].whitespace)(code) : end(code);
        }
        /**
     * After an MDX JSX (flow) tag, after optional whitespace.
     *
     * ```markdown
     * > | <A> <B>
     *         ^
     * ```
     *
     * @type {State}
     */ function end(code) {
            // We want to allow expressions directly after tags.
            // See <https://github.com/micromark/micromark-extension-mdx-expression/blob/d5d92b9/packages/micromark-extension-mdx-expression/dev/lib/syntax.js#L183>
            // for more info.
            const leftBraceValue = self.parser.constructs.flow[__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace];
            /* c8 ignore next 5 -- always a list when normalized. */ const constructs = Array.isArray(leftBraceValue) ? leftBraceValue : leftBraceValue ? [
                leftBraceValue
            ] : [];
            const expression = constructs.find((d)=>d.name === 'mdxFlowExpression');
            // Another tag.
            return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan ? start(code) : code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace && expression ? effects.attempt(expression, end, nok)(code) : code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code) ? ok(code) : nok(code);
        }
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options} from 'micromark-extension-mdx-jsx'
 * @import {Acorn} from 'micromark-util-events-to-acorn'
 * @import {Construct, TokenizeContext, Tokenizer} from 'micromark-util-types'
 */ __turbopack_esm__({
    "jsxText": (()=>jsxText)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$factory$2d$tag$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js [app-rsc] (ecmascript)");
;
function jsxText(acorn, options) {
    return {
        name: 'mdxJsxTextTag',
        tokenize: tokenizeJsxText
    };
    "TURBOPACK unreachable";
    /**
   * MDX JSX (text).
   *
   * ```markdown
   * > | a <b />.
   *       ^^^^^
   * ```
   *
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeJsxText(effects, ok, nok) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$factory$2d$tag$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factoryTag"].call(this, effects, ok, nok, acorn, options.acornOptions, options.addResult, true, 'mdxJsxTextTag', 'mdxJsxTextTagMarker', 'mdxJsxTextTagClosingMarker', 'mdxJsxTextTagSelfClosingMarker', 'mdxJsxTextTagName', 'mdxJsxTextTagNamePrimary', 'mdxJsxTextTagNameMemberMarker', 'mdxJsxTextTagNameMember', 'mdxJsxTextTagNamePrefixMarker', 'mdxJsxTextTagNameLocal', 'mdxJsxTextTagExpressionAttribute', 'mdxJsxTextTagExpressionAttributeMarker', 'mdxJsxTextTagExpressionAttributeValue', 'mdxJsxTextTagAttribute', 'mdxJsxTextTagAttributeName', 'mdxJsxTextTagAttributeNamePrimary', 'mdxJsxTextTagAttributeNamePrefixMarker', 'mdxJsxTextTagAttributeNameLocal', 'mdxJsxTextTagAttributeInitializerMarker', 'mdxJsxTextTagAttributeValueLiteral', 'mdxJsxTextTagAttributeValueLiteralMarker', 'mdxJsxTextTagAttributeValueLiteralValue', 'mdxJsxTextTagAttributeValueExpression', 'mdxJsxTextTagAttributeValueExpressionMarker', 'mdxJsxTextTagAttributeValueExpressionValue');
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options} from 'micromark-extension-mdx-jsx'
 * @import {AcornOptions} from 'micromark-util-events-to-acorn'
 * @import {Extension} from 'micromark-util-types'
 */ __turbopack_esm__({
    "mdxJsx": (()=>mdxJsx)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$jsx$2d$flow$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$jsx$2d$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js [app-rsc] (ecmascript)");
;
;
;
function mdxJsx(options) {
    const settings = options || {};
    const acorn = settings.acorn;
    /** @type {AcornOptions | undefined} */ let acornOptions;
    if (acorn) {
        if (!acorn.parse || !acorn.parseExpressionAt) {
            throw new Error('Expected a proper `acorn` instance passed in as `options.acorn`');
        }
        acornOptions = Object.assign({
            ecmaVersion: 2024,
            sourceType: 'module'
        }, settings.acornOptions, {
            locations: true
        });
    } else if (settings.acornOptions || settings.addResult) {
        throw new Error('Expected an `acorn` instance passed in as `options.acorn`');
    }
    return {
        flow: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan]: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$jsx$2d$flow$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxFlow"])(acorn || undefined, {
                acornOptions,
                addResult: settings.addResult || undefined
            })
        },
        text: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan]: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$jsx$2d$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxText"])(acorn || undefined, {
                acornOptions,
                addResult: settings.addResult || undefined
            })
        }
    };
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-mdx-md/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('micromark-util-types').Extension} Extension
 */ /**
 * Create an extension for `micromark` to disable some CommonMark syntax (code
 * (indented), autolinks, and HTML (flow and text)) for MDX.
 *
 * @returns {Extension}
 *   Extension for `micromark` that can be passed in `extensions` to disable
 *   some CommonMark syntax for MDX.
 */ __turbopack_esm__({
    "mdxMd": (()=>mdxMd)
});
function mdxMd() {
    return {
        disable: {
            null: [
                'autolink',
                'codeIndented',
                'htmlFlow',
                'htmlText'
            ]
        }
    };
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-mdxjs/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('micromark-extension-mdx-expression').Options} Options
 * @typedef {import('micromark-util-types').Extension} Extension
 */ __turbopack_esm__({
    "mdxjs": (()=>mdxjs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$acorn$2f$dist$2f$acorn$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/acorn/dist/acorn.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$acorn$2d$jsx$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/acorn-jsx/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$combine$2d$extensions$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-combine-extensions/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2d$esm$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-mdxjs-esm/dev/lib/syntax.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$expression$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-mdx-expression/dev/lib/syntax.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$md$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-mdx-md/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
function mdxjs(options) {
    const settings = Object.assign({
        acorn: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$acorn$2f$dist$2f$acorn$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Parser"].extend((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$acorn$2d$jsx$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])()),
        acornOptions: {
            ecmaVersion: 2024,
            sourceType: 'module'
        },
        addResult: true
    }, options);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$combine$2d$extensions$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["combineExtensions"])([
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2d$esm$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxjsEsm"])(settings),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$expression$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxExpression"])(settings),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxJsx"])(settings),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$md$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxMd"])()
    ]);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-mdx-expression/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle} from 'mdast-util-from-markdown'
 * @import {MdxFlowExpression, MdxTextExpression} from 'mdast-util-mdx-expression'
 * @import {Handle as ToMarkdownHandle, Options as ToMarkdownExtension, State} from 'mdast-util-to-markdown'
 * @import {Parents} from 'mdast'
 */ __turbopack_esm__({
    "mdxExpressionFromMarkdown": (()=>mdxExpressionFromMarkdown),
    "mdxExpressionToMarkdown": (()=>mdxExpressionToMarkdown)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
;
function mdxExpressionFromMarkdown() {
    return {
        enter: {
            mdxFlowExpression: enterMdxFlowExpression,
            mdxTextExpression: enterMdxTextExpression
        },
        exit: {
            mdxFlowExpression: exitMdxExpression,
            mdxFlowExpressionChunk: exitMdxExpressionData,
            mdxTextExpression: exitMdxExpression,
            mdxTextExpressionChunk: exitMdxExpressionData
        }
    };
}
function mdxExpressionToMarkdown() {
    return {
        handlers: {
            mdxFlowExpression: handleMdxExpression,
            mdxTextExpression: handleMdxExpression
        },
        unsafe: [
            {
                character: '{',
                inConstruct: [
                    'phrasing'
                ]
            },
            {
                atBreak: true,
                character: '{'
            }
        ]
    };
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterMdxFlowExpression(token) {
    this.enter({
        type: 'mdxFlowExpression',
        value: ''
    }, token);
    this.buffer();
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterMdxTextExpression(token) {
    this.enter({
        type: 'mdxTextExpression',
        value: ''
    }, token);
    this.buffer();
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitMdxExpression(token) {
    const value = this.resume();
    const estree = token.estree;
    const node = this.stack[this.stack.length - 1];
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression');
    this.exit(token);
    node.value = value;
    if (estree) {
        node.data = {
            estree
        };
    }
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitMdxExpressionData(token) {
    this.config.enter.data.call(this, token);
    this.config.exit.data.call(this, token);
}
/**
 * @type {ToMarkdownHandle}
 * @param {MdxFlowExpression | MdxTextExpression} node
 *   Node.
 * @param {Parents | undefined} parent
 *   Parent, if any.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {string}
 *   Serialized markdown.
 */ function handleMdxExpression(node, parent, state) {
    const value = node.value || '';
    const result = state.indentLines(value, function(line, index, blank) {
        // Tab-size to eat has to be the same as what we serialize as.
        // While in some places in markdown that’s 4, in JS it’s more common as 2.
        // Which is what’s also in `mdast-util-mdx-jsx`:
        // <https://github.com/syntax-tree/mdast-util-mdx-jsx/blob/40b951b/lib/index.js#L52>
        return (index === 0 || blank ? '' : '  ') + line;
    });
    return '{' + result + '}';
}
}}),
"[project]/apps/website/docs/node_modules/is-hexadecimal/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Check if the given character code, or the character code at the first
 * character, is hexadecimal.
 *
 * @param {string|number} character
 * @returns {boolean} Whether `character` is hexadecimal
 */ __turbopack_esm__({
    "isHexadecimal": (()=>isHexadecimal)
});
function isHexadecimal(character) {
    const code = typeof character === 'string' ? character.charCodeAt(0) : character;
    return code >= 97 /* a */  && code <= 102 || code >= 65 /* A */  && code <= 70 || code >= 48 /* A */  && code <= 57;
}
}}),
"[project]/apps/website/docs/node_modules/is-decimal/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Check if the given character code, or the character code at the first
 * character, is decimal.
 *
 * @param {string|number} character
 * @returns {boolean} Whether `character` is a decimal
 */ __turbopack_esm__({
    "isDecimal": (()=>isDecimal)
});
function isDecimal(character) {
    const code = typeof character === 'string' ? character.charCodeAt(0) : character;
    return code >= 48 && code <= 57 /* 0-9 */ ;
}
}}),
"[project]/apps/website/docs/node_modules/is-alphabetical/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Check if the given character code, or the character code at the first
 * character, is alphabetical.
 *
 * @param {string|number} character
 * @returns {boolean} Whether `character` is alphabetical.
 */ __turbopack_esm__({
    "isAlphabetical": (()=>isAlphabetical)
});
function isAlphabetical(character) {
    const code = typeof character === 'string' ? character.charCodeAt(0) : character;
    return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
}}),
"[project]/apps/website/docs/node_modules/is-alphanumerical/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "isAlphanumerical": (()=>isAlphanumerical)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$is$2d$alphabetical$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/is-alphabetical/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$is$2d$decimal$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/is-decimal/index.js [app-rsc] (ecmascript)");
;
;
function isAlphanumerical(character) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$is$2d$alphabetical$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isAlphabetical"])(character) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$is$2d$decimal$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isDecimal"])(character);
}
}}),
"[project]/apps/website/docs/node_modules/character-entities-legacy/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * List of legacy HTML named character references that don’t need a trailing semicolon.
 *
 * @type {Array<string>}
 */ __turbopack_esm__({
    "characterEntitiesLegacy": (()=>characterEntitiesLegacy)
});
const characterEntitiesLegacy = [
    'AElig',
    'AMP',
    'Aacute',
    'Acirc',
    'Agrave',
    'Aring',
    'Atilde',
    'Auml',
    'COPY',
    'Ccedil',
    'ETH',
    'Eacute',
    'Ecirc',
    'Egrave',
    'Euml',
    'GT',
    'Iacute',
    'Icirc',
    'Igrave',
    'Iuml',
    'LT',
    'Ntilde',
    'Oacute',
    'Ocirc',
    'Ograve',
    'Oslash',
    'Otilde',
    'Ouml',
    'QUOT',
    'REG',
    'THORN',
    'Uacute',
    'Ucirc',
    'Ugrave',
    'Uuml',
    'Yacute',
    'aacute',
    'acirc',
    'acute',
    'aelig',
    'agrave',
    'amp',
    'aring',
    'atilde',
    'auml',
    'brvbar',
    'ccedil',
    'cedil',
    'cent',
    'copy',
    'curren',
    'deg',
    'divide',
    'eacute',
    'ecirc',
    'egrave',
    'eth',
    'euml',
    'frac12',
    'frac14',
    'frac34',
    'gt',
    'iacute',
    'icirc',
    'iexcl',
    'igrave',
    'iquest',
    'iuml',
    'laquo',
    'lt',
    'macr',
    'micro',
    'middot',
    'nbsp',
    'not',
    'ntilde',
    'oacute',
    'ocirc',
    'ograve',
    'ordf',
    'ordm',
    'oslash',
    'otilde',
    'ouml',
    'para',
    'plusmn',
    'pound',
    'quot',
    'raquo',
    'reg',
    'sect',
    'shy',
    'sup1',
    'sup2',
    'sup3',
    'szlig',
    'thorn',
    'times',
    'uacute',
    'ucirc',
    'ugrave',
    'uml',
    'uuml',
    'yacute',
    'yen',
    'yuml'
];
}}),
"[project]/apps/website/docs/node_modules/character-reference-invalid/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Map of invalid numeric character references to their replacements, according to HTML.
 *
 * @type {Record<number, string>}
 */ __turbopack_esm__({
    "characterReferenceInvalid": (()=>characterReferenceInvalid)
});
const characterReferenceInvalid = {
    0: '�',
    128: '€',
    130: '‚',
    131: 'ƒ',
    132: '„',
    133: '…',
    134: '†',
    135: '‡',
    136: 'ˆ',
    137: '‰',
    138: 'Š',
    139: '‹',
    140: 'Œ',
    142: 'Ž',
    145: '‘',
    146: '’',
    147: '“',
    148: '”',
    149: '•',
    150: '–',
    151: '—',
    152: '˜',
    153: '™',
    154: 'š',
    155: '›',
    156: 'œ',
    158: 'ž',
    159: 'Ÿ'
};
}}),
"[project]/apps/website/docs/node_modules/parse-entities/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Point} from 'unist'
 * @import {Options} from '../index.js'
 */ __turbopack_esm__({
    "parseEntities": (()=>parseEntities)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$is$2d$hexadecimal$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/is-hexadecimal/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$is$2d$decimal$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/is-decimal/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$is$2d$alphanumerical$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/is-alphanumerical/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$character$2d$entities$2d$legacy$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/character-entities-legacy/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$decode$2d$named$2d$character$2d$reference$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/decode-named-character-reference/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$character$2d$reference$2d$invalid$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/character-reference-invalid/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
// Warning messages.
const messages = [
    '',
    /* 1: Non terminated (named) */ 'Named character references must be terminated by a semicolon',
    /* 2: Non terminated (numeric) */ 'Numeric character references must be terminated by a semicolon',
    /* 3: Empty (named) */ 'Named character references cannot be empty',
    /* 4: Empty (numeric) */ 'Numeric character references cannot be empty',
    /* 5: Unknown (named) */ 'Named character references must be known',
    /* 6: Disallowed (numeric) */ 'Numeric character references cannot be disallowed',
    /* 7: Prohibited (numeric) */ 'Numeric character references cannot be outside the permissible Unicode range'
];
function parseEntities(value, options) {
    const settings = options || {};
    const additional = typeof settings.additional === 'string' ? settings.additional.charCodeAt(0) : settings.additional;
    /** @type {Array<string>} */ const result = [];
    let index = 0;
    let lines = -1;
    let queue = '';
    /** @type {Point | undefined} */ let point;
    /** @type {Array<number>|undefined} */ let indent;
    if (settings.position) {
        if ('start' in settings.position || 'indent' in settings.position) {
            // @ts-expect-error: points don’t have indent.
            indent = settings.position.indent;
            // @ts-expect-error: points don’t have indent.
            point = settings.position.start;
        } else {
            point = settings.position;
        }
    }
    let line = (point ? point.line : 0) || 1;
    let column = (point ? point.column : 0) || 1;
    // Cache the current point.
    let previous = now();
    /** @type {number|undefined} */ let character;
    // Ensure the algorithm walks over the first character (inclusive).
    index--;
    while(++index <= value.length){
        // If the previous character was a newline.
        if (character === 10 /* `\n` */ ) {
            column = (indent ? indent[lines] : 0) || 1;
        }
        character = value.charCodeAt(index);
        if (character === 38 /* `&` */ ) {
            const following = value.charCodeAt(index + 1);
            // The behavior depends on the identity of the next character.
            if (following === 9 /* `\t` */  || following === 10 /* `\n` */  || following === 12 /* `\f` */  || following === 32 /* ` ` */  || following === 38 /* `&` */  || following === 60 /* `<` */  || Number.isNaN(following) || additional && following === additional) {
                // Not a character reference.
                // No characters are consumed, and nothing is returned.
                // This is not an error, either.
                queue += String.fromCharCode(character);
                column++;
                continue;
            }
            const start = index + 1;
            let begin = start;
            let end = start;
            /** @type {string} */ let type;
            if (following === 35 /* `#` */ ) {
                // Numerical reference.
                end = ++begin;
                // The behavior further depends on the next character.
                const following = value.charCodeAt(end);
                if (following === 88 /* `X` */  || following === 120 /* `x` */ ) {
                    // ASCII hexadecimal digits.
                    type = 'hexadecimal';
                    end = ++begin;
                } else {
                    // ASCII decimal digits.
                    type = 'decimal';
                }
            } else {
                // Named reference.
                type = 'named';
            }
            let characterReferenceCharacters = '';
            let characterReference = '';
            let characters = '';
            // Each type of character reference accepts different characters.
            // This test is used to detect whether a reference has ended (as the semicolon
            // is not strictly needed).
            const test = type === 'named' ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$is$2d$alphanumerical$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isAlphanumerical"] : type === 'decimal' ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$is$2d$decimal$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isDecimal"] : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$is$2d$hexadecimal$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isHexadecimal"];
            end--;
            while(++end <= value.length){
                const following = value.charCodeAt(end);
                if (!test(following)) {
                    break;
                }
                characters += String.fromCharCode(following);
                // Check if we can match a legacy named reference.
                // If so, we cache that as the last viable named reference.
                // This ensures we do not need to walk backwards later.
                if (type === 'named' && __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$character$2d$entities$2d$legacy$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["characterEntitiesLegacy"].includes(characters)) {
                    characterReferenceCharacters = characters;
                    // @ts-expect-error: always able to decode.
                    characterReference = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$decode$2d$named$2d$character$2d$reference$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["decodeNamedCharacterReference"])(characters);
                }
            }
            let terminated = value.charCodeAt(end) === 59 /* `;` */ ;
            if (terminated) {
                end++;
                const namedReference = type === 'named' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$decode$2d$named$2d$character$2d$reference$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["decodeNamedCharacterReference"])(characters) : false;
                if (namedReference) {
                    characterReferenceCharacters = characters;
                    characterReference = namedReference;
                }
            }
            let diff = 1 + end - start;
            let reference = '';
            if (!terminated && settings.nonTerminated === false) {
            // Empty.
            } else if (!characters) {
                // An empty (possible) reference is valid, unless it’s numeric (thus an
                // ampersand followed by an octothorp).
                if (type !== 'named') {
                    warning(4 /* Empty (numeric) */ , diff);
                }
            } else if (type === 'named') {
                // An ampersand followed by anything unknown, and not terminated, is
                // invalid.
                if (terminated && !characterReference) {
                    warning(5 /* Unknown (named) */ , 1);
                } else {
                    // If there’s something after an named reference which is not known,
                    // cap the reference.
                    if (characterReferenceCharacters !== characters) {
                        end = begin + characterReferenceCharacters.length;
                        diff = 1 + end - begin;
                        terminated = false;
                    }
                    // If the reference is not terminated, warn.
                    if (!terminated) {
                        const reason = characterReferenceCharacters ? 1 /* Non terminated (named) */  : 3 /* Empty (named) */ ;
                        if (settings.attribute) {
                            const following = value.charCodeAt(end);
                            if (following === 61 /* `=` */ ) {
                                warning(reason, diff);
                                characterReference = '';
                            } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$is$2d$alphanumerical$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isAlphanumerical"])(following)) {
                                characterReference = '';
                            } else {
                                warning(reason, diff);
                            }
                        } else {
                            warning(reason, diff);
                        }
                    }
                }
                reference = characterReference;
            } else {
                if (!terminated) {
                    // All nonterminated numeric references are not rendered, and emit a
                    // warning.
                    warning(2 /* Non terminated (numeric) */ , diff);
                }
                // When terminated and numerical, parse as either hexadecimal or
                // decimal.
                let referenceCode = Number.parseInt(characters, type === 'hexadecimal' ? 16 : 10);
                // Emit a warning when the parsed number is prohibited, and replace with
                // replacement character.
                if (prohibited(referenceCode)) {
                    warning(7 /* Prohibited (numeric) */ , diff);
                    reference = String.fromCharCode(65533 /* `�` */ );
                } else if (referenceCode in __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$character$2d$reference$2d$invalid$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["characterReferenceInvalid"]) {
                    // Emit a warning when the parsed number is disallowed, and replace by
                    // an alternative.
                    warning(6 /* Disallowed (numeric) */ , diff);
                    reference = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$character$2d$reference$2d$invalid$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["characterReferenceInvalid"][referenceCode];
                } else {
                    // Parse the number.
                    let output = '';
                    // Emit a warning when the parsed number should not be used.
                    if (disallowed(referenceCode)) {
                        warning(6 /* Disallowed (numeric) */ , diff);
                    }
                    // Serialize the number.
                    if (referenceCode > 0xffff) {
                        referenceCode -= 0x10000;
                        output += String.fromCharCode(referenceCode >>> (10 & 0x3ff) | 0xd800);
                        referenceCode = 0xdc00 | referenceCode & 0x3ff;
                    }
                    reference = output + String.fromCharCode(referenceCode);
                }
            }
            // Found it!
            // First eat the queued characters as normal text, then eat a reference.
            if (reference) {
                flush();
                previous = now();
                index = end - 1;
                column += end - start + 1;
                result.push(reference);
                const next = now();
                next.offset++;
                if (settings.reference) {
                    settings.reference.call(settings.referenceContext || undefined, reference, {
                        start: previous,
                        end: next
                    }, value.slice(start - 1, end));
                }
                previous = next;
            } else {
                // If we could not find a reference, queue the checked characters (as
                // normal characters), and move the pointer to their end.
                // This is possible because we can be certain neither newlines nor
                // ampersands are included.
                characters = value.slice(start - 1, end);
                queue += characters;
                column += characters.length;
                index = end - 1;
            }
        } else {
            // Handle anything other than an ampersand, including newlines and EOF.
            if (character === 10 /* `\n` */ ) {
                line++;
                lines++;
                column = 0;
            }
            if (Number.isNaN(character)) {
                flush();
            } else {
                queue += String.fromCharCode(character);
                column++;
            }
        }
    }
    // Return the reduced nodes.
    return result.join('');
    "TURBOPACK unreachable";
    // Get current position.
    function now() {
        return {
            line,
            column,
            offset: index + ((point ? point.offset : 0) || 0)
        };
    }
    /**
   * Handle the warning.
   *
   * @param {1|2|3|4|5|6|7} code
   * @param {number} offset
   */ function warning(code, offset) {
        /** @type {ReturnType<now>} */ let position;
        if (settings.warning) {
            position = now();
            position.column += offset;
            position.offset += offset;
            settings.warning.call(settings.warningContext || undefined, messages[code], position, code);
        }
    }
    /**
   * Flush `queue` (normal text).
   * Macro invoked before each reference and at the end of `value`.
   * Does nothing when `queue` is empty.
   */ function flush() {
        if (queue) {
            result.push(queue);
            if (settings.text) {
                settings.text.call(settings.textContext || undefined, queue, {
                    start: previous,
                    end: now()
                });
            }
            queue = '';
        }
    }
}
/**
 * Check if `character` is outside the permissible unicode range.
 *
 * @param {number} code
 * @returns {boolean}
 */ function prohibited(code) {
    return code >= 0xd800 && code <= 0xdfff || code > 0x10ffff;
}
/**
 * Check if `character` is disallowed.
 *
 * @param {number} code
 * @returns {boolean}
 */ function disallowed(code) {
    return code >= 0x0001 && code <= 0x0008 || code === 0x000b || code >= 0x000d && code <= 0x001f || code >= 0x007f && code <= 0x009f || code >= 0xfdd0 && code <= 0xfdef || (code & 0xffff) === 0xffff || (code & 0xffff) === 0xfffe;
}
}}),
"[project]/apps/website/docs/node_modules/ccount/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Count how often a character (or substring) is used in a string.
 *
 * @param {string} value
 *   Value to search in.
 * @param {string} character
 *   Character (or substring) to look for.
 * @return {number}
 *   Number of times `character` occurred in `value`.
 */ __turbopack_esm__({
    "ccount": (()=>ccount)
});
function ccount(value, character) {
    const source = String(value);
    if (typeof character !== 'string') {
        throw new TypeError('Expected character');
    }
    let count = 0;
    let index = source.indexOf(character);
    while(index !== -1){
        count++;
        index = source.indexOf(character, index + character.length);
    }
    return count;
}
}}),
"[project]/apps/website/docs/node_modules/stringify-entities/lib/core.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef CoreOptions
 * @property {ReadonlyArray<string>} [subset=[]]
 *   Whether to only escape the given subset of characters.
 * @property {boolean} [escapeOnly=false]
 *   Whether to only escape possibly dangerous characters.
 *   Those characters are `"`, `&`, `'`, `<`, `>`, and `` ` ``.
 *
 * @typedef FormatOptions
 * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format
 *   Format strategy.
 *
 * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions
 */ __turbopack_esm__({
    "core": (()=>core)
});
const defaultSubsetRegex = /["&'<>`]/g;
const surrogatePairsRegex = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
const controlCharactersRegex = // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape
/[\x01-\t\v\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;
const regexEscapeRegex = /[|\\{}()[\]^$+*?.]/g;
/** @type {WeakMap<ReadonlyArray<string>, RegExp>} */ const subsetToRegexCache = new WeakMap();
function core(value, options) {
    value = value.replace(options.subset ? charactersToExpressionCached(options.subset) : defaultSubsetRegex, basic);
    if (options.subset || options.escapeOnly) {
        return value;
    }
    return value// Surrogate pairs.
    .replace(surrogatePairsRegex, surrogate)// BMP control characters (C0 except for LF, CR, SP; DEL; and some more
    // non-ASCII ones).
    .replace(controlCharactersRegex, basic);
    "TURBOPACK unreachable";
    /**
   * @param {string} pair
   * @param {number} index
   * @param {string} all
   */ function surrogate(pair, index, all) {
        return options.format((pair.charCodeAt(0) - 0xd800) * 0x400 + pair.charCodeAt(1) - 0xdc00 + 0x10000, all.charCodeAt(index + 2), options);
    }
    /**
   * @param {string} character
   * @param {number} index
   * @param {string} all
   */ function basic(character, index, all) {
        return options.format(character.charCodeAt(0), all.charCodeAt(index + 1), options);
    }
}
/**
 * A wrapper function that caches the result of `charactersToExpression` with a WeakMap.
 * This can improve performance when tooling calls `charactersToExpression` repeatedly
 * with the same subset.
 *
 * @param {ReadonlyArray<string>} subset
 * @returns {RegExp}
 */ function charactersToExpressionCached(subset) {
    let cached = subsetToRegexCache.get(subset);
    if (!cached) {
        cached = charactersToExpression(subset);
        subsetToRegexCache.set(subset, cached);
    }
    return cached;
}
/**
 * @param {ReadonlyArray<string>} subset
 * @returns {RegExp}
 */ function charactersToExpression(subset) {
    /** @type {Array<string>} */ const groups = [];
    let index = -1;
    while(++index < subset.length){
        groups.push(subset[index].replace(regexEscapeRegex, '\\$&'));
    }
    return new RegExp('(?:' + groups.join('|') + ')', 'g');
}
}}),
"[project]/apps/website/docs/node_modules/stringify-entities/lib/util/to-hexadecimal.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "toHexadecimal": (()=>toHexadecimal)
});
const hexadecimalRegex = /[\dA-Fa-f]/;
function toHexadecimal(code, next, omit) {
    const value = '&#x' + code.toString(16).toUpperCase();
    return omit && next && !hexadecimalRegex.test(String.fromCharCode(next)) ? value : value + ';';
}
}}),
"[project]/apps/website/docs/node_modules/stringify-entities/lib/constant/dangerous.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * List of legacy (that don’t need a trailing `;`) named references which could,
 * depending on what follows them, turn into a different meaning
 *
 * @type {Array<string>}
 */ __turbopack_esm__({
    "dangerous": (()=>dangerous)
});
const dangerous = [
    'cent',
    'copy',
    'divide',
    'gt',
    'lt',
    'not',
    'para',
    'times'
];
}}),
"[project]/apps/website/docs/node_modules/stringify-entities/lib/util/to-named.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "toNamed": (()=>toNamed)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$character$2d$entities$2d$html4$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/character-entities-html4/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$character$2d$entities$2d$legacy$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/character-entities-legacy/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$constant$2f$dangerous$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/stringify-entities/lib/constant/dangerous.js [app-rsc] (ecmascript)");
;
;
;
const own = {}.hasOwnProperty;
/**
 * `characterEntitiesHtml4` but inverted.
 *
 * @type {Record<string, string>}
 */ const characters = {};
/** @type {string} */ let key;
for(key in __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$character$2d$entities$2d$html4$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["characterEntitiesHtml4"]){
    if (own.call(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$character$2d$entities$2d$html4$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["characterEntitiesHtml4"], key)) {
        characters[__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$character$2d$entities$2d$html4$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["characterEntitiesHtml4"][key]] = key;
    }
}
const notAlphanumericRegex = /[^\dA-Za-z]/;
function toNamed(code, next, omit, attribute) {
    const character = String.fromCharCode(code);
    if (own.call(characters, character)) {
        const name = characters[character];
        const value = '&' + name;
        if (omit && __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$character$2d$entities$2d$legacy$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["characterEntitiesLegacy"].includes(name) && !__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$constant$2f$dangerous$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["dangerous"].includes(name) && (!attribute || next && next !== 61 /* `=` */  && notAlphanumericRegex.test(String.fromCharCode(next)))) {
            return value;
        }
        return value + ';';
    }
    return '';
}
}}),
"[project]/apps/website/docs/node_modules/stringify-entities/lib/util/to-decimal.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "toDecimal": (()=>toDecimal)
});
const decimalRegex = /\d/;
function toDecimal(code, next, omit) {
    const value = '&#' + String(code);
    return omit && next && !decimalRegex.test(String.fromCharCode(next)) ? value : value + ';';
}
}}),
"[project]/apps/website/docs/node_modules/stringify-entities/lib/util/format-smart.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef FormatSmartOptions
 * @property {boolean} [useNamedReferences=false]
 *   Prefer named character references (`&amp;`) where possible.
 * @property {boolean} [useShortestReferences=false]
 *   Prefer the shortest possible reference, if that results in less bytes.
 *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.
 * @property {boolean} [omitOptionalSemicolons=false]
 *   Whether to omit semicolons when possible.
 *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.
 *   Omitting semicolons is possible for certain named and numeric references in some cases.
 * @property {boolean} [attribute=false]
 *   Create character references which don’t fail in attributes.
 *   **Note**: `attribute` only applies when operating dangerously with
 *   `omitOptionalSemicolons: true`.
 */ __turbopack_esm__({
    "formatSmart": (()=>formatSmart)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$to$2d$hexadecimal$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/stringify-entities/lib/util/to-hexadecimal.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$to$2d$named$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/stringify-entities/lib/util/to-named.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$to$2d$decimal$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/stringify-entities/lib/util/to-decimal.js [app-rsc] (ecmascript)");
;
;
;
function formatSmart(code, next, options) {
    let numeric = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$to$2d$hexadecimal$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toHexadecimal"])(code, next, options.omitOptionalSemicolons);
    /** @type {string|undefined} */ let named;
    if (options.useNamedReferences || options.useShortestReferences) {
        named = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$to$2d$named$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toNamed"])(code, next, options.omitOptionalSemicolons, options.attribute);
    }
    // Use the shortest numeric reference when requested.
    // A simple algorithm would use decimal for all code points under 100, as
    // those are shorter than hexadecimal:
    //
    // * `&#99;` vs `&#x63;` (decimal shorter)
    // * `&#100;` vs `&#x64;` (equal)
    //
    // However, because we take `next` into consideration when `omit` is used,
    // And it would be possible that decimals are shorter on bigger values as
    // well if `next` is hexadecimal but not decimal, we instead compare both.
    if ((options.useShortestReferences || !named) && options.useShortestReferences) {
        const decimal = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$to$2d$decimal$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toDecimal"])(code, next, options.omitOptionalSemicolons);
        if (decimal.length < numeric.length) {
            numeric = decimal;
        }
    }
    return named && (!options.useShortestReferences || named.length < numeric.length) ? named : numeric;
}
}}),
"[project]/apps/website/docs/node_modules/stringify-entities/lib/util/format-basic.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * The smallest way to encode a character.
 *
 * @param {number} code
 * @returns {string}
 */ __turbopack_esm__({
    "formatBasic": (()=>formatBasic)
});
function formatBasic(code) {
    return '&#x' + code.toString(16).toUpperCase() + ';';
}
}}),
"[project]/apps/website/docs/node_modules/stringify-entities/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options
 * @typedef {import('./core.js').CoreOptions} LightOptions
 */ __turbopack_esm__({
    "stringifyEntities": (()=>stringifyEntities),
    "stringifyEntitiesLight": (()=>stringifyEntitiesLight)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/stringify-entities/lib/core.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$format$2d$smart$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/stringify-entities/lib/util/format-smart.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$format$2d$basic$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/stringify-entities/lib/util/format-basic.js [app-rsc] (ecmascript)");
;
;
;
function stringifyEntities(value, options) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["core"])(value, Object.assign({
        format: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$format$2d$smart$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatSmart"]
    }, options));
}
function stringifyEntitiesLight(value, options) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["core"])(value, Object.assign({
        format: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$format$2d$basic$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatBasic"]
    }, options));
}
}}),
"[project]/apps/website/docs/node_modules/character-entities-html4/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Map of named character references from HTML 4.
 *
 * @type {Record<string, string>}
 */ __turbopack_esm__({
    "characterEntitiesHtml4": (()=>characterEntitiesHtml4)
});
const characterEntitiesHtml4 = {
    nbsp: ' ',
    iexcl: '¡',
    cent: '¢',
    pound: '£',
    curren: '¤',
    yen: '¥',
    brvbar: '¦',
    sect: '§',
    uml: '¨',
    copy: '©',
    ordf: 'ª',
    laquo: '«',
    not: '¬',
    shy: '­',
    reg: '®',
    macr: '¯',
    deg: '°',
    plusmn: '±',
    sup2: '²',
    sup3: '³',
    acute: '´',
    micro: 'µ',
    para: '¶',
    middot: '·',
    cedil: '¸',
    sup1: '¹',
    ordm: 'º',
    raquo: '»',
    frac14: '¼',
    frac12: '½',
    frac34: '¾',
    iquest: '¿',
    Agrave: 'À',
    Aacute: 'Á',
    Acirc: 'Â',
    Atilde: 'Ã',
    Auml: 'Ä',
    Aring: 'Å',
    AElig: 'Æ',
    Ccedil: 'Ç',
    Egrave: 'È',
    Eacute: 'É',
    Ecirc: 'Ê',
    Euml: 'Ë',
    Igrave: 'Ì',
    Iacute: 'Í',
    Icirc: 'Î',
    Iuml: 'Ï',
    ETH: 'Ð',
    Ntilde: 'Ñ',
    Ograve: 'Ò',
    Oacute: 'Ó',
    Ocirc: 'Ô',
    Otilde: 'Õ',
    Ouml: 'Ö',
    times: '×',
    Oslash: 'Ø',
    Ugrave: 'Ù',
    Uacute: 'Ú',
    Ucirc: 'Û',
    Uuml: 'Ü',
    Yacute: 'Ý',
    THORN: 'Þ',
    szlig: 'ß',
    agrave: 'à',
    aacute: 'á',
    acirc: 'â',
    atilde: 'ã',
    auml: 'ä',
    aring: 'å',
    aelig: 'æ',
    ccedil: 'ç',
    egrave: 'è',
    eacute: 'é',
    ecirc: 'ê',
    euml: 'ë',
    igrave: 'ì',
    iacute: 'í',
    icirc: 'î',
    iuml: 'ï',
    eth: 'ð',
    ntilde: 'ñ',
    ograve: 'ò',
    oacute: 'ó',
    ocirc: 'ô',
    otilde: 'õ',
    ouml: 'ö',
    divide: '÷',
    oslash: 'ø',
    ugrave: 'ù',
    uacute: 'ú',
    ucirc: 'û',
    uuml: 'ü',
    yacute: 'ý',
    thorn: 'þ',
    yuml: 'ÿ',
    fnof: 'ƒ',
    Alpha: 'Α',
    Beta: 'Β',
    Gamma: 'Γ',
    Delta: 'Δ',
    Epsilon: 'Ε',
    Zeta: 'Ζ',
    Eta: 'Η',
    Theta: 'Θ',
    Iota: 'Ι',
    Kappa: 'Κ',
    Lambda: 'Λ',
    Mu: 'Μ',
    Nu: 'Ν',
    Xi: 'Ξ',
    Omicron: 'Ο',
    Pi: 'Π',
    Rho: 'Ρ',
    Sigma: 'Σ',
    Tau: 'Τ',
    Upsilon: 'Υ',
    Phi: 'Φ',
    Chi: 'Χ',
    Psi: 'Ψ',
    Omega: 'Ω',
    alpha: 'α',
    beta: 'β',
    gamma: 'γ',
    delta: 'δ',
    epsilon: 'ε',
    zeta: 'ζ',
    eta: 'η',
    theta: 'θ',
    iota: 'ι',
    kappa: 'κ',
    lambda: 'λ',
    mu: 'μ',
    nu: 'ν',
    xi: 'ξ',
    omicron: 'ο',
    pi: 'π',
    rho: 'ρ',
    sigmaf: 'ς',
    sigma: 'σ',
    tau: 'τ',
    upsilon: 'υ',
    phi: 'φ',
    chi: 'χ',
    psi: 'ψ',
    omega: 'ω',
    thetasym: 'ϑ',
    upsih: 'ϒ',
    piv: 'ϖ',
    bull: '•',
    hellip: '…',
    prime: '′',
    Prime: '″',
    oline: '‾',
    frasl: '⁄',
    weierp: '℘',
    image: 'ℑ',
    real: 'ℜ',
    trade: '™',
    alefsym: 'ℵ',
    larr: '←',
    uarr: '↑',
    rarr: '→',
    darr: '↓',
    harr: '↔',
    crarr: '↵',
    lArr: '⇐',
    uArr: '⇑',
    rArr: '⇒',
    dArr: '⇓',
    hArr: '⇔',
    forall: '∀',
    part: '∂',
    exist: '∃',
    empty: '∅',
    nabla: '∇',
    isin: '∈',
    notin: '∉',
    ni: '∋',
    prod: '∏',
    sum: '∑',
    minus: '−',
    lowast: '∗',
    radic: '√',
    prop: '∝',
    infin: '∞',
    ang: '∠',
    and: '∧',
    or: '∨',
    cap: '∩',
    cup: '∪',
    int: '∫',
    there4: '∴',
    sim: '∼',
    cong: '≅',
    asymp: '≈',
    ne: '≠',
    equiv: '≡',
    le: '≤',
    ge: '≥',
    sub: '⊂',
    sup: '⊃',
    nsub: '⊄',
    sube: '⊆',
    supe: '⊇',
    oplus: '⊕',
    otimes: '⊗',
    perp: '⊥',
    sdot: '⋅',
    lceil: '⌈',
    rceil: '⌉',
    lfloor: '⌊',
    rfloor: '⌋',
    lang: '〈',
    rang: '〉',
    loz: '◊',
    spades: '♠',
    clubs: '♣',
    hearts: '♥',
    diams: '♦',
    quot: '"',
    amp: '&',
    lt: '<',
    gt: '>',
    OElig: 'Œ',
    oelig: 'œ',
    Scaron: 'Š',
    scaron: 'š',
    Yuml: 'Ÿ',
    circ: 'ˆ',
    tilde: '˜',
    ensp: ' ',
    emsp: ' ',
    thinsp: ' ',
    zwnj: '‌',
    zwj: '‍',
    lrm: '‎',
    rlm: '‏',
    ndash: '–',
    mdash: '—',
    lsquo: '‘',
    rsquo: '’',
    sbquo: '‚',
    ldquo: '“',
    rdquo: '”',
    bdquo: '„',
    dagger: '†',
    Dagger: '‡',
    permil: '‰',
    lsaquo: '‹',
    rsaquo: '›',
    euro: '€'
};
}}),
"[project]/apps/website/docs/node_modules/mdast-util-mdx-jsx/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, OnEnterError, OnExitError, Token} from 'mdast-util-from-markdown'
 * @import {Handle as ToMarkdownHandle, Options as ToMarkdownExtension, State, Tracker} from 'mdast-util-to-markdown'
 * @import {Point} from 'unist'
 * @import {MdxJsxAttribute, MdxJsxAttributeValueExpression, MdxJsxExpressionAttribute, MdxJsxFlowElement, MdxJsxTextElement} from '../index.js'
 */ /**
 * @typedef Tag
 *   Single tag.
 * @property {string | undefined} name
 *   Name of tag, or `undefined` for fragment.
 *
 *   > 👉 **Note**: `null` is used in the AST for fragments, as it serializes in
 *   > JSON.
 * @property {Array<MdxJsxAttribute | MdxJsxExpressionAttribute>} attributes
 *   Attributes.
 * @property {boolean} close
 *   Whether the tag is closing (`</x>`).
 * @property {boolean} selfClosing
 *   Whether the tag is self-closing (`<x/>`).
 * @property {Token['start']} start
 *   Start point.
 * @property {Token['start']} end
 *   End point.
 *
 * @typedef ToMarkdownOptions
 *   Configuration.
 * @property {'"' | "'" | null | undefined} [quote='"']
 *   Preferred quote to use around attribute values (default: `'"'`).
 * @property {boolean | null | undefined} [quoteSmart=false]
 *   Use the other quote if that results in less bytes (default: `false`).
 * @property {boolean | null | undefined} [tightSelfClosing=false]
 *   Do not use an extra space when closing self-closing elements: `<img/>`
 *   instead of `<img />` (default: `false`).
 * @property {number | null | undefined} [printWidth=Infinity]
 *   Try and wrap syntax at this width (default: `Infinity`).
 *
 *   When set to a finite number (say, `80`), the formatter will print
 *   attributes on separate lines when a tag doesn’t fit on one line.
 *   The normal behavior is to print attributes with spaces between them
 *   instead of line endings.
 */ __turbopack_esm__({
    "mdxJsxFromMarkdown": (()=>mdxJsxFromMarkdown),
    "mdxJsxToMarkdown": (()=>mdxJsxToMarkdown)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/vfile-message/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$entities$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-entities/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-stringify-position/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$ccount$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/ccount/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/stringify-entities/lib/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const indent = '  ';
function mdxJsxFromMarkdown() {
    return {
        canContainEols: [
            'mdxJsxTextElement'
        ],
        enter: {
            mdxJsxFlowTag: enterMdxJsxTag,
            mdxJsxFlowTagClosingMarker: enterMdxJsxTagClosingMarker,
            mdxJsxFlowTagAttribute: enterMdxJsxTagAttribute,
            mdxJsxFlowTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,
            mdxJsxFlowTagAttributeValueLiteral: buffer,
            mdxJsxFlowTagAttributeValueExpression: buffer,
            mdxJsxFlowTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker,
            mdxJsxTextTag: enterMdxJsxTag,
            mdxJsxTextTagClosingMarker: enterMdxJsxTagClosingMarker,
            mdxJsxTextTagAttribute: enterMdxJsxTagAttribute,
            mdxJsxTextTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,
            mdxJsxTextTagAttributeValueLiteral: buffer,
            mdxJsxTextTagAttributeValueExpression: buffer,
            mdxJsxTextTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker
        },
        exit: {
            mdxJsxFlowTagClosingMarker: exitMdxJsxTagClosingMarker,
            mdxJsxFlowTagNamePrimary: exitMdxJsxTagNamePrimary,
            mdxJsxFlowTagNameMember: exitMdxJsxTagNameMember,
            mdxJsxFlowTagNameLocal: exitMdxJsxTagNameLocal,
            mdxJsxFlowTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,
            mdxJsxFlowTagExpressionAttributeValue: data,
            mdxJsxFlowTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,
            mdxJsxFlowTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,
            mdxJsxFlowTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,
            mdxJsxFlowTagAttributeValueLiteralValue: data,
            mdxJsxFlowTagAttributeValueExpression: exitMdxJsxTagAttributeValueExpression,
            mdxJsxFlowTagAttributeValueExpressionValue: data,
            mdxJsxFlowTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,
            mdxJsxFlowTag: exitMdxJsxTag,
            mdxJsxTextTagClosingMarker: exitMdxJsxTagClosingMarker,
            mdxJsxTextTagNamePrimary: exitMdxJsxTagNamePrimary,
            mdxJsxTextTagNameMember: exitMdxJsxTagNameMember,
            mdxJsxTextTagNameLocal: exitMdxJsxTagNameLocal,
            mdxJsxTextTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,
            mdxJsxTextTagExpressionAttributeValue: data,
            mdxJsxTextTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,
            mdxJsxTextTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,
            mdxJsxTextTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,
            mdxJsxTextTagAttributeValueLiteralValue: data,
            mdxJsxTextTagAttributeValueExpression: exitMdxJsxTagAttributeValueExpression,
            mdxJsxTextTagAttributeValueExpressionValue: data,
            mdxJsxTextTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,
            mdxJsxTextTag: exitMdxJsxTag
        }
    };
    "TURBOPACK unreachable";
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function buffer() {
        this.buffer();
    }
    /**
   * Copy a point-like value.
   *
   * @param {Point} d
   *   Point-like value.
   * @returns {Point}
   *   unist point.
   */ function point(d) {
        return {
            line: d.line,
            column: d.column,
            offset: d.offset
        };
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function data(token) {
        this.config.enter.data.call(this, token);
        this.config.exit.data.call(this, token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTag(token) {
        /** @type {Tag} */ const tag = {
            name: undefined,
            attributes: [],
            close: false,
            selfClosing: false,
            start: token.start,
            end: token.end
        };
        if (!this.data.mdxJsxTagStack) this.data.mdxJsxTagStack = [];
        this.data.mdxJsxTag = tag;
        this.buffer();
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTagClosingMarker(token) {
        const stack = this.data.mdxJsxTagStack;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(stack, 'expected `mdxJsxTagStack`');
        if (stack.length === 0) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected closing slash `/` in tag, expected an open tag first', {
                start: token.start,
                end: token.end
            }, 'mdast-util-mdx-jsx:unexpected-closing-slash');
        }
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTagAnyAttribute(token) {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        if (tag.close) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected attribute in closing tag, expected the end of the tag', {
                start: token.start,
                end: token.end
            }, 'mdast-util-mdx-jsx:unexpected-attribute');
        }
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTagSelfClosingMarker(token) {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        if (tag.close) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected self-closing slash `/` in closing tag, expected the end of the tag', {
                start: token.start,
                end: token.end
            }, 'mdast-util-mdx-jsx:unexpected-self-closing-slash');
        }
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagClosingMarker() {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        tag.close = true;
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagNamePrimary(token) {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        tag.name = this.sliceSerialize(token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagNameMember(token) {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        tag.name += '.' + this.sliceSerialize(token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagNameLocal(token) {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        tag.name += ':' + this.sliceSerialize(token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTagAttribute(token) {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        enterMdxJsxTagAnyAttribute.call(this, token);
        tag.attributes.push({
            type: 'mdxJsxAttribute',
            name: '',
            value: null,
            position: {
                start: point(token.start),
                // @ts-expect-error: `end` will be patched later.
                end: undefined
            }
        });
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTagExpressionAttribute(token) {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        enterMdxJsxTagAnyAttribute.call(this, token);
        tag.attributes.push({
            type: 'mdxJsxExpressionAttribute',
            value: '',
            position: {
                start: point(token.start),
                // @ts-expect-error: `end` will be patched later.
                end: undefined
            }
        });
        this.buffer();
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagExpressionAttribute(token) {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        const tail = tag.attributes[tag.attributes.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tail.type === 'mdxJsxExpressionAttribute');
        const estree = token.estree;
        tail.value = this.resume();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tail.position !== undefined);
        tail.position.end = point(token.end);
        if (estree) {
            tail.data = {
                estree
            };
        }
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagAttributeNamePrimary(token) {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        const node = tag.attributes[tag.attributes.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'mdxJsxAttribute');
        node.name = this.sliceSerialize(token);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.position !== undefined);
        node.position.end = point(token.end);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagAttributeNameLocal(token) {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        const node = tag.attributes[tag.attributes.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'mdxJsxAttribute');
        node.name += ':' + this.sliceSerialize(token);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.position !== undefined);
        node.position.end = point(token.end);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagAttributeValueLiteral(token) {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        const node = tag.attributes[tag.attributes.length - 1];
        node.value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$entities$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["parseEntities"])(this.resume(), {
            nonTerminated: false
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.position !== undefined);
        node.position.end = point(token.end);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagAttributeValueExpression(token) {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        const tail = tag.attributes[tag.attributes.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tail.type === 'mdxJsxAttribute');
        /** @type {MdxJsxAttributeValueExpression} */ const node = {
            type: 'mdxJsxAttributeValueExpression',
            value: this.resume()
        };
        const estree = token.estree;
        if (estree) {
            node.data = {
                estree
            };
        }
        tail.value = node;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tail.position !== undefined);
        tail.position.end = point(token.end);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagSelfClosingMarker() {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        tag.selfClosing = true;
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTag(token) {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        const stack = this.data.mdxJsxTagStack;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(stack, 'expected `mdxJsxTagStack`');
        const tail = stack[stack.length - 1];
        if (tag.close && tail.name !== tag.name) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected closing tag `' + serializeAbbreviatedTag(tag) + '`, expected corresponding closing tag for `' + serializeAbbreviatedTag(tail) + '` (' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"])(tail) + ')', {
                start: token.start,
                end: token.end
            }, 'mdast-util-mdx-jsx:end-tag-mismatch');
        }
        // End of a tag, so drop the buffer.
        this.resume();
        if (tag.close) {
            stack.pop();
        } else {
            this.enter({
                type: token.type === 'mdxJsxTextTag' ? 'mdxJsxTextElement' : 'mdxJsxFlowElement',
                name: tag.name || null,
                attributes: tag.attributes,
                children: []
            }, token, onErrorRightIsTag);
        }
        if (tag.selfClosing || tag.close) {
            this.exit(token, onErrorLeftIsTag);
        } else {
            stack.push(tag);
        }
    }
    /**
   * @this {CompileContext}
   * @type {OnEnterError}
   */ function onErrorRightIsTag(closing, open) {
        const stack = this.data.mdxJsxTagStack;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(stack, 'expected `mdxJsxTagStack`');
        const tag = stack[stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        const place = closing ? ' before the end of `' + closing.type + '`' : '';
        const position = closing ? {
            start: closing.start,
            end: closing.end
        } : undefined;
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Expected a closing tag for `' + serializeAbbreviatedTag(tag) + '` (' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"])({
            start: open.start,
            end: open.end
        }) + ')' + place, position, 'mdast-util-mdx-jsx:end-tag-mismatch');
    }
    /**
   * @this {CompileContext}
   * @type {OnExitError}
   */ function onErrorLeftIsTag(a, b) {
        const tag = this.data.mdxJsxTag;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tag, 'expected `mdxJsxTag`');
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Expected the closing tag `' + serializeAbbreviatedTag(tag) + '` either after the end of `' + b.type + '` (' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"])(b.end) + ') or another opening tag after the start of `' + b.type + '` (' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"])(b.start) + ')', {
            start: a.start,
            end: a.end
        }, 'mdast-util-mdx-jsx:end-tag-mismatch');
    }
    /**
   * Serialize a tag, excluding attributes.
   * `self-closing` is not supported, because we don’t need it yet.
   *
   * @param {Tag} tag
   * @returns {string}
   */ function serializeAbbreviatedTag(tag) {
        return '<' + (tag.close ? '/' : '') + (tag.name || '') + '>';
    }
}
function mdxJsxToMarkdown(options) {
    const options_ = options || {};
    const quote = options_.quote || '"';
    const quoteSmart = options_.quoteSmart || false;
    const tightSelfClosing = options_.tightSelfClosing || false;
    const printWidth = options_.printWidth || Number.POSITIVE_INFINITY;
    const alternative = quote === '"' ? "'" : '"';
    if (quote !== '"' && quote !== "'") {
        throw new Error('Cannot serialize attribute values with `' + quote + '` for `options.quote`, expected `"`, or `\'`');
    }
    mdxElement.peek = peekElement;
    return {
        handlers: {
            mdxJsxFlowElement: mdxElement,
            mdxJsxTextElement: mdxElement
        },
        unsafe: [
            {
                character: '<',
                inConstruct: [
                    'phrasing'
                ]
            },
            {
                atBreak: true,
                character: '<'
            }
        ],
        // Always generate fenced code (never indented code).
        fences: true,
        // Always generate links with resources (never autolinks).
        resourceLink: true
    };
    "TURBOPACK unreachable";
    /**
   * @type {ToMarkdownHandle}
   * @param {MdxJsxFlowElement | MdxJsxTextElement} node
   */ // eslint-disable-next-line complexity
    function mdxElement(node, _, state, info) {
        const flow = node.type === 'mdxJsxFlowElement';
        const selfClosing = node.name ? !node.children || node.children.length === 0 : false;
        const depth = inferDepth(state);
        const currentIndent = createIndent(depth);
        const trackerOneLine = state.createTracker(info);
        const trackerMultiLine = state.createTracker(info);
        /** @type {Array<string>} */ const serializedAttributes = [];
        const prefix = (flow ? currentIndent : '') + '<' + (node.name || '');
        const exit = state.enter(node.type);
        trackerOneLine.move(prefix);
        trackerMultiLine.move(prefix);
        // None.
        if (node.attributes && node.attributes.length > 0) {
            if (!node.name) {
                throw new Error('Cannot serialize fragment w/ attributes');
            }
            let index = -1;
            while(++index < node.attributes.length){
                const attribute = node.attributes[index];
                /** @type {string} */ let result;
                if (attribute.type === 'mdxJsxExpressionAttribute') {
                    result = '{' + (attribute.value || '') + '}';
                } else {
                    if (!attribute.name) {
                        throw new Error('Cannot serialize attribute w/o name');
                    }
                    const value = attribute.value;
                    const left = attribute.name;
                    /** @type {string} */ let right = '';
                    if (value === null || value === undefined) {
                    // Empty.
                    } else if (typeof value === 'object') {
                        right = '{' + (value.value || '') + '}';
                    } else {
                        // If the alternative is less common than `quote`, switch.
                        const appliedQuote = quoteSmart && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$ccount$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ccount"])(value, quote) > (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$ccount$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ccount"])(value, alternative) ? alternative : quote;
                        right = appliedQuote + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyEntitiesLight"])(value, {
                            subset: [
                                appliedQuote
                            ]
                        }) + appliedQuote;
                    }
                    result = left + (right ? '=' : '') + right;
                }
                serializedAttributes.push(result);
            }
        }
        let attributesOnTheirOwnLine = false;
        const attributesOnOneLine = serializedAttributes.join(' ');
        if (// Block:
        flow && // Including a line ending (expressions).
        (/\r?\n|\r/.test(attributesOnOneLine) || // Current position (including `<tag`).
        trackerOneLine.current().now.column + // -1 because columns, +1 for ` ` before attributes.
        // Attributes joined by spaces.
        attributesOnOneLine.length + // ` />`.
        (selfClosing ? tightSelfClosing ? 2 : 3 : 1) > printWidth)) {
            attributesOnTheirOwnLine = true;
        }
        let tracker = trackerOneLine;
        let value = prefix;
        if (attributesOnTheirOwnLine) {
            tracker = trackerMultiLine;
            let index = -1;
            while(++index < serializedAttributes.length){
                // Only indent first line of of attributes, we can’t indent attribute
                // values.
                serializedAttributes[index] = currentIndent + indent + serializedAttributes[index];
            }
            value += tracker.move('\n' + serializedAttributes.join('\n') + '\n' + currentIndent);
        } else if (attributesOnOneLine) {
            value += tracker.move(' ' + attributesOnOneLine);
        }
        if (selfClosing) {
            value += tracker.move((tightSelfClosing || attributesOnTheirOwnLine ? '' : ' ') + '/');
        }
        value += tracker.move('>');
        if (node.children && node.children.length > 0) {
            if (node.type === 'mdxJsxTextElement') {
                value += tracker.move(state.containerPhrasing(node, {
                    ...tracker.current(),
                    before: '>',
                    after: '<'
                }));
            } else {
                tracker.shift(2);
                value += tracker.move('\n');
                value += tracker.move(containerFlow(node, state, tracker.current()));
                value += tracker.move('\n');
            }
        }
        if (!selfClosing) {
            value += tracker.move((flow ? currentIndent : '') + '</' + (node.name || '') + '>');
        }
        exit();
        return value;
    }
}
// Modified copy of:
// <https://github.com/syntax-tree/mdast-util-to-markdown/blob/a381cbc/lib/util/container-flow.js>.
//
// To do: add `indent` support to `mdast-util-to-markdown`.
// As indents are only used for JSX, it’s fine for now, but perhaps better
// there.
/**
 * @param {MdxJsxFlowElement} parent
 *   Parent of flow nodes.
 * @param {State} state
 *   Info passed around about the current state.
 * @param {ReturnType<Tracker['current']>} info
 *   Info on where we are in the document we are generating.
 * @returns {string}
 *   Serialized children, joined by (blank) lines.
 */ function containerFlow(parent, state, info) {
    const indexStack = state.indexStack;
    const children = parent.children;
    const tracker = state.createTracker(info);
    const currentIndent = createIndent(inferDepth(state));
    /** @type {Array<string>} */ const results = [];
    let index = -1;
    indexStack.push(-1);
    while(++index < children.length){
        const child = children[index];
        indexStack[indexStack.length - 1] = index;
        const childInfo = {
            before: '\n',
            after: '\n',
            ...tracker.current()
        };
        const result = state.handle(child, parent, state, childInfo);
        const serializedChild = child.type === 'mdxJsxFlowElement' ? result : state.indentLines(result, function(line, _, blank) {
            return (blank ? '' : currentIndent) + line;
        });
        results.push(tracker.move(serializedChild));
        if (child.type !== 'list') {
            state.bulletLastUsed = undefined;
        }
        if (index < children.length - 1) {
            results.push(tracker.move('\n\n'));
        }
    }
    indexStack.pop();
    return results.join('');
}
/**
 * @param {State} state
 * @returns {number}
 */ function inferDepth(state) {
    let depth = 0;
    let index = state.stack.length;
    while(--index > -1){
        const name = state.stack[index];
        if (name === 'blockquote' || name === 'listItem') break;
        if (name === 'mdxJsxFlowElement') depth++;
    }
    return depth;
}
/**
 * @param {number} depth
 * @returns {string}
 */ function createIndent(depth) {
    return indent.repeat(depth);
}
/**
 * @type {ToMarkdownHandle}
 */ function peekElement() {
    return '<';
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-mdxjs-esm/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 *
 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 *
 * @typedef {import('../index.js').MdxjsEsm} MdxjsEsm
 */ // To do: next major: expose functions.
__turbopack_esm__({
    "mdxjsEsmFromMarkdown": (()=>mdxjsEsmFromMarkdown),
    "mdxjsEsmToMarkdown": (()=>mdxjsEsmToMarkdown)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
;
function mdxjsEsmFromMarkdown() {
    return {
        enter: {
            mdxjsEsm: enterMdxjsEsm
        },
        exit: {
            mdxjsEsm: exitMdxjsEsm,
            mdxjsEsmData: exitMdxjsEsmData
        }
    };
}
function mdxjsEsmToMarkdown() {
    return {
        handlers: {
            mdxjsEsm: handleMdxjsEsm
        }
    };
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterMdxjsEsm(token) {
    this.enter({
        type: 'mdxjsEsm',
        value: ''
    }, token);
    this.buffer() // Capture EOLs
    ;
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitMdxjsEsm(token) {
    const value = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'mdxjsEsm');
    this.exit(token);
    const estree = token.estree;
    node.value = value;
    if (estree) {
        node.data = {
            estree
        };
    }
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitMdxjsEsmData(token) {
    this.config.enter.data.call(this, token);
    this.config.exit.data.call(this, token);
}
/**
 * @type {ToMarkdownHandle}
 * @param {MdxjsEsm} node
 */ function handleMdxjsEsm(node) {
    return node.value || '';
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-mdx/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-mdx-jsx').ToMarkdownOptions} ToMarkdownOptions
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 */ __turbopack_esm__({
    "mdxFromMarkdown": (()=>mdxFromMarkdown),
    "mdxToMarkdown": (()=>mdxToMarkdown)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$expression$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-mdx-expression/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$jsx$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-mdx-jsx/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$mdxjs$2d$esm$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-mdxjs-esm/lib/index.js [app-rsc] (ecmascript)");
;
;
;
function mdxFromMarkdown() {
    return [
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$expression$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxExpressionFromMarkdown"])(),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$jsx$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxJsxFromMarkdown"])(),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$mdxjs$2d$esm$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxjsEsmFromMarkdown"])()
    ];
}
function mdxToMarkdown(options) {
    return {
        extensions: [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$expression$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxExpressionToMarkdown"])(),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$jsx$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxJsxToMarkdown"])(options),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$mdxjs$2d$esm$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxjsEsmToMarkdown"])()
        ]
    };
}
}}),
"[project]/apps/website/docs/node_modules/remark-mdx/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {ToMarkdownOptions} from 'mdast-util-mdx'
 * @import {Options as MicromarkOptions} from 'micromark-extension-mdxjs'
 * @import {Processor} from 'unified'
 */ /**
 * @typedef {MicromarkOptions & ToMarkdownOptions} Options
 *   Configuration.
 */ __turbopack_esm__({
    "default": (()=>remarkMdx)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-mdxjs/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$mdx$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-mdx/lib/index.js [app-rsc] (ecmascript)");
;
;
/** @type {Readonly<Options>} */ const emptyOptions = {};
function remarkMdx(options) {
    const self = this;
    const settings = options || emptyOptions;
    const data = self.data();
    const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);
    const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);
    const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);
    micromarkExtensions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxjs"])(settings));
    fromMarkdownExtensions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$mdx$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxFromMarkdown"])());
    toMarkdownExtensions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$mdx$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxToMarkdown"])(settings));
}
}}),
"[project]/apps/website/docs/node_modules/estree-walker/src/walker.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef { import('estree').Node} Node
 * @typedef {{
 *   skip: () => void;
 *   remove: () => void;
 *   replace: (node: Node) => void;
 * }} WalkerContext
 */ __turbopack_esm__({
    "WalkerBase": (()=>WalkerBase)
});
class WalkerBase {
    constructor(){
        /** @type {boolean} */ this.should_skip = false;
        /** @type {boolean} */ this.should_remove = false;
        /** @type {Node | null} */ this.replacement = null;
        /** @type {WalkerContext} */ this.context = {
            skip: ()=>this.should_skip = true,
            remove: ()=>this.should_remove = true,
            replace: (node)=>this.replacement = node
        };
    }
    /**
	 * @template {Node} Parent
	 * @param {Parent | null | undefined} parent
	 * @param {keyof Parent | null | undefined} prop
	 * @param {number | null | undefined} index
	 * @param {Node} node
	 */ replace(parent, prop, index, node) {
        if (parent && prop) {
            if (index != null) {
                /** @type {Array<Node>} */ parent[prop][index] = node;
            } else {
                /** @type {Node} */ parent[prop] = node;
            }
        }
    }
    /**
	 * @template {Node} Parent
	 * @param {Parent | null | undefined} parent
	 * @param {keyof Parent | null | undefined} prop
	 * @param {number | null | undefined} index
	 */ remove(parent, prop, index) {
        if (parent && prop) {
            if (index !== null && index !== undefined) {
                /** @type {Array<Node>} */ parent[prop].splice(index, 1);
            } else {
                delete parent[prop];
            }
        }
    }
}
}}),
"[project]/apps/website/docs/node_modules/estree-walker/src/sync.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "SyncWalker": (()=>SyncWalker)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$walker$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-walker/src/walker.js [app-rsc] (ecmascript)");
;
class SyncWalker extends __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$walker$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["WalkerBase"] {
    /**
	 *
	 * @param {SyncHandler} [enter]
	 * @param {SyncHandler} [leave]
	 */ constructor(enter, leave){
        super();
        /** @type {boolean} */ this.should_skip = false;
        /** @type {boolean} */ this.should_remove = false;
        /** @type {Node | null} */ this.replacement = null;
        /** @type {WalkerContext} */ this.context = {
            skip: ()=>this.should_skip = true,
            remove: ()=>this.should_remove = true,
            replace: (node)=>this.replacement = node
        };
        /** @type {SyncHandler | undefined} */ this.enter = enter;
        /** @type {SyncHandler | undefined} */ this.leave = leave;
    }
    /**
	 * @template {Node} Parent
	 * @param {Node} node
	 * @param {Parent | null} parent
	 * @param {keyof Parent} [prop]
	 * @param {number | null} [index]
	 * @returns {Node | null}
	 */ visit(node, parent, prop, index) {
        if (node) {
            if (this.enter) {
                const _should_skip = this.should_skip;
                const _should_remove = this.should_remove;
                const _replacement = this.replacement;
                this.should_skip = false;
                this.should_remove = false;
                this.replacement = null;
                this.enter.call(this.context, node, parent, prop, index);
                if (this.replacement) {
                    node = this.replacement;
                    this.replace(parent, prop, index, node);
                }
                if (this.should_remove) {
                    this.remove(parent, prop, index);
                }
                const skipped = this.should_skip;
                const removed = this.should_remove;
                this.should_skip = _should_skip;
                this.should_remove = _should_remove;
                this.replacement = _replacement;
                if (skipped) return node;
                if (removed) return null;
            }
            /** @type {keyof Node} */ let key;
            for(key in node){
                /** @type {unknown} */ const value = node[key];
                if (value && typeof value === 'object') {
                    if (Array.isArray(value)) {
                        const nodes = value;
                        for(let i = 0; i < nodes.length; i += 1){
                            const item = nodes[i];
                            if (isNode(item)) {
                                if (!this.visit(item, node, key, i)) {
                                    // removed
                                    i--;
                                }
                            }
                        }
                    } else if (isNode(value)) {
                        this.visit(value, node, key, null);
                    }
                }
            }
            if (this.leave) {
                const _replacement = this.replacement;
                const _should_remove = this.should_remove;
                this.replacement = null;
                this.should_remove = false;
                this.leave.call(this.context, node, parent, prop, index);
                if (this.replacement) {
                    node = this.replacement;
                    this.replace(parent, prop, index, node);
                }
                if (this.should_remove) {
                    this.remove(parent, prop, index);
                }
                const removed = this.should_remove;
                this.replacement = _replacement;
                this.should_remove = _should_remove;
                if (removed) return null;
            }
        }
        return node;
    }
}
/**
 * Ducktype a node.
 *
 * @param {unknown} value
 * @returns {value is Node}
 */ function isNode(value) {
    return value !== null && typeof value === 'object' && 'type' in value && typeof value.type === 'string';
}
}}),
"[project]/apps/website/docs/node_modules/estree-walker/src/async.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "AsyncWalker": (()=>AsyncWalker)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$walker$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-walker/src/walker.js [app-rsc] (ecmascript)");
;
class AsyncWalker extends __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$walker$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["WalkerBase"] {
    /**
	 *
	 * @param {AsyncHandler} [enter]
	 * @param {AsyncHandler} [leave]
	 */ constructor(enter, leave){
        super();
        /** @type {boolean} */ this.should_skip = false;
        /** @type {boolean} */ this.should_remove = false;
        /** @type {Node | null} */ this.replacement = null;
        /** @type {WalkerContext} */ this.context = {
            skip: ()=>this.should_skip = true,
            remove: ()=>this.should_remove = true,
            replace: (node)=>this.replacement = node
        };
        /** @type {AsyncHandler | undefined} */ this.enter = enter;
        /** @type {AsyncHandler | undefined} */ this.leave = leave;
    }
    /**
	 * @template {Node} Parent
	 * @param {Node} node
	 * @param {Parent | null} parent
	 * @param {keyof Parent} [prop]
	 * @param {number | null} [index]
	 * @returns {Promise<Node | null>}
	 */ async visit(node, parent, prop, index) {
        if (node) {
            if (this.enter) {
                const _should_skip = this.should_skip;
                const _should_remove = this.should_remove;
                const _replacement = this.replacement;
                this.should_skip = false;
                this.should_remove = false;
                this.replacement = null;
                await this.enter.call(this.context, node, parent, prop, index);
                if (this.replacement) {
                    node = this.replacement;
                    this.replace(parent, prop, index, node);
                }
                if (this.should_remove) {
                    this.remove(parent, prop, index);
                }
                const skipped = this.should_skip;
                const removed = this.should_remove;
                this.should_skip = _should_skip;
                this.should_remove = _should_remove;
                this.replacement = _replacement;
                if (skipped) return node;
                if (removed) return null;
            }
            /** @type {keyof Node} */ let key;
            for(key in node){
                /** @type {unknown} */ const value = node[key];
                if (value && typeof value === 'object') {
                    if (Array.isArray(value)) {
                        const nodes = value;
                        for(let i = 0; i < nodes.length; i += 1){
                            const item = nodes[i];
                            if (isNode(item)) {
                                if (!await this.visit(item, node, key, i)) {
                                    // removed
                                    i--;
                                }
                            }
                        }
                    } else if (isNode(value)) {
                        await this.visit(value, node, key, null);
                    }
                }
            }
            if (this.leave) {
                const _replacement = this.replacement;
                const _should_remove = this.should_remove;
                this.replacement = null;
                this.should_remove = false;
                await this.leave.call(this.context, node, parent, prop, index);
                if (this.replacement) {
                    node = this.replacement;
                    this.replace(parent, prop, index, node);
                }
                if (this.should_remove) {
                    this.remove(parent, prop, index);
                }
                const removed = this.should_remove;
                this.replacement = _replacement;
                this.should_remove = _should_remove;
                if (removed) return null;
            }
        }
        return node;
    }
}
/**
 * Ducktype a node.
 *
 * @param {unknown} value
 * @returns {value is Node}
 */ function isNode(value) {
    return value !== null && typeof value === 'object' && 'type' in value && typeof value.type === 'string';
}
}}),
"[project]/apps/website/docs/node_modules/estree-walker/src/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "asyncWalk": (()=>asyncWalk),
    "walk": (()=>walk)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$sync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-walker/src/sync.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$async$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-walker/src/async.js [app-rsc] (ecmascript)");
;
;
function walk(ast, { enter, leave }) {
    const instance = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$sync$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SyncWalker"](enter, leave);
    return instance.visit(ast, null);
}
async function asyncWalk(ast, { enter, leave }) {
    const instance = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$async$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AsyncWalker"](enter, leave);
    return await instance.visit(ast, null);
}
}}),
"[project]/apps/website/docs/node_modules/collapse-white-space/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {'html'|'js'} Style
 *
 * @typedef Options
 *   Configuration.
 * @property {Style} [style='js']
 *   Style of white space to support.
 * @property {boolean} [preserveLineEndings=false]
 *   Whether to collapse white space containing a line ending to that line
 *   ending.
 *   The default is to collapse to a single space.
 * @property {boolean} [trim=false]
 *   Whether to drop white space at the start and end of `value`.
 *   The default is to keep it.
 */ __turbopack_esm__({
    "collapseWhiteSpace": (()=>collapseWhiteSpace)
});
const js = /\s+/g;
const html = /[\t\n\v\f\r ]+/g;
function collapseWhiteSpace(value, options) {
    if (!options) {
        options = {};
    } else if (typeof options === 'string') {
        options = {
            style: options
        };
    }
    const replace = options.preserveLineEndings ? replaceLineEnding : replaceSpace;
    return String(value).replace(options.style === 'html' ? html : js, options.trim ? trimFactory(replace) : replace);
}
/**
 * Replace white space with a line ending as that line ending and otherwise a
 * space.
 *
 * @param {string} value
 * @returns {string}
 */ function replaceLineEnding(value) {
    const match = /\r?\n|\r/.exec(value);
    return match ? match[0] : ' ';
}
/**
 * Replace white space with a space.
 *
 * @returns {string}
 */ function replaceSpace() {
    return ' ';
}
/**
 * @param {(value: string) => string} replace
 */ function trimFactory(replace) {
    return dropOrReplace;
    "TURBOPACK unreachable";
    /**
   * Replace white space with nothing if it starts or ends the string.
   * Calls `replace` otherwise.
   *
   * @param {string} value
   * @param {number} index
   * @param {string} all
   * @returns {string}
   */ function dropOrReplace(value, index, all) {
        return index === 0 || index + value.length === all.length ? '' : replace(value);
    }
}
}}),
"[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Root, RootContent} from 'mdast'
 */ __turbopack_esm__({
    "remarkMarkAndUnravel": (()=>remarkMarkAndUnravel)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-walker/src/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit/lib/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$collapse$2d$white$2d$space$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/collapse-white-space/index.js [app-rsc] (ecmascript)");
;
;
;
function remarkMarkAndUnravel() {
    /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */ return function(tree) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(tree, function(node, index, parent) {
            let offset = -1;
            let all = true;
            let oneOrMore = false;
            if (parent && typeof index === 'number' && node.type === 'paragraph') {
                const children = node.children;
                while(++offset < children.length){
                    const child = children[offset];
                    if (child.type === 'mdxJsxTextElement' || child.type === 'mdxTextExpression') {
                        oneOrMore = true;
                    } else if (child.type === 'text' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$collapse$2d$white$2d$space$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["collapseWhiteSpace"])(child.value, {
                        style: 'html',
                        trim: true
                    }) === '') {
                    // Empty.
                    } else {
                        all = false;
                        break;
                    }
                }
                if (all && oneOrMore) {
                    offset = -1;
                    /** @type {Array<RootContent>} */ const newChildren = [];
                    while(++offset < children.length){
                        const child = children[offset];
                        if (child.type === 'mdxJsxTextElement') {
                            // @ts-expect-error: mutate because it is faster; content model is fine.
                            child.type = 'mdxJsxFlowElement';
                        }
                        if (child.type === 'mdxTextExpression') {
                            // @ts-expect-error: mutate because it is faster; content model is fine.
                            child.type = 'mdxFlowExpression';
                        }
                        if (child.type === 'text' && /^[\t\r\n ]+$/.test(String(child.value))) {
                        // Empty.
                        } else {
                            newChildren.push(child);
                        }
                    }
                    parent.children.splice(index, 1, ...newChildren);
                    return index;
                }
            }
            if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {
                const data = node.data || (node.data = {});
                data._mdxExplicitJsx = true;
            }
            if ((node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression' || node.type === 'mdxjsEsm') && node.data && node.data.estree) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["walk"])(node.data.estree, {
                    enter (node) {
                        if (node.type === 'JSXElement') {
                            const data = node.data || (node.data = {});
                            data._mdxExplicitJsx = true;
                        }
                    }
                });
            }
        });
    };
}
}}),
"[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/node-types.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * List of node types made by `mdast-util-mdx`, which have to be passed
 * through untouched from the mdast tree to the hast tree.
 */ __turbopack_esm__({
    "nodeTypes": (()=>nodeTypes)
});
const nodeTypes = [
    'mdxFlowExpression',
    'mdxJsxFlowElement',
    'mdxJsxTextElement',
    'mdxTextExpression',
    'mdxjsEsm'
];
}}),
"[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Root} from 'hast'
 */ __turbopack_esm__({
    "rehypeRemoveRaw": (()=>rehypeRemoveRaw)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit/lib/index.js [app-rsc] (ecmascript) <locals>");
;
function rehypeRemoveRaw() {
    /**
   * @param {Root} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */ return function(tree) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(tree, 'raw', function(_, index, parent) {
            if (parent && typeof index === 'number') {
                parent.children.splice(index, 1);
                return index;
            }
        });
    };
}
}}),
"[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Node} from 'estree-jsx'
 */ // Fix to show references to above types in VS Code.
__turbopack_esm__({
    "create": (()=>create)
});
'';
function create(from, to) {
    /** @type {Array<keyof Node>} */ const fields = [
        'start',
        'end',
        'loc',
        'range'
    ];
    let index = -1;
    while(++index < fields.length){
        const field = fields[index];
        if (field in from) {
            // @ts-expect-error: assume they’re settable.
            to[field] = from[field];
        }
    }
}
}}),
"[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
      Declaration,
      MaybeNamedClassDeclaration,
      MaybeNamedFunctionDeclaration,
      Node
 * } from 'estree-jsx'
 */ // Fix to show references to above types in VS Code.
__turbopack_esm__({
    "isDeclaration": (()=>isDeclaration)
});
'';
function isDeclaration(node) {
    return Boolean(node.type === 'FunctionDeclaration' || node.type === 'ClassDeclaration' || node.type === 'VariableDeclaration');
}
}}),
"[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
      Declaration,
      Expression,
      MaybeNamedClassDeclaration,
      MaybeNamedFunctionDeclaration
 * } from 'estree-jsx'
 */ __turbopack_esm__({
    "declarationToExpression": (()=>declarationToExpression)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
;
function declarationToExpression(declaration) {
    if (declaration.type === 'FunctionDeclaration') {
        return {
            ...declaration,
            type: 'FunctionExpression'
        };
    }
    // This is currently an internal utility so the next shouldn’t happen or a
    // maintainer is making a mistake.
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(declaration.type === 'ClassDeclaration', 'unexpected node type');
    return {
        ...declaration,
        type: 'ClassExpression'
    };
}
}}),
"[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
      AssignmentProperty,
      ExportSpecifier,
      Expression,
      Identifier,
      ImportDefaultSpecifier,
      ImportNamespaceSpecifier,
      ImportSpecifier,
      Literal,
      VariableDeclarator
 * } from 'estree-jsx'
 */ __turbopack_esm__({
    "specifiersToDeclarations": (()=>specifiersToDeclarations)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
;
;
function specifiersToDeclarations(specifiers, init) {
    let index = -1;
    /** @type {Array<VariableDeclarator>} */ const declarations = [];
    /** @type {Array<ExportSpecifier | ImportDefaultSpecifier | ImportSpecifier>} */ const otherSpecifiers = [];
    // Can only be one according to JS syntax.
    /** @type {ImportNamespaceSpecifier | undefined} */ let importNamespaceSpecifier;
    while(++index < specifiers.length){
        const specifier = specifiers[index];
        if (specifier.type === 'ImportNamespaceSpecifier') {
            importNamespaceSpecifier = specifier;
        } else {
            otherSpecifiers.push(specifier);
        }
    }
    if (importNamespaceSpecifier) {
        /** @type {VariableDeclarator} */ const declarator = {
            type: 'VariableDeclarator',
            id: importNamespaceSpecifier.local,
            init
        };
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["create"])(importNamespaceSpecifier, declarator);
        declarations.push(declarator);
    }
    declarations.push({
        type: 'VariableDeclarator',
        id: {
            type: 'ObjectPattern',
            properties: otherSpecifiers.map(function(specifier) {
                /** @type {Identifier | Literal} */ let key = specifier.type === 'ImportSpecifier' ? specifier.imported : specifier.type === 'ExportSpecifier' ? specifier.exported : {
                    type: 'Identifier',
                    name: 'default'
                };
                let value = specifier.local;
                // Switch them around if we’re exporting.
                if (specifier.type === 'ExportSpecifier') {
                    value = key;
                    key = specifier.local;
                }
                // To do: what to do about literals?
                // `const { a: 'b' } = c()` does not work?
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(value.type === 'Identifier');
                /** @type {AssignmentProperty} */ const property = {
                    type: 'Property',
                    kind: 'init',
                    shorthand: key.type === 'Identifier' && value.type === 'Identifier' && key.name === value.name,
                    method: false,
                    computed: false,
                    key,
                    value
                };
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["create"])(specifier, property);
                return property;
            })
        },
        init: importNamespaceSpecifier ? {
            type: 'Identifier',
            name: importNamespaceSpecifier.local.name
        } : init
    });
    return declarations;
}
}}),
"[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
      Identifier,
      JSXIdentifier,
      JSXMemberExpression,
      Literal,
      MemberExpression
 * } from 'estree-jsx'
 */ __turbopack_esm__({
    "toIdOrMemberExpression": (()=>toIdOrMemberExpression),
    "toJsxIdOrMemberExpression": (()=>toJsxIdOrMemberExpression)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-util-is-identifier-name/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
;
;
function toIdOrMemberExpression(ids) {
    let index = -1;
    /** @type {Identifier | Literal | MemberExpression | undefined} */ let object;
    while(++index < ids.length){
        const name = ids[index];
        /** @type {Identifier | Literal} */ const id = typeof name === 'string' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["name"])(name) ? {
            type: 'Identifier',
            name
        } : {
            type: 'Literal',
            value: name
        };
        object = object ? {
            type: 'MemberExpression',
            object,
            property: id,
            computed: id.type === 'Literal',
            optional: false
        } : id;
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(object, 'expected non-empty `ids` to be passed');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(object.type !== 'Literal', 'expected identifier as left-most value');
    return object;
}
function toJsxIdOrMemberExpression(ids) {
    let index = -1;
    /** @type {JSXIdentifier | JSXMemberExpression | undefined} */ let object;
    while(++index < ids.length){
        const name = ids[index];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof name === 'string' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["name"])(name, {
            jsx: true
        }), 'expected valid jsx identifier, not `' + name + '`');
        /** @type {JSXIdentifier} */ const id = {
            type: 'JSXIdentifier',
            name
        };
        object = object ? {
            type: 'JSXMemberExpression',
            object,
            property: id
        } : id;
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(object, 'expected non-empty `ids` to be passed');
    return object;
}
}}),
"[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
      CallExpression,
      Directive,
      ExportAllDeclaration,
      ExportDefaultDeclaration,
      ExportNamedDeclaration,
      ExportSpecifier,
      Expression,
      FunctionDeclaration,
      Identifier,
      ImportDeclaration,
      ImportDefaultSpecifier,
      ImportExpression,
      ImportSpecifier,
      JSXElement,
      JSXFragment,
      Literal,
      ModuleDeclaration,
      Node,
      Program,
      Property,
      SimpleLiteral,
      SpreadElement,
      Statement,
      VariableDeclarator
 * } from 'estree-jsx'
 * @import {VFile} from 'vfile'
 * @import {ProcessorOptions} from '../core.js'
 */ __turbopack_esm__({
    "recmaDocument": (()=>recmaDocument)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-walker/src/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-stringify-position/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-position-from-estree/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$is$2d$declaration$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$declaration$2d$to$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$scope$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-util-scope/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$specifiers$2d$to$2d$declarations$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$id$2d$or$2d$member$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
function recmaDocument(options) {
    const baseUrl = options.baseUrl || undefined;
    const baseHref = typeof baseUrl === 'object' ? baseUrl.href : baseUrl;
    const outputFormat = options.outputFormat || 'program';
    const pragma = options.pragma === undefined ? 'React.createElement' : options.pragma;
    const pragmaFrag = options.pragmaFrag === undefined ? 'React.Fragment' : options.pragmaFrag;
    const pragmaImportSource = options.pragmaImportSource || 'react';
    const jsxImportSource = options.jsxImportSource || 'react';
    const jsxRuntime = options.jsxRuntime || 'automatic';
    /**
   * @param {Program} tree
   *   Tree.
   * @param {VFile} file
   *   File.
   * @returns {undefined}
   *   Nothing.
   */ return function(tree, file) {
        /** @type {Array<[string, string] | string>} */ const exportedValues = [];
        /** @type {Array<Directive | ModuleDeclaration | Statement>} */ const replacement = [];
        let exportAllCount = 0;
        /** @type {ExportDefaultDeclaration | ExportSpecifier | undefined} */ let layout;
        /** @type {boolean | undefined} */ let content;
        /** @type {Node} */ let child;
        if (jsxRuntime === 'classic' && pragmaFrag) {
            injectPragma(tree, '@jsxFrag', pragmaFrag);
        }
        if (jsxRuntime === 'classic' && pragma) {
            injectPragma(tree, '@jsx', pragma);
        }
        if (jsxRuntime === 'automatic' && jsxImportSource) {
            injectPragma(tree, '@jsxImportSource', jsxImportSource);
        }
        if ("TURBOPACK compile-time truthy", 1) {
            injectPragma(tree, '@jsxRuntime', jsxRuntime);
        }
        if (jsxRuntime === 'classic' && pragmaImportSource) {
            if (!pragma) {
                throw new Error('Missing `pragma` in classic runtime with `pragmaImportSource`');
            }
            handleEsm({
                type: 'ImportDeclaration',
                specifiers: [
                    {
                        type: 'ImportDefaultSpecifier',
                        local: {
                            type: 'Identifier',
                            name: pragma.split('.')[0]
                        }
                    }
                ],
                source: {
                    type: 'Literal',
                    value: pragmaImportSource
                }
            });
        }
        // Find the `export default`, the JSX expression, and leave the rest
        // (import/exports) as they are.
        for (child of tree.body){
            // ```tsx
            // export default properties => <>{properties.children}</>
            // ```
            //
            // Treat it as an inline layout declaration.
            if (child.type === 'ExportDefaultDeclaration') {
                if (layout) {
                    file.fail('Unexpected duplicate layout, expected a single layout (previous: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"])(layout)) + ')', {
                        ancestors: [
                            tree,
                            child
                        ],
                        place: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"])(child),
                        ruleId: 'duplicate-layout',
                        source: 'recma-document'
                    });
                }
                layout = child;
                replacement.push({
                    type: 'VariableDeclaration',
                    kind: 'const',
                    declarations: [
                        {
                            type: 'VariableDeclarator',
                            id: {
                                type: 'Identifier',
                                name: 'MDXLayout'
                            },
                            init: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$is$2d$declaration$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isDeclaration"])(child.declaration) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$declaration$2d$to$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["declarationToExpression"])(child.declaration) : child.declaration
                        }
                    ]
                });
            } else if (child.type === 'ExportNamedDeclaration' && child.source) {
                // Cast because always simple.
                const source = child.source;
                // Remove `default` or `as default`, but not `default as`, specifier.
                child.specifiers = child.specifiers.filter(function(specifier) {
                    if (specifier.exported.type === 'Identifier' && specifier.exported.name === 'default') {
                        if (layout) {
                            file.fail('Unexpected duplicate layout, expected a single layout (previous: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"])(layout)) + ')', {
                                ancestors: [
                                    tree,
                                    child,
                                    specifier
                                ],
                                place: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"])(child),
                                ruleId: 'duplicate-layout',
                                source: 'recma-document'
                            });
                        }
                        layout = specifier;
                        // Make it just an import: `import MDXLayout from '…'`.
                        /** @type {Array<ImportDefaultSpecifier | ImportSpecifier>} */ const specifiers = [];
                        // Default as default / something else as default.
                        if (specifier.local.type === 'Identifier' && specifier.local.name === 'default') {
                            specifiers.push({
                                type: 'ImportDefaultSpecifier',
                                local: {
                                    type: 'Identifier',
                                    name: 'MDXLayout'
                                }
                            });
                        } else {
                            /** @type {ImportSpecifier} */ const importSpecifier = {
                                type: 'ImportSpecifier',
                                imported: specifier.local,
                                local: {
                                    type: 'Identifier',
                                    name: 'MDXLayout'
                                }
                            };
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["create"])(specifier.local, importSpecifier);
                            specifiers.push(importSpecifier);
                        }
                        /** @type {Literal} */ const from = {
                            type: 'Literal',
                            value: source.value
                        };
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["create"])(source, from);
                        /** @type {ImportDeclaration} */ const declaration = {
                            type: 'ImportDeclaration',
                            specifiers,
                            source: from
                        };
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["create"])(specifier, declaration);
                        handleEsm(declaration);
                        return false;
                    }
                    return true;
                });
                // If there are other things imported, keep it.
                if (child.specifiers.length > 0) {
                    handleExport(child);
                }
            } else if (child.type === 'ExportNamedDeclaration' || child.type === 'ExportAllDeclaration') {
                handleExport(child);
            } else if (child.type === 'ImportDeclaration') {
                handleEsm(child);
            } else if (child.type === 'ExpressionStatement' && (child.expression.type === 'JSXElement' || child.expression.type === 'JSXFragment')) {
                content = true;
                replacement.push(...createMdxContent(child.expression, outputFormat, Boolean(layout)));
            } else {
                // This catch-all branch is because plugins might add other things.
                // Normally, we only have import/export/jsx, but just add whatever’s
                // there.
                replacement.push(child);
            }
        }
        // If there was no JSX content at all, add an empty function.
        if (!content) {
            replacement.push(...createMdxContent(undefined, outputFormat, Boolean(layout)));
        }
        exportedValues.push([
            'MDXContent',
            'default'
        ]);
        if (outputFormat === 'function-body') {
            replacement.push({
                type: 'ReturnStatement',
                argument: {
                    type: 'ObjectExpression',
                    properties: [
                        ...Array.from({
                            length: exportAllCount
                        }).map(/**
               * @param {undefined} _
               *   Nothing.
               * @param {number} index
               *   Index.
               * @returns {SpreadElement}
               *   Node.
               */ function(_, index) {
                            return {
                                type: 'SpreadElement',
                                argument: {
                                    type: 'Identifier',
                                    name: '_exportAll' + (index + 1)
                                }
                            };
                        }),
                        ...exportedValues.map(function(d) {
                            /** @type {Property} */ const property = {
                                type: 'Property',
                                kind: 'init',
                                method: false,
                                computed: false,
                                shorthand: typeof d === 'string',
                                key: {
                                    type: 'Identifier',
                                    name: typeof d === 'string' ? d : d[1]
                                },
                                value: {
                                    type: 'Identifier',
                                    name: typeof d === 'string' ? d : d[0]
                                }
                            };
                            return property;
                        })
                    ]
                }
            });
        }
        tree.body = replacement;
        let usesImportMetaUrlVariable = false;
        let usesResolveDynamicHelper = false;
        if (baseHref || outputFormat === 'function-body') {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["walk"])(tree, {
                enter (node) {
                    if ((node.type === 'ExportAllDeclaration' || node.type === 'ExportNamedDeclaration' || node.type === 'ImportDeclaration') && node.source) {
                        // We never hit this branch when generating function bodies, as
                        // statements are already compiled away into import expressions.
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(baseHref, 'unexpected missing `baseHref` in branch');
                        let value = node.source.value;
                        // The literal source for statements can only be string.
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof value === 'string', 'expected string source');
                        // Resolve a specifier.
                        // This is the same as `_resolveDynamicMdxSpecifier`, which has to
                        // be injected to work with expressions at runtime, but as we have
                        // `baseHref` at compile time here and statements are static
                        // strings, we can do it now.
                        try {
                            // To do: next major: use `URL.canParse`.
                            // eslint-disable-next-line no-new
                            new URL(value);
                        // Fine: a full URL.
                        } catch  {
                            if (value.startsWith('/') || value.startsWith('./') || value.startsWith('../')) {
                                value = new URL(value, baseHref).href;
                            } else {
                            // Fine: are bare specifier.
                            }
                        }
                        /** @type {SimpleLiteral} */ const replacement = {
                            type: 'Literal',
                            value
                        };
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["create"])(node.source, replacement);
                        node.source = replacement;
                        return;
                    }
                    if (node.type === 'ImportExpression') {
                        usesResolveDynamicHelper = true;
                        /** @type {CallExpression} */ const replacement = {
                            type: 'CallExpression',
                            callee: {
                                type: 'Identifier',
                                name: '_resolveDynamicMdxSpecifier'
                            },
                            arguments: [
                                node.source
                            ],
                            optional: false
                        };
                        node.source = replacement;
                        return;
                    }
                    // To do: add support for `import.meta.resolve`.
                    if (node.type === 'MemberExpression' && 'object' in node && node.object.type === 'MetaProperty' && node.property.type === 'Identifier' && node.object.meta.name === 'import' && node.object.property.name === 'meta' && node.property.name === 'url') {
                        usesImportMetaUrlVariable = true;
                        /** @type {Identifier} */ const replacement = {
                            type: 'Identifier',
                            name: '_importMetaUrl'
                        };
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["create"])(node, replacement);
                        this.replace(replacement);
                    }
                }
            });
        }
        if (usesResolveDynamicHelper) {
            if (!baseHref) {
                usesImportMetaUrlVariable = true;
            }
            tree.body.push(resolveDynamicMdxSpecifier(baseHref ? {
                type: 'Literal',
                value: baseHref
            } : {
                type: 'Identifier',
                name: '_importMetaUrl'
            }));
        }
        if (usesImportMetaUrlVariable) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(outputFormat === 'function-body', 'expected `function-body` when using dynamic url injection');
            tree.body.unshift(...createImportMetaUrlVariable());
        }
        /**
     * @param {ExportAllDeclaration | ExportNamedDeclaration} node
     *   Export node.
     * @returns {undefined}
     *   Nothing.
     */ function handleExport(node) {
            if (node.type === 'ExportNamedDeclaration') {
                // ```tsx
                // export function a() {}
                // export class A {}
                // export var a = 1
                // ```
                if (node.declaration) {
                    const visitors = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$scope$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createVisitors"])();
                    // Walk the top-level scope.
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["walk"])(node, {
                        enter (node) {
                            visitors.enter(node);
                            if (node.type === 'ArrowFunctionExpression' || node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression') {
                                this.skip();
                                visitors.exit(node);
                            }
                        },
                        leave: visitors.exit
                    });
                    exportedValues.push(...visitors.scopes[0].defined);
                }
                // ```tsx
                // export {a, b as c}
                // export {a, b as c} from 'd'
                // ```
                for (child of node.specifiers){
                    if (child.exported.type === 'Identifier') {
                        exportedValues.push(child.exported.name);
                    /* c8 ignore next 5 -- to do: <https://github.com/mdx-js/mdx/issues/2536> */ } else {
                        // Must be string.
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof child.exported.value === 'string');
                        exportedValues.push(child.exported.value);
                    }
                }
            }
            handleEsm(node);
        }
        /**
     * @param {ExportAllDeclaration | ExportNamedDeclaration | ImportDeclaration} node
     *   Export or import node.
     * @returns {undefined}
     *   Nothing.
     */ function handleEsm(node) {
            /** @type {ModuleDeclaration | Statement | undefined} */ let replace;
            /** @type {Expression} */ let init;
            if (outputFormat === 'function-body') {
                if (// Always have a source:
                node.type === 'ImportDeclaration' || node.type === 'ExportAllDeclaration' || node.type === 'ExportNamedDeclaration' && node.source) {
                    // We always have a source, but types say they can be missing.
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.source, 'expected `node.source` to be defined');
                    // ```
                    // import 'a'
                    // //=> await import('a')
                    // import a from 'b'
                    // //=> const {default: a} = await import('b')
                    // export {a, b as c} from 'd'
                    // //=> const {a, c: b} = await import('d')
                    // export * from 'a'
                    // //=> const _exportAll0 = await import('a')
                    // ```
                    /** @type {ImportExpression} */ const argument = {
                        type: 'ImportExpression',
                        source: node.source
                    };
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["create"])(node, argument);
                    init = {
                        type: 'AwaitExpression',
                        argument
                    };
                    if ((node.type === 'ImportDeclaration' || node.type === 'ExportNamedDeclaration') && node.specifiers.length === 0) {
                        replace = {
                            type: 'ExpressionStatement',
                            expression: init
                        };
                    } else {
                        replace = {
                            type: 'VariableDeclaration',
                            kind: 'const',
                            declarations: node.type === 'ExportAllDeclaration' ? [
                                {
                                    type: 'VariableDeclarator',
                                    id: {
                                        type: 'Identifier',
                                        name: '_exportAll' + ++exportAllCount
                                    },
                                    init
                                }
                            ] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$specifiers$2d$to$2d$declarations$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["specifiersToDeclarations"])(node.specifiers, init)
                        };
                    }
                } else if (node.declaration) {
                    replace = node.declaration;
                } else {
                    /** @type {Array<VariableDeclarator>} */ const declarators = [];
                    for (const specifier of node.specifiers){
                        // `id` can only be an identifier,
                        // so we ignore literal.
                        if (specifier.exported.type === 'Identifier' && specifier.local.type === 'Identifier' && specifier.local.name !== specifier.exported.name) {
                            declarators.push({
                                type: 'VariableDeclarator',
                                id: specifier.exported,
                                init: specifier.local
                            });
                        }
                    }
                    if (declarators.length > 0) {
                        replace = {
                            type: 'VariableDeclaration',
                            kind: 'const',
                            declarations: declarators
                        };
                    }
                }
            } else {
                replace = node;
            }
            if (replace) {
                replacement.push(replace);
            }
        }
    };
    "TURBOPACK unreachable";
    /**
   * @param {Readonly<Expression> | undefined} content
   *   Content.
   * @param {'function-body' | 'program'} outputFormat
   *   Output format.
   * @param {boolean | undefined} [hasInternalLayout=false]
   *   Whether there’s an internal layout (default: `false`).
   * @returns {Array<ExportDefaultDeclaration | FunctionDeclaration>}
   *   Functions.
   */ function createMdxContent(content, outputFormat, hasInternalLayout) {
        /** @type {JSXElement} */ const element = {
            type: 'JSXElement',
            openingElement: {
                type: 'JSXOpeningElement',
                name: {
                    type: 'JSXIdentifier',
                    name: 'MDXLayout'
                },
                attributes: [
                    {
                        type: 'JSXSpreadAttribute',
                        argument: {
                            type: 'Identifier',
                            name: 'props'
                        }
                    }
                ],
                selfClosing: false
            },
            closingElement: {
                type: 'JSXClosingElement',
                name: {
                    type: 'JSXIdentifier',
                    name: 'MDXLayout'
                }
            },
            children: [
                {
                    type: 'JSXElement',
                    openingElement: {
                        type: 'JSXOpeningElement',
                        name: {
                            type: 'JSXIdentifier',
                            name: '_createMdxContent'
                        },
                        attributes: [
                            {
                                type: 'JSXSpreadAttribute',
                                argument: {
                                    type: 'Identifier',
                                    name: 'props'
                                }
                            }
                        ],
                        selfClosing: true
                    },
                    closingElement: null,
                    children: []
                }
            ]
        };
        let result = element;
        if (!hasInternalLayout) {
            result = {
                type: 'ConditionalExpression',
                test: {
                    type: 'Identifier',
                    name: 'MDXLayout'
                },
                consequent: result,
                alternate: {
                    type: 'CallExpression',
                    callee: {
                        type: 'Identifier',
                        name: '_createMdxContent'
                    },
                    arguments: [
                        {
                            type: 'Identifier',
                            name: 'props'
                        }
                    ],
                    optional: false
                }
            };
        }
        let argument = content || {
            type: 'Identifier',
            name: 'undefined'
        };
        // Unwrap a fragment of a single element.
        if (argument.type === 'JSXFragment' && argument.children.length === 1 && argument.children[0].type === 'JSXElement') {
            argument = argument.children[0];
        }
        let awaitExpression = false;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["walk"])(argument, {
            enter (node) {
                if (node.type === 'ArrowFunctionExpression' || node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression') {
                    return this.skip();
                }
                if (node.type === 'AwaitExpression' || node.type === 'ForOfStatement' && node.await) {
                    awaitExpression = true;
                }
            }
        });
        /** @type {FunctionDeclaration} */ const declaration = {
            type: 'FunctionDeclaration',
            id: {
                type: 'Identifier',
                name: 'MDXContent'
            },
            params: [
                {
                    type: 'AssignmentPattern',
                    left: {
                        type: 'Identifier',
                        name: 'props'
                    },
                    right: {
                        type: 'ObjectExpression',
                        properties: []
                    }
                }
            ],
            body: {
                type: 'BlockStatement',
                body: [
                    {
                        type: 'ReturnStatement',
                        argument: result
                    }
                ]
            }
        };
        return [
            {
                type: 'FunctionDeclaration',
                async: awaitExpression,
                id: {
                    type: 'Identifier',
                    name: '_createMdxContent'
                },
                params: [
                    {
                        type: 'Identifier',
                        name: 'props'
                    }
                ],
                body: {
                    type: 'BlockStatement',
                    body: [
                        {
                            type: 'ReturnStatement',
                            // Cast because TS doesn’t think `JSXFragment` is an expression.
                            // eslint-disable-next-line object-shorthand
                            argument: argument
                        }
                    ]
                }
            },
            outputFormat === 'program' ? {
                type: 'ExportDefaultDeclaration',
                declaration
            } : declaration
        ];
    }
}
/**
 * @param {Program} tree
 * @param {string} name
 * @param {string} value
 * @returns {undefined}
 */ function injectPragma(tree, name, value) {
    tree.comments?.unshift({
        type: 'Block',
        value: name + ' ' + value,
        data: {
            _mdxIsPragmaComment: true
        }
    });
}
/**
 * @param {Expression} importMetaUrl
 * @returns {FunctionDeclaration}
 */ function resolveDynamicMdxSpecifier(importMetaUrl) {
    return {
        type: 'FunctionDeclaration',
        id: {
            type: 'Identifier',
            name: '_resolveDynamicMdxSpecifier'
        },
        generator: false,
        async: false,
        params: [
            {
                type: 'Identifier',
                name: 'd'
            }
        ],
        body: {
            type: 'BlockStatement',
            body: [
                {
                    type: 'IfStatement',
                    test: {
                        type: 'BinaryExpression',
                        left: {
                            type: 'UnaryExpression',
                            operator: 'typeof',
                            prefix: true,
                            argument: {
                                type: 'Identifier',
                                name: 'd'
                            }
                        },
                        operator: '!==',
                        right: {
                            type: 'Literal',
                            value: 'string'
                        }
                    },
                    consequent: {
                        type: 'ReturnStatement',
                        argument: {
                            type: 'Identifier',
                            name: 'd'
                        }
                    },
                    alternate: null
                },
                // To do: use `URL.canParse` when widely supported (see commented
                // out code below).
                {
                    type: 'TryStatement',
                    block: {
                        type: 'BlockStatement',
                        body: [
                            {
                                type: 'ExpressionStatement',
                                expression: {
                                    type: 'NewExpression',
                                    callee: {
                                        type: 'Identifier',
                                        name: 'URL'
                                    },
                                    arguments: [
                                        {
                                            type: 'Identifier',
                                            name: 'd'
                                        }
                                    ]
                                }
                            },
                            {
                                type: 'ReturnStatement',
                                argument: {
                                    type: 'Identifier',
                                    name: 'd'
                                }
                            }
                        ]
                    },
                    handler: {
                        type: 'CatchClause',
                        param: null,
                        body: {
                            type: 'BlockStatement',
                            body: []
                        }
                    },
                    finalizer: null
                },
                // To do: use `URL.canParse` when widely supported.
                // {
                //   type: 'IfStatement',
                //   test: {
                //     type: 'CallExpression',
                //     callee: toIdOrMemberExpression(['URL', 'canParse']),
                //     arguments: [{type: 'Identifier', name: 'd'}],
                //     optional: false
                //   },
                //   consequent: {
                //     type: 'ReturnStatement',
                //     argument: {type: 'Identifier', name: 'd'}
                //   },
                //   alternate: null
                // },
                {
                    type: 'IfStatement',
                    test: {
                        type: 'LogicalExpression',
                        left: {
                            type: 'LogicalExpression',
                            left: {
                                type: 'CallExpression',
                                callee: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$id$2d$or$2d$member$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toIdOrMemberExpression"])([
                                    'd',
                                    'startsWith'
                                ]),
                                arguments: [
                                    {
                                        type: 'Literal',
                                        value: '/'
                                    }
                                ],
                                optional: false
                            },
                            operator: '||',
                            right: {
                                type: 'CallExpression',
                                callee: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$id$2d$or$2d$member$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toIdOrMemberExpression"])([
                                    'd',
                                    'startsWith'
                                ]),
                                arguments: [
                                    {
                                        type: 'Literal',
                                        value: './'
                                    }
                                ],
                                optional: false
                            }
                        },
                        operator: '||',
                        right: {
                            type: 'CallExpression',
                            callee: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$id$2d$or$2d$member$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toIdOrMemberExpression"])([
                                'd',
                                'startsWith'
                            ]),
                            arguments: [
                                {
                                    type: 'Literal',
                                    value: '../'
                                }
                            ],
                            optional: false
                        }
                    },
                    consequent: {
                        type: 'ReturnStatement',
                        argument: {
                            type: 'MemberExpression',
                            object: {
                                type: 'NewExpression',
                                callee: {
                                    type: 'Identifier',
                                    name: 'URL'
                                },
                                arguments: [
                                    {
                                        type: 'Identifier',
                                        name: 'd'
                                    },
                                    importMetaUrl
                                ]
                            },
                            property: {
                                type: 'Identifier',
                                name: 'href'
                            },
                            computed: false,
                            optional: false
                        }
                    },
                    alternate: null
                },
                {
                    type: 'ReturnStatement',
                    argument: {
                        type: 'Identifier',
                        name: 'd'
                    }
                }
            ]
        }
    };
}
/**
 * @returns {Array<Statement>}
 */ function createImportMetaUrlVariable() {
    return [
        {
            type: 'VariableDeclaration',
            declarations: [
                {
                    type: 'VariableDeclarator',
                    id: {
                        type: 'Identifier',
                        name: '_importMetaUrl'
                    },
                    init: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$id$2d$or$2d$member$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toIdOrMemberExpression"])([
                        'arguments',
                        0,
                        'baseUrl'
                    ])
                }
            ],
            kind: 'const'
        },
        {
            type: 'IfStatement',
            test: {
                type: 'UnaryExpression',
                operator: '!',
                prefix: true,
                argument: {
                    type: 'Identifier',
                    name: '_importMetaUrl'
                }
            },
            consequent: {
                type: 'ThrowStatement',
                argument: {
                    type: 'NewExpression',
                    callee: {
                        type: 'Identifier',
                        name: 'Error'
                    },
                    arguments: [
                        {
                            type: 'Literal',
                            value: 'Unexpected missing `options.baseUrl` needed to support `export … from`, `import`, or `import.meta.url` when generating `function-body`'
                        }
                    ]
                }
            },
            alternate: null
        }
    ];
}
}}),
"[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Expression} from 'estree-jsx'
 */ __turbopack_esm__({
    "toBinaryAddition": (()=>toBinaryAddition)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
;
function toBinaryAddition(expressions) {
    let index = -1;
    /** @type {Expression | undefined} */ let left;
    while(++index < expressions.length){
        const right = expressions[index];
        left = left ? {
            type: 'BinaryExpression',
            left,
            operator: '+',
            right
        } : right;
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(left, 'expected non-empty `expressions` to be passed');
    return left;
}
}}),
"[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
      Expression,
      Function as EstreeFunction,
      Identifier,
      ImportSpecifier,
      JSXElement,
      ModuleDeclaration,
      ObjectPattern,
      Program,
      Property,
      SpreadElement,
      Statement,
      VariableDeclarator
 * } from 'estree-jsx'
 * @import {Scope} from 'estree-util-scope'
 * @import {VFile} from 'vfile'
 * @import {ProcessorOptions} from '../core.js'
 */ /**
 * @typedef StackEntry
 *   Entry.
 * @property {Array<string>} components
 *   Used components.
 * @property {Map<string, string>} idToInvalidComponentName
 *   Map of JSX identifiers which cannot be used as JS identifiers, to valid JS identifiers.
 * @property {Readonly<EstreeFunction>} node
 *   Function.
 * @property {Array<string>} objects
 *   Identifiers of used objects (such as `x` in `x.y`).
 * @property {Record<string, {node: Readonly<JSXElement>, component: boolean}>} references
 *   Map of JSX identifiers for components and objects, to where they were first used.
 * @property {Array<string>} tags
 *   Tag names.
 */ __turbopack_esm__({
    "recmaJsxRewrite": (()=>recmaJsxRewrite)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-walker/src/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$scope$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-util-scope/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-util-is-identifier-name/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$id$2d$or$2d$member$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-stringify-position/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-position-from-estree/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$binary$2d$addition$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$specifiers$2d$to$2d$declarations$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
function recmaJsxRewrite(options) {
    const { development, outputFormat, providerImportSource } = options;
    /**
   * @param {Program} tree
   *   Tree.
   * @param {VFile} file
   *   File.
   * @returns {undefined}
   *   Nothing.
   */ return function(tree, file) {
        const visitors = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$scope$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createVisitors"])();
        /** @type {Array<StackEntry>} */ const functionStack = [];
        let importProvider = false;
        let createErrorHelper = false;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["walk"])(tree, {
            enter (node) {
                visitors.enter(node);
                if (node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression' || node.type === 'ArrowFunctionExpression') {
                    functionStack.push({
                        components: [],
                        idToInvalidComponentName: new Map(),
                        node,
                        objects: [],
                        references: {},
                        tags: []
                    });
                    // `MDXContent` only ever contains `MDXLayout`.
                    if (isNamedFunction(node, 'MDXContent') && !inScope(visitors.scopes, 'MDXLayout')) {
                        functionStack[0].components.push('MDXLayout');
                    }
                }
                const functionInfo = functionStack[0];
                if (!functionInfo || !isNamedFunction(functionInfo.node, '_createMdxContent') && !providerImportSource) {
                    return;
                }
                if (node.type === 'JSXElement') {
                    let name = node.openingElement.name;
                    // `<x.y>`, `<Foo.Bar>`, `<x.y.z>`.
                    if (name.type === 'JSXMemberExpression') {
                        /** @type {Array<string>} */ const ids = [];
                        // Find the left-most identifier.
                        while(name.type === 'JSXMemberExpression'){
                            ids.unshift(name.property.name);
                            name = name.object;
                        }
                        ids.unshift(name.name);
                        const fullId = ids.join('.');
                        const id = name.name;
                        const isInScope = inScope(visitors.scopes, id);
                        if (!Object.hasOwn(functionInfo.references, fullId) && (!isInScope || functionStack.length === 1 && functionStack[0].node.type === 'FunctionDeclaration' && isNamedFunction(functionStack[0].node, '_createMdxContent'))) {
                            functionInfo.references[fullId] = {
                                component: true,
                                node
                            };
                        }
                        if (!functionInfo.objects.includes(id) && !isInScope) {
                            functionInfo.objects.push(id);
                        }
                    } else if (name.type === 'JSXNamespacedName') {
                    // Ignore namespaces.
                    } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["name"])(name.name) && !/^[a-z]/.test(name.name)) {
                        const id = name.name;
                        if (!inScope(visitors.scopes, id)) {
                            // No need to add an error for an undefined layout — we use an
                            // `if` later.
                            if (id !== 'MDXLayout' && !Object.hasOwn(functionInfo.references, id)) {
                                functionInfo.references[id] = {
                                    component: true,
                                    node
                                };
                            }
                            if (!functionInfo.components.includes(id)) {
                                functionInfo.components.push(id);
                            }
                        }
                    } else if (node.data && node.data._mdxExplicitJsx) {
                    // Do not turn explicit JSX into components from `_components`.
                    // As in, a given `h1` component is used for `# heading` (next case),
                    // but not for `<h1>heading</h1>`.
                    } else {
                        const id = name.name;
                        if (!functionInfo.tags.includes(id)) {
                            functionInfo.tags.push(id);
                        }
                        /** @type {Array<number | string>} */ let jsxIdExpression = [
                            '_components',
                            id
                        ];
                        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["name"])(id) === false) {
                            let invalidComponentName = functionInfo.idToInvalidComponentName.get(id);
                            if (invalidComponentName === undefined) {
                                invalidComponentName = `_component${functionInfo.idToInvalidComponentName.size}`;
                                functionInfo.idToInvalidComponentName.set(id, invalidComponentName);
                            }
                            jsxIdExpression = [
                                invalidComponentName
                            ];
                        }
                        node.openingElement.name = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$id$2d$or$2d$member$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toJsxIdOrMemberExpression"])(jsxIdExpression);
                        if (node.closingElement) {
                            node.closingElement.name = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$id$2d$or$2d$member$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toJsxIdOrMemberExpression"])(jsxIdExpression);
                        }
                    }
                }
            },
            leave (node) {
                visitors.exit(node);
                /** @type {Array<Property | SpreadElement>} */ const defaults = [];
                /** @type {Array<string>} */ const actual = [];
                /** @type {Array<Expression>} */ const parameters = [];
                /** @type {Array<VariableDeclarator>} */ const declarations = [];
                if (node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression' || node.type === 'ArrowFunctionExpression') {
                    const functionInfo = functionStack[functionStack.length - 1];
                    /** @type {string} */ let name;
                    for (name of functionInfo.tags.sort()){
                        defaults.push({
                            type: 'Property',
                            kind: 'init',
                            key: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["name"])(name) ? {
                                type: 'Identifier',
                                name
                            } : {
                                type: 'Literal',
                                value: name
                            },
                            value: {
                                type: 'Literal',
                                value: name
                            },
                            method: false,
                            shorthand: false,
                            computed: false
                        });
                    }
                    actual.push(...functionInfo.components);
                    for (name of functionInfo.objects){
                        // In some cases, a component is used directly (`<X>`) but it’s also
                        // used as an object (`<X.Y>`).
                        if (!actual.includes(name)) {
                            actual.push(name);
                        }
                    }
                    actual.sort();
                    /** @type {Array<Statement>} */ const statements = [];
                    if (defaults.length > 0 || actual.length > 0 || functionInfo.idToInvalidComponentName.size > 0) {
                        if (providerImportSource) {
                            importProvider = true;
                            parameters.push({
                                type: 'CallExpression',
                                callee: {
                                    type: 'Identifier',
                                    name: '_provideComponents'
                                },
                                arguments: [],
                                optional: false
                            });
                        }
                        // Accept `components` as a prop if this is the `MDXContent` or
                        // `_createMdxContent` function.
                        if (isNamedFunction(functionInfo.node, 'MDXContent') || isNamedFunction(functionInfo.node, '_createMdxContent')) {
                            parameters.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$id$2d$or$2d$member$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toIdOrMemberExpression"])([
                                'props',
                                'components'
                            ]));
                        }
                        if (defaults.length > 0 || parameters.length > 1) {
                            for (const parameter of parameters){
                                defaults.push({
                                    type: 'SpreadElement',
                                    argument: parameter
                                });
                            }
                        }
                        // If we’re getting components from several sources, merge them.
                        /** @type {Expression} */ let componentsInit = defaults.length > 0 ? {
                            type: 'ObjectExpression',
                            properties: defaults
                        } : // make sure it’s defined.
                        {
                            type: 'LogicalExpression',
                            operator: '||',
                            left: parameters[0],
                            right: {
                                type: 'ObjectExpression',
                                properties: []
                            }
                        };
                        /** @type {ObjectPattern | undefined} */ let componentsPattern;
                        // Add components to scope.
                        // For `['MyComponent', 'MDXLayout']` this generates:
                        // ```tsx
                        // const {MyComponent, wrapper: MDXLayout} = _components
                        // ```
                        // Note that MDXLayout is special as it’s taken from
                        // `_components.wrapper`.
                        if (actual.length > 0) {
                            componentsPattern = {
                                type: 'ObjectPattern',
                                properties: actual.map(function(name) {
                                    return {
                                        type: 'Property',
                                        kind: 'init',
                                        key: {
                                            type: 'Identifier',
                                            name: name === 'MDXLayout' ? 'wrapper' : name
                                        },
                                        value: {
                                            type: 'Identifier',
                                            name
                                        },
                                        method: false,
                                        shorthand: name !== 'MDXLayout',
                                        computed: false
                                    };
                                })
                            };
                        }
                        if (functionInfo.tags.length > 0) {
                            declarations.push({
                                type: 'VariableDeclarator',
                                id: {
                                    type: 'Identifier',
                                    name: '_components'
                                },
                                init: componentsInit
                            });
                            componentsInit = {
                                type: 'Identifier',
                                name: '_components'
                            };
                        }
                        if (isNamedFunction(functionInfo.node, '_createMdxContent')) {
                            for (const [id, componentName] of [
                                ...functionInfo.idToInvalidComponentName
                            ].sort(function([a], [b]) {
                                return a.localeCompare(b);
                            })){
                                // For JSX IDs that can’t be represented as JavaScript IDs (as in,
                                // those with dashes, such as `custom-element`), generate a
                                // separate variable that is a valid JS ID (such as `_component0`),
                                // and takes it from components:
                                // `const _component0 = _components['custom-element']`
                                declarations.push({
                                    type: 'VariableDeclarator',
                                    id: {
                                        type: 'Identifier',
                                        name: componentName
                                    },
                                    init: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            name: '_components'
                                        },
                                        property: {
                                            type: 'Literal',
                                            value: id
                                        },
                                        computed: true,
                                        optional: false
                                    }
                                });
                            }
                        }
                        if (componentsPattern) {
                            declarations.push({
                                type: 'VariableDeclarator',
                                id: componentsPattern,
                                init: componentsInit
                            });
                        }
                        if (declarations.length > 0) {
                            statements.push({
                                type: 'VariableDeclaration',
                                kind: 'const',
                                declarations
                            });
                        }
                    }
                    /** @type {string} */ let key;
                    // Add partials (so for `x.y.z` it’d generate `x` and `x.y` too).
                    for(key in functionInfo.references){
                        if (Object.hasOwn(functionInfo.references, key)) {
                            const parts = key.split('.');
                            let index = 0;
                            while(++index < parts.length){
                                const partial = parts.slice(0, index).join('.');
                                if (!Object.hasOwn(functionInfo.references, partial)) {
                                    functionInfo.references[partial] = {
                                        component: false,
                                        node: functionInfo.references[key].node
                                    };
                                }
                            }
                        }
                    }
                    const references = Object.keys(functionInfo.references).sort();
                    let index = -1;
                    while(++index < references.length){
                        const id = references[index];
                        const info = functionInfo.references[id];
                        const place = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"])(info.node));
                        /** @type {Array<Expression>} */ const parameters = [
                            {
                                type: 'Literal',
                                value: id
                            },
                            {
                                type: 'Literal',
                                value: info.component
                            }
                        ];
                        createErrorHelper = true;
                        if (development && place) {
                            parameters.push({
                                type: 'Literal',
                                value: place
                            });
                        }
                        statements.push({
                            type: 'IfStatement',
                            test: {
                                type: 'UnaryExpression',
                                operator: '!',
                                prefix: true,
                                argument: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$id$2d$or$2d$member$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toIdOrMemberExpression"])(id.split('.'))
                            },
                            consequent: {
                                type: 'ExpressionStatement',
                                expression: {
                                    type: 'CallExpression',
                                    callee: {
                                        type: 'Identifier',
                                        name: '_missingMdxReference'
                                    },
                                    arguments: parameters,
                                    optional: false
                                }
                            },
                            alternate: undefined
                        });
                    }
                    if (statements.length > 0) {
                        // Arrow functions with an implied return:
                        if (node.body.type !== 'BlockStatement') {
                            node.body = {
                                type: 'BlockStatement',
                                body: [
                                    {
                                        type: 'ReturnStatement',
                                        argument: node.body
                                    }
                                ]
                            };
                        }
                        node.body.body.unshift(...statements);
                    }
                    functionStack.pop();
                }
            }
        });
        // If a provider is used (and can be used), import it.
        if (importProvider && providerImportSource) {
            tree.body.unshift(createImportProvider(providerImportSource, outputFormat));
        }
        // If potentially missing components are used.
        if (createErrorHelper) {
            /** @type {Array<Expression>} */ const message = [
                {
                    type: 'Literal',
                    value: 'Expected '
                },
                {
                    type: 'ConditionalExpression',
                    test: {
                        type: 'Identifier',
                        name: 'component'
                    },
                    consequent: {
                        type: 'Literal',
                        value: 'component'
                    },
                    alternate: {
                        type: 'Literal',
                        value: 'object'
                    }
                },
                {
                    type: 'Literal',
                    value: ' `'
                },
                {
                    type: 'Identifier',
                    name: 'id'
                },
                {
                    type: 'Literal',
                    value: '` to be defined: you likely forgot to import, pass, or provide it.'
                }
            ];
            /** @type {Array<Identifier>} */ const parameters = [
                {
                    type: 'Identifier',
                    name: 'id'
                },
                {
                    type: 'Identifier',
                    name: 'component'
                }
            ];
            if (development) {
                message.push({
                    type: 'ConditionalExpression',
                    test: {
                        type: 'Identifier',
                        name: 'place'
                    },
                    consequent: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$binary$2d$addition$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toBinaryAddition"])([
                        {
                            type: 'Literal',
                            value: '\nIt’s referenced in your code at `'
                        },
                        {
                            type: 'Identifier',
                            name: 'place'
                        },
                        {
                            type: 'Literal',
                            value: (file.path ? '` in `' + file.path : '') + '`'
                        }
                    ]),
                    alternate: {
                        type: 'Literal',
                        value: ''
                    }
                });
                parameters.push({
                    type: 'Identifier',
                    name: 'place'
                });
            }
            tree.body.push({
                type: 'FunctionDeclaration',
                id: {
                    type: 'Identifier',
                    name: '_missingMdxReference'
                },
                generator: false,
                async: false,
                params: parameters,
                body: {
                    type: 'BlockStatement',
                    body: [
                        {
                            type: 'ThrowStatement',
                            argument: {
                                type: 'NewExpression',
                                callee: {
                                    type: 'Identifier',
                                    name: 'Error'
                                },
                                arguments: [
                                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$binary$2d$addition$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toBinaryAddition"])(message)
                                ]
                            }
                        }
                    ]
                }
            });
        }
        if (outputFormat === 'function-body') {
            tree.body.unshift({
                type: 'ExpressionStatement',
                expression: {
                    type: 'Literal',
                    value: 'use strict'
                },
                directive: 'use strict'
            });
        }
    };
}
/**
 * @param {string} providerImportSource
 *   Provider source.
 * @param {'function-body' | 'program' | null | undefined} outputFormat
 *   Format.
 * @returns {ModuleDeclaration | Statement}
 *   Node.
 */ function createImportProvider(providerImportSource, outputFormat) {
    /** @type {Array<ImportSpecifier>} */ const specifiers = [
        {
            type: 'ImportSpecifier',
            imported: {
                type: 'Identifier',
                name: 'useMDXComponents'
            },
            local: {
                type: 'Identifier',
                name: '_provideComponents'
            }
        }
    ];
    return outputFormat === 'function-body' ? {
        type: 'VariableDeclaration',
        kind: 'const',
        declarations: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$specifiers$2d$to$2d$declarations$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["specifiersToDeclarations"])(specifiers, (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$id$2d$or$2d$member$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toIdOrMemberExpression"])([
            'arguments',
            0
        ]))
    } : {
        type: 'ImportDeclaration',
        specifiers,
        source: {
            type: 'Literal',
            value: providerImportSource
        }
    };
}
/**
 * @param {Readonly<EstreeFunction>} node
 *   Node.
 * @param {string} name
 *   Name.
 * @returns {boolean}
 *   Whether `node` is a named function with `name`.
 */ function isNamedFunction(node, name) {
    return Boolean(node && 'id' in node && node.id && node.id.name === name);
}
/**
 * @param {Array<Scope>} scopes
 *   Scope.
 * @param {string} id
 *   Identifier.
 * @returns {boolean}
 *   Whether `id` is in `scope`.
 */ function inScope(scopes, id) {
    let index = scopes.length;
    while(index--){
        const scope = scopes[index];
        if (scope.defined.includes(id)) {
            return true;
        }
    }
    return false;
}
}}),
"[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Program} from 'estree-jsx'
 */ /**
 * @typedef Options
 *   Configuration for internal plugin `recma-build-jsx-transform`.
 * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']
 *   Whether to keep the import of the automatic runtime or get it from
 *   `arguments[0]` instead (default: `'program'`).
 */ __turbopack_esm__({
    "recmaBuildJsxTransform": (()=>recmaBuildJsxTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$specifiers$2d$to$2d$declarations$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$id$2d$or$2d$member$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js [app-rsc] (ecmascript)");
;
;
function recmaBuildJsxTransform(options) {
    /* c8 ignore next -- always given in `@mdx-js/mdx` */ const { outputFormat } = options || {};
    /**
   * @param {Program} tree
   *   Tree.
   * @returns {undefined}
   *   Nothing.
   */ return function(tree) {
        // Remove the pragma comment that we injected ourselves as it is no longer
        // needed.
        if (tree.comments) {
            tree.comments = tree.comments.filter(function(d) {
                return !d.data?._mdxIsPragmaComment;
            });
        }
        // When compiling to a function body, replace the import that was just
        // generated, and get `jsx`, `jsxs`, and `Fragment` from `arguments[0]`
        // instead.
        if (outputFormat === 'function-body') {
            let index = 0;
            // Skip directives: JS currently only has `use strict`, but Acorn allows
            // arbitrary ones.
            // Practically things like `use client` could be used?
            while(index < tree.body.length){
                const child = tree.body[index];
                if ('directive' in child && child.directive) {
                    index++;
                } else {
                    break;
                }
            }
            const declaration = tree.body[index];
            if (declaration && declaration.type === 'ImportDeclaration' && typeof declaration.source.value === 'string' && /\/jsx-(dev-)?runtime$/.test(declaration.source.value)) {
                tree.body[index] = {
                    type: 'VariableDeclaration',
                    kind: 'const',
                    declarations: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$specifiers$2d$to$2d$declarations$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["specifiersToDeclarations"])(declaration.specifiers, (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$util$2f$estree$2d$util$2d$to$2d$id$2d$or$2d$member$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toIdOrMemberExpression"])([
                        'arguments',
                        0
                    ]))
                };
            }
        }
    };
}
}}),
"[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/core.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Program} from 'estree-jsx'
 * @import {Root} from 'mdast'
 * @import {Options as RehypeRecmaOptions} from 'rehype-recma'
 * @import {Options as RemarkRehypeOptions} from 'remark-rehype'
 * @import {SourceMapGenerator} from 'source-map'
 * @import {PluggableList, Processor} from 'unified'
 */ /**
 * @typedef ProcessorOptions
 *   Configuration for `createProcessor`.
 * @property {typeof SourceMapGenerator | null | undefined} [SourceMapGenerator]
 *   Add a source map (object form) as the `map` field on the resulting file
 *   (optional).
 * @property {URL | string | null | undefined} [baseUrl]
 *   Use this URL as `import.meta.url` and resolve `import` and `export … from`
 *   relative to it (optional, example: `import.meta.url`).
 * @property {boolean | null | undefined} [development=false]
 *   Whether to add extra info to error messages in generated code and use the
 *   development automatic JSX runtime (`Fragment` and `jsxDEV` from
 *   `/jsx-dev-runtime`) (default: `false`);
 *   when using the webpack loader (`@mdx-js/loader`) or the Rollup integration
 *   (`@mdx-js/rollup`) through Vite, this is automatically inferred from how
 *   you configure those tools.
 * @property {RehypeRecmaOptions['elementAttributeNameCase']} [elementAttributeNameCase='react']
 *   Casing to use for attribute names (default: `'react'`);
 *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`;
 *   React casing is for example `className`, `strokeLinecap`, `xmlLang`;
 *   for JSX components written in MDX, the author has to be aware of which
 *   framework they use and write code accordingly;
 *   for AST nodes generated by this project, this option configures it
 * @property {'md' | 'mdx' | null | undefined} [format='mdx']
 *   format of the file (default: `'mdx'`);
 *   `'md'` means treat as markdown and `'mdx'` means treat as MDX.
 * @property {boolean | null | undefined} [jsx=false]
 *   Whether to keep JSX (default: `false`);
 *   the default is to compile JSX away so that the resulting file is
 *   immediately runnable.
 * @property {string | null | undefined} [jsxImportSource='react']
 *   Place to import automatic JSX runtimes from (default: `'react'`);
 *   when in the `automatic` runtime, this is used to define an import for
 *   `Fragment`, `jsx`, `jsxDEV`, and `jsxs`.
 * @property {'automatic' | 'classic' | null | undefined} [jsxRuntime='automatic']
 *   JSX runtime to use (default: `'automatic'`);
 *   the automatic runtime compiles to `import _jsx from
 *   '$importSource/jsx-runtime'\n_jsx('p')`;
 *   the classic runtime compiles to calls such as `h('p')`.
 *
 *   > 👉 **Note**: support for the classic runtime is deprecated and will
 *   > likely be removed in the next major version.
 * @property {ReadonlyArray<string> | null | undefined} [mdExtensions]
 *   List of markdown extensions, with dot (default: `['.md', '.markdown', …]`);
 *   affects integrations.
 * @property {ReadonlyArray<string> | null | undefined} [mdxExtensions]
 *   List of MDX extensions, with dot (default: `['.mdx']`);
 *   affects integrations.
 * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']
 *   Output format to generate (default: `'program'`);
 *   in most cases `'program'` should be used, it results in a whole program;
 *   internally `evaluate` uses `'function-body'` to compile to
 *   code that can be passed to `run`;
 *   in some cases, you might want what `evaluate` does in separate steps, such
 *   as when compiling on the server and running on the client.
 * @property {string | null | undefined} [pragma='React.createElement']
 *   Pragma for JSX, used in the classic runtime as an identifier for function
 *   calls: `<x />` to `React.createElement('x')` (default:
 *   `'React.createElement'`);
 *   when changing this, you should also define `pragmaFrag` and
 *   `pragmaImportSource` too.
 *
 *   > 👉 **Note**: support for the classic runtime is deprecated and will
 *   > likely be removed in the next major version.
 * @property {string | null | undefined} [pragmaFrag='React.Fragment']
 *   Pragma for fragment symbol, used in the classic runtime as an identifier
 *   for unnamed calls: `<>` to `React.createElement(React.Fragment)` (default:
 *   `'React.Fragment'`);
 *   when changing this, you should also define `pragma` and
 *   `pragmaImportSource` too.
 *
 *   > 👉 **Note**: support for the classic runtime is deprecated and will
 *   > likely be removed in the next major version.
 * @property {string | null | undefined} [pragmaImportSource='react']
 *   Where to import the identifier of `pragma` from, used in the classic
 *   runtime (default: `'react'`);
 *   to illustrate, when `pragma` is `'a.b'` and `pragmaImportSource` is `'c'`
 *   the following will be generated: `import a from 'c'` and things such as
 *   `a.b('h1', {})`.
 *   when changing this, you should also define `pragma` and `pragmaFrag` too.
 *
 *   > 👉 **Note**: support for the classic runtime is deprecated and will
 *   > likely be removed in the next major version.
 * @property {string | null | undefined} [providerImportSource]
 *   Place to import a provider from (optional, example: `'@mdx-js/react'`);
 *   normally it’s used for runtimes that support context (React, Preact), but
 *   it can be used to inject components into the compiled code;
 *   the module must export and identifier `useMDXComponents` which is called
 *   without arguments to get an object of components (`MDXComponents` from
 *   `mdx/types.js`).
 * @property {PluggableList | null | undefined} [recmaPlugins]
 *   List of recma plugins (optional);
 *   this is a new ecosystem, currently in beta, to transform esast trees
 *   (JavaScript)
 * @property {PluggableList | null | undefined} [remarkPlugins]
 *   List of remark plugins (optional).
 * @property {PluggableList | null | undefined} [rehypePlugins]
 *   List of rehype plugins (optional).
 * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]
 *   Options to pass through to `remark-rehype` (optional);
 *   the option `allowDangerousHtml` will always be set to `true` and the MDX
 *   nodes (see `nodeTypes`) are passed through;
 *   In particular, you might want to pass configuration for footnotes if your
 *   content is not in English.
 * @property {RehypeRecmaOptions['stylePropertyNameCase']} [stylePropertyNameCase='dom']
 *   Casing to use for property names in `style` objects (default: `'dom'`);
 *   CSS casing is for example `background-color` and `-webkit-line-clamp`;
 *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`;
 *   for JSX components written in MDX, the author has to be aware of which
 *   framework they use and write code accordingly;
 *   for AST nodes generated by this project, this option configures it
 * @property {boolean | null | undefined} [tableCellAlignToStyle=true]
 *   Turn obsolete `align` properties on `td` and `th` into CSS `style`
 *   properties (default: `true`).
 */ __turbopack_esm__({
    "createProcessor": (()=>createProcessor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unified$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unified/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$remark$2d$parse$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/remark-parse/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$remark$2d$mdx$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/remark-mdx/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$plugin$2f$remark$2d$mark$2d$and$2d$unravel$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$remark$2d$rehype$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/remark-rehype/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$node$2d$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/node-types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$plugin$2f$rehype$2d$remove$2d$raw$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$rehype$2d$recma$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/rehype-recma/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$plugin$2f$recma$2d$document$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$plugin$2f$recma$2d$jsx$2d$rewrite$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$recma$2d$build$2d$jsx$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/recma-build-jsx/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$plugin$2f$recma$2d$build$2d$jsx$2d$transform$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$recma$2d$jsx$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/recma-jsx/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$recma$2d$stringify$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/recma-stringify/lib/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const removedOptions = [
    'compilers',
    'filepath',
    'hastPlugins',
    'mdPlugins',
    'skipExport',
    'wrapExport'
];
let warned = false;
function createProcessor(options) {
    const settings = options || {};
    let index = -1;
    while(++index < removedOptions.length){
        const key = removedOptions[index];
        if (key in settings) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unreachable"])('Unexpected removed option `' + key + '`; see <https://mdxjs.com/migrating/v2/> on how to migrate');
        }
    }
    // @ts-expect-error: throw an error for a runtime value which is not allowed
    // by the types.
    if (settings.format === 'detect') {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unreachable"])("Unexpected `format: 'detect'`, which is not supported by `createProcessor`, expected `'mdx'` or `'md'`");
    }
    if ((settings.jsxRuntime === 'classic' || settings.pragma || settings.pragmaFrag || settings.pragmaImportSource) && !warned) {
        warned = true;
        console.warn("Unexpected deprecated option `jsxRuntime: 'classic'`, `pragma`, `pragmaFrag`, or `pragmaImportSource`; see <https://mdxjs.com/migrating/v3/> on how to migrate");
    }
    const pipeline = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unified$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unified"])().use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$remark$2d$parse$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]);
    if (settings.format !== 'md') {
        pipeline.use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$remark$2d$mdx$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]);
    }
    const remarkRehypeOptions = settings.remarkRehypeOptions || {};
    pipeline.use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$plugin$2f$remark$2d$mark$2d$and$2d$unravel$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["remarkMarkAndUnravel"]).use(settings.remarkPlugins || []).use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$remark$2d$rehype$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"], {
        ...remarkRehypeOptions,
        allowDangerousHtml: true,
        passThrough: [
            ...remarkRehypeOptions.passThrough || [],
            ...__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$node$2d$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["nodeTypes"]
        ]
    }).use(settings.rehypePlugins || []);
    if (settings.format === 'md') {
        pipeline.use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$plugin$2f$rehype$2d$remove$2d$raw$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["rehypeRemoveRaw"]);
    }
    pipeline// @ts-expect-error: `Program` is close enough to a `Node`,
    // but type inference has trouble with it and bridges.
    .use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$rehype$2d$recma$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"], settings).use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$plugin$2f$recma$2d$document$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["recmaDocument"], settings).use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$plugin$2f$recma$2d$jsx$2d$rewrite$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["recmaJsxRewrite"], settings);
    if (!settings.jsx) {
        pipeline.use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$recma$2d$build$2d$jsx$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"], settings).use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$lib$2f$plugin$2f$recma$2d$build$2d$jsx$2d$transform$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["recmaBuildJsxTransform"], settings);
    }
    pipeline.use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$recma$2d$jsx$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]).use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$recma$2d$stringify$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"], settings).use(settings.recmaPlugins || []);
    // @ts-expect-error: TS doesn’t get the plugins we added with if-statements.
    return pipeline;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Blockquote} Blockquote
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "blockquote": (()=>blockquote)
});
'';
function blockquote(state, node) {
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'blockquote',
        properties: {},
        children: state.wrap(state.all(node), true)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/break.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Text} Text
 * @typedef {import('mdast').Break} Break
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "hardBreak": (()=>hardBreak)
});
'';
function hardBreak(state, node) {
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'br',
        properties: {},
        children: []
    };
    state.patch(node, result);
    return [
        state.applyData(node, result),
        {
            type: 'text',
            value: '\n'
        }
    ];
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/code.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Code} Code
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "code": (()=>code)
});
'';
function code(state, node) {
    const value = node.value ? node.value + '\n' : '';
    /** @type {Properties} */ const properties = {};
    if (node.lang) {
        properties.className = [
            'language-' + node.lang
        ];
    }
    // Create `<code>`.
    /** @type {Element} */ let result = {
        type: 'element',
        tagName: 'code',
        properties,
        children: [
            {
                type: 'text',
                value
            }
        ]
    };
    if (node.meta) {
        result.data = {
            meta: node.meta
        };
    }
    state.patch(node, result);
    result = state.applyData(node, result);
    // Create `<pre>`.
    result = {
        type: 'element',
        tagName: 'pre',
        properties: {},
        children: [
            result
        ]
    };
    state.patch(node, result);
    return result;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/delete.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Delete} Delete
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "strikethrough": (()=>strikethrough)
});
'';
function strikethrough(state, node) {
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'del',
        properties: {},
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Emphasis} Emphasis
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "emphasis": (()=>emphasis)
});
'';
function emphasis(state, node) {
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'em',
        properties: {},
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').FootnoteReference} FootnoteReference
 * @typedef {import('../state.js').State} State
 */ __turbopack_esm__({
    "footnoteReference": (()=>footnoteReference)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-sanitize-uri/dev/index.js [app-rsc] (ecmascript)");
;
function footnoteReference(state, node) {
    const clobberPrefix = typeof state.options.clobberPrefix === 'string' ? state.options.clobberPrefix : 'user-content-';
    const id = String(node.identifier).toUpperCase();
    const safeId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeUri"])(id.toLowerCase());
    const index = state.footnoteOrder.indexOf(id);
    /** @type {number} */ let counter;
    let reuseCounter = state.footnoteCounts.get(id);
    if (reuseCounter === undefined) {
        reuseCounter = 0;
        state.footnoteOrder.push(id);
        counter = state.footnoteOrder.length;
    } else {
        counter = index + 1;
    }
    reuseCounter += 1;
    state.footnoteCounts.set(id, reuseCounter);
    /** @type {Element} */ const link = {
        type: 'element',
        tagName: 'a',
        properties: {
            href: '#' + clobberPrefix + 'fn-' + safeId,
            id: clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : ''),
            dataFootnoteRef: true,
            ariaDescribedBy: [
                'footnote-label'
            ]
        },
        children: [
            {
                type: 'text',
                value: String(counter)
            }
        ]
    };
    state.patch(node, link);
    /** @type {Element} */ const sup = {
        type: 'element',
        tagName: 'sup',
        properties: {},
        children: [
            link
        ]
    };
    state.patch(node, sup);
    return state.applyData(node, sup);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/heading.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Heading} Heading
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "heading": (()=>heading)
});
'';
function heading(state, node) {
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'h' + node.depth,
        properties: {},
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/html.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Html} Html
 * @typedef {import('../state.js').State} State
 * @typedef {import('../../index.js').Raw} Raw
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "html": (()=>html)
});
'';
function html(state, node) {
    if (state.options.allowDangerousHtml) {
        /** @type {Raw} */ const result = {
            type: 'raw',
            value: node.value
        };
        state.patch(node, result);
        return state.applyData(node, result);
    }
    return undefined;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/revert.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').ElementContent} ElementContent
 *
 * @typedef {import('mdast').Nodes} Nodes
 * @typedef {import('mdast').Reference} Reference
 *
 * @typedef {import('./state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "revert": (()=>revert)
});
'';
function revert(state, node) {
    const subtype = node.referenceType;
    let suffix = ']';
    if (subtype === 'collapsed') {
        suffix += '[]';
    } else if (subtype === 'full') {
        suffix += '[' + (node.label || node.identifier) + ']';
    }
    if (node.type === 'imageReference') {
        return [
            {
                type: 'text',
                value: '![' + node.alt + suffix
            }
        ];
    }
    const contents = state.all(node);
    const head = contents[0];
    if (head && head.type === 'text') {
        head.value = '[' + head.value;
    } else {
        contents.unshift({
            type: 'text',
            value: '['
        });
    }
    const tail = contents[contents.length - 1];
    if (tail && tail.type === 'text') {
        tail.value += suffix;
    } else {
        contents.push({
            type: 'text',
            value: suffix
        });
    }
    return contents;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').ImageReference} ImageReference
 * @typedef {import('../state.js').State} State
 */ __turbopack_esm__({
    "imageReference": (()=>imageReference)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-sanitize-uri/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$revert$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/revert.js [app-rsc] (ecmascript)");
;
;
function imageReference(state, node) {
    const id = String(node.identifier).toUpperCase();
    const definition = state.definitionById.get(id);
    if (!definition) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$revert$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["revert"])(state, node);
    }
    /** @type {Properties} */ const properties = {
        src: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeUri"])(definition.url || ''),
        alt: node.alt
    };
    if (definition.title !== null && definition.title !== undefined) {
        properties.title = definition.title;
    }
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'img',
        properties,
        children: []
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/image.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Image} Image
 * @typedef {import('../state.js').State} State
 */ __turbopack_esm__({
    "image": (()=>image)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-sanitize-uri/dev/index.js [app-rsc] (ecmascript)");
;
function image(state, node) {
    /** @type {Properties} */ const properties = {
        src: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeUri"])(node.url)
    };
    if (node.alt !== null && node.alt !== undefined) {
        properties.alt = node.alt;
    }
    if (node.title !== null && node.title !== undefined) {
        properties.title = node.title;
    }
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'img',
        properties,
        children: []
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Text} Text
 * @typedef {import('mdast').InlineCode} InlineCode
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "inlineCode": (()=>inlineCode)
});
'';
function inlineCode(state, node) {
    /** @type {Text} */ const text = {
        type: 'text',
        value: node.value.replace(/\r?\n|\r/g, ' ')
    };
    state.patch(node, text);
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'code',
        properties: {},
        children: [
            text
        ]
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').LinkReference} LinkReference
 * @typedef {import('../state.js').State} State
 */ __turbopack_esm__({
    "linkReference": (()=>linkReference)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-sanitize-uri/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$revert$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/revert.js [app-rsc] (ecmascript)");
;
;
function linkReference(state, node) {
    const id = String(node.identifier).toUpperCase();
    const definition = state.definitionById.get(id);
    if (!definition) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$revert$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["revert"])(state, node);
    }
    /** @type {Properties} */ const properties = {
        href: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeUri"])(definition.url || '')
    };
    if (definition.title !== null && definition.title !== undefined) {
        properties.title = definition.title;
    }
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'a',
        properties,
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/link.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Link} Link
 * @typedef {import('../state.js').State} State
 */ __turbopack_esm__({
    "link": (()=>link)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-sanitize-uri/dev/index.js [app-rsc] (ecmascript)");
;
function link(state, node) {
    /** @type {Properties} */ const properties = {
        href: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeUri"])(node.url)
    };
    if (node.title !== null && node.title !== undefined) {
        properties.title = node.title;
    }
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'a',
        properties,
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/list-item.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').ListItem} ListItem
 * @typedef {import('mdast').Parents} Parents
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "listItem": (()=>listItem)
});
'';
function listItem(state, node, parent) {
    const results = state.all(node);
    const loose = parent ? listLoose(parent) : listItemLoose(node);
    /** @type {Properties} */ const properties = {};
    /** @type {Array<ElementContent>} */ const children = [];
    if (typeof node.checked === 'boolean') {
        const head = results[0];
        /** @type {Element} */ let paragraph;
        if (head && head.type === 'element' && head.tagName === 'p') {
            paragraph = head;
        } else {
            paragraph = {
                type: 'element',
                tagName: 'p',
                properties: {},
                children: []
            };
            results.unshift(paragraph);
        }
        if (paragraph.children.length > 0) {
            paragraph.children.unshift({
                type: 'text',
                value: ' '
            });
        }
        paragraph.children.unshift({
            type: 'element',
            tagName: 'input',
            properties: {
                type: 'checkbox',
                checked: node.checked,
                disabled: true
            },
            children: []
        });
        // According to github-markdown-css, this class hides bullet.
        // See: <https://github.com/sindresorhus/github-markdown-css>.
        properties.className = [
            'task-list-item'
        ];
    }
    let index = -1;
    while(++index < results.length){
        const child = results[index];
        // Add eols before nodes, except if this is a loose, first paragraph.
        if (loose || index !== 0 || child.type !== 'element' || child.tagName !== 'p') {
            children.push({
                type: 'text',
                value: '\n'
            });
        }
        if (child.type === 'element' && child.tagName === 'p' && !loose) {
            children.push(...child.children);
        } else {
            children.push(child);
        }
    }
    const tail = results[results.length - 1];
    // Add a final eol.
    if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {
        children.push({
            type: 'text',
            value: '\n'
        });
    }
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'li',
        properties,
        children
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
/**
 * @param {Parents} node
 * @return {Boolean}
 */ function listLoose(node) {
    let loose = false;
    if (node.type === 'list') {
        loose = node.spread || false;
        const children = node.children;
        let index = -1;
        while(!loose && ++index < children.length){
            loose = listItemLoose(children[index]);
        }
    }
    return loose;
}
/**
 * @param {ListItem} node
 * @return {Boolean}
 */ function listItemLoose(node) {
    const spread = node.spread;
    return spread === null || spread === undefined ? node.children.length > 1 : spread;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/list.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').List} List
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "list": (()=>list)
});
'';
function list(state, node) {
    /** @type {Properties} */ const properties = {};
    const results = state.all(node);
    let index = -1;
    if (typeof node.start === 'number' && node.start !== 1) {
        properties.start = node.start;
    }
    // Like GitHub, add a class for custom styling.
    while(++index < results.length){
        const child = results[index];
        if (child.type === 'element' && child.tagName === 'li' && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes('task-list-item')) {
            properties.className = [
                'contains-task-list'
            ];
            break;
        }
    }
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: node.ordered ? 'ol' : 'ul',
        properties,
        children: state.wrap(results, true)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Paragraph} Paragraph
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "paragraph": (()=>paragraph)
});
'';
function paragraph(state, node) {
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'p',
        properties: {},
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/root.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Parents} HastParents
 * @typedef {import('hast').Root} HastRoot
 * @typedef {import('mdast').Root} MdastRoot
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "root": (()=>root)
});
'';
function root(state, node) {
    /** @type {HastRoot} */ const result = {
        type: 'root',
        children: state.wrap(state.all(node))
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/strong.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Strong} Strong
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "strong": (()=>strong)
});
'';
function strong(state, node) {
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'strong',
        properties: {},
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/table.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Table} Table
 * @typedef {import('../state.js').State} State
 */ __turbopack_esm__({
    "table": (()=>table)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-position/lib/index.js [app-rsc] (ecmascript)");
;
function table(state, node) {
    const rows = state.all(node);
    const firstRow = rows.shift();
    /** @type {Array<Element>} */ const tableContent = [];
    if (firstRow) {
        /** @type {Element} */ const head = {
            type: 'element',
            tagName: 'thead',
            properties: {},
            children: state.wrap([
                firstRow
            ], true)
        };
        state.patch(node.children[0], head);
        tableContent.push(head);
    }
    if (rows.length > 0) {
        /** @type {Element} */ const body = {
            type: 'element',
            tagName: 'tbody',
            properties: {},
            children: state.wrap(rows, true)
        };
        const start = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["pointStart"])(node.children[1]);
        const end = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["pointEnd"])(node.children[node.children.length - 1]);
        if (start && end) body.position = {
            start,
            end
        };
        tableContent.push(body);
    }
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'table',
        properties: {},
        children: state.wrap(tableContent, true)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').TableCell} TableCell
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "tableCell": (()=>tableCell)
});
'';
function tableCell(state, node) {
    // Note: this function is normally not called: see `table-row` for how rows
    // and their cells are compiled.
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'td',
        properties: {},
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/table-row.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Parents} Parents
 * @typedef {import('mdast').TableRow} TableRow
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "tableRow": (()=>tableRow)
});
'';
function tableRow(state, node, parent) {
    const siblings = parent ? parent.children : undefined;
    // Generate a body row when without parent.
    const rowIndex = siblings ? siblings.indexOf(node) : 1;
    const tagName = rowIndex === 0 ? 'th' : 'td';
    // To do: option to use `style`?
    const align = parent && parent.type === 'table' ? parent.align : undefined;
    const length = align ? align.length : node.children.length;
    let cellIndex = -1;
    /** @type {Array<ElementContent>} */ const cells = [];
    while(++cellIndex < length){
        // Note: can also be undefined.
        const cell = node.children[cellIndex];
        /** @type {Properties} */ const properties = {};
        const alignValue = align ? align[cellIndex] : undefined;
        if (alignValue) {
            properties.align = alignValue;
        }
        /** @type {Element} */ let result = {
            type: 'element',
            tagName,
            properties,
            children: []
        };
        if (cell) {
            result.children = state.all(cell);
            state.patch(cell, result);
            result = state.applyData(cell, result);
        }
        cells.push(result);
    }
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'tr',
        properties: {},
        children: state.wrap(cells, true)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/text.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} HastElement
 * @typedef {import('hast').Text} HastText
 * @typedef {import('mdast').Text} MdastText
 * @typedef {import('../state.js').State} State
 */ __turbopack_esm__({
    "text": (()=>text)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$trim$2d$lines$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/trim-lines/index.js [app-rsc] (ecmascript)");
;
function text(state, node) {
    /** @type {HastText} */ const result = {
        type: 'text',
        value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$trim$2d$lines$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["trimLines"])(String(node.value))
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').ThematicBreak} ThematicBreak
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "thematicBreak": (()=>thematicBreak)
});
'';
function thematicBreak(state, node) {
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'hr',
        properties: {},
        children: []
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "handlers": (()=>handlers)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$blockquote$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$break$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/break.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$code$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/code.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$delete$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/delete.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$emphasis$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$footnote$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$heading$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/heading.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/html.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$image$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$image$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/image.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$inline$2d$code$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$link$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/link.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$list$2d$item$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/list-item.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/list.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$paragraph$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$root$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/root.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$strong$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/strong.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$table$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/table.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$table$2d$cell$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$table$2d$row$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/table-row.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/text.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$thematic$2d$break$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const handlers = {
    blockquote: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$blockquote$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["blockquote"],
    break: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$break$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["hardBreak"],
    code: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$code$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["code"],
    delete: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$delete$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["strikethrough"],
    emphasis: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$emphasis$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["emphasis"],
    footnoteReference: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$footnote$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["footnoteReference"],
    heading: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$heading$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["heading"],
    html: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["html"],
    imageReference: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$image$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["imageReference"],
    image: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$image$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["image"],
    inlineCode: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$inline$2d$code$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["inlineCode"],
    linkReference: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$link$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["linkReference"],
    link: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["link"],
    listItem: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$list$2d$item$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["listItem"],
    list: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["list"],
    paragraph: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$paragraph$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["paragraph"],
    // @ts-expect-error: root is different, but hard to type.
    root: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$root$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["root"],
    strong: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$strong$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["strong"],
    table: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$table$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["table"],
    tableCell: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$table$2d$cell$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tableCell"],
    tableRow: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$table$2d$row$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tableRow"],
    text: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["text"],
    thematicBreak: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$thematic$2d$break$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["thematicBreak"],
    toml: ignore,
    yaml: ignore,
    definition: ignore,
    footnoteDefinition: ignore
};
// Return nothing for nodes that are ignored.
function ignore() {
    return undefined;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/state.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} HastElement
 * @typedef {import('hast').ElementContent} HastElementContent
 * @typedef {import('hast').Nodes} HastNodes
 * @typedef {import('hast').Properties} HastProperties
 * @typedef {import('hast').RootContent} HastRootContent
 * @typedef {import('hast').Text} HastText
 *
 * @typedef {import('mdast').Definition} MdastDefinition
 * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition
 * @typedef {import('mdast').Nodes} MdastNodes
 * @typedef {import('mdast').Parents} MdastParents
 *
 * @typedef {import('vfile').VFile} VFile
 *
 * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate
 * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate
 */ /**
 * @callback Handler
 *   Handle a node.
 * @param {State} state
 *   Info passed around.
 * @param {any} node
 *   mdast node to handle.
 * @param {MdastParents | undefined} parent
 *   Parent of `node`.
 * @returns {Array<HastElementContent> | HastElementContent | undefined}
 *   hast node.
 *
 * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers
 *   Handle nodes.
 *
 * @typedef Options
 *   Configuration (optional).
 * @property {boolean | null | undefined} [allowDangerousHtml=false]
 *   Whether to persist raw HTML in markdown in the hast tree (default:
 *   `false`).
 * @property {string | null | undefined} [clobberPrefix='user-content-']
 *   Prefix to use before the `id` property on footnotes to prevent them from
 *   *clobbering* (default: `'user-content-'`).
 *
 *   Pass `''` for trusted markdown and when you are careful with
 *   polyfilling.
 *   You could pass a different prefix.
 *
 *   DOM clobbering is this:
 *
 *   ```html
 *   <p id="x"></p>
 *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>
 *   ```
 *
 *   The above example shows that elements are made available by browsers, by
 *   their ID, on the `window` object.
 *   This is a security risk because you might be expecting some other variable
 *   at that place.
 *   It can also break polyfills.
 *   Using a prefix solves these problems.
 * @property {VFile | null | undefined} [file]
 *   Corresponding virtual file representing the input document (optional).
 * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]
 *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).
 *
 *   The default value is:
 *
 *   ```js
 *   function defaultFootnoteBackContent(_, rereferenceIndex) {
 *     const result = [{type: 'text', value: '↩'}]
 *
 *     if (rereferenceIndex > 1) {
 *       result.push({
 *         type: 'element',
 *         tagName: 'sup',
 *         properties: {},
 *         children: [{type: 'text', value: String(rereferenceIndex)}]
 *       })
 *     }
 *
 *     return result
 *   }
 *   ```
 *
 *   This content is used in the `a` element of each backreference (the `↩`
 *   links).
 * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]
 *   Label to describe the backreference back to references (default:
 *   `defaultFootnoteBackLabel`).
 *
 *   The default value is:
 *
 *   ```js
 *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {
 *    return (
 *      'Back to reference ' +
 *      (referenceIndex + 1) +
 *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')
 *    )
 *   }
 *   ```
 *
 *   Change it when the markdown is not in English.
 *
 *   This label is used in the `ariaLabel` property on each backreference
 *   (the `↩` links).
 *   It affects users of assistive technology.
 * @property {string | null | undefined} [footnoteLabel='Footnotes']
 *   Textual label to use for the footnotes section (default: `'Footnotes'`).
 *
 *   Change it when the markdown is not in English.
 *
 *   This label is typically hidden visually (assuming a `sr-only` CSS class
 *   is defined that does that) and so affects screen readers only.
 *   If you do have such a class, but want to show this section to everyone,
 *   pass different properties with the `footnoteLabelProperties` option.
 * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]
 *   Properties to use on the footnote label (default: `{className:
 *   ['sr-only']}`).
 *
 *   Change it to show the label and add other properties.
 *
 *   This label is typically hidden visually (assuming an `sr-only` CSS class
 *   is defined that does that) and so affects screen readers only.
 *   If you do have such a class, but want to show this section to everyone,
 *   pass an empty string.
 *   You can also add different properties.
 *
 *   > **Note**: `id: 'footnote-label'` is always added, because footnote
 *   > calls use it with `aria-describedby` to provide an accessible label.
 * @property {string | null | undefined} [footnoteLabelTagName='h2']
 *   HTML tag name to use for the footnote label element (default: `'h2'`).
 *
 *   Change it to match your document structure.
 *
 *   This label is typically hidden visually (assuming a `sr-only` CSS class
 *   is defined that does that) and so affects screen readers only.
 *   If you do have such a class, but want to show this section to everyone,
 *   pass different properties with the `footnoteLabelProperties` option.
 * @property {Handlers | null | undefined} [handlers]
 *   Extra handlers for nodes (optional).
 * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]
 *   List of custom mdast node types to pass through (keep) in hast (note that
 *   the node itself is passed, but eventual children are transformed)
 *   (optional).
 * @property {Handler | null | undefined} [unknownHandler]
 *   Handler for all unknown nodes (optional).
 *
 * @typedef State
 *   Info passed around.
 * @property {(node: MdastNodes) => Array<HastElementContent>} all
 *   Transform the children of an mdast parent to hast.
 * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData
 *   Honor the `data` of `from`, and generate an element instead of `node`.
 * @property {Map<string, MdastDefinition>} definitionById
 *   Definitions by their identifier.
 * @property {Map<string, MdastFootnoteDefinition>} footnoteById
 *   Footnote definitions by their identifier.
 * @property {Map<string, number>} footnoteCounts
 *   Counts for how often the same footnote was called.
 * @property {Array<string>} footnoteOrder
 *   Identifiers of order when footnote calls first appear in tree order.
 * @property {Handlers} handlers
 *   Applied handlers.
 * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one
 *   Transform an mdast node to hast.
 * @property {Options} options
 *   Configuration.
 * @property {(from: MdastNodes, node: HastNodes) => undefined} patch
 *   Copy a node’s positional info.
 * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap
 *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.
 */ __turbopack_esm__({
    "createState": (()=>createState),
    "wrap": (()=>wrap)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/handlers/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit/lib/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@ungap/structured-clone/esm/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-position/lib/index.js [app-rsc] (ecmascript)");
;
;
;
;
const own = {}.hasOwnProperty;
/** @type {Options} */ const emptyOptions = {};
function createState(tree, options) {
    const settings = options || emptyOptions;
    /** @type {Map<string, MdastDefinition>} */ const definitionById = new Map();
    /** @type {Map<string, MdastFootnoteDefinition>} */ const footnoteById = new Map();
    /** @type {Map<string, number>} */ const footnoteCounts = new Map();
    /** @type {Handlers} */ // @ts-expect-error: the root handler returns a root.
    // Hard to type.
    const handlers = {
        ...__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$handlers$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["handlers"],
        ...settings.handlers
    };
    /** @type {State} */ const state = {
        all,
        applyData,
        definitionById,
        footnoteById,
        footnoteCounts,
        footnoteOrder: [],
        handlers,
        one,
        options: settings,
        patch,
        wrap
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(tree, function(node) {
        if (node.type === 'definition' || node.type === 'footnoteDefinition') {
            const map = node.type === 'definition' ? definitionById : footnoteById;
            const id = String(node.identifier).toUpperCase();
            // Mimick CM behavior of link definitions.
            // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.
            if (!map.has(id)) {
                // @ts-expect-error: node type matches map.
                map.set(id, node);
            }
        }
    });
    return state;
    "TURBOPACK unreachable";
    /**
   * Transform an mdast node into a hast node.
   *
   * @param {MdastNodes} node
   *   mdast node.
   * @param {MdastParents | undefined} [parent]
   *   Parent of `node`.
   * @returns {Array<HastElementContent> | HastElementContent | undefined}
   *   Resulting hast node.
   */ function one(node, parent) {
        const type = node.type;
        const handle = state.handlers[type];
        if (own.call(state.handlers, type) && handle) {
            return handle(state, node, parent);
        }
        if (state.options.passThrough && state.options.passThrough.includes(type)) {
            if ('children' in node) {
                const { children, ...shallow } = node;
                const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["default"])(shallow);
                // @ts-expect-error: TS doesn’t understand…
                result.children = state.all(node);
                // @ts-expect-error: TS doesn’t understand…
                return result;
            }
            // @ts-expect-error: it’s custom.
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["default"])(node);
        }
        const unknown = state.options.unknownHandler || defaultUnknownHandler;
        return unknown(state, node, parent);
    }
    /**
   * Transform the children of an mdast node into hast nodes.
   *
   * @param {MdastNodes} parent
   *   mdast node to compile
   * @returns {Array<HastElementContent>}
   *   Resulting hast nodes.
   */ function all(parent) {
        /** @type {Array<HastElementContent>} */ const values = [];
        if ('children' in parent) {
            const nodes = parent.children;
            let index = -1;
            while(++index < nodes.length){
                const result = state.one(nodes[index], parent);
                // To do: see if we van clean this? Can we merge texts?
                if (result) {
                    if (index && nodes[index - 1].type === 'break') {
                        if (!Array.isArray(result) && result.type === 'text') {
                            result.value = trimMarkdownSpaceStart(result.value);
                        }
                        if (!Array.isArray(result) && result.type === 'element') {
                            const head = result.children[0];
                            if (head && head.type === 'text') {
                                head.value = trimMarkdownSpaceStart(head.value);
                            }
                        }
                    }
                    if (Array.isArray(result)) {
                        values.push(...result);
                    } else {
                        values.push(result);
                    }
                }
            }
        }
        return values;
    }
}
/**
 * Copy a node’s positional info.
 *
 * @param {MdastNodes} from
 *   mdast node to copy from.
 * @param {HastNodes} to
 *   hast node to copy into.
 * @returns {undefined}
 *   Nothing.
 */ function patch(from, to) {
    if (from.position) to.position = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["position"])(from);
}
/**
 * Honor the `data` of `from` and maybe generate an element instead of `to`.
 *
 * @template {HastNodes} Type
 *   Node type.
 * @param {MdastNodes} from
 *   mdast node to use data from.
 * @param {Type} to
 *   hast node to change.
 * @returns {HastElement | Type}
 *   Nothing.
 */ function applyData(from, to) {
    /** @type {HastElement | Type} */ let result = to;
    // Handle `data.hName`, `data.hProperties, `data.hChildren`.
    if (from && from.data) {
        const hName = from.data.hName;
        const hChildren = from.data.hChildren;
        const hProperties = from.data.hProperties;
        if (typeof hName === 'string') {
            // Transforming the node resulted in an element with a different name
            // than wanted:
            if (result.type === 'element') {
                result.tagName = hName;
            } else {
                /** @type {Array<HastElementContent>} */ // @ts-expect-error: assume no doctypes in `root`.
                const children = 'children' in result ? result.children : [
                    result
                ];
                result = {
                    type: 'element',
                    tagName: hName,
                    properties: {},
                    children
                };
            }
        }
        if (result.type === 'element' && hProperties) {
            Object.assign(result.properties, (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["default"])(hProperties));
        }
        if ('children' in result && result.children && hChildren !== null && hChildren !== undefined) {
            result.children = hChildren;
        }
    }
    return result;
}
/**
 * Transform an unknown node.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdastNodes} node
 *   Unknown mdast node.
 * @returns {HastElement | HastText}
 *   Resulting hast node.
 */ function defaultUnknownHandler(state, node) {
    const data = node.data || {};
    /** @type {HastElement | HastText} */ const result = 'value' in node && !(own.call(data, 'hProperties') || own.call(data, 'hChildren')) ? {
        type: 'text',
        value: node.value
    } : {
        type: 'element',
        tagName: 'div',
        properties: {},
        children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}
function wrap(nodes, loose) {
    /** @type {Array<HastText | Type>} */ const result = [];
    let index = -1;
    if (loose) {
        result.push({
            type: 'text',
            value: '\n'
        });
    }
    while(++index < nodes.length){
        if (index) result.push({
            type: 'text',
            value: '\n'
        });
        result.push(nodes[index]);
    }
    if (loose && nodes.length > 0) {
        result.push({
            type: 'text',
            value: '\n'
        });
    }
    return result;
}
/**
 * Trim spaces and tabs at the start of `value`.
 *
 * @param {string} value
 *   Value to trim.
 * @returns {string}
 *   Result.
 */ function trimMarkdownSpaceStart(value) {
    let index = 0;
    let code = value.charCodeAt(index);
    while(code === 9 || code === 32){
        index++;
        code = value.charCodeAt(index);
    }
    return value.slice(index);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/footer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 *
 * @typedef {import('./state.js').State} State
 */ /**
 * @callback FootnoteBackContentTemplate
 *   Generate content for the backreference dynamically.
 *
 *   For the following markdown:
 *
 *   ```markdown
 *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].
 *
 *   [^remark]: things about remark
 *   [^micromark]: things about micromark
 *   ```
 *
 *   This function will be called with:
 *
 *   *  `0` and `0` for the backreference from `things about micromark` to
 *      `alpha`, as it is the first used definition, and the first call to it
 *   *  `0` and `1` for the backreference from `things about micromark` to
 *      `bravo`, as it is the first used definition, and the second call to it
 *   *  `1` and `0` for the backreference from `things about remark` to
 *      `charlie`, as it is the second used definition
 * @param {number} referenceIndex
 *   Index of the definition in the order that they are first referenced,
 *   0-indexed.
 * @param {number} rereferenceIndex
 *   Index of calls to the same definition, 0-indexed.
 * @returns {Array<ElementContent> | ElementContent | string}
 *   Content for the backreference when linking back from definitions to their
 *   reference.
 *
 * @callback FootnoteBackLabelTemplate
 *   Generate a back label dynamically.
 *
 *   For the following markdown:
 *
 *   ```markdown
 *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].
 *
 *   [^remark]: things about remark
 *   [^micromark]: things about micromark
 *   ```
 *
 *   This function will be called with:
 *
 *   *  `0` and `0` for the backreference from `things about micromark` to
 *      `alpha`, as it is the first used definition, and the first call to it
 *   *  `0` and `1` for the backreference from `things about micromark` to
 *      `bravo`, as it is the first used definition, and the second call to it
 *   *  `1` and `0` for the backreference from `things about remark` to
 *      `charlie`, as it is the second used definition
 * @param {number} referenceIndex
 *   Index of the definition in the order that they are first referenced,
 *   0-indexed.
 * @param {number} rereferenceIndex
 *   Index of calls to the same definition, 0-indexed.
 * @returns {string}
 *   Back label to use when linking back from definitions to their reference.
 */ __turbopack_esm__({
    "defaultFootnoteBackContent": (()=>defaultFootnoteBackContent),
    "defaultFootnoteBackLabel": (()=>defaultFootnoteBackLabel),
    "footer": (()=>footer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-sanitize-uri/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@ungap/structured-clone/esm/index.js [app-rsc] (ecmascript) <locals>");
;
;
function defaultFootnoteBackContent(_, rereferenceIndex) {
    /** @type {Array<ElementContent>} */ const result = [
        {
            type: 'text',
            value: '↩'
        }
    ];
    if (rereferenceIndex > 1) {
        result.push({
            type: 'element',
            tagName: 'sup',
            properties: {},
            children: [
                {
                    type: 'text',
                    value: String(rereferenceIndex)
                }
            ]
        });
    }
    return result;
}
function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {
    return 'Back to reference ' + (referenceIndex + 1) + (rereferenceIndex > 1 ? '-' + rereferenceIndex : '');
}
function footer(state) {
    const clobberPrefix = typeof state.options.clobberPrefix === 'string' ? state.options.clobberPrefix : 'user-content-';
    const footnoteBackContent = state.options.footnoteBackContent || defaultFootnoteBackContent;
    const footnoteBackLabel = state.options.footnoteBackLabel || defaultFootnoteBackLabel;
    const footnoteLabel = state.options.footnoteLabel || 'Footnotes';
    const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2';
    const footnoteLabelProperties = state.options.footnoteLabelProperties || {
        className: [
            'sr-only'
        ]
    };
    /** @type {Array<ElementContent>} */ const listItems = [];
    let referenceIndex = -1;
    while(++referenceIndex < state.footnoteOrder.length){
        const definition = state.footnoteById.get(state.footnoteOrder[referenceIndex]);
        if (!definition) {
            continue;
        }
        const content = state.all(definition);
        const id = String(definition.identifier).toUpperCase();
        const safeId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeUri"])(id.toLowerCase());
        let rereferenceIndex = 0;
        /** @type {Array<ElementContent>} */ const backReferences = [];
        const counts = state.footnoteCounts.get(id);
        // eslint-disable-next-line no-unmodified-loop-condition
        while(counts !== undefined && ++rereferenceIndex <= counts){
            if (backReferences.length > 0) {
                backReferences.push({
                    type: 'text',
                    value: ' '
                });
            }
            let children = typeof footnoteBackContent === 'string' ? footnoteBackContent : footnoteBackContent(referenceIndex, rereferenceIndex);
            if (typeof children === 'string') {
                children = {
                    type: 'text',
                    value: children
                };
            }
            backReferences.push({
                type: 'element',
                tagName: 'a',
                properties: {
                    href: '#' + clobberPrefix + 'fnref-' + safeId + (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),
                    dataFootnoteBackref: '',
                    ariaLabel: typeof footnoteBackLabel === 'string' ? footnoteBackLabel : footnoteBackLabel(referenceIndex, rereferenceIndex),
                    className: [
                        'data-footnote-backref'
                    ]
                },
                children: Array.isArray(children) ? children : [
                    children
                ]
            });
        }
        const tail = content[content.length - 1];
        if (tail && tail.type === 'element' && tail.tagName === 'p') {
            const tailTail = tail.children[tail.children.length - 1];
            if (tailTail && tailTail.type === 'text') {
                tailTail.value += ' ';
            } else {
                tail.children.push({
                    type: 'text',
                    value: ' '
                });
            }
            tail.children.push(...backReferences);
        } else {
            content.push(...backReferences);
        }
        /** @type {Element} */ const listItem = {
            type: 'element',
            tagName: 'li',
            properties: {
                id: clobberPrefix + 'fn-' + safeId
            },
            children: state.wrap(content, true)
        };
        state.patch(definition, listItem);
        listItems.push(listItem);
    }
    if (listItems.length === 0) {
        return;
    }
    return {
        type: 'element',
        tagName: 'section',
        properties: {
            dataFootnotes: true,
            className: [
                'footnotes'
            ]
        },
        children: [
            {
                type: 'element',
                tagName: footnoteLabelTagName,
                properties: {
                    ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["default"])(footnoteLabelProperties),
                    id: 'footnote-label'
                },
                children: [
                    {
                        type: 'text',
                        value: footnoteLabel
                    }
                ]
            },
            {
                type: 'text',
                value: '\n'
            },
            {
                type: 'element',
                tagName: 'ol',
                properties: {},
                children: state.wrap(listItems, true)
            },
            {
                type: 'text',
                value: '\n'
            }
        ]
    };
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Nodes} HastNodes
 * @typedef {import('mdast').Nodes} MdastNodes
 * @typedef {import('./state.js').Options} Options
 */ __turbopack_esm__({
    "toHast": (()=>toHast)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$state$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/state.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$footer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/footer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
;
;
;
function toHast(tree, options) {
    const state = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$state$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createState"])(tree, options);
    const node = state.one(tree, undefined);
    const foot = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$footer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["footer"])(state);
    /** @type {HastNodes} */ const result = Array.isArray(node) ? {
        type: 'root',
        children: node
    } : node || {
        type: 'root',
        children: []
    };
    if (foot) {
        // If there’s a footer, there were definitions, meaning block
        // content.
        // So `result` is a parent node.
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])('children' in result);
        result.children.push({
            type: 'text',
            value: '\n'
        }, foot);
    }
    return result;
}
}}),
"[project]/apps/website/docs/node_modules/micromark-util-encode/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "encode": (()=>encode)
});
const characterReferences = {
    '"': 'quot',
    '&': 'amp',
    '<': 'lt',
    '>': 'gt'
};
function encode(value) {
    return value.replace(/["&<>]/g, replace);
    "TURBOPACK unreachable";
    /**
   * @param {string} value
   *   Value to replace.
   * @returns {string}
   *   Encoded value.
   */ function replace(value) {
        return '&' + characterReferences[value] + ';';
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-util-sanitize-uri/dev/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "normalizeUri": (()=>normalizeUri),
    "sanitizeUri": (()=>sanitizeUri)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$encode$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-encode/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/values.js [app-rsc] (ecmascript)");
;
;
;
function sanitizeUri(url, protocol) {
    const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$encode$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encode"])(normalizeUri(url || ''));
    if (!protocol) {
        return value;
    }
    const colon = value.indexOf(':');
    const questionMark = value.indexOf('?');
    const numberSign = value.indexOf('#');
    const slash = value.indexOf('/');
    if (// If there is no protocol, it’s relative.
    colon < 0 || slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign || // It is a protocol, it should be allowed.
    protocol.test(value.slice(0, colon))) {
        return value;
    }
    return '';
}
function normalizeUri(value) {
    /** @type {Array<string>} */ const result = [];
    let index = -1;
    let start = 0;
    let skip = 0;
    while(++index < value.length){
        const code = value.charCodeAt(index);
        /** @type {string} */ let replace = '';
        // A correct percent encoded value.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].percentSign && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["asciiAlphanumeric"])(value.charCodeAt(index + 1)) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["asciiAlphanumeric"])(value.charCodeAt(index + 2))) {
            skip = 2;
        } else if (code < 128) {
            if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {
                replace = String.fromCharCode(code);
            }
        } else if (code > 55_295 && code < 57_344) {
            const next = value.charCodeAt(index + 1);
            // A correct surrogate pair.
            if (code < 56_320 && next > 56_319 && next < 57_344) {
                replace = String.fromCharCode(code, next);
                skip = 1;
            } else {
                replace = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["values"].replacementCharacter;
            }
        } else {
            replace = String.fromCharCode(code);
        }
        if (replace) {
            result.push(value.slice(start, index), encodeURIComponent(replace));
            start = index + skip + 1;
            replace = '';
        }
        if (skip) {
            index += skip;
            skip = 0;
        }
    }
    return result.join('') + value.slice(start);
}
}}),
"[project]/apps/website/docs/node_modules/unist-util-position/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Position} Position
 */ /**
 * @typedef NodeLike
 * @property {string} type
 * @property {PositionLike | null | undefined} [position]
 *
 * @typedef PositionLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 *
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 * @property {number | null | undefined} [offset]
 */ /**
 * Get the ending point of `node`.
 *
 * @param node
 *   Node.
 * @returns
 *   Point.
 */ __turbopack_esm__({
    "pointEnd": (()=>pointEnd),
    "pointStart": (()=>pointStart),
    "position": (()=>position)
});
const pointEnd = point('end');
const pointStart = point('start');
/**
 * Get the positional info of `node`.
 *
 * @param {'end' | 'start'} type
 *   Side.
 * @returns
 *   Getter.
 */ function point(type) {
    return point;
    "TURBOPACK unreachable";
    /**
   * Get the point info of `node` at a bound side.
   *
   * @param {Node | NodeLike | null | undefined} [node]
   * @returns {Point | undefined}
   */ function point(node) {
        const point = node && node.position && node.position[type] || {};
        if (typeof point.line === 'number' && point.line > 0 && typeof point.column === 'number' && point.column > 0) {
            return {
                line: point.line,
                column: point.column,
                offset: typeof point.offset === 'number' && point.offset > -1 ? point.offset : undefined
            };
        }
    }
}
function position(node) {
    const start = pointStart(node);
    const end = pointEnd(node);
    if (start && end) {
        return {
            start,
            end
        };
    }
}
}}),
"[project]/apps/website/docs/node_modules/trim-lines/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "trimLines": (()=>trimLines)
});
const tab = 9 /* `\t` */ ;
const space = 32 /* ` ` */ ;
function trimLines(value) {
    const source = String(value);
    const search = /\r?\n|\r/g;
    let match = search.exec(source);
    let last = 0;
    /** @type {Array<string>} */ const lines = [];
    while(match){
        lines.push(trimLine(source.slice(last, match.index), last > 0, true), match[0]);
        last = match.index + match[0].length;
        match = search.exec(source);
    }
    lines.push(trimLine(source.slice(last), last > 0, false));
    return lines.join('');
}
/**
 * @param {string} value
 *   Line to trim.
 * @param {boolean} start
 *   Whether to trim the start of the line.
 * @param {boolean} end
 *   Whether to trim the end of the line.
 * @returns {string}
 *   Trimmed line.
 */ function trimLine(value, start, end) {
    let startIndex = 0;
    let endIndex = value.length;
    if (start) {
        let code = value.codePointAt(startIndex);
        while(code === tab || code === space){
            startIndex++;
            code = value.codePointAt(startIndex);
        }
    }
    if (end) {
        let code = value.codePointAt(endIndex - 1);
        while(code === tab || code === space){
            endIndex--;
            code = value.codePointAt(endIndex - 1);
        }
    }
    return endIndex > startIndex ? value.slice(startIndex, endIndex) : '';
}
}}),
"[project]/apps/website/docs/node_modules/@ungap/structured-clone/esm/types.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ARRAY": (()=>ARRAY),
    "BIGINT": (()=>BIGINT),
    "DATE": (()=>DATE),
    "ERROR": (()=>ERROR),
    "MAP": (()=>MAP),
    "OBJECT": (()=>OBJECT),
    "PRIMITIVE": (()=>PRIMITIVE),
    "REGEXP": (()=>REGEXP),
    "SET": (()=>SET),
    "VOID": (()=>VOID)
});
const VOID = -1;
const PRIMITIVE = 0;
const ARRAY = 1;
const OBJECT = 2;
const DATE = 3;
const REGEXP = 4;
const MAP = 5;
const SET = 6;
const ERROR = 7;
const BIGINT = 8; // export const SYMBOL = 9;
}}),
"[project]/apps/website/docs/node_modules/@ungap/structured-clone/esm/deserialize.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "deserialize": (()=>deserialize)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@ungap/structured-clone/esm/types.js [app-rsc] (ecmascript)");
;
const env = typeof self === 'object' ? self : globalThis;
const deserializer = ($, _)=>{
    const as = (out, index)=>{
        $.set(index, out);
        return out;
    };
    const unpair = (index)=>{
        if ($.has(index)) return $.get(index);
        const [type, value] = _[index];
        switch(type){
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PRIMITIVE"]:
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VOID"]:
                return as(value, index);
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ARRAY"]:
                {
                    const arr = as([], index);
                    for (const index of value)arr.push(unpair(index));
                    return arr;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["OBJECT"]:
                {
                    const object = as({}, index);
                    for (const [key, index] of value)object[unpair(key)] = unpair(index);
                    return object;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DATE"]:
                return as(new Date(value), index);
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["REGEXP"]:
                {
                    const { source, flags } = value;
                    return as(new RegExp(source, flags), index);
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MAP"]:
                {
                    const map = as(new Map, index);
                    for (const [key, index] of value)map.set(unpair(key), unpair(index));
                    return map;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SET"]:
                {
                    const set = as(new Set, index);
                    for (const index of value)set.add(unpair(index));
                    return set;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ERROR"]:
                {
                    const { name, message } = value;
                    return as(new env[name](message), index);
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["BIGINT"]:
                return as(BigInt(value), index);
            case 'BigInt':
                return as(Object(BigInt(value)), index);
            case 'ArrayBuffer':
                return as(new Uint8Array(value).buffer, value);
            case 'DataView':
                {
                    const { buffer } = new Uint8Array(value);
                    return as(new DataView(buffer), value);
                }
        }
        return as(new env[type](value), index);
    };
    return unpair;
};
const deserialize = (serialized)=>deserializer(new Map, serialized)(0);
}}),
"[project]/apps/website/docs/node_modules/@ungap/structured-clone/esm/serialize.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "serialize": (()=>serialize)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@ungap/structured-clone/esm/types.js [app-rsc] (ecmascript)");
;
const EMPTY = '';
const { toString } = {};
const { keys } = Object;
const typeOf = (value)=>{
    const type = typeof value;
    if (type !== 'object' || !value) return [
        __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PRIMITIVE"],
        type
    ];
    const asString = toString.call(value).slice(8, -1);
    switch(asString){
        case 'Array':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ARRAY"],
                EMPTY
            ];
        case 'Object':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["OBJECT"],
                EMPTY
            ];
        case 'Date':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DATE"],
                EMPTY
            ];
        case 'RegExp':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["REGEXP"],
                EMPTY
            ];
        case 'Map':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MAP"],
                EMPTY
            ];
        case 'Set':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SET"],
                EMPTY
            ];
        case 'DataView':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ARRAY"],
                asString
            ];
    }
    if (asString.includes('Array')) return [
        __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ARRAY"],
        asString
    ];
    if (asString.includes('Error')) return [
        __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ERROR"],
        asString
    ];
    return [
        __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["OBJECT"],
        asString
    ];
};
const shouldSkip = ([TYPE, type])=>TYPE === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PRIMITIVE"] && (type === 'function' || type === 'symbol');
const serializer = (strict, json, $, _)=>{
    const as = (out, value)=>{
        const index = _.push(out) - 1;
        $.set(value, index);
        return index;
    };
    const pair = (value)=>{
        if ($.has(value)) return $.get(value);
        let [TYPE, type] = typeOf(value);
        switch(TYPE){
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PRIMITIVE"]:
                {
                    let entry = value;
                    switch(type){
                        case 'bigint':
                            TYPE = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["BIGINT"];
                            entry = value.toString();
                            break;
                        case 'function':
                        case 'symbol':
                            if (strict) throw new TypeError('unable to serialize ' + type);
                            entry = null;
                            break;
                        case 'undefined':
                            return as([
                                __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VOID"]
                            ], value);
                    }
                    return as([
                        TYPE,
                        entry
                    ], value);
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ARRAY"]:
                {
                    if (type) {
                        let spread = value;
                        if (type === 'DataView') {
                            spread = new Uint8Array(value.buffer);
                        } else if (type === 'ArrayBuffer') {
                            spread = new Uint8Array(value);
                        }
                        return as([
                            type,
                            [
                                ...spread
                            ]
                        ], value);
                    }
                    const arr = [];
                    const index = as([
                        TYPE,
                        arr
                    ], value);
                    for (const entry of value)arr.push(pair(entry));
                    return index;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["OBJECT"]:
                {
                    if (type) {
                        switch(type){
                            case 'BigInt':
                                return as([
                                    type,
                                    value.toString()
                                ], value);
                            case 'Boolean':
                            case 'Number':
                            case 'String':
                                return as([
                                    type,
                                    value.valueOf()
                                ], value);
                        }
                    }
                    if (json && 'toJSON' in value) return pair(value.toJSON());
                    const entries = [];
                    const index = as([
                        TYPE,
                        entries
                    ], value);
                    for (const key of keys(value)){
                        if (strict || !shouldSkip(typeOf(value[key]))) entries.push([
                            pair(key),
                            pair(value[key])
                        ]);
                    }
                    return index;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DATE"]:
                return as([
                    TYPE,
                    value.toISOString()
                ], value);
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["REGEXP"]:
                {
                    const { source, flags } = value;
                    return as([
                        TYPE,
                        {
                            source,
                            flags
                        }
                    ], value);
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MAP"]:
                {
                    const entries = [];
                    const index = as([
                        TYPE,
                        entries
                    ], value);
                    for (const [key, entry] of value){
                        if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry)))) entries.push([
                            pair(key),
                            pair(entry)
                        ]);
                    }
                    return index;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SET"]:
                {
                    const entries = [];
                    const index = as([
                        TYPE,
                        entries
                    ], value);
                    for (const entry of value){
                        if (strict || !shouldSkip(typeOf(entry))) entries.push(pair(entry));
                    }
                    return index;
                }
        }
        const { message } = value;
        return as([
            TYPE,
            {
                name: type,
                message
            }
        ], value);
    };
    return pair;
};
const serialize = (value, { json, lossy } = {})=>{
    const _ = [];
    return serializer(!(json || lossy), !!json, new Map, _)(value), _;
};
}}),
"[project]/apps/website/docs/node_modules/@ungap/structured-clone/esm/index.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$deserialize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@ungap/structured-clone/esm/deserialize.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$serialize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@ungap/structured-clone/esm/serialize.js [app-rsc] (ecmascript)");
;
;
const __TURBOPACK__default__export__ = typeof structuredClone === "function" ? /* c8 ignore start */ (any, options)=>options && ('json' in options || 'lossy' in options) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$deserialize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["deserialize"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$serialize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["serialize"])(any, options)) : structuredClone(any) : (any, options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$deserialize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["deserialize"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$serialize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["serialize"])(any, options));
;
}}),
"[project]/apps/website/docs/node_modules/remark-rehype/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// Include `data` fields in mdast and `raw` nodes in hast.
/// <reference types="mdast-util-to-hast" />
/**
 * @import {Root as HastRoot} from 'hast'
 * @import {Root as MdastRoot} from 'mdast'
 * @import {Options as ToHastOptions} from 'mdast-util-to-hast'
 * @import {Processor} from 'unified'
 * @import {VFile} from 'vfile'
 */ /**
 * @typedef {Omit<ToHastOptions, 'file'>} Options
 *
 * @callback TransformBridge
 *   Bridge-mode.
 *
 *   Runs the destination with the new hast tree.
 *   Discards result.
 * @param {MdastRoot} tree
 *   Tree.
 * @param {VFile} file
 *   File.
 * @returns {Promise<undefined>}
 *   Nothing.
 *
 * @callback TransformMutate
 *  Mutate-mode.
 *
 *  Further transformers run on the hast tree.
 * @param {MdastRoot} tree
 *   Tree.
 * @param {VFile} file
 *   File.
 * @returns {HastRoot}
 *   Tree (hast).
 */ __turbopack_esm__({
    "default": (()=>remarkRehype)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-hast/lib/index.js [app-rsc] (ecmascript)");
;
function remarkRehype(destination, options) {
    if (destination && 'run' in destination) {
        /**
     * @type {TransformBridge}
     */ return async function(tree, file) {
            // Cast because root in -> root out.
            const hastTree = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toHast"])(tree, {
                file,
                ...options
            });
            await destination.run(hastTree, file);
        };
    }
    /**
   * @type {TransformMutate}
   */ return function(tree, file) {
        // Cast because root in -> root out.
        // To do: in the future, disallow ` || options` fallback.
        // With `unified-engine`, `destination` can be `undefined` but
        // `options` will be the file set.
        // We should not pass that as `options`.
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toHast"])(tree, {
            file,
            ...destination || options
        });
    };
}
}}),
"[project]/apps/website/docs/node_modules/zwitch/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @callback Handler
 *   Handle a value, with a certain ID field set to a certain value.
 *   The ID field is passed to `zwitch`, and it’s value is this function’s
 *   place on the `handlers` record.
 * @param {...any} parameters
 *   Arbitrary parameters passed to the zwitch.
 *   The first will be an object with a certain ID field set to a certain value.
 * @returns {any}
 *   Anything!
 */ /**
 * @callback UnknownHandler
 *   Handle values that do have a certain ID field, but it’s set to a value
 *   that is not listed in the `handlers` record.
 * @param {unknown} value
 *   An object with a certain ID field set to an unknown value.
 * @param {...any} rest
 *   Arbitrary parameters passed to the zwitch.
 * @returns {any}
 *   Anything!
 */ /**
 * @callback InvalidHandler
 *   Handle values that do not have a certain ID field.
 * @param {unknown} value
 *   Any unknown value.
 * @param {...any} rest
 *   Arbitrary parameters passed to the zwitch.
 * @returns {void|null|undefined|never}
 *   This should crash or return nothing.
 */ /**
 * @template {InvalidHandler} [Invalid=InvalidHandler]
 * @template {UnknownHandler} [Unknown=UnknownHandler]
 * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]
 * @typedef Options
 *   Configuration (required).
 * @property {Invalid} [invalid]
 *   Handler to use for invalid values.
 * @property {Unknown} [unknown]
 *   Handler to use for unknown values.
 * @property {Handlers} [handlers]
 *   Handlers to use.
 */ __turbopack_esm__({
    "zwitch": (()=>zwitch)
});
const own = {}.hasOwnProperty;
function zwitch(key, options) {
    const settings = options || {};
    /**
   * Handle one value.
   *
   * Based on the bound `key`, a respective handler will be called.
   * If `value` is not an object, or doesn’t have a `key` property, the special
   * “invalid” handler will be called.
   * If `value` has an unknown `key`, the special “unknown” handler will be
   * called.
   *
   * All arguments, and the context object, are passed through to the handler,
   * and it’s result is returned.
   *
   * @this {unknown}
   *   Any context object.
   * @param {unknown} [value]
   *   Any value.
   * @param {...unknown} parameters
   *   Arbitrary parameters passed to the zwitch.
   * @property {Handler} invalid
   *   Handle for values that do not have a certain ID field.
   * @property {Handler} unknown
   *   Handle values that do have a certain ID field, but it’s set to a value
   *   that is not listed in the `handlers` record.
   * @property {Handlers} handlers
   *   Record of handlers.
   * @returns {unknown}
   *   Anything.
   */ function one(value, ...parameters) {
        /** @type {Handler|undefined} */ let fn = one.invalid;
        const handlers = one.handlers;
        if (value && own.call(value, key)) {
            // @ts-expect-error Indexable.
            const id = String(value[key]);
            // @ts-expect-error Indexable.
            fn = own.call(handlers, id) ? handlers[id] : one.unknown;
        }
        if (fn) {
            return fn.call(this, value, ...parameters);
        }
    }
    one.handlers = settings.handlers || {};
    one.invalid = settings.invalid;
    one.unknown = settings.unknown;
    // @ts-expect-error: matches!
    return one;
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/comment.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   JSXEmptyExpression as JsxEmptyExpression,
 *   JSXExpressionContainer as JsxExpressionContainer,
 * } from 'estree-jsx'
 * @import {Comment} from 'estree'
 * @import {State} from 'hast-util-to-estree'
 * @import {Comment as HastComment} from 'hast'
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "comment": (()=>comment)
});
'';
function comment(node, state) {
    /** @type {Comment} */ const result = {
        type: 'Block',
        value: node.value
    };
    state.inherit(node, result);
    state.comments.push(result);
    /** @type {JsxEmptyExpression} */ const expression = {
        type: 'JSXEmptyExpression',
        // @ts-expect-error: `comments` is custom.
        comments: [
            Object.assign({}, result, {
                leading: false,
                trailing: true
            })
        ]
    };
    state.patch(node, expression);
    /** @type {JsxExpressionContainer} */ const container = {
        type: 'JSXExpressionContainer',
        expression
    };
    state.patch(node, container);
    return container;
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/element.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   JSXAttribute as JsxAttribute,
 *   JSXElement as JsxElement,
 *   JSXSpreadAttribute as JsxSpreadAttribute,
 * } from 'estree-jsx'
 * @import {Property} from 'estree'
 * @import {State} from 'hast-util-to-estree'
 * @import {Element as HastElement} from 'hast'
 */ __turbopack_esm__({
    "element": (()=>element)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$style$2d$to$2d$object$2f$esm$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/style-to-object/esm/index.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$find$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/find.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$hast$2d$to$2d$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/hast-to-react.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/space-separated-tokens/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/comma-separated-tokens/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-util-is-identifier-name/lib/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
const own = {}.hasOwnProperty;
const cap = /[A-Z]/g;
const dashSomething = /-([a-z])/g;
const tableCellElement = new Set([
    'td',
    'th'
]);
function element(node, state) {
    const parentSchema = state.schema;
    let schema = parentSchema;
    const properties = node.properties || {};
    if (parentSchema.space === 'html' && node.tagName.toLowerCase() === 'svg') {
        schema = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["svg"];
        state.schema = schema;
    }
    const children = state.all(node);
    /** @type {Array<JsxAttribute | JsxSpreadAttribute>} */ const attributes = [];
    /** @type {string} */ let property;
    /** @type {string | undefined} */ let alignValue;
    /** @type {Array<Property> | undefined} */ let styleProperties;
    for(property in properties){
        if (own.call(properties, property)) {
            let value = properties[property];
            const info = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$find$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["find"])(schema, property);
            /** @type {JsxAttribute['value']} */ let attributeValue;
            // Ignore nullish and `NaN` values.
            // Ignore `false` and falsey known booleans.
            if (value === null || value === undefined || value === false || typeof value === 'number' && Number.isNaN(value) || !value && info.boolean) {
                continue;
            }
            property = state.elementAttributeNameCase === 'react' && info.space ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$hast$2d$to$2d$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["hastToReact"][info.property] || info.property : info.attribute;
            if (Array.isArray(value)) {
                // Accept `array`.
                // Most properties are space-separated.
                value = info.commaSeparated ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringify"])(value) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringify"])(value);
            }
            if (property === 'style') {
                let styleObject = typeof value === 'object' ? value : parseStyle(String(value), node.tagName);
                if (state.stylePropertyNameCase === 'css') {
                    styleObject = transformStylesToCssCasing(styleObject);
                }
                /** @type {Array<Property>} */ const cssProperties = [];
                /** @type {string} */ let cssProperty;
                for(cssProperty in styleObject){
                    // eslint-disable-next-line max-depth
                    if (own.call(styleObject, cssProperty)) {
                        cssProperties.push({
                            type: 'Property',
                            method: false,
                            shorthand: false,
                            computed: false,
                            key: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["name"])(cssProperty) ? {
                                type: 'Identifier',
                                name: cssProperty
                            } : {
                                type: 'Literal',
                                value: cssProperty
                            },
                            value: {
                                type: 'Literal',
                                value: String(styleObject[cssProperty])
                            },
                            kind: 'init'
                        });
                    }
                }
                styleProperties = cssProperties;
                attributeValue = {
                    type: 'JSXExpressionContainer',
                    expression: {
                        type: 'ObjectExpression',
                        properties: cssProperties
                    }
                };
            } else if (value === true) {
                attributeValue = null;
            } else if (state.tableCellAlignToStyle && tableCellElement.has(node.tagName) && property === 'align') {
                alignValue = String(value);
                continue;
            } else {
                attributeValue = {
                    type: 'Literal',
                    value: String(value)
                };
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["name"])(property, {
                jsx: true
            })) {
                attributes.push({
                    type: 'JSXAttribute',
                    name: {
                        type: 'JSXIdentifier',
                        name: property
                    },
                    value: attributeValue
                });
            } else {
                attributes.push({
                    type: 'JSXSpreadAttribute',
                    argument: {
                        type: 'ObjectExpression',
                        properties: [
                            {
                                type: 'Property',
                                method: false,
                                shorthand: false,
                                computed: false,
                                key: {
                                    type: 'Literal',
                                    value: String(property)
                                },
                                // @ts-expect-error No need to worry about `style` (which has a
                                // `JSXExpressionContainer` value) because that’s a valid identifier.
                                value: attributeValue || {
                                    type: 'Literal',
                                    value: true
                                },
                                kind: 'init'
                            }
                        ]
                    }
                });
            }
        }
    }
    if (alignValue !== undefined) {
        if (!styleProperties) {
            styleProperties = [];
            attributes.push({
                type: 'JSXAttribute',
                name: {
                    type: 'JSXIdentifier',
                    name: 'style'
                },
                value: {
                    type: 'JSXExpressionContainer',
                    expression: {
                        type: 'ObjectExpression',
                        properties: styleProperties
                    }
                }
            });
        }
        const cssProperty = state.stylePropertyNameCase === 'css' ? transformStyleToCssCasing('textAlign') : 'textAlign';
        styleProperties.push({
            type: 'Property',
            method: false,
            shorthand: false,
            computed: false,
            key: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["name"])(cssProperty) ? {
                type: 'Identifier',
                name: cssProperty
            } : {
                type: 'Literal',
                value: cssProperty
            },
            value: {
                type: 'Literal',
                value: alignValue
            },
            kind: 'init'
        });
    }
    // Restore parent schema.
    state.schema = parentSchema;
    /** @type {JsxElement} */ const result = {
        type: 'JSXElement',
        openingElement: {
            type: 'JSXOpeningElement',
            attributes,
            name: state.createJsxElementName(node.tagName),
            selfClosing: children.length === 0
        },
        closingElement: children.length > 0 ? {
            type: 'JSXClosingElement',
            name: state.createJsxElementName(node.tagName)
        } : null,
        children
    };
    state.inherit(node, result);
    return result;
}
/**
 * Parse CSS rules as a declaration.
 *
 * @param {string} value
 *   CSS text.
 * @param {string} tagName
 *   Element name.
 * @returns {Record<string, string>}
 *   Properties.
 */ function parseStyle(value, tagName) {
    /** @type {Record<string, string>} */ const result = {};
    try {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$style$2d$to$2d$object$2f$esm$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(value, iterator);
    } catch (error) {
        const cause = error;
        const exception = new Error('Could not parse `style` attribute on `' + tagName + '`', {
            cause
        });
        throw exception;
    }
    return result;
    "TURBOPACK unreachable";
    /**
   * Add `name`, as a CSS property, to `result`.
   *
   * @param {string} name
   *   Key.
   * @param {string} value
   *   Value.
   * @returns {undefined}
   *   Nothing.
   */ function iterator(name, value) {
        let key = name;
        if (key.slice(0, 2) !== '--') {
            // See: <https://alanhogan.com/code/vendor-prefixed-css-property-names-in-javascript>
            if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4);
            key = key.replace(dashSomething, toCamel);
        }
        result[key] = value;
    }
}
/**
 * Transform a DOM casing style object to a CSS casing style object.
 *
 * @param {Record<string, string>} domCasing
 * @returns {Record<string, string>}
 */ function transformStylesToCssCasing(domCasing) {
    /** @type {Record<string, string>} */ const cssCasing = {};
    /** @type {string} */ let from;
    for(from in domCasing){
        if (own.call(domCasing, from)) {
            cssCasing[transformStyleToCssCasing(from)] = domCasing[from];
        }
    }
    return cssCasing;
}
/**
 * Transform a DOM casing style property to a CSS casing style property.
 *
 * @param {string} from
 * @returns {string}
 */ function transformStyleToCssCasing(from) {
    let to = from.replace(cap, toDash);
    // Handle `ms-xxx` -> `-ms-xxx`.
    if (to.slice(0, 3) === 'ms-') to = '-' + to;
    return to;
}
/**
 * Make `$1` capitalized.
 *
 * @param {string} _
 *   Whatever.
 * @param {string} $1
 *   Single ASCII alphabetical.
 * @returns {string}
 *   Capitalized `$1`.
 */ function toCamel(_, $1) {
    return $1.toUpperCase();
}
/**
 * Make `$0` dash cased.
 *
 * @param {string} $0
 *   Capitalized ASCII leter.
 * @returns {string}
 *   Dash and lower letter.
 */ function toDash($0) {
    return '-' + $0.toLowerCase();
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/mdx-expression.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   JSXEmptyExpression as JsxEmptyExpression,
 *   JSXExpressionContainer as JsxExpressionContainer
 * } from 'estree-jsx'
 * @import {Expression} from 'estree'
 * @import {
 *   MdxFlowExpressionHast as MdxFlowExpression,
 *   MdxTextExpressionHast as MdxTextExpression
 * } from 'mdast-util-mdx-expression'
 * @import {State} from 'hast-util-to-estree'
 */ __turbopack_esm__({
    "mdxExpression": (()=>mdxExpression)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-util-attach-comments/lib/index.js [app-rsc] (ecmascript)");
;
function mdxExpression(node, state) {
    const estree = node.data && node.data.estree;
    const comments = estree && estree.comments || [];
    /** @type {Expression | JsxEmptyExpression | undefined} */ let expression;
    if (estree) {
        state.comments.push(...comments);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["attachComments"])(estree, estree.comments);
        expression = estree.body[0] && estree.body[0].type === 'ExpressionStatement' && estree.body[0].expression || undefined;
    }
    if (!expression) {
        expression = {
            type: 'JSXEmptyExpression'
        };
        state.patch(node, expression);
    }
    /** @type {JsxExpressionContainer} */ const result = {
        type: 'JSXExpressionContainer',
        expression
    };
    state.inherit(node, result);
    return result;
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/mdx-jsx-element.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   JSXAttribute as JsxAttribute,
 *   JSXElement as JsxElement,
 *   JSXFragment as JsxFragment,
 *   JSXSpreadAttribute as JsxSpreadAttribute
 * } from 'estree-jsx'
 * @import {Expression} from 'estree'
 * @import {State} from 'hast-util-to-estree'
 * @import {
 *   MdxJsxFlowElementHast as MdxJsxFlowElement,
 *   MdxJsxTextElementHast as MdxJsxTextElement
 * } from 'mdast-util-mdx-jsx'
 */ __turbopack_esm__({
    "mdxJsxElement": (()=>mdxJsxElement)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-util-attach-comments/lib/index.js [app-rsc] (ecmascript)");
;
;
function mdxJsxElement(node, state) {
    const parentSchema = state.schema;
    let schema = parentSchema;
    const attributes = node.attributes || [];
    let index = -1;
    if (node.name && parentSchema.space === 'html' && node.name.toLowerCase() === 'svg') {
        schema = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["svg"];
        state.schema = schema;
    }
    const children = state.all(node);
    /** @type {Array<JsxAttribute | JsxSpreadAttribute>} */ const jsxAttributes = [];
    while(++index < attributes.length){
        const attribute = attributes[index];
        const value = attribute.value;
        /** @type {JsxAttribute['value']} */ let attributeValue;
        if (attribute.type === 'mdxJsxAttribute') {
            if (value === null || value === undefined) {
                attributeValue = null;
            // Empty.
            } else if (typeof value === 'object') {
                const estree = value.data && value.data.estree;
                const comments = estree && estree.comments || [];
                /** @type {Expression | undefined} */ let expression;
                if (estree) {
                    state.comments.push(...comments);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["attachComments"])(estree, estree.comments);
                    // Should exist.
                    /* c8 ignore next 5 */ expression = estree.body[0] && estree.body[0].type === 'ExpressionStatement' && estree.body[0].expression || undefined;
                }
                attributeValue = {
                    type: 'JSXExpressionContainer',
                    expression: expression || {
                        type: 'JSXEmptyExpression'
                    }
                };
                state.inherit(value, attributeValue);
            } else {
                attributeValue = {
                    type: 'Literal',
                    value: String(value)
                };
            }
            /** @type {JsxAttribute} */ const jsxAttribute = {
                type: 'JSXAttribute',
                name: state.createJsxAttributeName(attribute.name),
                value: attributeValue
            };
            state.inherit(attribute, jsxAttribute);
            jsxAttributes.push(jsxAttribute);
        } else {
            const estree = attribute.data && attribute.data.estree;
            const comments = estree && estree.comments || [];
            /** @type {JsxSpreadAttribute['argument'] | undefined} */ let argumentValue;
            if (estree) {
                state.comments.push(...comments);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["attachComments"])(estree, estree.comments);
                // Should exist.
                /* c8 ignore next 10 */ argumentValue = estree.body[0] && estree.body[0].type === 'ExpressionStatement' && estree.body[0].expression && estree.body[0].expression.type === 'ObjectExpression' && estree.body[0].expression.properties && estree.body[0].expression.properties[0] && estree.body[0].expression.properties[0].type === 'SpreadElement' && estree.body[0].expression.properties[0].argument || undefined;
            }
            /** @type {JsxSpreadAttribute} */ const jsxAttribute = {
                type: 'JSXSpreadAttribute',
                argument: argumentValue || {
                    type: 'ObjectExpression',
                    properties: []
                }
            };
            state.inherit(attribute, jsxAttribute);
            jsxAttributes.push(jsxAttribute);
        }
    }
    // Restore parent schema.
    state.schema = parentSchema;
    /** @type {JsxElement | JsxFragment} */ const result = node.name ? {
        type: 'JSXElement',
        openingElement: {
            type: 'JSXOpeningElement',
            attributes: jsxAttributes,
            name: state.createJsxElementName(node.name),
            selfClosing: children.length === 0
        },
        closingElement: children.length > 0 ? {
            type: 'JSXClosingElement',
            name: state.createJsxElementName(node.name)
        } : null,
        children
    } : {
        type: 'JSXFragment',
        openingFragment: {
            type: 'JSXOpeningFragment'
        },
        closingFragment: {
            type: 'JSXClosingFragment'
        },
        children
    };
    state.inherit(node, result);
    return result;
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/mdxjs-esm.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {MdxjsEsmHast as MdxjsEsm} from 'mdast-util-mdxjs-esm'
 * @import {State} from 'hast-util-to-estree'
 */ __turbopack_esm__({
    "mdxjsEsm": (()=>mdxjsEsm)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-util-attach-comments/lib/index.js [app-rsc] (ecmascript)");
;
function mdxjsEsm(node, state) {
    const estree = node.data && node.data.estree;
    const comments = estree && estree.comments || [];
    if (estree) {
        state.comments.push(...comments);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["attachComments"])(estree, comments);
        state.esm.push(...estree.body);
    }
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/root.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   JSXElement as JsxElement,
 *   JSXExpressionContainer as JsxExpressionContainer,
 *   JSXFragment as JsxFragment,
 *   JSXSpreadChild as JsxSpreadChild,
 *   JSXText as JsxText,
 * } from 'estree-jsx'
 * @import {State} from 'hast-util-to-estree'
 * @import {Root as HastRoot} from 'hast'
 */ __turbopack_esm__({
    "root": (()=>root)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-whitespace/lib/index.js [app-rsc] (ecmascript)");
;
function root(node, state) {
    const children = state.all(node);
    /** @type {Array<JsxElement | JsxExpressionContainer | JsxFragment | JsxSpreadChild | JsxText>} */ const cleanChildren = [];
    let index = -1;
    /** @type {Array<JsxElement | JsxExpressionContainer | JsxFragment | JsxSpreadChild | JsxText> | undefined} */ let queue;
    // Remove surrounding whitespace nodes from the fragment.
    while(++index < children.length){
        const child = children[index];
        if (child.type === 'JSXExpressionContainer' && child.expression.type === 'Literal' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["whitespace"])(String(child.expression.value))) {
            if (queue) queue.push(child);
        } else {
            if (queue) cleanChildren.push(...queue);
            cleanChildren.push(child);
            queue = [];
        }
    }
    /** @type {JsxFragment} */ const result = {
        type: 'JSXFragment',
        openingFragment: {
            type: 'JSXOpeningFragment'
        },
        closingFragment: {
            type: 'JSXClosingFragment'
        },
        children: cleanChildren
    };
    state.inherit(node, result);
    return result;
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/text.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {JSXExpressionContainer as JsxExpressionContainer} from 'estree-jsx'
 * @import {Literal} from 'estree'
 * @import {State} from 'hast-util-to-estree'
 * @import {Text as HastText} from 'hast'
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "text": (()=>text)
});
'';
function text(node, state) {
    const value = String(node.value || '');
    if (value) {
        /** @type {Literal} */ const result = {
            type: 'Literal',
            value
        };
        state.inherit(node, result);
        /** @type {JsxExpressionContainer} */ const container = {
            type: 'JSXExpressionContainer',
            expression: result
        };
        state.patch(node, container);
        return container;
    }
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "handlers": (()=>handlers)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$comment$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/comment.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$element$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/element.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/mdx-expression.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$jsx$2d$element$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/mdx-jsx-element.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdxjs$2d$esm$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/mdxjs-esm.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$root$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/root.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/text.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
const handlers = {
    comment: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$comment$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["comment"],
    doctype: ignore,
    element: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$element$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["element"],
    mdxFlowExpression: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxExpression"],
    mdxJsxFlowElement: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$jsx$2d$element$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxJsxElement"],
    mdxJsxTextElement: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$jsx$2d$element$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxJsxElement"],
    mdxTextExpression: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$expression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxExpression"],
    mdxjsEsm: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdxjs$2d$esm$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mdxjsEsm"],
    root: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$root$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["root"],
    text: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["text"]
};
/**
 * Handle a node that is ignored.
 *
 * @returns {undefined}
 *   Nothing.
 */ function ignore() {}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/state.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   JSXElement as JsxElement,
 *   JSXExpressionContainer as JsxExpressionContainer,
 *   JSXFragment as JsxFragment,
 *   JSXIdentifier as JsxIdentifier,
 *   JSXMemberExpression as JsxMemberExpression,
 *   JSXNamespacedName as JsxNamespacedName,
 *   JSXSpreadChild as JsxSpreadChild,
 *   JSXText as JsxText,
 * } from 'estree-jsx'
 * @import {Comment, Directive, ModuleDeclaration, Node as EstreeNode, Statement} from 'estree'
 * @import {MdxJsxAttribute, MdxJsxAttributeValueExpression, MdxJsxExpressionAttribute} from 'mdast-util-mdx-jsx'
 * @import {Nodes as HastNodes, Parents as HastParents} from 'hast'
 * @import {Schema} from 'property-information'
 */ /**
 * @typedef {'html' | 'react'} ElementAttributeNameCase
 *   Specify casing to use for attribute names.
 *
 *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.
 *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.
 *
 * @callback Handle
 *   Turn a hast node into an estree node.
 * @param {any} node
 *   Expected hast node.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {JsxElement | JsxExpressionContainer | JsxFragment | JsxSpreadChild | JsxText | null | undefined}
 *   estree node.
 *
 * @typedef Options
 *   Configuration.
 * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']
 *   Specify casing to use for attribute names (default: `'react'`).
 *
 *   This casing is used for hast elements, not for embedded MDX JSX nodes
 *   (components that someone authored manually).
 * @property {Record<string, Handle | null | undefined> | null | undefined} [handlers={}]
 *   Custom handlers (optional).
 * @property {Space | null | undefined} [space='html']
 *   Which space the document is in (default: `'html'`).
 *
 *   When an `<svg>` element is found in the HTML space, this package already
 *   automatically switches to and from the SVG space when entering and exiting
 *   it.
 * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']
 *   Specify casing to use for property names in `style` objects (default: `'dom'`).
 *
 *   This casing is used for hast elements, not for embedded MDX JSX nodes
 *   (components that someone authored manually).
 * @property {boolean | null | undefined} [tableCellAlignToStyle=true]
 *   Turn obsolete `align` props on `td` and `th` into CSS `style` props
 *   (default: `true`).
 *
 * @typedef {'html' | 'svg'} Space
 *   Namespace.
 *
 * @typedef {'css' | 'dom'} StylePropertyNameCase
 *   Casing to use for property names in `style` objects.
 *
 *   CSS casing is for example `background-color` and `-webkit-line-clamp`.
 *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.
 *
 * @typedef State
 *   Info passed around about the current state.
 * @property {(parent: HastParents) => Array<JsxElement | JsxExpressionContainer | JsxFragment | JsxSpreadChild | JsxText>} all
 *   Transform children of a hast parent to estree.
 * @property {Array<Comment>} comments
 *   List of estree comments.
 * @property {(name: string) => JsxIdentifier | JsxNamespacedName} createJsxAttributeName
 *   Create a JSX attribute name.
 * @property {(name: string) => JsxIdentifier | JsxMemberExpression | JsxNamespacedName} createJsxElementName
 *   Create a JSX element name.
 * @property {ElementAttributeNameCase} elementAttributeNameCase
 *   Casing to use for attribute names.
 * @property {Array<Directive | ModuleDeclaration | Statement>} esm
 *   List of top-level estree nodes.
 * @property {(node: any) => JsxElement | JsxExpressionContainer | JsxFragment | JsxSpreadChild | JsxText | null | undefined} handle
 *   Transform a hast node to estree.
 * @property {(from: HastNodes | MdxJsxAttribute | MdxJsxAttributeValueExpression | MdxJsxExpressionAttribute, to: Comment | EstreeNode) => undefined} inherit
 *   Take positional info and data from `from` (use `patch` if you don’t want data).
 * @property {(from: HastNodes, to: Comment | EstreeNode) => undefined} patch
 *   Take positional info from `from` (use `inherit` if you also want data).
 * @property {Schema} schema
 *   Current schema.
 * @property {StylePropertyNameCase} stylePropertyNameCase
 *   Casing to use for property names in `style` objects.
 * @property {boolean} tableCellAlignToStyle
 *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.
 */ __turbopack_esm__({
    "createState": (()=>createState)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$zwitch$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/zwitch/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/handlers/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-position/lib/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
const own = {}.hasOwnProperty;
// `react-dom` triggers a warning for *any* white space in tables.
// To follow GFM, `mdast-util-to-hast` injects line endings between elements.
// Other tools might do so too, but they don’t do here, so we remove all of
// that.
//
// See: <https://github.com/facebook/react/pull/7081>.
// See: <https://github.com/facebook/react/pull/7515>.
// See: <https://github.com/remarkjs/remark-react/issues/64>.
// See: <https://github.com/rehypejs/rehype-react/pull/29>.
// See: <https://github.com/rehypejs/rehype-react/pull/32>.
// See: <https://github.com/rehypejs/rehype-react/pull/45>.
// See: <https://github.com/mdx-js/mdx/issues/2000>
const tableElements = new Set([
    'table',
    'tbody',
    'thead',
    'tfoot',
    'tr'
]);
function createState(options) {
    /** @type {Handle} */ const one = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$zwitch$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["zwitch"])('type', {
        invalid,
        unknown,
        handlers: {
            ...__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["handlers"],
            ...options.handlers
        }
    });
    return {
        // Current space.
        elementAttributeNameCase: options.elementAttributeNameCase || 'react',
        schema: options.space === 'svg' ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["svg"] : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["html"],
        stylePropertyNameCase: options.stylePropertyNameCase || 'dom',
        tableCellAlignToStyle: options.tableCellAlignToStyle !== false,
        // Results.
        comments: [],
        esm: [],
        // Useful functions.
        all,
        createJsxAttributeName,
        createJsxElementName,
        handle,
        inherit,
        patch
    };
    "TURBOPACK unreachable";
    /**
   * @this {State}
   * @param {any} node
   * @returns {JsxElement | JsxExpressionContainer | JsxFragment | JsxSpreadChild | JsxText | null | undefined}
   */ function handle(node) {
        return one(node, this);
    }
}
/**
 * Crash on an invalid value.
 *
 * @param {unknown} value
 *   Non-node.
 * @returns {never}
 *   Nothing (crashes).
 */ function invalid(value) {
    throw new Error('Cannot handle value `' + value + '`, expected node');
}
/**
 * Crash on an unknown node.
 *
 * @param {unknown} node
 *   Unknown node.
 * @returns {never}
 *   Nothing (crashes).
 */ function unknown(node) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node && typeof node === 'object');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])('type' in node);
    throw new Error('Cannot handle unknown node `' + node.type + '`');
}
/**
 * @this {State} state
 *   Info passed around about the current state.
 * @param {HastParents} parent
 *   hast node whose children to transform.
 * @returns {Array<JsxElement | JsxExpressionContainer | JsxFragment | JsxSpreadChild | JsxText>}
 *   estree nodes.
 */ function all(parent) {
    const children = parent.children || [];
    let index = -1;
    /** @type {Array<JsxElement | JsxExpressionContainer | JsxFragment | JsxSpreadChild | JsxText>} */ const results = [];
    const ignoreLineBreak = this.schema.space === 'html' && parent.type === 'element' && tableElements.has(parent.tagName.toLowerCase());
    while(++index < children.length){
        const child = children[index];
        if (ignoreLineBreak && child.type === 'text' && child.value === '\n') {
            continue;
        }
        const result = this.handle(child);
        if (Array.isArray(result)) {
            results.push(...result);
        } else if (result) {
            results.push(result);
        }
    }
    return results;
}
/**
 * Take positional info and data from `hast`.
 *
 * Use `patch` if you don’t want data.
 *
 * @param {HastNodes | MdxJsxAttribute | MdxJsxAttributeValueExpression | MdxJsxExpressionAttribute} from
 *   hast node to take positional info and data from.
 * @param {Comment | EstreeNode} to
 *   estree node to add positional info and data to.
 * @returns {undefined}
 *   Nothing.
 */ function inherit(from, to) {
    const left = from.data;
    /** @type {Record<string, unknown> | undefined} */ let right;
    /** @type {string} */ let key;
    patch(from, to);
    if (left) {
        for(key in left){
            if (own.call(left, key) && key !== 'estree') {
                if (!right) right = {};
                right[key] = left[key];
            }
        }
        if (right) {
            // @ts-expect-error `esast` extension.
            to.data = right;
        }
    }
}
/**
 * Take positional info from `from`.
 *
 * Use `inherit` if you also want data.
 *
 * @param {HastNodes | MdxJsxAttribute | MdxJsxAttributeValueExpression | MdxJsxExpressionAttribute} from
 *   hast node to take positional info from.
 * @param {Comment | EstreeNode} to
 *   estree node to add positional info to.
 * @returns {undefined}
 *   Nothing.
 */ function patch(from, to) {
    const p = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["position"])(from);
    if (p && p.start.offset !== undefined && p.end.offset !== undefined) {
        // @ts-expect-error acorn-style.
        to.start = p.start.offset;
        // @ts-expect-error acorn-style.
        to.end = p.end.offset;
        to.loc = {
            start: {
                line: p.start.line,
                column: p.start.column - 1
            },
            end: {
                line: p.end.line,
                column: p.end.column - 1
            }
        };
        to.range = [
            p.start.offset,
            p.end.offset
        ];
    }
}
/**
 * Create a JSX attribute name.
 *
 * @param {string} name
 * @returns {JsxIdentifier | JsxNamespacedName}
 */ function createJsxAttributeName(name) {
    const node = createJsxNameFromString(name);
    // MDX never generates this.
    /* c8 ignore next 3 */ if (node.type === 'JSXMemberExpression') {
        throw new Error('Member expressions in attribute names are not supported');
    }
    return node;
}
/**
 * Create a JSX element name.
 *
 * @param {string} name
 * @returns {JsxIdentifier | JsxMemberExpression | JsxNamespacedName}
 */ function createJsxElementName(name) {
    return createJsxNameFromString(name);
}
/**
 * Create a JSX name from a string.
 *
 * @param {string} name
 *   Name.
 * @returns {JsxIdentifier | JsxMemberExpression | JsxNamespacedName}
 *   Node.
 */ function createJsxNameFromString(name) {
    if (name.includes('.')) {
        const names = name.split('.');
        let part = names.shift();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(part, 'Expected `part` to be defined');
        /** @type {JsxIdentifier | JsxMemberExpression} */ let node = {
            type: 'JSXIdentifier',
            name: part
        };
        while(part = names.shift()){
            node = {
                type: 'JSXMemberExpression',
                object: node,
                property: {
                    type: 'JSXIdentifier',
                    name: part
                }
            };
        }
        return node;
    }
    if (name.includes(':')) {
        const parts = name.split(':');
        return {
            type: 'JSXNamespacedName',
            namespace: {
                type: 'JSXIdentifier',
                name: parts[0]
            },
            name: {
                type: 'JSXIdentifier',
                name: parts[1]
            }
        };
    }
    return {
        type: 'JSXIdentifier',
        name
    };
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {} from 'mdast-util-mdx-expression'
 * @import {} from 'mdast-util-mdx-jsx'
 * @import {} from 'mdast-util-mdxjs-esm'
 * @import {ExpressionStatement, Program} from 'estree'
 * @import {Options} from 'hast-util-to-estree'
 * @import {Nodes as HastNodes} from 'hast'
 */ __turbopack_esm__({
    "toEstree": (()=>toEstree)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$state$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/state.js [app-rsc] (ecmascript)");
;
function toEstree(tree, options) {
    const state = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$state$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createState"])(options || {});
    let result = state.handle(tree);
    const body = state.esm;
    if (result) {
        if (result.type !== 'JSXFragment' && result.type !== 'JSXElement') {
            result = {
                type: 'JSXFragment',
                openingFragment: {
                    type: 'JSXOpeningFragment'
                },
                closingFragment: {
                    type: 'JSXClosingFragment'
                },
                children: [
                    result
                ]
            };
            state.patch(tree, result);
        }
        /** @type {ExpressionStatement} */ const statement = {
            type: 'ExpressionStatement',
            expression: result
        };
        state.patch(tree, statement);
        body.push(statement);
    }
    /** @type {Program} */ const program = {
        type: 'Program',
        body,
        sourceType: 'module',
        comments: state.comments
    };
    state.patch(tree, program);
    return program;
}
}}),
"[project]/apps/website/docs/node_modules/inline-style-parser/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
// http://www.w3.org/TR/CSS21/grammar.html
// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027
var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
var NEWLINE_REGEX = /\n/g;
var WHITESPACE_REGEX = /^\s*/;
// declaration
var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
var COLON_REGEX = /^:\s*/;
var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
var SEMICOLON_REGEX = /^[;\s]*/;
// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill
var TRIM_REGEX = /^\s+|\s+$/g;
// strings
var NEWLINE = '\n';
var FORWARD_SLASH = '/';
var ASTERISK = '*';
var EMPTY_STRING = '';
// types
var TYPE_COMMENT = 'comment';
var TYPE_DECLARATION = 'declaration';
/**
 * @param {String} style
 * @param {Object} [options]
 * @return {Object[]}
 * @throws {TypeError}
 * @throws {Error}
 */ module.exports = function(style, options) {
    if (typeof style !== 'string') {
        throw new TypeError('First argument must be a string');
    }
    if (!style) return [];
    options = options || {};
    /**
   * Positional.
   */ var lineno = 1;
    var column = 1;
    /**
   * Update lineno and column based on `str`.
   *
   * @param {String} str
   */ function updatePosition(str) {
        var lines = str.match(NEWLINE_REGEX);
        if (lines) lineno += lines.length;
        var i = str.lastIndexOf(NEWLINE);
        column = ~i ? str.length - i : column + str.length;
    }
    /**
   * Mark position and patch `node.position`.
   *
   * @return {Function}
   */ function position() {
        var start = {
            line: lineno,
            column: column
        };
        return function(node) {
            node.position = new Position(start);
            whitespace();
            return node;
        };
    }
    /**
   * Store position information for a node.
   *
   * @constructor
   * @property {Object} start
   * @property {Object} end
   * @property {undefined|String} source
   */ function Position(start) {
        this.start = start;
        this.end = {
            line: lineno,
            column: column
        };
        this.source = options.source;
    }
    /**
   * Non-enumerable source string.
   */ Position.prototype.content = style;
    var errorsList = [];
    /**
   * Error `msg`.
   *
   * @param {String} msg
   * @throws {Error}
   */ function error(msg) {
        var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);
        err.reason = msg;
        err.filename = options.source;
        err.line = lineno;
        err.column = column;
        err.source = style;
        if (options.silent) {
            errorsList.push(err);
        } else {
            throw err;
        }
    }
    /**
   * Match `re` and return captures.
   *
   * @param {RegExp} re
   * @return {undefined|Array}
   */ function match(re) {
        var m = re.exec(style);
        if (!m) return;
        var str = m[0];
        updatePosition(str);
        style = style.slice(str.length);
        return m;
    }
    /**
   * Parse whitespace.
   */ function whitespace() {
        match(WHITESPACE_REGEX);
    }
    /**
   * Parse comments.
   *
   * @param {Object[]} [rules]
   * @return {Object[]}
   */ function comments(rules) {
        var c;
        rules = rules || [];
        while(c = comment()){
            if (c !== false) {
                rules.push(c);
            }
        }
        return rules;
    }
    /**
   * Parse comment.
   *
   * @return {Object}
   * @throws {Error}
   */ function comment() {
        var pos = position();
        if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;
        var i = 2;
        while(EMPTY_STRING != style.charAt(i) && (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))){
            ++i;
        }
        i += 2;
        if (EMPTY_STRING === style.charAt(i - 1)) {
            return error('End of comment missing');
        }
        var str = style.slice(2, i - 2);
        column += 2;
        updatePosition(str);
        style = style.slice(i);
        column += 2;
        return pos({
            type: TYPE_COMMENT,
            comment: str
        });
    }
    /**
   * Parse declaration.
   *
   * @return {Object}
   * @throws {Error}
   */ function declaration() {
        var pos = position();
        // prop
        var prop = match(PROPERTY_REGEX);
        if (!prop) return;
        comment();
        // :
        if (!match(COLON_REGEX)) return error("property missing ':'");
        // val
        var val = match(VALUE_REGEX);
        var ret = pos({
            type: TYPE_DECLARATION,
            property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
            value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING
        });
        // ;
        match(SEMICOLON_REGEX);
        return ret;
    }
    /**
   * Parse declarations.
   *
   * @return {Object[]}
   */ function declarations() {
        var decls = [];
        comments(decls);
        // declarations
        var decl;
        while(decl = declaration()){
            if (decl !== false) {
                decls.push(decl);
                comments(decls);
            }
        }
        return decls;
    }
    whitespace();
    return declarations();
};
/**
 * Trim `str`.
 *
 * @param {String} str
 * @return {String}
 */ function trim(str) {
    return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
}
}}),
"[project]/apps/website/docs/node_modules/style-to-object/cjs/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = StyleToObject;
var inline_style_parser_1 = __importDefault(__turbopack_require__("[project]/apps/website/docs/node_modules/inline-style-parser/index.js [app-rsc] (ecmascript)"));
/**
 * Parses inline style to object.
 *
 * @param style - Inline style.
 * @param iterator - Iterator.
 * @returns - Style object or null.
 *
 * @example Parsing inline style to object:
 *
 * ```js
 * import parse from 'style-to-object';
 * parse('line-height: 42;'); // { 'line-height': '42' }
 * ```
 */ function StyleToObject(style, iterator) {
    var styleObject = null;
    if (!style || typeof style !== 'string') {
        return styleObject;
    }
    var declarations = (0, inline_style_parser_1.default)(style);
    var hasIterator = typeof iterator === 'function';
    declarations.forEach(function(declaration) {
        if (declaration.type !== 'declaration') {
            return;
        }
        var property = declaration.property, value = declaration.value;
        if (hasIterator) {
            iterator(property, value, declaration);
        } else if (value) {
            styleObject = styleObject || {};
            styleObject[property] = value;
        }
    });
    return styleObject;
} //# sourceMappingURL=index.js.map
}}),
"[project]/apps/website/docs/node_modules/style-to-object/esm/index.mjs [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$style$2d$to$2d$object$2f$cjs$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/style-to-object/cjs/index.js [app-rsc] (ecmascript)");
;
const __TURBOPACK__default__export__ = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$style$2d$to$2d$object$2f$cjs$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].default || __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$style$2d$to$2d$object$2f$cjs$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"];
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/util/schema.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('./info.js').Info} Info
 * @typedef {Record<string, Info>} Properties
 * @typedef {Record<string, string>} Normal
 */ __turbopack_esm__({
    "Schema": (()=>Schema)
});
class Schema {
    /**
   * @constructor
   * @param {Properties} property
   * @param {Normal} normal
   * @param {string} [space]
   */ constructor(property, normal, space){
        this.property = property;
        this.normal = normal;
        if (space) {
            this.space = space;
        }
    }
}
/** @type {Properties} */ Schema.prototype.property = {};
/** @type {Normal} */ Schema.prototype.normal = {};
/** @type {string|null} */ Schema.prototype.space = null;
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/util/merge.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 */ __turbopack_esm__({
    "merge": (()=>merge)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$schema$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/schema.js [app-rsc] (ecmascript)");
;
function merge(definitions, space) {
    /** @type {Properties} */ const property = {};
    /** @type {Normal} */ const normal = {};
    let index = -1;
    while(++index < definitions.length){
        Object.assign(property, definitions[index].property);
        Object.assign(normal, definitions[index].normal);
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$schema$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Schema"](property, normal, space);
}
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/util/types.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "boolean": (()=>boolean),
    "booleanish": (()=>booleanish),
    "commaOrSpaceSeparated": (()=>commaOrSpaceSeparated),
    "commaSeparated": (()=>commaSeparated),
    "number": (()=>number),
    "overloadedBoolean": (()=>overloadedBoolean),
    "spaceSeparated": (()=>spaceSeparated)
});
let powers = 0;
const boolean = increment();
const booleanish = increment();
const overloadedBoolean = increment();
const number = increment();
const spaceSeparated = increment();
const commaSeparated = increment();
const commaOrSpaceSeparated = increment();
function increment() {
    return 2 ** ++powers;
}
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/util/info.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Info": (()=>Info)
});
class Info {
    /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   */ constructor(property, attribute){
        /** @type {string} */ this.property = property;
        /** @type {string} */ this.attribute = attribute;
    }
}
/** @type {string|null} */ Info.prototype.space = null;
Info.prototype.boolean = false;
Info.prototype.booleanish = false;
Info.prototype.overloadedBoolean = false;
Info.prototype.number = false;
Info.prototype.commaSeparated = false;
Info.prototype.spaceSeparated = false;
Info.prototype.commaOrSpaceSeparated = false;
Info.prototype.mustUseProperty = false;
Info.prototype.defined = false;
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/util/defined-info.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "DefinedInfo": (()=>DefinedInfo)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$info$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/info.js [app-rsc] (ecmascript)");
;
;
/** @type {Array<keyof types>} */ // @ts-expect-error: hush.
const checks = Object.keys(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__);
class DefinedInfo extends __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$info$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Info"] {
    /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */ constructor(property, attribute, mask, space){
        let index = -1;
        super(property, attribute);
        mark(this, 'space', space);
        if (typeof mask === 'number') {
            while(++index < checks.length){
                const check = checks[index];
                mark(this, checks[index], (mask & __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[check]) === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[check]);
            }
        }
    }
}
DefinedInfo.prototype.defined = true;
/**
 * @param {DefinedInfo} values
 * @param {string} key
 * @param {unknown} value
 */ function mark(values, key, value) {
    if (value) {
        // @ts-expect-error: assume `value` matches the expected value of `key`.
        values[key] = value;
    }
}
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/normalize.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @param {string} value
 * @returns {string}
 */ __turbopack_esm__({
    "normalize": (()=>normalize)
});
function normalize(value) {
    return value.toLowerCase();
}
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/util/create.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 *
 * @typedef {Record<string, string>} Attributes
 *
 * @typedef {Object} Definition
 * @property {Record<string, number|null>} properties
 * @property {(attributes: Attributes, property: string) => string} transform
 * @property {string} [space]
 * @property {Attributes} [attributes]
 * @property {Array<string>} [mustUseProperty]
 */ __turbopack_esm__({
    "create": (()=>create)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$defined$2d$info$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/defined-info.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$normalize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/normalize.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$schema$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/schema.js [app-rsc] (ecmascript)");
;
;
;
const own = {}.hasOwnProperty;
function create(definition) {
    /** @type {Properties} */ const property = {};
    /** @type {Normal} */ const normal = {};
    /** @type {string} */ let prop;
    for(prop in definition.properties){
        if (own.call(definition.properties, prop)) {
            const value = definition.properties[prop];
            const info = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$defined$2d$info$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DefinedInfo"](prop, definition.transform(definition.attributes || {}, prop), value, definition.space);
            if (definition.mustUseProperty && definition.mustUseProperty.includes(prop)) {
                info.mustUseProperty = true;
            }
            property[prop] = info;
            normal[(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$normalize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalize"])(prop)] = prop;
            normal[(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$normalize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalize"])(info.attribute)] = prop;
        }
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$schema$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Schema"](property, normal, definition.space);
}
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/xml.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "xml": (()=>xml)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/create.js [app-rsc] (ecmascript)");
;
const xml = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["create"])({
    space: 'xml',
    transform (_, prop) {
        return 'xml:' + prop.slice(3).toLowerCase();
    },
    properties: {
        xmlLang: null,
        xmlBase: null,
        xmlSpace: null
    }
});
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/xlink.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "xlink": (()=>xlink)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/create.js [app-rsc] (ecmascript)");
;
const xlink = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["create"])({
    space: 'xlink',
    transform (_, prop) {
        return 'xlink:' + prop.slice(5).toLowerCase();
    },
    properties: {
        xLinkActuate: null,
        xLinkArcRole: null,
        xLinkHref: null,
        xLinkRole: null,
        xLinkShow: null,
        xLinkTitle: null,
        xLinkType: null
    }
});
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/util/case-sensitive-transform.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @param {Record<string, string>} attributes
 * @param {string} attribute
 * @returns {string}
 */ __turbopack_esm__({
    "caseSensitiveTransform": (()=>caseSensitiveTransform)
});
function caseSensitiveTransform(attributes, attribute) {
    return attribute in attributes ? attributes[attribute] : attribute;
}
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/util/case-insensitive-transform.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "caseInsensitiveTransform": (()=>caseInsensitiveTransform)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$sensitive$2d$transform$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/case-sensitive-transform.js [app-rsc] (ecmascript)");
;
function caseInsensitiveTransform(attributes, property) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$sensitive$2d$transform$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["caseSensitiveTransform"])(attributes, property.toLowerCase());
}
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/xmlns.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "xmlns": (()=>xmlns)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/create.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$insensitive$2d$transform$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/case-insensitive-transform.js [app-rsc] (ecmascript)");
;
;
const xmlns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["create"])({
    space: 'xmlns',
    attributes: {
        xmlnsxlink: 'xmlns:xlink'
    },
    transform: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$insensitive$2d$transform$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["caseInsensitiveTransform"],
    properties: {
        xmlns: null,
        xmlnsXLink: null
    }
});
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/aria.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "aria": (()=>aria)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/create.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/types.js [app-rsc] (ecmascript)");
;
;
const aria = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["create"])({
    transform (_, prop) {
        return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase();
    },
    properties: {
        ariaActiveDescendant: null,
        ariaAtomic: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaAutoComplete: null,
        ariaBusy: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaChecked: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaColCount: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaColIndex: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaColSpan: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaControls: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        ariaCurrent: null,
        ariaDescribedBy: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        ariaDetails: null,
        ariaDisabled: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaDropEffect: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        ariaErrorMessage: null,
        ariaExpanded: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaFlowTo: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        ariaGrabbed: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaHasPopup: null,
        ariaHidden: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaInvalid: null,
        ariaKeyShortcuts: null,
        ariaLabel: null,
        ariaLabelledBy: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        ariaLevel: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaLive: null,
        ariaModal: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaMultiLine: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaMultiSelectable: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaOrientation: null,
        ariaOwns: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        ariaPlaceholder: null,
        ariaPosInSet: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaPressed: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaReadOnly: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaRelevant: null,
        ariaRequired: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaRoleDescription: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        ariaRowCount: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaRowIndex: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaRowSpan: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaSelected: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaSetSize: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaSort: null,
        ariaValueMax: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaValueMin: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaValueNow: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaValueText: null,
        role: null
    }
});
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/html.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "html": (()=>html)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/create.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$insensitive$2d$transform$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/case-insensitive-transform.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/types.js [app-rsc] (ecmascript)");
;
;
;
const html = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["create"])({
    space: 'html',
    attributes: {
        acceptcharset: 'accept-charset',
        classname: 'class',
        htmlfor: 'for',
        httpequiv: 'http-equiv'
    },
    transform: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$insensitive$2d$transform$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["caseInsensitiveTransform"],
    mustUseProperty: [
        'checked',
        'multiple',
        'muted',
        'selected'
    ],
    properties: {
        // Standard Properties.
        abbr: null,
        accept: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaSeparated"],
        acceptCharset: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        accessKey: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        action: null,
        allow: null,
        allowFullScreen: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        allowPaymentRequest: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        allowUserMedia: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        alt: null,
        as: null,
        async: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        autoCapitalize: null,
        autoComplete: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        autoFocus: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        autoPlay: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        blocking: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        capture: null,
        charSet: null,
        checked: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        cite: null,
        className: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        cols: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        colSpan: null,
        content: null,
        contentEditable: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        controls: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        controlsList: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        coords: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"] | __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaSeparated"],
        crossOrigin: null,
        data: null,
        dateTime: null,
        decoding: null,
        default: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        defer: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        dir: null,
        dirName: null,
        disabled: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        download: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["overloadedBoolean"],
        draggable: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        encType: null,
        enterKeyHint: null,
        fetchPriority: null,
        form: null,
        formAction: null,
        formEncType: null,
        formMethod: null,
        formNoValidate: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        formTarget: null,
        headers: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        height: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        hidden: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        high: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        href: null,
        hrefLang: null,
        htmlFor: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        httpEquiv: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        id: null,
        imageSizes: null,
        imageSrcSet: null,
        inert: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        inputMode: null,
        integrity: null,
        is: null,
        isMap: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        itemId: null,
        itemProp: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        itemRef: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        itemScope: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        itemType: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        kind: null,
        label: null,
        lang: null,
        language: null,
        list: null,
        loading: null,
        loop: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        low: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        manifest: null,
        max: null,
        maxLength: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        media: null,
        method: null,
        min: null,
        minLength: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        multiple: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        muted: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        name: null,
        nonce: null,
        noModule: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        noValidate: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        onAbort: null,
        onAfterPrint: null,
        onAuxClick: null,
        onBeforeMatch: null,
        onBeforePrint: null,
        onBeforeToggle: null,
        onBeforeUnload: null,
        onBlur: null,
        onCancel: null,
        onCanPlay: null,
        onCanPlayThrough: null,
        onChange: null,
        onClick: null,
        onClose: null,
        onContextLost: null,
        onContextMenu: null,
        onContextRestored: null,
        onCopy: null,
        onCueChange: null,
        onCut: null,
        onDblClick: null,
        onDrag: null,
        onDragEnd: null,
        onDragEnter: null,
        onDragExit: null,
        onDragLeave: null,
        onDragOver: null,
        onDragStart: null,
        onDrop: null,
        onDurationChange: null,
        onEmptied: null,
        onEnded: null,
        onError: null,
        onFocus: null,
        onFormData: null,
        onHashChange: null,
        onInput: null,
        onInvalid: null,
        onKeyDown: null,
        onKeyPress: null,
        onKeyUp: null,
        onLanguageChange: null,
        onLoad: null,
        onLoadedData: null,
        onLoadedMetadata: null,
        onLoadEnd: null,
        onLoadStart: null,
        onMessage: null,
        onMessageError: null,
        onMouseDown: null,
        onMouseEnter: null,
        onMouseLeave: null,
        onMouseMove: null,
        onMouseOut: null,
        onMouseOver: null,
        onMouseUp: null,
        onOffline: null,
        onOnline: null,
        onPageHide: null,
        onPageShow: null,
        onPaste: null,
        onPause: null,
        onPlay: null,
        onPlaying: null,
        onPopState: null,
        onProgress: null,
        onRateChange: null,
        onRejectionHandled: null,
        onReset: null,
        onResize: null,
        onScroll: null,
        onScrollEnd: null,
        onSecurityPolicyViolation: null,
        onSeeked: null,
        onSeeking: null,
        onSelect: null,
        onSlotChange: null,
        onStalled: null,
        onStorage: null,
        onSubmit: null,
        onSuspend: null,
        onTimeUpdate: null,
        onToggle: null,
        onUnhandledRejection: null,
        onUnload: null,
        onVolumeChange: null,
        onWaiting: null,
        onWheel: null,
        open: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        optimum: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        pattern: null,
        ping: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        placeholder: null,
        playsInline: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        popover: null,
        popoverTarget: null,
        popoverTargetAction: null,
        poster: null,
        preload: null,
        readOnly: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        referrerPolicy: null,
        rel: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        required: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        reversed: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        rows: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        rowSpan: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        sandbox: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        scope: null,
        scoped: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        seamless: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        selected: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        shadowRootClonable: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        shadowRootDelegatesFocus: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        shadowRootMode: null,
        shape: null,
        size: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        sizes: null,
        slot: null,
        span: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        spellCheck: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        src: null,
        srcDoc: null,
        srcLang: null,
        srcSet: null,
        start: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        step: null,
        style: null,
        tabIndex: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        target: null,
        title: null,
        translate: null,
        type: null,
        typeMustMatch: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        useMap: null,
        value: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        width: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        wrap: null,
        writingSuggestions: null,
        // Legacy.
        // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
        align: null,
        aLink: null,
        archive: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        axis: null,
        background: null,
        bgColor: null,
        border: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        borderColor: null,
        bottomMargin: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        cellPadding: null,
        cellSpacing: null,
        char: null,
        charOff: null,
        classId: null,
        clear: null,
        code: null,
        codeBase: null,
        codeType: null,
        color: null,
        compact: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        declare: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        event: null,
        face: null,
        frame: null,
        frameBorder: null,
        hSpace: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        leftMargin: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        link: null,
        longDesc: null,
        lowSrc: null,
        marginHeight: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        marginWidth: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        noResize: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        noHref: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        noShade: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        noWrap: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        object: null,
        profile: null,
        prompt: null,
        rev: null,
        rightMargin: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        rules: null,
        scheme: null,
        scrolling: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        standby: null,
        summary: null,
        text: null,
        topMargin: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        valueType: null,
        version: null,
        vAlign: null,
        vLink: null,
        vSpace: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        // Non-standard Properties.
        allowTransparency: null,
        autoCorrect: null,
        autoSave: null,
        disablePictureInPicture: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        disableRemotePlayback: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        prefix: null,
        property: null,
        results: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        security: null,
        unselectable: null
    }
});
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/svg.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "svg": (()=>svg)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/create.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$sensitive$2d$transform$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/case-sensitive-transform.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/types.js [app-rsc] (ecmascript)");
;
;
;
const svg = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["create"])({
    space: 'svg',
    attributes: {
        accentHeight: 'accent-height',
        alignmentBaseline: 'alignment-baseline',
        arabicForm: 'arabic-form',
        baselineShift: 'baseline-shift',
        capHeight: 'cap-height',
        className: 'class',
        clipPath: 'clip-path',
        clipRule: 'clip-rule',
        colorInterpolation: 'color-interpolation',
        colorInterpolationFilters: 'color-interpolation-filters',
        colorProfile: 'color-profile',
        colorRendering: 'color-rendering',
        crossOrigin: 'crossorigin',
        dataType: 'datatype',
        dominantBaseline: 'dominant-baseline',
        enableBackground: 'enable-background',
        fillOpacity: 'fill-opacity',
        fillRule: 'fill-rule',
        floodColor: 'flood-color',
        floodOpacity: 'flood-opacity',
        fontFamily: 'font-family',
        fontSize: 'font-size',
        fontSizeAdjust: 'font-size-adjust',
        fontStretch: 'font-stretch',
        fontStyle: 'font-style',
        fontVariant: 'font-variant',
        fontWeight: 'font-weight',
        glyphName: 'glyph-name',
        glyphOrientationHorizontal: 'glyph-orientation-horizontal',
        glyphOrientationVertical: 'glyph-orientation-vertical',
        hrefLang: 'hreflang',
        horizAdvX: 'horiz-adv-x',
        horizOriginX: 'horiz-origin-x',
        horizOriginY: 'horiz-origin-y',
        imageRendering: 'image-rendering',
        letterSpacing: 'letter-spacing',
        lightingColor: 'lighting-color',
        markerEnd: 'marker-end',
        markerMid: 'marker-mid',
        markerStart: 'marker-start',
        navDown: 'nav-down',
        navDownLeft: 'nav-down-left',
        navDownRight: 'nav-down-right',
        navLeft: 'nav-left',
        navNext: 'nav-next',
        navPrev: 'nav-prev',
        navRight: 'nav-right',
        navUp: 'nav-up',
        navUpLeft: 'nav-up-left',
        navUpRight: 'nav-up-right',
        onAbort: 'onabort',
        onActivate: 'onactivate',
        onAfterPrint: 'onafterprint',
        onBeforePrint: 'onbeforeprint',
        onBegin: 'onbegin',
        onCancel: 'oncancel',
        onCanPlay: 'oncanplay',
        onCanPlayThrough: 'oncanplaythrough',
        onChange: 'onchange',
        onClick: 'onclick',
        onClose: 'onclose',
        onCopy: 'oncopy',
        onCueChange: 'oncuechange',
        onCut: 'oncut',
        onDblClick: 'ondblclick',
        onDrag: 'ondrag',
        onDragEnd: 'ondragend',
        onDragEnter: 'ondragenter',
        onDragExit: 'ondragexit',
        onDragLeave: 'ondragleave',
        onDragOver: 'ondragover',
        onDragStart: 'ondragstart',
        onDrop: 'ondrop',
        onDurationChange: 'ondurationchange',
        onEmptied: 'onemptied',
        onEnd: 'onend',
        onEnded: 'onended',
        onError: 'onerror',
        onFocus: 'onfocus',
        onFocusIn: 'onfocusin',
        onFocusOut: 'onfocusout',
        onHashChange: 'onhashchange',
        onInput: 'oninput',
        onInvalid: 'oninvalid',
        onKeyDown: 'onkeydown',
        onKeyPress: 'onkeypress',
        onKeyUp: 'onkeyup',
        onLoad: 'onload',
        onLoadedData: 'onloadeddata',
        onLoadedMetadata: 'onloadedmetadata',
        onLoadStart: 'onloadstart',
        onMessage: 'onmessage',
        onMouseDown: 'onmousedown',
        onMouseEnter: 'onmouseenter',
        onMouseLeave: 'onmouseleave',
        onMouseMove: 'onmousemove',
        onMouseOut: 'onmouseout',
        onMouseOver: 'onmouseover',
        onMouseUp: 'onmouseup',
        onMouseWheel: 'onmousewheel',
        onOffline: 'onoffline',
        onOnline: 'ononline',
        onPageHide: 'onpagehide',
        onPageShow: 'onpageshow',
        onPaste: 'onpaste',
        onPause: 'onpause',
        onPlay: 'onplay',
        onPlaying: 'onplaying',
        onPopState: 'onpopstate',
        onProgress: 'onprogress',
        onRateChange: 'onratechange',
        onRepeat: 'onrepeat',
        onReset: 'onreset',
        onResize: 'onresize',
        onScroll: 'onscroll',
        onSeeked: 'onseeked',
        onSeeking: 'onseeking',
        onSelect: 'onselect',
        onShow: 'onshow',
        onStalled: 'onstalled',
        onStorage: 'onstorage',
        onSubmit: 'onsubmit',
        onSuspend: 'onsuspend',
        onTimeUpdate: 'ontimeupdate',
        onToggle: 'ontoggle',
        onUnload: 'onunload',
        onVolumeChange: 'onvolumechange',
        onWaiting: 'onwaiting',
        onZoom: 'onzoom',
        overlinePosition: 'overline-position',
        overlineThickness: 'overline-thickness',
        paintOrder: 'paint-order',
        panose1: 'panose-1',
        pointerEvents: 'pointer-events',
        referrerPolicy: 'referrerpolicy',
        renderingIntent: 'rendering-intent',
        shapeRendering: 'shape-rendering',
        stopColor: 'stop-color',
        stopOpacity: 'stop-opacity',
        strikethroughPosition: 'strikethrough-position',
        strikethroughThickness: 'strikethrough-thickness',
        strokeDashArray: 'stroke-dasharray',
        strokeDashOffset: 'stroke-dashoffset',
        strokeLineCap: 'stroke-linecap',
        strokeLineJoin: 'stroke-linejoin',
        strokeMiterLimit: 'stroke-miterlimit',
        strokeOpacity: 'stroke-opacity',
        strokeWidth: 'stroke-width',
        tabIndex: 'tabindex',
        textAnchor: 'text-anchor',
        textDecoration: 'text-decoration',
        textRendering: 'text-rendering',
        transformOrigin: 'transform-origin',
        typeOf: 'typeof',
        underlinePosition: 'underline-position',
        underlineThickness: 'underline-thickness',
        unicodeBidi: 'unicode-bidi',
        unicodeRange: 'unicode-range',
        unitsPerEm: 'units-per-em',
        vAlphabetic: 'v-alphabetic',
        vHanging: 'v-hanging',
        vIdeographic: 'v-ideographic',
        vMathematical: 'v-mathematical',
        vectorEffect: 'vector-effect',
        vertAdvY: 'vert-adv-y',
        vertOriginX: 'vert-origin-x',
        vertOriginY: 'vert-origin-y',
        wordSpacing: 'word-spacing',
        writingMode: 'writing-mode',
        xHeight: 'x-height',
        // These were camelcased in Tiny. Now lowercased in SVG 2
        playbackOrder: 'playbackorder',
        timelineBegin: 'timelinebegin'
    },
    transform: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$sensitive$2d$transform$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["caseSensitiveTransform"],
    properties: {
        about: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        accentHeight: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        accumulate: null,
        additive: null,
        alignmentBaseline: null,
        alphabetic: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        amplitude: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        arabicForm: null,
        ascent: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        attributeName: null,
        attributeType: null,
        azimuth: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        bandwidth: null,
        baselineShift: null,
        baseFrequency: null,
        baseProfile: null,
        bbox: null,
        begin: null,
        bias: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        by: null,
        calcMode: null,
        capHeight: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        className: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        clip: null,
        clipPath: null,
        clipPathUnits: null,
        clipRule: null,
        color: null,
        colorInterpolation: null,
        colorInterpolationFilters: null,
        colorProfile: null,
        colorRendering: null,
        content: null,
        contentScriptType: null,
        contentStyleType: null,
        crossOrigin: null,
        cursor: null,
        cx: null,
        cy: null,
        d: null,
        dataType: null,
        defaultAction: null,
        descent: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        diffuseConstant: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        direction: null,
        display: null,
        dur: null,
        divisor: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        dominantBaseline: null,
        download: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["boolean"],
        dx: null,
        dy: null,
        edgeMode: null,
        editable: null,
        elevation: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        enableBackground: null,
        end: null,
        event: null,
        exponent: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        externalResourcesRequired: null,
        fill: null,
        fillOpacity: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        fillRule: null,
        filter: null,
        filterRes: null,
        filterUnits: null,
        floodColor: null,
        floodOpacity: null,
        focusable: null,
        focusHighlight: null,
        fontFamily: null,
        fontSize: null,
        fontSizeAdjust: null,
        fontStretch: null,
        fontStyle: null,
        fontVariant: null,
        fontWeight: null,
        format: null,
        fr: null,
        from: null,
        fx: null,
        fy: null,
        g1: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaSeparated"],
        g2: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaSeparated"],
        glyphName: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaSeparated"],
        glyphOrientationHorizontal: null,
        glyphOrientationVertical: null,
        glyphRef: null,
        gradientTransform: null,
        gradientUnits: null,
        handler: null,
        hanging: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        hatchContentUnits: null,
        hatchUnits: null,
        height: null,
        href: null,
        hrefLang: null,
        horizAdvX: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        horizOriginX: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        horizOriginY: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        id: null,
        ideographic: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        imageRendering: null,
        initialVisibility: null,
        in: null,
        in2: null,
        intercept: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        k: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        k1: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        k2: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        k3: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        k4: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        kernelMatrix: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        kernelUnitLength: null,
        keyPoints: null,
        keySplines: null,
        keyTimes: null,
        kerning: null,
        lang: null,
        lengthAdjust: null,
        letterSpacing: null,
        lightingColor: null,
        limitingConeAngle: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        local: null,
        markerEnd: null,
        markerMid: null,
        markerStart: null,
        markerHeight: null,
        markerUnits: null,
        markerWidth: null,
        mask: null,
        maskContentUnits: null,
        maskUnits: null,
        mathematical: null,
        max: null,
        media: null,
        mediaCharacterEncoding: null,
        mediaContentEncodings: null,
        mediaSize: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        mediaTime: null,
        method: null,
        min: null,
        mode: null,
        name: null,
        navDown: null,
        navDownLeft: null,
        navDownRight: null,
        navLeft: null,
        navNext: null,
        navPrev: null,
        navRight: null,
        navUp: null,
        navUpLeft: null,
        navUpRight: null,
        numOctaves: null,
        observer: null,
        offset: null,
        onAbort: null,
        onActivate: null,
        onAfterPrint: null,
        onBeforePrint: null,
        onBegin: null,
        onCancel: null,
        onCanPlay: null,
        onCanPlayThrough: null,
        onChange: null,
        onClick: null,
        onClose: null,
        onCopy: null,
        onCueChange: null,
        onCut: null,
        onDblClick: null,
        onDrag: null,
        onDragEnd: null,
        onDragEnter: null,
        onDragExit: null,
        onDragLeave: null,
        onDragOver: null,
        onDragStart: null,
        onDrop: null,
        onDurationChange: null,
        onEmptied: null,
        onEnd: null,
        onEnded: null,
        onError: null,
        onFocus: null,
        onFocusIn: null,
        onFocusOut: null,
        onHashChange: null,
        onInput: null,
        onInvalid: null,
        onKeyDown: null,
        onKeyPress: null,
        onKeyUp: null,
        onLoad: null,
        onLoadedData: null,
        onLoadedMetadata: null,
        onLoadStart: null,
        onMessage: null,
        onMouseDown: null,
        onMouseEnter: null,
        onMouseLeave: null,
        onMouseMove: null,
        onMouseOut: null,
        onMouseOver: null,
        onMouseUp: null,
        onMouseWheel: null,
        onOffline: null,
        onOnline: null,
        onPageHide: null,
        onPageShow: null,
        onPaste: null,
        onPause: null,
        onPlay: null,
        onPlaying: null,
        onPopState: null,
        onProgress: null,
        onRateChange: null,
        onRepeat: null,
        onReset: null,
        onResize: null,
        onScroll: null,
        onSeeked: null,
        onSeeking: null,
        onSelect: null,
        onShow: null,
        onStalled: null,
        onStorage: null,
        onSubmit: null,
        onSuspend: null,
        onTimeUpdate: null,
        onToggle: null,
        onUnload: null,
        onVolumeChange: null,
        onWaiting: null,
        onZoom: null,
        opacity: null,
        operator: null,
        order: null,
        orient: null,
        orientation: null,
        origin: null,
        overflow: null,
        overlay: null,
        overlinePosition: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        overlineThickness: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        paintOrder: null,
        panose1: null,
        path: null,
        pathLength: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        patternContentUnits: null,
        patternTransform: null,
        patternUnits: null,
        phase: null,
        ping: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        pitch: null,
        playbackOrder: null,
        pointerEvents: null,
        points: null,
        pointsAtX: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        pointsAtY: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        pointsAtZ: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        preserveAlpha: null,
        preserveAspectRatio: null,
        primitiveUnits: null,
        propagate: null,
        property: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        r: null,
        radius: null,
        referrerPolicy: null,
        refX: null,
        refY: null,
        rel: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        rev: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        renderingIntent: null,
        repeatCount: null,
        repeatDur: null,
        requiredExtensions: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        requiredFeatures: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        requiredFonts: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        requiredFormats: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        resource: null,
        restart: null,
        result: null,
        rotate: null,
        rx: null,
        ry: null,
        scale: null,
        seed: null,
        shapeRendering: null,
        side: null,
        slope: null,
        snapshotTime: null,
        specularConstant: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        specularExponent: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        spreadMethod: null,
        spacing: null,
        startOffset: null,
        stdDeviation: null,
        stemh: null,
        stemv: null,
        stitchTiles: null,
        stopColor: null,
        stopOpacity: null,
        strikethroughPosition: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        strikethroughThickness: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        string: null,
        stroke: null,
        strokeDashArray: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        strokeDashOffset: null,
        strokeLineCap: null,
        strokeLineJoin: null,
        strokeMiterLimit: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        strokeOpacity: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        strokeWidth: null,
        style: null,
        surfaceScale: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        syncBehavior: null,
        syncBehaviorDefault: null,
        syncMaster: null,
        syncTolerance: null,
        syncToleranceDefault: null,
        systemLanguage: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        tabIndex: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        tableValues: null,
        target: null,
        targetX: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        targetY: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        textAnchor: null,
        textDecoration: null,
        textRendering: null,
        textLength: null,
        timelineBegin: null,
        title: null,
        transformBehavior: null,
        type: null,
        typeOf: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        to: null,
        transform: null,
        transformOrigin: null,
        u1: null,
        u2: null,
        underlinePosition: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        underlineThickness: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        unicode: null,
        unicodeBidi: null,
        unicodeRange: null,
        unitsPerEm: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        values: null,
        vAlphabetic: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        vMathematical: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        vectorEffect: null,
        vHanging: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        vIdeographic: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        version: null,
        vertAdvY: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        vertOriginX: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        vertOriginY: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        viewBox: null,
        viewTarget: null,
        visibility: null,
        width: null,
        widths: null,
        wordSpacing: null,
        writingMode: null,
        x: null,
        x1: null,
        x2: null,
        xChannelSelector: null,
        xHeight: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["number"],
        y: null,
        y1: null,
        y2: null,
        yChannelSelector: null,
        z: null,
        zoomAndPan: null
    }
});
}}),
"[project]/apps/website/docs/node_modules/property-information/index.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('./lib/util/info.js').Info} Info
 * @typedef {import('./lib/util/schema.js').Schema} Schema
 */ __turbopack_esm__({
    "html": (()=>html),
    "svg": (()=>svg)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$merge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/merge.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$xml$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/xml.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$xlink$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/xlink.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$xmlns$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/xmlns.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$aria$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/aria.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/html.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$svg$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/svg.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
const html = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$merge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["merge"])([
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$xml$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["xml"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$xlink$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["xlink"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$xmlns$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["xmlns"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$aria$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["aria"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["html"]
], 'html');
const svg = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$merge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["merge"])([
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$xml$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["xml"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$xlink$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["xlink"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$xmlns$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["xmlns"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$aria$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["aria"],
    __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$svg$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["svg"]
], 'svg');
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/find.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('./util/schema.js').Schema} Schema
 */ __turbopack_esm__({
    "find": (()=>find)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$normalize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/normalize.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$info$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/info.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$defined$2d$info$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/util/defined-info.js [app-rsc] (ecmascript)");
;
;
;
const valid = /^data[-\w.:]+$/i;
const dash = /-[a-z]/g;
const cap = /[A-Z]/g;
function find(schema, value) {
    const normal = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$normalize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalize"])(value);
    let prop = value;
    let Type = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$info$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Info"];
    if (normal in schema.normal) {
        return schema.property[schema.normal[normal]];
    }
    if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {
        // Attribute or property.
        if (value.charAt(4) === '-') {
            // Turn it into a property.
            const rest = value.slice(5).replace(dash, camelcase);
            prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
        } else {
            // Turn it into an attribute.
            const rest = value.slice(4);
            if (!dash.test(rest)) {
                let dashes = rest.replace(cap, kebab);
                if (dashes.charAt(0) !== '-') {
                    dashes = '-' + dashes;
                }
                value = 'data' + dashes;
            }
        }
        Type = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$defined$2d$info$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DefinedInfo"];
    }
    return new Type(prop, value);
}
/**
 * @param {string} $0
 * @returns {string}
 */ function kebab($0) {
    return '-' + $0.toLowerCase();
}
/**
 * @param {string} $0
 * @returns {string}
 */ function camelcase($0) {
    return $0.charAt(1).toUpperCase();
}
}}),
"[project]/apps/website/docs/node_modules/property-information/lib/hast-to-react.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * `hast` is close to `React`, but differs in a couple of cases.
 *
 * To get a React property from a hast property, check if it is in
 * `hastToReact`, if it is, then use the corresponding value,
 * otherwise, use the hast property.
 *
 * @type {Record<string, string>}
 */ __turbopack_esm__({
    "hastToReact": (()=>hastToReact)
});
const hastToReact = {
    classId: 'classID',
    dataType: 'datatype',
    itemId: 'itemID',
    strokeDashArray: 'strokeDasharray',
    strokeDashOffset: 'strokeDashoffset',
    strokeLineCap: 'strokeLinecap',
    strokeLineJoin: 'strokeLinejoin',
    strokeMiterLimit: 'strokeMiterlimit',
    typeOf: 'typeof',
    xLinkActuate: 'xlinkActuate',
    xLinkArcRole: 'xlinkArcrole',
    xLinkHref: 'xlinkHref',
    xLinkRole: 'xlinkRole',
    xLinkShow: 'xlinkShow',
    xLinkTitle: 'xlinkTitle',
    xLinkType: 'xlinkType',
    xmlnsXLink: 'xmlnsXlink'
};
}}),
"[project]/apps/website/docs/node_modules/space-separated-tokens/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Parse space-separated tokens to an array of strings.
 *
 * @param {string} value
 *   Space-separated tokens.
 * @returns {Array<string>}
 *   List of tokens.
 */ __turbopack_esm__({
    "parse": (()=>parse),
    "stringify": (()=>stringify)
});
function parse(value) {
    const input = String(value || '').trim();
    return input ? input.split(/[ \t\n\r\f]+/g) : [];
}
function stringify(values) {
    return values.join(' ').trim();
}
}}),
"[project]/apps/website/docs/node_modules/comma-separated-tokens/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef Options
 *   Configuration for `stringify`.
 * @property {boolean} [padLeft=true]
 *   Whether to pad a space before a token.
 * @property {boolean} [padRight=false]
 *   Whether to pad a space after a token.
 */ /**
 * @typedef {Options} StringifyOptions
 *   Please use `StringifyOptions` instead.
 */ /**
 * Parse comma-separated tokens to an array.
 *
 * @param {string} value
 *   Comma-separated tokens.
 * @returns {Array<string>}
 *   List of tokens.
 */ __turbopack_esm__({
    "parse": (()=>parse),
    "stringify": (()=>stringify)
});
function parse(value) {
    /** @type {Array<string>} */ const tokens = [];
    const input = String(value || '');
    let index = input.indexOf(',');
    let start = 0;
    /** @type {boolean} */ let end = false;
    while(!end){
        if (index === -1) {
            index = input.length;
            end = true;
        }
        const token = input.slice(start, index).trim();
        if (token || !end) {
            tokens.push(token);
        }
        start = index + 1;
        index = input.indexOf(',', start);
    }
    return tokens;
}
function stringify(values, options) {
    const settings = options || {};
    // Ensure the last empty entry is seen.
    const input = values[values.length - 1] === '' ? [
        ...values,
        ''
    ] : values;
    return input.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();
}
}}),
"[project]/apps/website/docs/node_modules/estree-util-attach-comments/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('estree').Comment} Comment
 * @typedef {import('estree').Node} Nodes
 */ /**
 * @typedef Fields
 *   Fields.
 * @property {boolean} leading
 *   Whether it’s leading.
 * @property {boolean} trailing
 *   Whether it’s trailing.
 *
 * @typedef State
 *   Info passed around.
 * @property {Array<Comment>} comments
 *   Comments.
 * @property {number} index
 *   Index of comment.
 */ __turbopack_esm__({
    "attachComments": (()=>attachComments)
});
const own = {}.hasOwnProperty;
/** @type {Array<Comment>} */ const emptyComments = [];
function attachComments(tree, comments) {
    const list = comments ? [
        ...comments
    ].sort(compare) : emptyComments;
    if (list.length > 0) walk(tree, {
        comments: list,
        index: 0
    });
}
/**
 * Attach semistandard estree comment nodes to the tree.
 *
 * @param {Nodes} node
 *   Node.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function walk(node, state) {
    // Done, we can quit.
    if (state.index === state.comments.length) {
        return;
    }
    /** @type {Array<Nodes>} */ const children = [];
    /** @type {Array<Comment>} */ const comments = [];
    /** @type {string} */ let key;
    // Find all children of `node`
    for(key in node){
        if (own.call(node, key)) {
            /** @type {Array<Nodes> | Nodes} */ // @ts-expect-error: indexable.
            const value = node[key];
            // Ignore comments.
            if (value && typeof value === 'object' && key !== 'comments') {
                if (Array.isArray(value)) {
                    let index = -1;
                    while(++index < value.length){
                        if (value[index] && typeof value[index].type === 'string') {
                            children.push(value[index]);
                        }
                    }
                } else if (typeof value.type === 'string') {
                    children.push(value);
                }
            }
        }
    }
    // Sort the children.
    children.sort(compare);
    // Initial comments.
    comments.push(...slice(state, node, false, {
        leading: true,
        trailing: false
    }));
    let index = -1;
    while(++index < children.length){
        walk(children[index], state);
    }
    // Dangling or trailing comments.
    comments.push(...slice(state, node, true, {
        leading: false,
        trailing: children.length > 0
    }));
    if (comments.length > 0) {
        // @ts-expect-error, yes, because they’re nonstandard.
        node.comments = comments;
    }
}
/**
 * @param {State} state
 *   Info passed around.
 * @param {Nodes} node
 *   Node.
 * @param {boolean} compareEnd
 *   Whether to compare on the end (default is on start).
 * @param {Fields} fields
 *   Fields.
 * @returns {Array<Comment>}
 *   Slice from `state.comments`.
 */ function slice(state, node, compareEnd, fields) {
    /** @type {Array<Comment>} */ const result = [];
    while(state.comments[state.index] && compare(state.comments[state.index], node, compareEnd) < 1){
        result.push(Object.assign({}, state.comments[state.index++], fields));
    }
    return result;
}
/**
 * Sort two nodes (or comments).
 *
 * @param {Comment | Nodes} left
 *   A node.
 * @param {Comment | Nodes} right
 *   The other node.
 * @param {boolean | undefined} [compareEnd=false]
 *   Compare on `end` of `right`, default is to compare on `start` (default:
 *   `false`).
 * @returns {number}
 *   Sorting.
 */ function compare(left, right, compareEnd) {
    const field = compareEnd ? 'end' : 'start';
    // Offsets.
    if (left.range && right.range) {
        return left.range[0] - right.range[compareEnd ? 1 : 0];
    }
    // Points.
    if (left.loc && left.loc.start && right.loc && right.loc[field]) {
        return left.loc.start.line - right.loc[field].line || left.loc.start.column - right.loc[field].column;
    }
    // Just `start` (and `end`) on nodes.
    // Default in most parsers.
    if ('start' in left && field in right) {
        // @ts-expect-error Added by Acorn
        return left.start - right[field];
    }
    return Number.NaN;
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-whitespace/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Nodes} Nodes
 */ // HTML whitespace expression.
// See <https://infra.spec.whatwg.org/#ascii-whitespace>.
__turbopack_esm__({
    "whitespace": (()=>whitespace)
});
const re = /[ \t\n\f\r]/g;
function whitespace(thing) {
    return typeof thing === 'object' ? thing.type === 'text' ? empty(thing.value) : false : empty(thing);
}
/**
 * @param {string} value
 * @returns {boolean}
 */ function empty(value) {
    return value.replace(re, '') === '';
}
}}),
"[project]/apps/website/docs/node_modules/rehype-recma/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Root} from 'hast'
 * @import {Program} from 'estree'
 * @import {Options} from 'rehype-recma'
 */ __turbopack_esm__({
    "default": (()=>rehypeRecma)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-estree/lib/index.js [app-rsc] (ecmascript)");
;
function rehypeRecma(options) {
    /**
   * @param {Root} tree
   *   Tree (hast).
   * @returns {Program}
   *   Program (esast).
   */ return function(tree) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toEstree"])(tree, options);
    };
}
}}),
"[project]/apps/website/docs/node_modules/estree-util-scope/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Node, Pattern} from 'estree'
 * @import {Scope, Visitors} from './types.js'
 */ __turbopack_esm__({
    "createVisitors": (()=>createVisitors)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
;
function createVisitors() {
    /** @type {[topLevel: Scope, ...rest: Array<Scope>]} */ const scopes = [
        {
            block: false,
            defined: []
        }
    ];
    return {
        enter,
        exit,
        scopes
    };
    "TURBOPACK unreachable";
    /**
   * @param {Node} node
   *   Node.
   * @returns {undefined}
   *   Nothing.
   */ function enter(node) {
        // On arrow functions, create scope, add parameters.
        if (node.type === 'ArrowFunctionExpression') {
            scopes.push({
                block: false,
                defined: []
            });
            for (const parameter of node.params){
                definePattern(parameter, false);
            }
        } else if (node.type === 'BlockStatement' || node.type === 'DoWhileStatement' || node.type === 'ForInStatement' || node.type === 'ForOfStatement' || node.type === 'ForStatement' || node.type === 'WhileStatement') {
            scopes.push({
                block: true,
                defined: []
            });
        } else if (node.type === 'CatchClause') {
            scopes.push({
                block: true,
                defined: []
            });
            if (node.param) definePattern(node.param, true);
        } else if (node.type === 'ClassDeclaration') {
            defineIdentifier(node.id.name, false);
        } else if (node.type === 'FunctionDeclaration') {
            defineIdentifier(node.id.name, false);
            scopes.push({
                block: false,
                defined: []
            });
            for (const parameter of node.params){
                definePattern(parameter, false);
            }
        } else if (node.type === 'FunctionExpression') {
            if (node.id) defineIdentifier(node.id.name, false);
            scopes.push({
                block: false,
                defined: []
            });
            for (const parameter of node.params){
                definePattern(parameter, false);
            }
        } else if (node.type === 'ImportDeclaration') {
            for (const specifier of node.specifiers){
                defineIdentifier(specifier.local.name, false);
            }
        } else if (node.type === 'VariableDeclaration') {
            for (const declaration of node.declarations){
                definePattern(declaration.id, node.kind !== 'var');
            }
        }
    }
    /**
   * @param {Node} node
   *   Node.
   * @returns {undefined}
   *   Nothing.
   */ function exit(node) {
        if (node.type === 'ArrowFunctionExpression' || node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression') {
            const scope = scopes.pop();
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(scope, 'expected scope');
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(!scope.block, 'expected non-block');
        } else if (node.type === 'BlockStatement' || node.type === 'CatchClause' || node.type === 'DoWhileStatement' || node.type === 'ForInStatement' || node.type === 'ForOfStatement' || node.type === 'ForStatement' || node.type === 'WhileStatement') {
            const scope = scopes.pop();
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(scope, 'expected scope');
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(scope.block, 'expected block');
        }
    }
    /**
   * Define an identifier in a scope.
   *
   * @param {string} id
   * @param {boolean} block
   * @returns {undefined}
   */ function defineIdentifier(id, block) {
        let index = scopes.length;
        /** @type {Scope | undefined} */ let scope;
        while(index--){
            scope = scopes[index];
            if (block || !scope.block) {
                break;
            }
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(scope);
        scope.defined.push(id);
    }
    /**
   * Define a pattern in a scope.
   *
   * @param {Pattern} pattern
   * @param {boolean} block
   */ function definePattern(pattern, block) {
        // `[, x]`
        if (pattern.type === 'ArrayPattern') {
            for (const element of pattern.elements){
                if (element) {
                    definePattern(element, block);
                }
            }
        } else if (pattern.type === 'AssignmentPattern') {
            definePattern(pattern.left, block);
        } else if (pattern.type === 'Identifier') {
            defineIdentifier(pattern.name, block);
        } else if (pattern.type === 'ObjectPattern') {
            for (const property of pattern.properties){
                // `{key}`, `{key = value}`, `{key: value}`
                if (property.type === 'Property') {
                    definePattern(property.value, block);
                } else {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(property.type === 'RestElement');
                    definePattern(property, block);
                }
            }
        } else {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(pattern.type === 'RestElement');
            definePattern(pattern.argument, block);
        }
    }
}
}}),
"[project]/apps/website/docs/node_modules/estree-util-build-jsx/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('estree-jsx').Expression} Expression
 * @typedef {import('estree-jsx').Identifier} Identifier
 * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier
 * @typedef {import('estree-jsx').JSXAttribute} JSXAttribute
 * @typedef {import('estree-jsx').JSXIdentifier} JSXIdentifier
 * @typedef {import('estree-jsx').JSXMemberExpression} JSXMemberExpression
 * @typedef {import('estree-jsx').JSXNamespacedName} JSXNamespacedName
 * @typedef {import('estree-jsx').Literal} Literal
 * @typedef {import('estree-jsx').MemberExpression} MemberExpression
 * @typedef {import('estree-jsx').Node} Node
 * @typedef {import('estree-jsx').ObjectExpression} ObjectExpression
 * @typedef {import('estree-jsx').Property} Property
 * @typedef {import('estree-jsx').SpreadElement} SpreadElement
 *
 * @typedef {'automatic' | 'classic'} Runtime
 *   How to transform JSX.
 *
 * @typedef Options
 *   Configuration.
 *
 *   > 👉 **Note**: you can also configure `runtime`, `importSource`, `pragma`,
 *   > and `pragmaFrag` from within files through comments.
 * @property {Runtime | null | undefined} [runtime='classic']
 *   Choose the runtime (default: `'classic'`).
 *
 *   Comment form: `@jsxRuntime theRuntime`.
 * @property {string | null | undefined} [importSource='react']
 *   Place to import `jsx`, `jsxs`, `jsxDEV`, and `Fragment` from, when the
 *   effective runtime is automatic (default: `'react'`).
 *
 *   Comment form: `@jsxImportSource theSource`.
 *
 *   > 👉 **Note**: `/jsx-runtime` or `/jsx-dev-runtime` is appended to this
 *   > provided source.
 *   > In CJS, that can resolve to a file (as in `theSource/jsx-runtime.js`),
 *   > but for ESM an export map needs to be set up to point to files:
 *   >
 *   > ```js
 *   > // …
 *   > "exports": {
 *   >   // …
 *   >   "./jsx-runtime": "./path/to/jsx-runtime.js",
 *   >   "./jsx-dev-runtime": "./path/to/jsx-runtime.js"
 *   >   // …
 *   > ```
 * @property {string | null | undefined} [pragma='React.createElement']
 *   Identifier or member expression to call when the effective runtime is
 *   classic (default: `'React.createElement'`).
 *
 *   Comment form: `@jsx identifier`.
 * @property {string | null | undefined} [pragmaFrag='React.Fragment']
 *   Identifier or member expression to use as a symbol for fragments when the
 *   effective runtime is classic (default: `'React.Fragment'`).
 *
 *   Comment form: `@jsxFrag identifier`.
 * @property {boolean | null | undefined} [development=false]
 *   When in the automatic runtime, whether to import
 *   `theSource/jsx-dev-runtime.js`, use `jsxDEV`, and pass location info when
 *   available (default: `false`).
 *
 *   This helps debugging but adds a lot of code that you don’t want in
 *   production.
 * @property {string | null | undefined} [filePath]
 *   File path to the original source file (optional).
 *
 *   Passed in location info to `jsxDEV` when using the automatic runtime with
 *   `development: true`.
 *
 * @typedef Annotations
 *   State where info from comments is gathered.
 * @property {string | undefined} [jsx]
 *   JSX identifier (`pragma`).
 * @property {string | undefined} [jsxFrag]
 *   JSX identifier of fragment (`pragmaFrag`).
 * @property {string | undefined} [jsxImportSource]
 *   Where to import an automatic JSX runtime from.
 * @property {Runtime | undefined} [jsxRuntime]
 *   Runtime.
 *
 * @typedef Imports
 *   State of used identifiers from the automatic runtime.
 * @property {boolean | undefined} [fragment]
 *   Symbol of `Fragment`.
 * @property {boolean | undefined} [jsx]
 *   Symbol of `jsx`.
 * @property {boolean | undefined} [jsxs]
 *   Symbol of `jsxs`.
 * @property {boolean | undefined} [jsxDEV]
 *   Symbol of `jsxDEV`.
 */ __turbopack_esm__({
    "buildJsx": (()=>buildJsx)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-walker/src/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-util-is-identifier-name/lib/index.js [app-rsc] (ecmascript)");
;
;
;
const regex = /@(jsx|jsxFrag|jsxImportSource|jsxRuntime)\s+(\S+)/g;
function buildJsx(tree, options) {
    const config = options || {};
    let automatic = config.runtime === 'automatic';
    /** @type {Annotations} */ const annotations = {};
    /** @type {Imports} */ const imports = {};
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["walk"])(tree, {
        enter (node) {
            if (node.type === 'Program') {
                const comments = node.comments || [];
                let index = -1;
                while(++index < comments.length){
                    regex.lastIndex = 0;
                    let match = regex.exec(comments[index].value);
                    while(match){
                        // @ts-expect-error: `match[1]` is always a key, `match[2]` when
                        // runtime is checked later.
                        annotations[match[1]] = match[2];
                        match = regex.exec(comments[index].value);
                    }
                }
                if (annotations.jsxRuntime) {
                    if (annotations.jsxRuntime === 'automatic') {
                        automatic = true;
                        if (annotations.jsx) {
                            throw new Error('Unexpected `@jsx` pragma w/ automatic runtime');
                        }
                        if (annotations.jsxFrag) {
                            throw new Error('Unexpected `@jsxFrag` pragma w/ automatic runtime');
                        }
                    } else if (annotations.jsxRuntime === 'classic') {
                        automatic = false;
                        if (annotations.jsxImportSource) {
                            throw new Error('Unexpected `@jsxImportSource` w/ classic runtime');
                        }
                    } else {
                        throw new Error('Unexpected `jsxRuntime` `' + annotations.jsxRuntime + '`, expected `automatic` or `classic`');
                    }
                }
            }
        },
        // eslint-disable-next-line complexity
        leave (node) {
            if (node.type === 'Program') {
                /** @type {Array<ImportSpecifier>} */ const specifiers = [];
                if (imports.fragment) {
                    specifiers.push({
                        type: 'ImportSpecifier',
                        imported: {
                            type: 'Identifier',
                            name: 'Fragment'
                        },
                        local: {
                            type: 'Identifier',
                            name: '_Fragment'
                        }
                    });
                }
                if (imports.jsx) {
                    specifiers.push({
                        type: 'ImportSpecifier',
                        imported: {
                            type: 'Identifier',
                            name: 'jsx'
                        },
                        local: {
                            type: 'Identifier',
                            name: '_jsx'
                        }
                    });
                }
                if (imports.jsxs) {
                    specifiers.push({
                        type: 'ImportSpecifier',
                        imported: {
                            type: 'Identifier',
                            name: 'jsxs'
                        },
                        local: {
                            type: 'Identifier',
                            name: '_jsxs'
                        }
                    });
                }
                if (imports.jsxDEV) {
                    specifiers.push({
                        type: 'ImportSpecifier',
                        imported: {
                            type: 'Identifier',
                            name: 'jsxDEV'
                        },
                        local: {
                            type: 'Identifier',
                            name: '_jsxDEV'
                        }
                    });
                }
                if (specifiers.length > 0) {
                    let injectIndex = 0;
                    while(injectIndex < node.body.length){
                        const child = node.body[injectIndex];
                        if ('directive' in child && child.directive) {
                            injectIndex++;
                        } else {
                            break;
                        }
                    }
                    node.body.splice(injectIndex, 0, {
                        type: 'ImportDeclaration',
                        specifiers,
                        source: {
                            type: 'Literal',
                            value: (annotations.jsxImportSource || config.importSource || 'react') + (config.development ? '/jsx-dev-runtime' : '/jsx-runtime')
                        }
                    });
                }
            }
            if (node.type !== 'JSXElement' && node.type !== 'JSXFragment') {
                return;
            }
            /** @type {Array<Expression>} */ const children = [];
            let index = -1;
            // Figure out `children`.
            while(++index < node.children.length){
                const child = node.children[index];
                if (child.type === 'JSXExpressionContainer') {
                    // Ignore empty expressions.
                    if (child.expression.type !== 'JSXEmptyExpression') {
                        children.push(child.expression);
                    }
                } else if (child.type === 'JSXText') {
                    const value = child.value// Replace tabs w/ spaces.
                    .replace(/\t/g, ' ')// Use line feeds, drop spaces around them.
                    .replace(/ *(\r?\n|\r) */g, '\n')// Collapse multiple line feeds.
                    .replace(/\n+/g, '\n')// Drop final line feeds.
                    .replace(/\n+$/, '')// Drop first line feeds.
                    .replace(/^\n+/, '')// Replace line feeds with spaces.
                    .replace(/\n/g, ' ');
                    // Ignore collapsible text.
                    if (value) {
                        /** @type {Node} */ const text = {
                            type: 'Literal',
                            value
                        };
                        create(child, text);
                        children.push(text);
                    }
                } else {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(child.type !== 'JSXElement' && child.type !== 'JSXFragment' && child.type !== 'JSXSpreadChild');
                    children.push(child);
                }
            }
            /** @type {Identifier | Literal | MemberExpression} */ let name;
            /** @type {Array<Property | SpreadElement>} */ const fields = [];
            /** @type {Array<Expression>} */ let parameters = [];
            /** @type {Expression | undefined} */ let key;
            // Do the stuff needed for elements.
            if (node.type === 'JSXElement') {
                name = toIdentifier(node.openingElement.name);
                // If the name could be an identifier, but start with a lowercase letter,
                // it’s not a component.
                if (name.type === 'Identifier' && /^[a-z]/.test(name.name)) {
                    /** @type {Node} */ const next = {
                        type: 'Literal',
                        value: name.name
                    };
                    create(name, next);
                    name = next;
                }
                /** @type {boolean | undefined} */ let spread;
                const attributes = node.openingElement.attributes;
                let index = -1;
                // Place props in the right order, because we might have duplicates
                // in them and what’s spread in.
                while(++index < attributes.length){
                    const attribute = attributes[index];
                    if (attribute.type === 'JSXSpreadAttribute') {
                        if (attribute.argument.type === 'ObjectExpression') {
                            fields.push(...attribute.argument.properties);
                        } else {
                            fields.push({
                                type: 'SpreadElement',
                                argument: attribute.argument
                            });
                        }
                        spread = true;
                    } else {
                        const prop = toProperty(attribute);
                        if (automatic && prop.key.type === 'Identifier' && prop.key.name === 'key') {
                            if (spread) {
                                throw new Error('Expected `key` to come before any spread expressions');
                            }
                            const value = prop.value;
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(value.type !== 'AssignmentPattern' && value.type !== 'ArrayPattern' && value.type !== 'ObjectPattern' && value.type !== 'RestElement');
                            key = value;
                        } else {
                            fields.push(prop);
                        }
                    }
                }
            } else if (automatic) {
                imports.fragment = true;
                name = {
                    type: 'Identifier',
                    name: '_Fragment'
                };
            } else {
                name = toMemberExpression(annotations.jsxFrag || config.pragmaFrag || 'React.Fragment');
            }
            if (automatic) {
                if (children.length > 0) {
                    fields.push({
                        type: 'Property',
                        key: {
                            type: 'Identifier',
                            name: 'children'
                        },
                        value: children.length > 1 ? {
                            type: 'ArrayExpression',
                            elements: children
                        } : children[0],
                        kind: 'init',
                        method: false,
                        shorthand: false,
                        computed: false
                    });
                }
            } else {
                parameters = children;
            }
            /** @type {Identifier | Literal | MemberExpression} */ let callee;
            if (automatic) {
                parameters.push({
                    type: 'ObjectExpression',
                    properties: fields
                });
                if (key) {
                    parameters.push(key);
                } else if (config.development) {
                    parameters.push({
                        type: 'Identifier',
                        name: 'undefined'
                    });
                }
                const isStaticChildren = children.length > 1;
                if (config.development) {
                    imports.jsxDEV = true;
                    callee = {
                        type: 'Identifier',
                        name: '_jsxDEV'
                    };
                    parameters.push({
                        type: 'Literal',
                        value: isStaticChildren
                    });
                    /** @type {ObjectExpression} */ const source = {
                        type: 'ObjectExpression',
                        properties: [
                            {
                                type: 'Property',
                                method: false,
                                shorthand: false,
                                computed: false,
                                kind: 'init',
                                key: {
                                    type: 'Identifier',
                                    name: 'fileName'
                                },
                                value: {
                                    type: 'Literal',
                                    value: config.filePath || '<source.js>'
                                }
                            }
                        ]
                    };
                    if (node.loc) {
                        source.properties.push({
                            type: 'Property',
                            method: false,
                            shorthand: false,
                            computed: false,
                            kind: 'init',
                            key: {
                                type: 'Identifier',
                                name: 'lineNumber'
                            },
                            value: {
                                type: 'Literal',
                                value: node.loc.start.line
                            }
                        }, {
                            type: 'Property',
                            method: false,
                            shorthand: false,
                            computed: false,
                            kind: 'init',
                            key: {
                                type: 'Identifier',
                                name: 'columnNumber'
                            },
                            value: {
                                type: 'Literal',
                                value: node.loc.start.column + 1
                            }
                        });
                    }
                    parameters.push(source, {
                        type: 'ThisExpression'
                    });
                } else if (isStaticChildren) {
                    imports.jsxs = true;
                    callee = {
                        type: 'Identifier',
                        name: '_jsxs'
                    };
                } else {
                    imports.jsx = true;
                    callee = {
                        type: 'Identifier',
                        name: '_jsx'
                    };
                }
            } else {
                if (fields.length > 0) {
                    parameters.unshift({
                        type: 'ObjectExpression',
                        properties: fields
                    });
                } else if (parameters.length > 0) {
                    parameters.unshift({
                        type: 'Literal',
                        value: null
                    });
                }
                callee = toMemberExpression(annotations.jsx || config.pragma || 'React.createElement');
            }
            parameters.unshift(name);
            /** @type {Node} */ const call = {
                type: 'CallExpression',
                callee,
                arguments: parameters,
                optional: false
            };
            create(node, call);
            this.replace(call);
        }
    });
}
/**
 * Turn a JSX attribute into a JavaScript property.
 *
 * @param {JSXAttribute} node
 *   JSX attribute.
 * @returns {Property}
 *   JS property.
 */ function toProperty(node) {
    /** @type {Expression} */ let value;
    if (node.value) {
        if (node.value.type === 'JSXExpressionContainer') {
            const valueExpression = node.value.expression;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(valueExpression.type !== 'JSXEmptyExpression', '`JSXEmptyExpression` is not allowed in props.');
            value = valueExpression;
        } else {
            const nodeValue = node.value;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(nodeValue.type !== 'JSXElement' && nodeValue.type !== 'JSXFragment', 'JSX{Element,Fragment} are already compiled to `CallExpression`');
            value = nodeValue;
            delete value.raw;
        }
    } else {
        value = {
            type: 'Literal',
            value: true
        };
    }
    /** @type {Property} */ const replacement = {
        type: 'Property',
        key: toIdentifier(node.name),
        value,
        kind: 'init',
        method: false,
        shorthand: false,
        computed: false
    };
    create(node, replacement);
    return replacement;
}
/**
 * Turn a JSX identifier into a normal JS identifier.
 *
 * @param {JSXIdentifier | JSXMemberExpression | JSXNamespacedName} node
 *   JSX identifier.
 * @returns {Identifier | Literal | MemberExpression}
 *   JS identifier.
 */ function toIdentifier(node) {
    /** @type {Identifier | Literal | MemberExpression} */ let replace;
    if (node.type === 'JSXMemberExpression') {
        // `property` is always a `JSXIdentifier`, but it could be something that
        // isn’t an ES identifier name.
        const id = toIdentifier(node.property);
        replace = {
            type: 'MemberExpression',
            object: toIdentifier(node.object),
            property: id,
            computed: id.type === 'Literal',
            optional: false
        };
    } else if (node.type === 'JSXNamespacedName') {
        replace = {
            type: 'Literal',
            value: node.namespace.name + ':' + node.name.name
        };
    } else {
        replace = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["name"])(node.name) ? {
            type: 'Identifier',
            name: node.name
        } : {
            type: 'Literal',
            value: node.name
        };
    }
    create(node, replace);
    return replace;
}
/**
 * Turn a dotted string into a member expression.
 *
 * @param {string} id
 *   Identifiers.
 * @returns {Identifier | Literal | MemberExpression}
 *   Expression.
 */ function toMemberExpression(id) {
    const identifiers = id.split('.');
    let index = -1;
    /** @type {Identifier | Literal | MemberExpression | undefined} */ let result;
    while(++index < identifiers.length){
        /** @type {Identifier | Literal} */ const prop = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["name"])(identifiers[index]) ? {
            type: 'Identifier',
            name: identifiers[index]
        } : {
            type: 'Literal',
            value: identifiers[index]
        };
        result = result ? {
            type: 'MemberExpression',
            object: result,
            property: prop,
            computed: Boolean(index && prop.type === 'Literal'),
            optional: false
        } : prop;
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(result, 'always a result');
    return result;
}
/**
 * Inherit some fields from `from` into `to`.
 *
 * @param {Node} from
 *   Node to inherit from.
 * @param {Node} to
 *   Node to add to.
 * @returns {undefined}
 *   Nothing.
 */ function create(from, to) {
    const fields = [
        'start',
        'end',
        'loc',
        'range',
        'comments'
    ];
    let index = -1;
    while(++index < fields.length){
        const field = fields[index];
        if (field in from) {
            // @ts-expect-error: indexable.
            to[field] = from[field];
        }
    }
}
}}),
"[project]/apps/website/docs/node_modules/recma-build-jsx/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Program} from 'estree'
 * @import {Options} from 'recma-build-jsx'
 * @import {VFile} from 'vfile'
 */ __turbopack_esm__({
    "default": (()=>recmaJsx)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$build$2d$jsx$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-util-build-jsx/lib/index.js [app-rsc] (ecmascript)");
;
function recmaJsx(options) {
    /**
   * @param {Program} tree
   *   Tree.
   * @param {VFile} file
   *   File.
   * @returns {undefined}
   *   Nothing.
   */ return function(tree, file) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$build$2d$jsx$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildJsx"])(tree, {
            filePath: file.history[0],
            ...options
        });
    };
}
}}),
"[project]/apps/website/docs/node_modules/estree-util-to-js/lib/jsx.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute
 * @typedef {import('estree-jsx').JSXClosingElement} JsxClosingElement
 * @typedef {import('estree-jsx').JSXClosingFragment} JsxClosingFragment
 * @typedef {import('estree-jsx').JSXElement} JsxElement
 * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer
 * @typedef {import('estree-jsx').JSXFragment} JsxFragment
 * @typedef {import('estree-jsx').JSXIdentifier} JsxIdentifier
 * @typedef {import('estree-jsx').JSXMemberExpression} JsxMemberExpression
 * @typedef {import('estree-jsx').JSXNamespacedName} JsxNamespacedName
 * @typedef {import('estree-jsx').JSXOpeningElement} JsxOpeningElement
 * @typedef {import('estree-jsx').JSXOpeningFragment} JsxOpeningFragment
 * @typedef {import('estree-jsx').JSXSpreadAttribute} JsxSpreadAttribute
 * @typedef {import('estree-jsx').JSXText} JsxText
 *
 * @typedef {import('./index.js').Generator} Generator
 * @typedef {import('./index.js').State} State
 */ __turbopack_esm__({
    "jsx": (()=>jsx)
});
const jsx = {
    JSXAttribute: jsxAttribute,
    JSXClosingElement: jsxClosingElement,
    JSXClosingFragment: jsxClosingFragment,
    JSXElement: jsxElement,
    JSXEmptyExpression: jsxEmptyExpression,
    JSXExpressionContainer: jsxExpressionContainer,
    JSXFragment: jsxFragment,
    JSXIdentifier: jsxIdentifier,
    JSXMemberExpression: jsxMemberExpression,
    JSXNamespacedName: jsxNamespacedName,
    JSXOpeningElement: jsxOpeningElement,
    JSXOpeningFragment: jsxOpeningFragment,
    JSXSpreadAttribute: jsxSpreadAttribute,
    JSXText: jsxText
};
/**
 * `attr`
 * `attr="something"`
 * `attr={1}`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxAttribute} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxAttribute(node, state) {
    this[node.name.type](node.name, state);
    if (node.value !== null && node.value !== undefined) {
        state.write('=');
        // Encode double quotes in attribute values.
        if (node.value.type === 'Literal') {
            state.write('"' + encodeJsx(String(node.value.value)).replace(/"/g, '&quot;') + '"', node);
        } else {
            this[node.value.type](node.value, state);
        }
    }
}
/**
 * `</div>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxClosingElement} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxClosingElement(node, state) {
    state.write('</');
    this[node.name.type](node.name, state);
    state.write('>');
}
/**
 * `</>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxClosingFragment} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxClosingFragment(node, state) {
    state.write('</>', node);
}
/**
 * `<div />`
 * `<div></div>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxElement} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxElement(node, state) {
    let index = -1;
    this[node.openingElement.type](node.openingElement, state);
    if (node.children) {
        while(++index < node.children.length){
            const child = node.children[index];
            // Supported in types but not by Acorn.
            /* c8 ignore next 3 */ if (child.type === 'JSXSpreadChild') {
                throw new Error('JSX spread children are not supported');
            }
            this[child.type](child, state);
        }
    }
    if (node.closingElement) {
        this[node.closingElement.type](node.closingElement, state);
    }
}
/**
 * `{}` (always in a `JSXExpressionContainer`, which does the curlies)
 *
 * @this {Generator}
 *   `astring` generator.
 * @returns {undefined}
 *   Nothing.
 */ function jsxEmptyExpression() {}
/**
 * `{expression}`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxExpressionContainer} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxExpressionContainer(node, state) {
    state.write('{');
    this[node.expression.type](node.expression, state);
    state.write('}');
}
/**
 * `<></>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxFragment} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxFragment(node, state) {
    let index = -1;
    this[node.openingFragment.type](node.openingFragment, state);
    if (node.children) {
        while(++index < node.children.length){
            const child = node.children[index];
            // Supported in types but not by Acorn.
            /* c8 ignore next 3 */ if (child.type === 'JSXSpreadChild') {
                throw new Error('JSX spread children are not supported');
            }
            this[child.type](child, state);
        }
    }
    this[node.closingFragment.type](node.closingFragment, state);
}
/**
 * `div`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxIdentifier} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxIdentifier(node, state) {
    state.write(node.name, node);
}
/**
 * `member.expression`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxMemberExpression} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxMemberExpression(node, state) {
    this[node.object.type](node.object, state);
    state.write('.');
    this[node.property.type](node.property, state);
}
/**
 * `ns:name`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxNamespacedName} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxNamespacedName(node, state) {
    this[node.namespace.type](node.namespace, state);
    state.write(':');
    this[node.name.type](node.name, state);
}
/**
 * `<div>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxOpeningElement} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxOpeningElement(node, state) {
    let index = -1;
    state.write('<');
    this[node.name.type](node.name, state);
    if (node.attributes) {
        while(++index < node.attributes.length){
            state.write(' ');
            this[node.attributes[index].type](node.attributes[index], state);
        }
    }
    state.write(node.selfClosing ? ' />' : '>');
}
/**
 * `<>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxOpeningFragment} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxOpeningFragment(node, state) {
    state.write('<>', node);
}
/**
 * `{...argument}`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxSpreadAttribute} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxSpreadAttribute(node, state) {
    state.write('{');
    // eslint-disable-next-line new-cap
    this.SpreadElement(node, state);
    state.write('}');
}
/**
 * `!`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxText} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxText(node, state) {
    state.write(encodeJsx(node.value).replace(/[<>{}]/g, replaceJsxChar), node);
}
/**
 * Make sure that character references don’t pop up.
 *
 * For example, the text `&copy;` should stay that way, and not turn into `©`.
 * We could encode all `&` (easy but verbose) or look for actual valid
 * references (complex but cleanest output).
 * Looking for the 2nd character gives us a middle ground.
 * The `#` is for (decimal and hexadecimal) numeric references, the letters
 * are for the named references.
 *
 * @param {string} value
 *   Value to encode.
 * @returns {string}
 *   Encoded value.
 */ function encodeJsx(value) {
    return value.replace(/&(?=[#a-z])/gi, '&amp;');
}
/**
 * @param {string} $0
 * @returns {string}
 */ function replaceJsxChar($0) {
    return $0 === '<' ? '&lt;' : $0 === '>' ? '&gt;' : $0 === '{' ? '&#123;' : '&#125;';
}
}}),
"[project]/apps/website/docs/node_modules/estree-util-to-js/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('astring').State} State
 * @typedef {import('estree-jsx').Node} Nodes
 * @typedef {import('estree-jsx').Program} Program
 * @typedef {typeof import('source-map').SourceMapGenerator} SourceMapGenerator
 * @typedef {import('source-map').RawSourceMap} Map
 */ /**
 * @typedef {Record<Nodes['type'], Handler>} Generator
 *
 * @callback Handler
 *  Handle a particular node.
 * @param {Generator} this
 *   `astring` generator.
 * @param {any} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 *
 * @typedef {Partial<import('astring').Generator>} Handlers
 */ /**
 * @typedef {OptionsWithMaybeMapGenerator} Options
 *   Configuration.
 *
 * @typedef OptionsFieldsBase
 *   Base shared option fields.
 * @property {Handlers | null | undefined} [handlers]
 *   Object mapping node types to functions handling the corresponding nodes.
 *
 * @typedef OptionsFieldsWithoutSourceMapGenerator
 *   Extra option fields where there’s definitely no source map generator.
 * @property {null | undefined} [SourceMapGenerator]
 *   Generate a source map by passing a `SourceMapGenerator` from `source-map`
 *   in; this works if there is positional info on nodes.
 * @property {null | undefined} [filePath]
 *   Path to input file; only used in source map.
 *
 * @typedef OptionsFieldsWithSourceMapGenerator
 *   Extra option fields where there’s definitely a source map generator.
 * @property {SourceMapGenerator} SourceMapGenerator
 *   Generate a source map by passing a `SourceMapGenerator` from `source-map`
 *   in; this works if there is positional info on nodes.
 * @property {string | null | undefined} [filePath]
 *   Path to input file; only used in source map.
 *
 * @typedef OptionsFieldsMaybeSourceMapGenerator
 *   Extra option fields where there may or may not be a source map generator.
 * @property {SourceMapGenerator | null | undefined} [SourceMapGenerator]
 *   Generate a source map by passing a `SourceMapGenerator` from `source-map`
 *   in; this works if there is positional info on nodes.
 * @property {string | null | undefined} [filePath]
 *   Path to input file; only used in source map.
 *
 * @typedef {OptionsFieldsBase & OptionsFieldsWithoutSourceMapGenerator} OptionsWithoutSourceMapGenerator
 *   Options where there’s definitely no source map generator.
 * @typedef {OptionsFieldsBase & OptionsFieldsWithSourceMapGenerator} OptionsWithSourceMapGenerator
 *   Options where there’s definitely a source map generator.
 * @typedef {OptionsFieldsBase & OptionsFieldsMaybeSourceMapGenerator} OptionsWithMaybeMapGenerator
 *   Options where there may or may not be a source map generator.
 *
 * @typedef {ResultWithMaybeSourceMapGenerator} Result
 *   Result.
 *
 * @typedef ResultFieldsBase
 *   Base shared result fields.
 * @property {string} value
 *   Serialized JavaScript.
 *
 * @typedef ResultFieldsWithoutSourceMapGenerator
 *   Extra result fields where there’s definitely no source map generator.
 * @property {undefined} map
 *   Source map as (parsed) JSON, if `SourceMapGenerator` is passed.
 *
 * @typedef ResultFieldsWithSourceMapGenerator
 *   Extra result fields where there’s definitely a source map generator.
 * @property {Map} map
 *   Source map as (parsed) JSON, if `SourceMapGenerator` is not passed.
 *
 * @typedef ResultFieldsMaybeSourceMapGenerator
 *   Extra result fields where there may or may not be a source map generator.
 * @property {Map | undefined} map
 *   Source map as (parsed) JSON, if `SourceMapGenerator` might be passed.
 *
 * @typedef {ResultFieldsBase & ResultFieldsWithoutSourceMapGenerator} ResultWithoutSourceMapGenerator
 *   Result where there’s definitely no source map generator.
 * @typedef {ResultFieldsBase & ResultFieldsWithSourceMapGenerator} ResultWithSourceMapGenerator
 *   Result where there’s definitely a source map generator.
 * @typedef {ResultFieldsBase & ResultFieldsMaybeSourceMapGenerator} ResultWithMaybeSourceMapGenerator
 *   Result where there may or may not be a source map generator.
 */ __turbopack_esm__({
    "toJs": (()=>toJs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$astring$2f$dist$2f$astring$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/astring/dist/astring.mjs [app-rsc] (ecmascript)");
;
/** @type {Options} */ const emptyOptions = {};
function toJs(tree, options) {
    const { SourceMapGenerator, filePath, handlers } = options || emptyOptions;
    const sourceMap = SourceMapGenerator ? new SourceMapGenerator({
        file: filePath || '<unknown>.js'
    }) : undefined;
    const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$astring$2f$dist$2f$astring$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["generate"])(tree, // @ts-expect-error: `sourceMap` can be undefined, `astring` types are buggy.
    {
        comments: true,
        generator: {
            ...__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$astring$2f$dist$2f$astring$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["GENERATOR"],
            ...handlers
        },
        sourceMap: sourceMap || undefined
    });
    const map = sourceMap ? sourceMap.toJSON() : undefined;
    return {
        value,
        map
    };
}
}}),
"[project]/apps/website/docs/node_modules/recma-jsx/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {} from 'recma-parse'
 * @import {} from 'recma-stringify'
 * @import {Processor} from 'unified'
 */ __turbopack_esm__({
    "default": (()=>recmaJsx)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$acorn$2d$jsx$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/acorn-jsx/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$to$2d$js$2f$lib$2f$jsx$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-util-to-js/lib/jsx.js [app-rsc] (ecmascript)");
;
;
function recmaJsx() {
    const data = this.data();
    const settings = data.settings || (data.settings = {});
    const handlers = settings.handlers || (settings.handlers = {});
    const plugins = settings.plugins || (settings.plugins = []);
    // No useful options yet.
    plugins.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$acorn$2d$jsx$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])());
    Object.assign(handlers, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$to$2d$js$2f$lib$2f$jsx$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"]);
}
}}),
"[project]/apps/website/docs/node_modules/astring/dist/astring.mjs [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// Astring is a tiny and fast JavaScript code generator from an ESTree-compliant AST.
//
// Astring was written by David Bonnet and released under an MIT license.
//
// The Git repository for Astring is available at:
// https://github.com/davidbonnet/astring.git
//
// Please use the GitHub bug tracker to report issues:
// https://github.com/davidbonnet/astring/issues
__turbopack_esm__({
    "EXPRESSIONS_PRECEDENCE": (()=>EXPRESSIONS_PRECEDENCE),
    "GENERATOR": (()=>GENERATOR),
    "NEEDS_PARENTHESES": (()=>NEEDS_PARENTHESES),
    "baseGenerator": (()=>baseGenerator),
    "generate": (()=>generate)
});
const { stringify } = JSON;
/* c8 ignore if */ if (!String.prototype.repeat) {
    /* c8 ignore next */ throw new Error('String.prototype.repeat is undefined, see https://github.com/davidbonnet/astring#installation');
}
/* c8 ignore if */ if (!String.prototype.endsWith) {
    /* c8 ignore next */ throw new Error('String.prototype.endsWith is undefined, see https://github.com/davidbonnet/astring#installation');
}
const OPERATOR_PRECEDENCE = {
    '||': 2,
    '??': 3,
    '&&': 4,
    '|': 5,
    '^': 6,
    '&': 7,
    '==': 8,
    '!=': 8,
    '===': 8,
    '!==': 8,
    '<': 9,
    '>': 9,
    '<=': 9,
    '>=': 9,
    in: 9,
    instanceof: 9,
    '<<': 10,
    '>>': 10,
    '>>>': 10,
    '+': 11,
    '-': 11,
    '*': 12,
    '%': 12,
    '/': 12,
    '**': 13
};
const NEEDS_PARENTHESES = 17;
const EXPRESSIONS_PRECEDENCE = {
    // Definitions
    ArrayExpression: 20,
    TaggedTemplateExpression: 20,
    ThisExpression: 20,
    Identifier: 20,
    PrivateIdentifier: 20,
    Literal: 18,
    TemplateLiteral: 20,
    Super: 20,
    SequenceExpression: 20,
    // Operations
    MemberExpression: 19,
    ChainExpression: 19,
    CallExpression: 19,
    NewExpression: 19,
    // Other definitions
    ArrowFunctionExpression: NEEDS_PARENTHESES,
    ClassExpression: NEEDS_PARENTHESES,
    FunctionExpression: NEEDS_PARENTHESES,
    ObjectExpression: NEEDS_PARENTHESES,
    // Other operations
    UpdateExpression: 16,
    UnaryExpression: 15,
    AwaitExpression: 15,
    BinaryExpression: 14,
    LogicalExpression: 13,
    ConditionalExpression: 4,
    AssignmentExpression: 3,
    YieldExpression: 2,
    RestElement: 1
};
function formatSequence(state, nodes) {
    /*
  Writes into `state` a sequence of `nodes`.
  */ const { generator } = state;
    state.write('(');
    if (nodes != null && nodes.length > 0) {
        generator[nodes[0].type](nodes[0], state);
        const { length } = nodes;
        for(let i = 1; i < length; i++){
            const param = nodes[i];
            state.write(', ');
            generator[param.type](param, state);
        }
    }
    state.write(')');
}
function expressionNeedsParenthesis(state, node, parentNode, isRightHand) {
    const nodePrecedence = state.expressionsPrecedence[node.type];
    if (nodePrecedence === NEEDS_PARENTHESES) {
        return true;
    }
    const parentNodePrecedence = state.expressionsPrecedence[parentNode.type];
    if (nodePrecedence !== parentNodePrecedence) {
        // Different node types
        return !isRightHand && nodePrecedence === 15 && parentNodePrecedence === 14 && parentNode.operator === '**' || nodePrecedence < parentNodePrecedence;
    }
    if (nodePrecedence !== 13 && nodePrecedence !== 14) {
        // Not a `LogicalExpression` or `BinaryExpression`
        return false;
    }
    if (node.operator === '**' && parentNode.operator === '**') {
        // Exponentiation operator has right-to-left associativity
        return !isRightHand;
    }
    if (nodePrecedence === 13 && parentNodePrecedence === 13 && (node.operator === '??' || parentNode.operator === '??')) {
        // Nullish coalescing and boolean operators cannot be combined
        return true;
    }
    if (isRightHand) {
        // Parenthesis are used if both operators have the same precedence
        return OPERATOR_PRECEDENCE[node.operator] <= OPERATOR_PRECEDENCE[parentNode.operator];
    }
    return OPERATOR_PRECEDENCE[node.operator] < OPERATOR_PRECEDENCE[parentNode.operator];
}
function formatExpression(state, node, parentNode, isRightHand) {
    /*
  Writes into `state` the provided `node`, adding parenthesis around if the provided `parentNode` needs it. If `node` is a right-hand argument, the provided `isRightHand` parameter should be `true`.
  */ const { generator } = state;
    if (expressionNeedsParenthesis(state, node, parentNode, isRightHand)) {
        state.write('(');
        generator[node.type](node, state);
        state.write(')');
    } else {
        generator[node.type](node, state);
    }
}
function reindent(state, text, indent, lineEnd) {
    /*
  Writes into `state` the `text` string reindented with the provided `indent`.
  */ const lines = text.split('\n');
    const end = lines.length - 1;
    state.write(lines[0].trim());
    if (end > 0) {
        state.write(lineEnd);
        for(let i = 1; i < end; i++){
            state.write(indent + lines[i].trim() + lineEnd);
        }
        state.write(indent + lines[end].trim());
    }
}
function formatComments(state, comments, indent, lineEnd) {
    /*
  Writes into `state` the provided list of `comments`, with the given `indent` and `lineEnd` strings.
  Line comments will end with `"\n"` regardless of the value of `lineEnd`.
  Expects to start on a new unindented line.
  */ const { length } = comments;
    for(let i = 0; i < length; i++){
        const comment = comments[i];
        state.write(indent);
        if (comment.type[0] === 'L') {
            // Line comment
            state.write('// ' + comment.value.trim() + '\n', comment);
        } else {
            // Block comment
            state.write('/*');
            reindent(state, comment.value, indent, lineEnd);
            state.write('*/' + lineEnd);
        }
    }
}
function hasCallExpression(node) {
    /*
  Returns `true` if the provided `node` contains a call expression and `false` otherwise.
  */ let currentNode = node;
    while(currentNode != null){
        const { type } = currentNode;
        if (type[0] === 'C' && type[1] === 'a') {
            // Is CallExpression
            return true;
        } else if (type[0] === 'M' && type[1] === 'e' && type[2] === 'm') {
            // Is MemberExpression
            currentNode = currentNode.object;
        } else {
            return false;
        }
    }
}
function formatVariableDeclaration(state, node) {
    /*
  Writes into `state` a variable declaration.
  */ const { generator } = state;
    const { declarations } = node;
    state.write(node.kind + ' ');
    const { length } = declarations;
    if (length > 0) {
        generator.VariableDeclarator(declarations[0], state);
        for(let i = 1; i < length; i++){
            state.write(', ');
            generator.VariableDeclarator(declarations[i], state);
        }
    }
}
let ForInStatement, FunctionDeclaration, RestElement, BinaryExpression, ArrayExpression, BlockStatement;
const GENERATOR = {
    /*
  Default generator.
  */ Program (node, state) {
        const indent = state.indent.repeat(state.indentLevel);
        const { lineEnd, writeComments } = state;
        if (writeComments && node.comments != null) {
            formatComments(state, node.comments, indent, lineEnd);
        }
        const statements = node.body;
        const { length } = statements;
        for(let i = 0; i < length; i++){
            const statement = statements[i];
            if (writeComments && statement.comments != null) {
                formatComments(state, statement.comments, indent, lineEnd);
            }
            state.write(indent);
            this[statement.type](statement, state);
            state.write(lineEnd);
        }
        if (writeComments && node.trailingComments != null) {
            formatComments(state, node.trailingComments, indent, lineEnd);
        }
    },
    BlockStatement: BlockStatement = function(node, state) {
        const indent = state.indent.repeat(state.indentLevel++);
        const { lineEnd, writeComments } = state;
        const statementIndent = indent + state.indent;
        state.write('{');
        const statements = node.body;
        if (statements != null && statements.length > 0) {
            state.write(lineEnd);
            if (writeComments && node.comments != null) {
                formatComments(state, node.comments, statementIndent, lineEnd);
            }
            const { length } = statements;
            for(let i = 0; i < length; i++){
                const statement = statements[i];
                if (writeComments && statement.comments != null) {
                    formatComments(state, statement.comments, statementIndent, lineEnd);
                }
                state.write(statementIndent);
                this[statement.type](statement, state);
                state.write(lineEnd);
            }
            state.write(indent);
        } else {
            if (writeComments && node.comments != null) {
                state.write(lineEnd);
                formatComments(state, node.comments, statementIndent, lineEnd);
                state.write(indent);
            }
        }
        if (writeComments && node.trailingComments != null) {
            formatComments(state, node.trailingComments, statementIndent, lineEnd);
        }
        state.write('}');
        state.indentLevel--;
    },
    ClassBody: BlockStatement,
    StaticBlock (node, state) {
        state.write('static ');
        this.BlockStatement(node, state);
    },
    EmptyStatement (node, state) {
        state.write(';');
    },
    ExpressionStatement (node, state) {
        const precedence = state.expressionsPrecedence[node.expression.type];
        if (precedence === NEEDS_PARENTHESES || precedence === 3 && node.expression.left.type[0] === 'O') {
            // Should always have parentheses or is an AssignmentExpression to an ObjectPattern
            state.write('(');
            this[node.expression.type](node.expression, state);
            state.write(')');
        } else {
            this[node.expression.type](node.expression, state);
        }
        state.write(';');
    },
    IfStatement (node, state) {
        state.write('if (');
        this[node.test.type](node.test, state);
        state.write(') ');
        this[node.consequent.type](node.consequent, state);
        if (node.alternate != null) {
            state.write(' else ');
            this[node.alternate.type](node.alternate, state);
        }
    },
    LabeledStatement (node, state) {
        this[node.label.type](node.label, state);
        state.write(': ');
        this[node.body.type](node.body, state);
    },
    BreakStatement (node, state) {
        state.write('break');
        if (node.label != null) {
            state.write(' ');
            this[node.label.type](node.label, state);
        }
        state.write(';');
    },
    ContinueStatement (node, state) {
        state.write('continue');
        if (node.label != null) {
            state.write(' ');
            this[node.label.type](node.label, state);
        }
        state.write(';');
    },
    WithStatement (node, state) {
        state.write('with (');
        this[node.object.type](node.object, state);
        state.write(') ');
        this[node.body.type](node.body, state);
    },
    SwitchStatement (node, state) {
        const indent = state.indent.repeat(state.indentLevel++);
        const { lineEnd, writeComments } = state;
        state.indentLevel++;
        const caseIndent = indent + state.indent;
        const statementIndent = caseIndent + state.indent;
        state.write('switch (');
        this[node.discriminant.type](node.discriminant, state);
        state.write(') {' + lineEnd);
        const { cases: occurences } = node;
        const { length: occurencesCount } = occurences;
        for(let i = 0; i < occurencesCount; i++){
            const occurence = occurences[i];
            if (writeComments && occurence.comments != null) {
                formatComments(state, occurence.comments, caseIndent, lineEnd);
            }
            if (occurence.test) {
                state.write(caseIndent + 'case ');
                this[occurence.test.type](occurence.test, state);
                state.write(':' + lineEnd);
            } else {
                state.write(caseIndent + 'default:' + lineEnd);
            }
            const { consequent } = occurence;
            const { length: consequentCount } = consequent;
            for(let i = 0; i < consequentCount; i++){
                const statement = consequent[i];
                if (writeComments && statement.comments != null) {
                    formatComments(state, statement.comments, statementIndent, lineEnd);
                }
                state.write(statementIndent);
                this[statement.type](statement, state);
                state.write(lineEnd);
            }
        }
        state.indentLevel -= 2;
        state.write(indent + '}');
    },
    ReturnStatement (node, state) {
        state.write('return');
        if (node.argument) {
            state.write(' ');
            this[node.argument.type](node.argument, state);
        }
        state.write(';');
    },
    ThrowStatement (node, state) {
        state.write('throw ');
        this[node.argument.type](node.argument, state);
        state.write(';');
    },
    TryStatement (node, state) {
        state.write('try ');
        this[node.block.type](node.block, state);
        if (node.handler) {
            const { handler } = node;
            if (handler.param == null) {
                state.write(' catch ');
            } else {
                state.write(' catch (');
                this[handler.param.type](handler.param, state);
                state.write(') ');
            }
            this[handler.body.type](handler.body, state);
        }
        if (node.finalizer) {
            state.write(' finally ');
            this[node.finalizer.type](node.finalizer, state);
        }
    },
    WhileStatement (node, state) {
        state.write('while (');
        this[node.test.type](node.test, state);
        state.write(') ');
        this[node.body.type](node.body, state);
    },
    DoWhileStatement (node, state) {
        state.write('do ');
        this[node.body.type](node.body, state);
        state.write(' while (');
        this[node.test.type](node.test, state);
        state.write(');');
    },
    ForStatement (node, state) {
        state.write('for (');
        if (node.init != null) {
            const { init } = node;
            if (init.type[0] === 'V') {
                formatVariableDeclaration(state, init);
            } else {
                this[init.type](init, state);
            }
        }
        state.write('; ');
        if (node.test) {
            this[node.test.type](node.test, state);
        }
        state.write('; ');
        if (node.update) {
            this[node.update.type](node.update, state);
        }
        state.write(') ');
        this[node.body.type](node.body, state);
    },
    ForInStatement: ForInStatement = function(node, state) {
        state.write(`for ${node.await ? 'await ' : ''}(`);
        const { left } = node;
        if (left.type[0] === 'V') {
            formatVariableDeclaration(state, left);
        } else {
            this[left.type](left, state);
        }
        // Identifying whether node.type is `ForInStatement` or `ForOfStatement`
        state.write(node.type[3] === 'I' ? ' in ' : ' of ');
        this[node.right.type](node.right, state);
        state.write(') ');
        this[node.body.type](node.body, state);
    },
    ForOfStatement: ForInStatement,
    DebuggerStatement (node, state) {
        state.write('debugger;', node);
    },
    FunctionDeclaration: FunctionDeclaration = function(node, state) {
        state.write((node.async ? 'async ' : '') + (node.generator ? 'function* ' : 'function ') + (node.id ? node.id.name : ''), node);
        formatSequence(state, node.params);
        state.write(' ');
        this[node.body.type](node.body, state);
    },
    FunctionExpression: FunctionDeclaration,
    VariableDeclaration (node, state) {
        formatVariableDeclaration(state, node);
        state.write(';');
    },
    VariableDeclarator (node, state) {
        this[node.id.type](node.id, state);
        if (node.init != null) {
            state.write(' = ');
            this[node.init.type](node.init, state);
        }
    },
    ClassDeclaration (node, state) {
        state.write('class ' + (node.id ? `${node.id.name} ` : ''), node);
        if (node.superClass) {
            state.write('extends ');
            const { superClass } = node;
            const { type } = superClass;
            const precedence = state.expressionsPrecedence[type];
            if ((type[0] !== 'C' || type[1] !== 'l' || type[5] !== 'E') && (precedence === NEEDS_PARENTHESES || precedence < state.expressionsPrecedence.ClassExpression)) {
                // Not a ClassExpression that needs parentheses
                state.write('(');
                this[node.superClass.type](superClass, state);
                state.write(')');
            } else {
                this[superClass.type](superClass, state);
            }
            state.write(' ');
        }
        this.ClassBody(node.body, state);
    },
    ImportDeclaration (node, state) {
        state.write('import ');
        const { specifiers, attributes } = node;
        const { length } = specifiers;
        // TODO: Once babili is fixed, put this after condition
        // https://github.com/babel/babili/issues/430
        let i = 0;
        if (length > 0) {
            for(; i < length;){
                if (i > 0) {
                    state.write(', ');
                }
                const specifier = specifiers[i];
                const type = specifier.type[6];
                if (type === 'D') {
                    // ImportDefaultSpecifier
                    state.write(specifier.local.name, specifier);
                    i++;
                } else if (type === 'N') {
                    // ImportNamespaceSpecifier
                    state.write('* as ' + specifier.local.name, specifier);
                    i++;
                } else {
                    break;
                }
            }
            if (i < length) {
                state.write('{');
                for(;;){
                    const specifier = specifiers[i];
                    const { name } = specifier.imported;
                    state.write(name, specifier);
                    if (name !== specifier.local.name) {
                        state.write(' as ' + specifier.local.name);
                    }
                    if (++i < length) {
                        state.write(', ');
                    } else {
                        break;
                    }
                }
                state.write('}');
            }
            state.write(' from ');
        }
        this.Literal(node.source, state);
        if (attributes && attributes.length > 0) {
            state.write(' with { ');
            for(let i = 0; i < attributes.length; i++){
                this.ImportAttribute(attributes[i], state);
                if (i < attributes.length - 1) state.write(', ');
            }
            state.write(' }');
        }
        state.write(';');
    },
    ImportAttribute (node, state) {
        this.Identifier(node.key, state);
        state.write(': ');
        this.Literal(node.value, state);
    },
    ImportExpression (node, state) {
        state.write('import(');
        this[node.source.type](node.source, state);
        state.write(')');
    },
    ExportDefaultDeclaration (node, state) {
        state.write('export default ');
        this[node.declaration.type](node.declaration, state);
        if (state.expressionsPrecedence[node.declaration.type] != null && node.declaration.type[0] !== 'F') {
            // All expression nodes except `FunctionExpression`
            state.write(';');
        }
    },
    ExportNamedDeclaration (node, state) {
        state.write('export ');
        if (node.declaration) {
            this[node.declaration.type](node.declaration, state);
        } else {
            state.write('{');
            const { specifiers } = node, { length } = specifiers;
            if (length > 0) {
                for(let i = 0;;){
                    const specifier = specifiers[i];
                    const { name } = specifier.local;
                    state.write(name, specifier);
                    if (name !== specifier.exported.name) {
                        state.write(' as ' + specifier.exported.name);
                    }
                    if (++i < length) {
                        state.write(', ');
                    } else {
                        break;
                    }
                }
            }
            state.write('}');
            if (node.source) {
                state.write(' from ');
                this.Literal(node.source, state);
            }
            if (node.attributes && node.attributes.length > 0) {
                state.write(' with { ');
                for(let i = 0; i < node.attributes.length; i++){
                    this.ImportAttribute(node.attributes[i], state);
                    if (i < node.attributes.length - 1) state.write(', ');
                }
                state.write(' }');
            }
            state.write(';');
        }
    },
    ExportAllDeclaration (node, state) {
        if (node.exported != null) {
            state.write('export * as ' + node.exported.name + ' from ');
        } else {
            state.write('export * from ');
        }
        this.Literal(node.source, state);
        if (node.attributes && node.attributes.length > 0) {
            state.write(' with { ');
            for(let i = 0; i < node.attributes.length; i++){
                this.ImportAttribute(node.attributes[i], state);
                if (i < node.attributes.length - 1) state.write(', ');
            }
            state.write(' }');
        }
        state.write(';');
    },
    MethodDefinition (node, state) {
        if (node.static) {
            state.write('static ');
        }
        const kind = node.kind[0];
        if (kind === 'g' || kind === 's') {
            // Getter or setter
            state.write(node.kind + ' ');
        }
        if (node.value.async) {
            state.write('async ');
        }
        if (node.value.generator) {
            state.write('*');
        }
        if (node.computed) {
            state.write('[');
            this[node.key.type](node.key, state);
            state.write(']');
        } else {
            this[node.key.type](node.key, state);
        }
        formatSequence(state, node.value.params);
        state.write(' ');
        this[node.value.body.type](node.value.body, state);
    },
    ClassExpression (node, state) {
        this.ClassDeclaration(node, state);
    },
    ArrowFunctionExpression (node, state) {
        state.write(node.async ? 'async ' : '', node);
        const { params } = node;
        if (params != null) {
            // Omit parenthesis if only one named parameter
            if (params.length === 1 && params[0].type[0] === 'I') {
                // If params[0].type[0] starts with 'I', it can't be `ImportDeclaration` nor `IfStatement` and thus is `Identifier`
                state.write(params[0].name, params[0]);
            } else {
                formatSequence(state, node.params);
            }
        }
        state.write(' => ');
        if (node.body.type[0] === 'O') {
            // Body is an object expression
            state.write('(');
            this.ObjectExpression(node.body, state);
            state.write(')');
        } else {
            this[node.body.type](node.body, state);
        }
    },
    ThisExpression (node, state) {
        state.write('this', node);
    },
    Super (node, state) {
        state.write('super', node);
    },
    RestElement: RestElement = function(node, state) {
        state.write('...');
        this[node.argument.type](node.argument, state);
    },
    SpreadElement: RestElement,
    YieldExpression (node, state) {
        state.write(node.delegate ? 'yield*' : 'yield');
        if (node.argument) {
            state.write(' ');
            this[node.argument.type](node.argument, state);
        }
    },
    AwaitExpression (node, state) {
        state.write('await ', node);
        formatExpression(state, node.argument, node);
    },
    TemplateLiteral (node, state) {
        const { quasis, expressions } = node;
        state.write('`');
        const { length } = expressions;
        for(let i = 0; i < length; i++){
            const expression = expressions[i];
            const quasi = quasis[i];
            state.write(quasi.value.raw, quasi);
            state.write('${');
            this[expression.type](expression, state);
            state.write('}');
        }
        const quasi = quasis[quasis.length - 1];
        state.write(quasi.value.raw, quasi);
        state.write('`');
    },
    TemplateElement (node, state) {
        state.write(node.value.raw, node);
    },
    TaggedTemplateExpression (node, state) {
        formatExpression(state, node.tag, node);
        this[node.quasi.type](node.quasi, state);
    },
    ArrayExpression: ArrayExpression = function(node, state) {
        state.write('[');
        if (node.elements.length > 0) {
            const { elements } = node, { length } = elements;
            for(let i = 0;;){
                const element = elements[i];
                if (element != null) {
                    this[element.type](element, state);
                }
                if (++i < length) {
                    state.write(', ');
                } else {
                    if (element == null) {
                        state.write(', ');
                    }
                    break;
                }
            }
        }
        state.write(']');
    },
    ArrayPattern: ArrayExpression,
    ObjectExpression (node, state) {
        const indent = state.indent.repeat(state.indentLevel++);
        const { lineEnd, writeComments } = state;
        const propertyIndent = indent + state.indent;
        state.write('{');
        if (node.properties.length > 0) {
            state.write(lineEnd);
            if (writeComments && node.comments != null) {
                formatComments(state, node.comments, propertyIndent, lineEnd);
            }
            const comma = ',' + lineEnd;
            const { properties } = node, { length } = properties;
            for(let i = 0;;){
                const property = properties[i];
                if (writeComments && property.comments != null) {
                    formatComments(state, property.comments, propertyIndent, lineEnd);
                }
                state.write(propertyIndent);
                this[property.type](property, state);
                if (++i < length) {
                    state.write(comma);
                } else {
                    break;
                }
            }
            state.write(lineEnd);
            if (writeComments && node.trailingComments != null) {
                formatComments(state, node.trailingComments, propertyIndent, lineEnd);
            }
            state.write(indent + '}');
        } else if (writeComments) {
            if (node.comments != null) {
                state.write(lineEnd);
                formatComments(state, node.comments, propertyIndent, lineEnd);
                if (node.trailingComments != null) {
                    formatComments(state, node.trailingComments, propertyIndent, lineEnd);
                }
                state.write(indent + '}');
            } else if (node.trailingComments != null) {
                state.write(lineEnd);
                formatComments(state, node.trailingComments, propertyIndent, lineEnd);
                state.write(indent + '}');
            } else {
                state.write('}');
            }
        } else {
            state.write('}');
        }
        state.indentLevel--;
    },
    Property (node, state) {
        if (node.method || node.kind[0] !== 'i') {
            // Either a method or of kind `set` or `get` (not `init`)
            this.MethodDefinition(node, state);
        } else {
            if (!node.shorthand) {
                if (node.computed) {
                    state.write('[');
                    this[node.key.type](node.key, state);
                    state.write(']');
                } else {
                    this[node.key.type](node.key, state);
                }
                state.write(': ');
            }
            this[node.value.type](node.value, state);
        }
    },
    PropertyDefinition (node, state) {
        if (node.static) {
            state.write('static ');
        }
        if (node.computed) {
            state.write('[');
        }
        this[node.key.type](node.key, state);
        if (node.computed) {
            state.write(']');
        }
        if (node.value == null) {
            if (node.key.type[0] !== 'F') {
                state.write(';');
            }
            return;
        }
        state.write(' = ');
        this[node.value.type](node.value, state);
        state.write(';');
    },
    ObjectPattern (node, state) {
        state.write('{');
        if (node.properties.length > 0) {
            const { properties } = node, { length } = properties;
            for(let i = 0;;){
                this[properties[i].type](properties[i], state);
                if (++i < length) {
                    state.write(', ');
                } else {
                    break;
                }
            }
        }
        state.write('}');
    },
    SequenceExpression (node, state) {
        formatSequence(state, node.expressions);
    },
    UnaryExpression (node, state) {
        if (node.prefix) {
            const { operator, argument, argument: { type } } = node;
            state.write(operator);
            const needsParentheses = expressionNeedsParenthesis(state, argument, node);
            if (!needsParentheses && (operator.length > 1 || type[0] === 'U' && (type[1] === 'n' || type[1] === 'p') && argument.prefix && argument.operator[0] === operator && (operator === '+' || operator === '-'))) {
                // Large operator or argument is UnaryExpression or UpdateExpression node
                state.write(' ');
            }
            if (needsParentheses) {
                state.write(operator.length > 1 ? ' (' : '(');
                this[type](argument, state);
                state.write(')');
            } else {
                this[type](argument, state);
            }
        } else {
            // FIXME: This case never occurs
            this[node.argument.type](node.argument, state);
            state.write(node.operator);
        }
    },
    UpdateExpression (node, state) {
        // Always applied to identifiers or members, no parenthesis check needed
        if (node.prefix) {
            state.write(node.operator);
            this[node.argument.type](node.argument, state);
        } else {
            this[node.argument.type](node.argument, state);
            state.write(node.operator);
        }
    },
    AssignmentExpression (node, state) {
        this[node.left.type](node.left, state);
        state.write(' ' + node.operator + ' ');
        this[node.right.type](node.right, state);
    },
    AssignmentPattern (node, state) {
        this[node.left.type](node.left, state);
        state.write(' = ');
        this[node.right.type](node.right, state);
    },
    BinaryExpression: BinaryExpression = function(node, state) {
        const isIn = node.operator === 'in';
        if (isIn) {
            // Avoids confusion in `for` loops initializers
            state.write('(');
        }
        formatExpression(state, node.left, node, false);
        state.write(' ' + node.operator + ' ');
        formatExpression(state, node.right, node, true);
        if (isIn) {
            state.write(')');
        }
    },
    LogicalExpression: BinaryExpression,
    ConditionalExpression (node, state) {
        const { test } = node;
        const precedence = state.expressionsPrecedence[test.type];
        if (precedence === NEEDS_PARENTHESES || precedence <= state.expressionsPrecedence.ConditionalExpression) {
            state.write('(');
            this[test.type](test, state);
            state.write(')');
        } else {
            this[test.type](test, state);
        }
        state.write(' ? ');
        this[node.consequent.type](node.consequent, state);
        state.write(' : ');
        this[node.alternate.type](node.alternate, state);
    },
    NewExpression (node, state) {
        state.write('new ');
        const precedence = state.expressionsPrecedence[node.callee.type];
        if (precedence === NEEDS_PARENTHESES || precedence < state.expressionsPrecedence.CallExpression || hasCallExpression(node.callee)) {
            state.write('(');
            this[node.callee.type](node.callee, state);
            state.write(')');
        } else {
            this[node.callee.type](node.callee, state);
        }
        formatSequence(state, node['arguments']);
    },
    CallExpression (node, state) {
        const precedence = state.expressionsPrecedence[node.callee.type];
        if (precedence === NEEDS_PARENTHESES || precedence < state.expressionsPrecedence.CallExpression) {
            state.write('(');
            this[node.callee.type](node.callee, state);
            state.write(')');
        } else {
            this[node.callee.type](node.callee, state);
        }
        if (node.optional) {
            state.write('?.');
        }
        formatSequence(state, node['arguments']);
    },
    ChainExpression (node, state) {
        this[node.expression.type](node.expression, state);
    },
    MemberExpression (node, state) {
        const precedence = state.expressionsPrecedence[node.object.type];
        if (precedence === NEEDS_PARENTHESES || precedence < state.expressionsPrecedence.MemberExpression) {
            state.write('(');
            this[node.object.type](node.object, state);
            state.write(')');
        } else {
            this[node.object.type](node.object, state);
        }
        if (node.computed) {
            if (node.optional) {
                state.write('?.');
            }
            state.write('[');
            this[node.property.type](node.property, state);
            state.write(']');
        } else {
            if (node.optional) {
                state.write('?.');
            } else {
                state.write('.');
            }
            this[node.property.type](node.property, state);
        }
    },
    MetaProperty (node, state) {
        state.write(node.meta.name + '.' + node.property.name, node);
    },
    Identifier (node, state) {
        state.write(node.name, node);
    },
    PrivateIdentifier (node, state) {
        state.write(`#${node.name}`, node);
    },
    Literal (node, state) {
        if (node.raw != null) {
            // Non-standard property
            state.write(node.raw, node);
        } else if (node.regex != null) {
            this.RegExpLiteral(node, state);
        } else if (node.bigint != null) {
            state.write(node.bigint + 'n', node);
        } else {
            state.write(stringify(node.value), node);
        }
    },
    RegExpLiteral (node, state) {
        const { regex } = node;
        state.write(`/${regex.pattern}/${regex.flags}`, node);
    }
};
const EMPTY_OBJECT = {};
const baseGenerator = GENERATOR;
class State {
    constructor(options){
        const setup = options == null ? EMPTY_OBJECT : options;
        this.output = '';
        // Functional options
        if (setup.output != null) {
            this.output = setup.output;
            this.write = this.writeToStream;
        } else {
            this.output = '';
        }
        this.generator = setup.generator != null ? setup.generator : GENERATOR;
        this.expressionsPrecedence = setup.expressionsPrecedence != null ? setup.expressionsPrecedence : EXPRESSIONS_PRECEDENCE;
        // Formating setup
        this.indent = setup.indent != null ? setup.indent : '  ';
        this.lineEnd = setup.lineEnd != null ? setup.lineEnd : '\n';
        this.indentLevel = setup.startingIndentLevel != null ? setup.startingIndentLevel : 0;
        this.writeComments = setup.comments ? setup.comments : false;
        // Source map
        if (setup.sourceMap != null) {
            this.write = setup.output == null ? this.writeAndMap : this.writeToStreamAndMap;
            this.sourceMap = setup.sourceMap;
            this.line = 1;
            this.column = 0;
            this.lineEndSize = this.lineEnd.split('\n').length - 1;
            this.mapping = {
                original: null,
                // Uses the entire state to avoid generating ephemeral objects
                generated: this,
                name: undefined,
                source: setup.sourceMap.file || setup.sourceMap._file
            };
        }
    }
    write(code) {
        this.output += code;
    }
    writeToStream(code) {
        this.output.write(code);
    }
    writeAndMap(code, node) {
        this.output += code;
        this.map(code, node);
    }
    writeToStreamAndMap(code, node) {
        this.output.write(code);
        this.map(code, node);
    }
    map(code, node) {
        if (node != null) {
            const { type } = node;
            if (type[0] === 'L' && type[2] === 'n') {
                // LineComment
                this.column = 0;
                this.line++;
                return;
            }
            if (node.loc != null) {
                const { mapping } = this;
                mapping.original = node.loc.start;
                mapping.name = node.name;
                this.sourceMap.addMapping(mapping);
            }
            if (type[0] === 'T' && type[8] === 'E' || type[0] === 'L' && type[1] === 'i' && typeof node.value === 'string') {
                // TemplateElement or Literal string node
                const { length } = code;
                let { column, line } = this;
                for(let i = 0; i < length; i++){
                    if (code[i] === '\n') {
                        column = 0;
                        line++;
                    } else {
                        column++;
                    }
                }
                this.column = column;
                this.line = line;
                return;
            }
        }
        const { length } = code;
        const { lineEnd } = this;
        if (length > 0) {
            if (this.lineEndSize > 0 && (lineEnd.length === 1 ? code[length - 1] === lineEnd : code.endsWith(lineEnd))) {
                this.line += this.lineEndSize;
                this.column = 0;
            } else {
                this.column += length;
            }
        }
    }
    toString() {
        return this.output;
    }
}
function generate(node, options) {
    /*
  Returns a string representing the rendered code of the provided AST `node`.
  The `options` are:

  - `indent`: string to use for indentation (defaults to `␣␣`)
  - `lineEnd`: string to use for line endings (defaults to `\n`)
  - `startingIndentLevel`: indent level to start from (defaults to `0`)
  - `comments`: generate comments if `true` (defaults to `false`)
  - `output`: output stream to write the rendered code to (defaults to `null`)
  - `generator`: custom code generator (defaults to `GENERATOR`)
  - `expressionsPrecedence`: custom map of node types and their precedence level (defaults to `EXPRESSIONS_PRECEDENCE`)
  */ const state = new State(options);
    // Travel through the AST node and generate the code
    state.generator[node.type](node, state);
    return state.output;
}
}}),
"[project]/apps/website/docs/node_modules/recma-stringify/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Program} from 'estree'
 * @import {Options} from 'recma-stringify'
 * @import {Processor} from 'unified'
 * @import {VFile} from 'vfile'
 */ __turbopack_esm__({
    "default": (()=>recmaStringify)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$to$2d$js$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/estree-util-to-js/lib/index.js [app-rsc] (ecmascript)");
;
function recmaStringify(options) {
    const self = this;
    this.compiler = compiler;
    /**
   * @param {Program} tree
   *   Tree.
   * @param {VFile} file
   *   File.
   * @returns {string}
   *   JavaScript.
   */ function compiler(tree, file) {
        const settings = {
            ...self.data('settings'),
            ...options
        };
        const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$estree$2d$util$2d$to$2d$js$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toJs"])(tree, {
            SourceMapGenerator: settings.SourceMapGenerator,
            filePath: file.path || 'unknown.js',
            handlers: settings.handlers
        });
        file.map = result.map;
        return result.value;
    }
}
}}),
"[project]/apps/website/docs/node_modules/@theguild/remark-mermaid/dist/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "remarkMermaid": (()=>remarkMermaid)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit/lib/index.js [app-rsc] (ecmascript) <locals>");
;
const COMPONENT_NAME = "Mermaid";
const MERMAID_IMPORT_AST = {
    type: "mdxjsEsm",
    data: {
        estree: {
            body: [
                {
                    type: "ImportDeclaration",
                    specifiers: [
                        {
                            type: "ImportSpecifier",
                            imported: {
                                type: "Identifier",
                                name: COMPONENT_NAME
                            },
                            local: {
                                type: "Identifier",
                                name: COMPONENT_NAME
                            }
                        }
                    ],
                    source: {
                        type: "Literal",
                        value: "@theguild/remark-mermaid/mermaid"
                    }
                }
            ]
        }
    }
};
const remarkMermaid = ()=>(ast, _file, done)=>{
        const codeblocks = [];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(ast, {
            type: "code",
            lang: "mermaid"
        }, (node, index, parent)=>{
            codeblocks.push([
                node,
                index,
                parent
            ]);
        });
        if (codeblocks.length !== 0) {
            for (const [node, index, parent] of codeblocks){
                parent.children.splice(index, 1, {
                    type: "mdxJsxFlowElement",
                    name: COMPONENT_NAME,
                    attributes: [
                        {
                            type: "mdxJsxAttribute",
                            name: "chart",
                            value: node.value.replaceAll("\n", "\\n")
                        }
                    ]
                });
            }
            ast.children.unshift(MERMAID_IMPORT_AST);
        }
        done();
    };
;
}}),
"[project]/apps/website/docs/node_modules/@theguild/remark-mermaid/dist/mermaid.js (client proxy) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Mermaid": (()=>Mermaid)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server-edge.js [app-rsc] (ecmascript)");
;
const Mermaid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["registerClientReference"])(function() {
    throw new Error("Attempted to call Mermaid() from the server but Mermaid is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.");
}, "[project]/apps/website/docs/node_modules/@theguild/remark-mermaid/dist/mermaid.js <module evaluation>", "Mermaid");
}}),
"[project]/apps/website/docs/node_modules/@theguild/remark-mermaid/dist/mermaid.js (client proxy)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Mermaid": (()=>Mermaid)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server-edge.js [app-rsc] (ecmascript)");
;
const Mermaid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["registerClientReference"])(function() {
    throw new Error("Attempted to call Mermaid() from the server but Mermaid is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.");
}, "[project]/apps/website/docs/node_modules/@theguild/remark-mermaid/dist/mermaid.js", "Mermaid");
}}),
"[project]/apps/website/docs/node_modules/@theguild/remark-mermaid/dist/mermaid.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$theguild$2f$remark$2d$mermaid$2f$dist$2f$mermaid$2e$js__$28$client__proxy$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@theguild/remark-mermaid/dist/mermaid.js (client proxy) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$theguild$2f$remark$2d$mermaid$2f$dist$2f$mermaid$2e$js__$28$client__proxy$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@theguild/remark-mermaid/dist/mermaid.js (client proxy)");
;
__turbopack_export_namespace__(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$theguild$2f$remark$2d$mermaid$2f$dist$2f$mermaid$2e$js__$28$client__proxy$29$__);
}}),
"[project]/apps/website/docs/node_modules/@theguild/remark-npm2yarn/dist/constants.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "CHARS_REGEX": (()=>CHARS_REGEX),
    "KEY_VALUE_REGEX": (()=>KEY_VALUE_REGEX),
    "LINES_REGEX": (()=>LINES_REGEX),
    "META_PLACEHOLDER": (()=>META_PLACEHOLDER),
    "PACKAGE_MANAGERS": (()=>PACKAGE_MANAGERS),
    "cleanMetadataParam": (()=>cleanMetadataParam)
});
const PACKAGE_MANAGERS = [
    "npm",
    "pnpm",
    "yarn",
    "bun"
];
const KEY_VALUE_REGEX = /\w+="(.*?)"/g;
const CHARS_REGEX = /\/(.*?)\/((#[a-z])|([\d-,])+)?/g;
const LINES_REGEX = /\{(.*?)}/g;
const META_PLACEHOLDER = "npm2yarn";
function cleanMetadataParam(metadata, param) {
    const regex = new RegExp(`${KEY_VALUE_REGEX.source}|${CHARS_REGEX.source}|${LINES_REGEX.source}|${param}`, "g");
    return metadata.replace(regex, (matched)=>matched === param ? "" : matched);
}
;
}}),
"[project]/apps/website/docs/node_modules/@theguild/remark-npm2yarn/dist/plugin.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "remarkNpm2Yarn": (()=>remarkNpm2Yarn)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$theguild$2f$remark$2d$npm2yarn$2f$dist$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@theguild/remark-npm2yarn/dist/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit/lib/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$npm$2d$to$2d$yarn$2f$dist$2f$npm$2d$to$2d$yarn$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/npm-to-yarn/dist/npm-to-yarn.mjs [app-rsc] (ecmascript)");
;
;
;
const TABS_NAME = "$Tabs";
function getTabAST(node, packageManager, newMetadata) {
    return {
        type: "mdxJsxFlowElement",
        name: `${TABS_NAME}.Tab`,
        children: [
            {
                type: node.type,
                lang: node.lang,
                // Replace `npm2yarn` metadata keyword, so it will be not picked by inserted code-blocks
                meta: newMetadata,
                value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$npm$2d$to$2d$yarn$2f$dist$2f$npm$2d$to$2d$yarn$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(node.value, packageManager)
            }
        ]
    };
}
const remarkNpm2Yarn = (opts)=>{
    if (!opts?.packageName) throw new Error("remarkNpm2Yarn: `packageName` option is required");
    if (!opts?.tabNamesProp) throw new Error("remarkNpm2Yarn: `tabNamesProp` option is required");
    if (!opts?.storageKey) throw new Error("remarkNpm2Yarn: `storageKey` option is required");
    const IMPORT_AST = {
        type: "mdxjsEsm",
        data: {
            estree: {
                body: [
                    {
                        type: "ImportDeclaration",
                        source: {
                            type: "Literal",
                            value: opts.packageName
                        },
                        specifiers: [
                            {
                                type: "ImportSpecifier",
                                imported: {
                                    type: "Identifier",
                                    name: "Tabs"
                                },
                                local: {
                                    type: "Identifier",
                                    name: TABS_NAME
                                }
                            }
                        ]
                    }
                ]
            }
        }
    };
    const TABS_AST = {
        type: "mdxJsxFlowElement",
        name: TABS_NAME,
        attributes: [
            {
                type: "mdxJsxAttribute",
                name: opts.tabNamesProp,
                value: {
                    type: "mdxJsxAttributeValueExpression",
                    data: {
                        estree: {
                            body: [
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "ArrayExpression",
                                        elements: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$theguild$2f$remark$2d$npm2yarn$2f$dist$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PACKAGE_MANAGERS"].map((value)=>({
                                                type: "Literal",
                                                value
                                            }))
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            {
                type: "mdxJsxAttribute",
                name: "storageKey",
                value: opts.storageKey
            }
        ]
    };
    return (ast, _file, done)=>{
        let isImported = false;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(ast, "code", (node, index, parent)=>{
            const newMetadata = node.meta ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$theguild$2f$remark$2d$npm2yarn$2f$dist$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["cleanMetadataParam"])(node.meta, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$theguild$2f$remark$2d$npm2yarn$2f$dist$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["META_PLACEHOLDER"]) : "";
            if (!node.meta || node.meta === newMetadata) return;
            if (!node.value.startsWith("npm") && !node.value.startsWith("npx")) {
                throw new Error(`\`npm-to-yarn\` package can convert only npm or npx commands to all package managers. Found: ${node.value}`);
            }
            parent.children[index] = {
                ...TABS_AST,
                children: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$theguild$2f$remark$2d$npm2yarn$2f$dist$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PACKAGE_MANAGERS"].map((value)=>getTabAST(node, value, newMetadata))
            };
            if (isImported) return;
            ast.children.unshift(IMPORT_AST);
            isImported = true;
        });
        done();
    };
};
;
}}),
"[project]/apps/website/docs/node_modules/npm-to-yarn/dist/npm-to-yarn.mjs [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>convert)
});
var unchangedCLICommands = [
    'test',
    'login',
    'logout',
    'link',
    'unlink',
    'publish',
    'cache',
    'start',
    'stop',
    'test'
];
var yarnCLICommands = [
    'init',
    'run',
    'add',
    'audit',
    'autoclean',
    'bin',
    'check',
    'config',
    'create',
    'dedupe',
    'generate-lock-entry',
    'global',
    'help',
    'import',
    'info',
    'install',
    'licenses',
    'list',
    'lockfile',
    'outdated',
    'owner',
    'pack',
    'policies',
    'prune',
    'remove',
    'self-update',
    'tag',
    'team',
    'upgrade',
    'upgrade-interactive',
    'version',
    'versions',
    'why',
    'workspace',
    'workspaces'
];
var executorCommands = {
    npm: 'npx',
    yarn: 'yarn dlx',
    pnpm: 'pnpm dlx',
    bun: 'bun x'
};
function parse(command) {
    var args = [];
    var lastQuote = false;
    var escaped = false;
    var part = '';
    for(var i = 0; i < command.length; ++i){
        var char = command.charAt(i);
        if (char === '\\') {
            part += char;
            escaped = true;
        } else {
            if (char === ' ' && !lastQuote) {
                args.push(part);
                part = '';
            } else if (!escaped && (char === '"' || char === "'")) {
                part += char;
                if (char === lastQuote) {
                    lastQuote = false;
                } else if (!lastQuote) {
                    lastQuote = char;
                }
            } else {
                part += char;
            }
            escaped = false;
        }
    }
    args.push(part);
    return args;
}
function convertAddRemoveArgs(args) {
    return args.map(function(item) {
        switch(item){
            case '--no-lockfile':
                return '--no-package-lock';
            case '--production':
                return '--save-prod';
            case '--dev':
                return '--save-dev';
            case '--optional':
                return '--save-optional';
            case '--exact':
                return '--save-exact';
            default:
                return item;
        }
    });
}
var yarnToNpmTable = {
    add: function(args) {
        if (args.length === 2 && args[1] === '--force') {
            return [
                'rebuild'
            ];
        }
        args[0] = 'install';
        return convertAddRemoveArgs(args);
    },
    remove: function(args) {
        args[0] = 'uninstall';
        return convertAddRemoveArgs(args);
    },
    version: function(args) {
        return args.map(function(item) {
            switch(item){
                case '--major':
                    return 'major';
                case '--minor':
                    return 'minor';
                case '--patch':
                    return 'patch';
                default:
                    return item;
            }
        });
    },
    install: 'install',
    list: function(args) {
        args[0] = 'ls';
        var patternIndex = args.findIndex(function(item) {
            return item === '--pattern';
        });
        if (patternIndex >= 0 && args[patternIndex + 1]) {
            var packages = args[patternIndex + 1].replace(/["']([^"']+)["']/, '$1').split('|');
            args.splice(patternIndex, 2, packages.join(' '));
        }
        return args;
    },
    init: 'init',
    create: 'init',
    outdated: 'outdated',
    run: 'run',
    global: function(args) {
        switch(args[1]){
            case 'add':
                args.shift();
                args = yarnToNpmTable.add(args);
                args.push('--global');
                return args;
            case 'remove':
                args.shift();
                args = yarnToNpmTable.remove(args);
                args.push('--global');
                return args;
            case 'list':
                args.shift();
                args = yarnToNpmTable.list(args);
                args.push('--global');
                return args;
            // case 'bin':
            // case 'upgrade':
            default:
                args.push("\n# couldn't auto-convert command");
                return args;
        }
    },
    pack: function(args) {
        return args.map(function(item) {
            if (item === '--filename') {
                return '--pack-destination';
            }
            return item;
        });
    }
};
function yarnToNPM(_m, command) {
    command = (command || '').trim();
    if (command === '') {
        return 'npm install';
    }
    var args = parse(command);
    var firstCommand = (/\w+/.exec(command) || [
        ''
    ])[0];
    if (unchangedCLICommands.includes(args[0])) {
        return 'npm ' + command;
    } else if (args[0] in yarnToNpmTable) {
        var converter = yarnToNpmTable[args[0]];
        if (typeof converter === 'function') {
            args = converter(args);
        } else {
            args[0] = converter;
        }
        return 'npm ' + args.filter(Boolean).join(' ');
    } else if (!yarnCLICommands.includes(firstCommand)) {
        // i.e., yarn grunt -> npm run grunt
        return 'npm run ' + command;
    } else {
        return 'npm ' + command + "\n# couldn't auto-convert command";
    }
}
function convertInstallArgs$1(args) {
    if (args.includes('--global') || args.includes('-g')) {
        args.unshift('global');
    }
    return args.map(function(item) {
        switch(item){
            case '--save-dev':
            case '-D':
                return '--dev';
            case '--save-prod':
            case '-P':
                return '--production';
            case '--no-package-lock':
                return '--no-lockfile';
            case '--save-optional':
            case '-O':
                return '--optional';
            case '--save-exact':
            case '-E':
                return '--exact';
            case '--save':
            case '-S':
            case '--global':
            case '-g':
                return '';
            default:
                return item;
        }
    });
}
var npmToYarnTable = {
    install: function(args) {
        if (args.length === 1) {
            return [
                'install'
            ];
        }
        args[0] = 'add';
        return convertInstallArgs$1(args);
    },
    i: function(args) {
        return npmToYarnTable.install(args);
    },
    uninstall: function(args) {
        args[0] = 'remove';
        return convertInstallArgs$1(args);
    },
    un: function(args) {
        return npmToYarnTable.uninstall(args);
    },
    remove: function(args) {
        return npmToYarnTable.uninstall(args);
    },
    r: function(args) {
        return npmToYarnTable.uninstall(args);
    },
    rm: function(args) {
        return npmToYarnTable.uninstall(args);
    },
    version: function(args) {
        return args.map(function(item) {
            switch(item){
                case 'major':
                    return '--major';
                case 'minor':
                    return '--minor';
                case 'patch':
                    return '--patch';
                default:
                    return item;
            }
        });
    },
    rb: function(args) {
        return npmToYarnTable.rebuild(args);
    },
    rebuild: function(args) {
        args[0] = 'add';
        args.push('--force');
        return args;
    },
    run: function(args) {
        if (args[1] && !unchangedCLICommands.includes(args[1]) && !yarnCLICommands.includes(args[1])) {
            args.splice(0, 1);
        }
        return args;
    },
    exec: function(args) {
        args[0] = 'run';
        return npmToYarnTable.run(args);
    },
    ls: function(args) {
        args[0] = 'list';
        var ended = false;
        var packages = args.filter(function(item, id) {
            if (id > 0 && !ended) {
                ended = item.startsWith('-');
                return !ended;
            }
            return false;
        });
        if (packages.length > 0) {
            args.splice(1, packages.length, '--pattern', '"' + packages.join('|') + '"');
        }
        return args;
    },
    list: function(args) {
        return npmToYarnTable.ls(args);
    },
    init: function(args) {
        if (args[1] && !args[1].startsWith('-')) {
            args[0] = 'create';
            var m = args[1].match(/(.+)@latest/);
            if (m) {
                args[1] = m[1];
            }
        }
        return args.filter(function(item) {
            return item !== '--scope';
        });
    },
    create: function(args) {
        return npmToYarnTable.init(args);
    },
    ln: 'link',
    t: 'test',
    tst: 'test',
    outdated: 'outdated',
    pack: function(args) {
        return args.map(function(item) {
            if (item.startsWith('--pack-destination')) {
                return item.replace(/^--pack-destination[\s=]/, '--filename ');
            }
            return item;
        });
    }
};
function npmToYarn(_m, command) {
    var args = parse((command || '').trim());
    var index = args.findIndex(function(a) {
        return a === '--';
    });
    if (index >= 0) {
        args.splice(index, 1);
    }
    if (unchangedCLICommands.includes(args[0])) {
        return 'yarn ' + args.filter(Boolean).join(' ');
    } else if (args[0] in npmToYarnTable) {
        var converter = npmToYarnTable[args[0]];
        if (typeof converter === 'function') {
            args = converter(args);
        } else {
            args[0] = converter;
        }
        return 'yarn ' + args.filter(Boolean).join(' ');
    } else {
        return 'npm ' + command + "\n# couldn't auto-convert command";
    }
}
function convertPnpmInstallArgs(args) {
    return args.map(function(item) {
        switch(item){
            case '--save':
            case '-S':
                return '';
            case '--no-package-lock':
                return '--frozen-lockfile';
            // case '--save-dev':
            // case '-D':
            // case '--save-prod':
            // case '-P':
            // case '--save-optional':
            // case '-O':
            // case '--save-exact':
            // case '-E':
            // case '--global':
            // case '-g':
            default:
                return item;
        }
    });
}
function convertFilterArg(args) {
    if (args.length > 1) {
        var filter = args.filter(function(item, index) {
            return index !== 0 && !item.startsWith('-');
        });
        if (filter.length > 0) {
            args = args.filter(function(item, index) {
                return index === 0 || item.startsWith('-');
            });
            args.push('--filter');
            args.push(filter.join(' '));
        }
    }
    return args;
}
var npmToPnpmTable = {
    // ------------------------------
    install: function(args) {
        if (args.length > 1 && args.filter(function(item) {
            return !item.startsWith('-');
        }).length > 1) {
            args[0] = 'add';
        }
        return convertPnpmInstallArgs(args);
    },
    i: function(args) {
        return npmToPnpmTable.install(args);
    },
    // ------------------------------
    uninstall: function(args) {
        args[0] = 'remove';
        return convertPnpmInstallArgs(args);
    },
    un: function(args) {
        return npmToPnpmTable.uninstall(args);
    },
    remove: function(args) {
        return npmToPnpmTable.uninstall(args);
    },
    r: function(args) {
        return npmToPnpmTable.uninstall(args);
    },
    rm: function(args) {
        return npmToPnpmTable.uninstall(args);
    },
    // ------------------------------
    rb: function(args) {
        return npmToPnpmTable.rebuild(args);
    },
    rebuild: function(args) {
        args[0] = 'rebuild';
        return convertFilterArg(args);
    },
    run: 'run',
    exec: 'exec',
    ls: function(args) {
        return npmToPnpmTable.list(args);
    },
    list: function(args) {
        return args.map(function(item) {
            if (item.startsWith('--depth=')) {
                return "--depth ".concat(item.split('=')[1]);
            }
            switch(item){
                case '--production':
                    return '--prod';
                case '--development':
                    return '--dev';
                default:
                    return item;
            }
        });
    },
    init: function(args) {
        if (args[1] && !args[1].startsWith('-')) {
            args[0] = 'create';
            var m = args[1].match(/(.+)@latest/);
            if (m) {
                args[1] = m[1];
            }
        }
        return args.filter(function(item) {
            return item !== '--scope';
        });
    },
    create: function(args) {
        return npmToPnpmTable.init(args);
    },
    ln: 'link',
    t: 'test',
    test: 'test',
    tst: 'test',
    start: 'start',
    link: 'link',
    unlink: function(args) {
        return convertFilterArg(args);
    },
    outdated: 'outdated',
    pack: function(args) {
        return args.map(function(item) {
            if (item.startsWith('--pack-destination')) {
                return item.replace(/^--pack-destination[\s=]/, '--pack-destination ');
            }
            return item;
        });
    }
};
function npmToPnpm(_m, command) {
    var args = parse((command || '').trim());
    var index = args.findIndex(function(a) {
        return a === '--';
    });
    if (index >= 0) {
        args.splice(index, 1);
    }
    if (args[0] in npmToPnpmTable) {
        var converter = npmToPnpmTable[args[0]];
        if (typeof converter === 'function') {
            args = converter(args);
        } else {
            args[0] = converter;
        }
        return 'pnpm ' + args.filter(Boolean).join(' ');
    } else {
        return 'npm ' + command + "\n# couldn't auto-convert command";
    }
}
function convertInstallArgs(args) {
    // bun uses -g and --global flags
    // bun mostly conforms to Yarn's CLI
    return args.map(function(item) {
        switch(item){
            case '--save-dev':
            case '--development':
            case '-D':
                return '--dev';
            case '--save-prod':
            case '-P':
                return '--production';
            case '--no-package-lock':
                return '--no-save';
            case '--save-optional':
            case '-O':
                return '--optional';
            case '--save-exact':
            case '-E':
                return '--exact';
            case '--save':
            case '-S':
                // this is default in bun
                return '';
            case '--global':
            case '-g':
                return '--global';
            default:
                return item;
        }
    });
}
function npmToBun(_m, command) {
    var args = parse((command || '').trim());
    var index = args.findIndex(function(a) {
        return a === '--';
    });
    if (index >= 0) {
        args.splice(index, 1);
    }
    var cmd = 'bun';
    switch(args[0]){
        case 'install':
        case 'i':
            if (args.length === 1) {
                args = [
                    'install'
                ];
            } else {
                args[0] = 'add';
            }
            args = convertInstallArgs(args);
            break;
        case 'uninstall':
        case 'un':
        case 'remove':
        case 'r':
        case 'rm':
            args[0] = 'remove';
            args = convertInstallArgs(args);
            break;
        case 'cache':
            if (args[1] === 'clean') {
                args = [
                    'pm',
                    'cache',
                    'rm'
                ].concat(args.slice(2));
            } else {
                cmd = 'npm';
            }
            break;
        case 'rebuild':
        case 'rb':
            args[0] = 'add';
            args.push('--force');
            break;
        case 'run':
            break;
        case 'list':
        case 'ls':
            // 'npm ls' => 'bun pm ls'
            args = convertInstallArgs(args);
            args[0] = 'ls';
            args.unshift('pm');
            break;
        case 'init':
        case 'create':
            if (args[1]) {
                if (args[1].startsWith('@')) {
                    cmd = 'bunx';
                    args[1] = args[1].replace('/', '/create-');
                    args = args.slice(1);
                } else if (!args[1].startsWith('-')) {
                    cmd = 'bunx';
                    args[1] = "create-".concat(args[1].replace('@latest', ''));
                    args = args.slice(1);
                } else {
                    args[0] = 'init';
                }
            }
            break;
        case 'link':
        case 'ln':
            args = convertInstallArgs(args);
            args[0] = 'link';
            break;
        case 'stop':
        case 'start':
        case 'unlink':
            break;
        case 'test':
        case 't':
        case 'tst':
            args[0] = 'test';
            args.unshift('run');
            break;
        case 'exec':
            cmd = 'bunx';
            args.splice(0, 1);
            break;
        default:
            // null == keep `npm` command
            cmd = 'npm';
            break;
    }
    var filtered = args.filter(Boolean).filter(function(arg) {
        return arg !== '--';
    });
    return "".concat(cmd, " ").concat(filtered.join(' ')).concat(cmd === 'npm' ? "\n# couldn't auto-convert command" : '').replace('=', ' ');
}
/**
 * Converts between npm and yarn command
 */ function convert(str, to) {
    if (str.includes('npx') || str.includes('yarn dlx') || str.includes('pnpm dlx') || str.includes('bun x')) {
        var executor = str.includes('npx') ? 'npx' : str.includes('yarn dlx') ? 'yarn dlx' : str.includes('pnpm dlx') ? 'pnpm dlx' : 'bun x';
        return str.replace(executor, executorCommands[to]);
    } else if (to === 'npm') {
        return str.replace(/yarn(?: +([^&\n\r]*))?/gm, yarnToNPM);
    } else if (to === 'pnpm') {
        return str.replace(/npm(?: +([^&\n\r]*))?/gm, npmToPnpm);
    } else if (to === 'bun') {
        return str.replace(/npm(?: +([^&\n\r]*))?/gm, npmToBun);
    } else {
        return str.replace(/npm(?: +([^&\n\r]*))?/gm, npmToYarn);
    }
}
;
 //# sourceMappingURL=npm-to-yarn.mjs.map
}}),
"[project]/apps/website/docs/node_modules/unist-util-remove/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 */ /**
 * @typedef Options
 *   Configuration.
 * @property {boolean | null | undefined} [cascade=true]
 *   Whether to drop parent nodes if they had children, but all their children
 *   were filtered out (default: `true`).
 */ __turbopack_esm__({
    "remove": (()=>remove)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-is/lib/index.js [app-rsc] (ecmascript)");
;
function remove(tree, options, test) {
    const is = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convert"])(test || options);
    let cascade = true;
    if (options && typeof options === 'object' && 'cascade' in options && typeof options.cascade === 'boolean') {
        cascade = options.cascade;
    }
    preorder(tree);
    /**
   * Check and remove nodes recursively in preorder.
   * For each composite node, modify its children array in-place.
   *
   * @param {Node} node
   * @param {number | undefined} [index]
   * @param {Parent | undefined} [parent]
   * @returns {boolean}
   */ function preorder(node, index, parent) {
        if (node !== tree && is(node, index, parent)) {
            return false;
        }
        if ('children' in node && Array.isArray(node.children)) {
            const nodeAsParent = node;
            const children = nodeAsParent.children;
            let oldChildIndex = -1;
            let newChildIndex = 0;
            if (children.length > 0) {
                // Move all living children to the beginning of the children array.
                while(++oldChildIndex < children.length){
                    if (preorder(children[oldChildIndex], oldChildIndex, nodeAsParent)) {
                        children[newChildIndex++] = children[oldChildIndex];
                    }
                }
                // Cascade delete.
                if (node !== tree && cascade && !newChildIndex) {
                    return false;
                }
                // Drop other nodes.
                children.length = newChildIndex;
            }
        }
        return true;
    }
}
}}),
"[project]/apps/website/docs/node_modules/format/format.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
//
// format - printf-like string formatting for JavaScript
// github.com/samsonjs/format
// @_sjs
//
// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>
//
// MIT License
// http://sjs.mit-license.org
//
;
(function() {
    //// Export the API
    var namespace;
    // CommonJS / Node module
    if ("TURBOPACK compile-time truthy", 1) {
        namespace = module.exports = format;
    } else {
        "TURBOPACK unreachable";
    }
    namespace.format = format;
    namespace.vsprintf = vsprintf;
    if (typeof console !== 'undefined' && typeof console.log === 'function') {
        namespace.printf = printf;
    }
    function printf() {
        console.log(format.apply(null, arguments));
    }
    function vsprintf(fmt, replacements) {
        return format.apply(null, [
            fmt
        ].concat(replacements));
    }
    function format(fmt) {
        var argIndex = 1 // skip initial format argument
        , args = [].slice.call(arguments), i = 0, n = fmt.length, result = '', c, escaped = false, arg, tmp, leadingZero = false, precision, nextArg = function() {
            return args[argIndex++];
        }, slurpNumber = function() {
            var digits = '';
            while(/\d/.test(fmt[i])){
                digits += fmt[i++];
                c = fmt[i];
            }
            return digits.length > 0 ? parseInt(digits) : null;
        };
        for(; i < n; ++i){
            c = fmt[i];
            if (escaped) {
                escaped = false;
                if (c == '.') {
                    leadingZero = false;
                    c = fmt[++i];
                } else if (c == '0' && fmt[i + 1] == '.') {
                    leadingZero = true;
                    i += 2;
                    c = fmt[i];
                } else {
                    leadingZero = true;
                }
                precision = slurpNumber();
                switch(c){
                    case 'b':
                        result += parseInt(nextArg(), 10).toString(2);
                        break;
                    case 'c':
                        arg = nextArg();
                        if (typeof arg === 'string' || arg instanceof String) result += arg;
                        else result += String.fromCharCode(parseInt(arg, 10));
                        break;
                    case 'd':
                        result += parseInt(nextArg(), 10);
                        break;
                    case 'f':
                        tmp = String(parseFloat(nextArg()).toFixed(precision || 6));
                        result += leadingZero ? tmp : tmp.replace(/^0/, '');
                        break;
                    case 'j':
                        result += JSON.stringify(nextArg());
                        break;
                    case 'o':
                        result += '0' + parseInt(nextArg(), 10).toString(8);
                        break;
                    case 's':
                        result += nextArg();
                        break;
                    case 'x':
                        result += '0x' + parseInt(nextArg(), 10).toString(16);
                        break;
                    case 'X':
                        result += '0x' + parseInt(nextArg(), 10).toString(16).toUpperCase();
                        break;
                    default:
                        result += c;
                        break;
                }
            } else if (c === '%') {
                escaped = true;
            } else {
                result += c;
            }
        }
        return result;
    }
})();
}}),
"[project]/apps/website/docs/node_modules/fault/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// @ts-expect-error
__turbopack_esm__({
    "create": (()=>create),
    "fault": (()=>fault)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$format$2f$format$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/format/format.js [app-rsc] (ecmascript)");
;
const fault = Object.assign(create(Error), {
    eval: create(EvalError),
    range: create(RangeError),
    reference: create(ReferenceError),
    syntax: create(SyntaxError),
    type: create(TypeError),
    uri: create(URIError)
});
function create(Constructor) {
    /** @type {string} */ // @ts-expect-error
    FormattedError.displayName = Constructor.displayName || Constructor.name;
    return FormattedError;
    "TURBOPACK unreachable";
    /**
   * Create an error with a printf-like formatted message.
   *
   * @param {string|null} [format]
   *   Template string.
   * @param {...unknown} values
   *   Values to render in `format`.
   * @returns {Fault}
   */ function FormattedError(format, ...values) {
        /** @type {string} */ const reason = format ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$format$2f$format$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(format, ...values) : format;
        return new Constructor(reason);
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-frontmatter/dev/lib/to-matters.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {'toml' | 'yaml'} Preset
 *   Known name of a frontmatter style.
 *
 * @typedef Info
 *   Sequence.
 *
 *   Depending on how this structure is used, it reflects a marker or a fence.
 * @property {string} close
 *   Closing.
 * @property {string} open
 *   Opening.
 *
 * @typedef MatterProps
 *   Fields describing a kind of matter.
 * @property {string} type
 *   Node type to tokenize as.
 * @property {boolean | null | undefined} [anywhere=false]
 *   Whether matter can be found anywhere in the document, normally, only matter
 *   at the start of the document is recognized.
 *
 *   > 👉 **Note**: using this is a terrible idea.
 *   > It’s called frontmatter, not matter-in-the-middle or so.
 *   > This makes your markdown less portable.
 *
 * @typedef MarkerProps
 *   Marker configuration.
 * @property {Info | string} marker
 *   Character repeated 3 times, used as complete fences.
 *
 *   For example the character `'-'` will result in `'---'` being used as the
 *   fence
 *   Pass `open` and `close` to specify different characters for opening and
 *   closing fences.
 * @property {never} [fence]
 *   If `marker` is set, `fence` must not be set.
 *
 * @typedef FenceProps
 *   Fence configuration.
 * @property {Info | string} fence
 *   Complete fences.
 *
 *   This can be used when fences contain different characters or lengths
 *   other than 3.
 *   Pass `open` and `close` to interface to specify different characters for opening and
 *   closing fences.
 * @property {never} [marker]
 *   If `fence` is set, `marker` must not be set.
 *
 * @typedef {(MatterProps & FenceProps) | (MatterProps & MarkerProps)} Matter
 *   Fields describing a kind of matter.
 *
 *   > 👉 **Note**: using `anywhere` is a terrible idea.
 *   > It’s called frontmatter, not matter-in-the-middle or so.
 *   > This makes your markdown less portable.
 *
 *   > 👉 **Note**: `marker` and `fence` are mutually exclusive.
 *   > If `marker` is set, `fence` must not be set, and vice versa.
 *
 * @typedef {Matter | Preset | Array<Matter | Preset>} Options
 *   Configuration.
 */ __turbopack_esm__({
    "toMatters": (()=>toMatters)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$fault$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/fault/index.js [app-rsc] (ecmascript)");
;
const own = {}.hasOwnProperty;
const markers = {
    yaml: '-',
    toml: '+'
};
function toMatters(options) {
    /** @type {Array<Matter>} */ const result = [];
    let index = -1;
    /** @type {Array<Matter | Preset>} */ const presetsOrMatters = Array.isArray(options) ? options : options ? [
        options
    ] : [
        'yaml'
    ];
    while(++index < presetsOrMatters.length){
        result[index] = matter(presetsOrMatters[index]);
    }
    return result;
}
/**
 * Simplify an option.
 *
 * @param {Matter | Preset} option
 *   Configuration.
 * @returns {Matter}
 *   Matter.
 */ function matter(option) {
    let result = option;
    if (typeof result === 'string') {
        if (!own.call(markers, result)) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$fault$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fault"])('Missing matter definition for `%s`', result);
        }
        result = {
            type: result,
            marker: markers[result]
        };
    } else if (typeof result !== 'object') {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$fault$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fault"])('Expected matter to be an object, not `%j`', result);
    }
    if (!own.call(result, 'type')) {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$fault$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fault"])('Missing `type` in matter `%j`', result);
    }
    if (!own.call(result, 'fence') && !own.call(result, 'marker')) {
        throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$fault$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fault"])('Missing `marker` or `fence` in matter `%j`', result);
    }
    return result;
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-frontmatter/dev/lib/syntax.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenType} TokenType
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 *
 * @typedef {import('./to-matters.js').Info} Info
 * @typedef {import('./to-matters.js').Matter} Matter
 * @typedef {import('./to-matters.js').Options} Options
 */ __turbopack_esm__({
    "frontmatter": (()=>frontmatter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$frontmatter$2f$dev$2f$lib$2f$to$2d$matters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-frontmatter/dev/lib/to-matters.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
;
;
;
function frontmatter(options) {
    const matters = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$frontmatter$2f$dev$2f$lib$2f$to$2d$matters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toMatters"])(options);
    /** @type {ConstructRecord} */ const flow = {};
    let index = -1;
    while(++index < matters.length){
        const matter = matters[index];
        const code = fence(matter, 'open').charCodeAt(0);
        const construct = createConstruct(matter);
        const existing = flow[code];
        if (Array.isArray(existing)) {
            existing.push(construct);
        } else {
            // Never a single object, always an array.
            flow[code] = [
                construct
            ];
        }
    }
    return {
        flow
    };
}
/**
 * @param {Matter} matter
 * @returns {Construct}
 */ function createConstruct(matter) {
    const anywhere = matter.anywhere;
    const frontmatterType = matter.type;
    const fenceType = frontmatterType + 'Fence';
    const sequenceType = fenceType + 'Sequence';
    const valueType = frontmatterType + 'Value';
    const closingFenceConstruct = {
        tokenize: tokenizeClosingFence,
        partial: true
    };
    /**
   * Fence to look for.
   *
   * @type {string}
   */ let buffer;
    let bufferIndex = 0;
    return {
        tokenize: tokenizeFrontmatter,
        concrete: true
    };
    "TURBOPACK unreachable";
    /**
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeFrontmatter(effects, ok, nok) {
        const self = this;
        return start;
        "TURBOPACK unreachable";
        /**
     * Start of frontmatter.
     *
     * ```markdown
     * > | ---
     *     ^
     *   | title: "Venus"
     *   | ---
     * ```
     *
     * @type {State}
     */ function start(code) {
            const position = self.now();
            if (// Indent not allowed.
            position.column === 1 && // Normally, only allowed in first line.
            (position.line === 1 || anywhere)) {
                buffer = fence(matter, 'open');
                bufferIndex = 0;
                if (code === buffer.charCodeAt(bufferIndex)) {
                    effects.enter(frontmatterType);
                    effects.enter(fenceType);
                    effects.enter(sequenceType);
                    return openSequence(code);
                }
            }
            return nok(code);
        }
        /**
     * In open sequence.
     *
     * ```markdown
     * > | ---
     *     ^
     *   | title: "Venus"
     *   | ---
     * ```
     *
     * @type {State}
     */ function openSequence(code) {
            if (bufferIndex === buffer.length) {
                effects.exit(sequenceType);
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code)) {
                    effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].whitespace);
                    return openSequenceWhitespace(code);
                }
                return openAfter(code);
            }
            if (code === buffer.charCodeAt(bufferIndex++)) {
                effects.consume(code);
                return openSequence;
            }
            return nok(code);
        }
        /**
     * In whitespace after open sequence.
     *
     * ```markdown
     * > | ---␠
     *        ^
     *   | title: "Venus"
     *   | ---
     * ```
     *
     * @type {State}
     */ function openSequenceWhitespace(code) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code)) {
                effects.consume(code);
                return openSequenceWhitespace;
            }
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].whitespace);
            return openAfter(code);
        }
        /**
     * After open sequence.
     *
     * ```markdown
     * > | ---
     *        ^
     *   | title: "Venus"
     *   | ---
     * ```
     *
     * @type {State}
     */ function openAfter(code) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
                effects.exit(fenceType);
                effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
                effects.consume(code);
                effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
                // Get ready for closing fence.
                buffer = fence(matter, 'close');
                bufferIndex = 0;
                return effects.attempt(closingFenceConstruct, after, contentStart);
            }
            // EOF is not okay.
            return nok(code);
        }
        /**
     * Start of content chunk.
     *
     * ```markdown
     *   | ---
     * > | title: "Venus"
     *     ^
     *   | ---
     * ```
     *
     * @type {State}
     */ function contentStart(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
                return contentEnd(code);
            }
            effects.enter(valueType);
            return contentInside(code);
        }
        /**
     * In content chunk.
     *
     * ```markdown
     *   | ---
     * > | title: "Venus"
     *     ^
     *   | ---
     * ```
     *
     * @type {State}
     */ function contentInside(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
                effects.exit(valueType);
                return contentEnd(code);
            }
            effects.consume(code);
            return contentInside;
        }
        /**
     * End of content chunk.
     *
     * ```markdown
     *   | ---
     * > | title: "Venus"
     *                   ^
     *   | ---
     * ```
     *
     * @type {State}
     */ function contentEnd(code) {
            // Require a closing fence.
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
                return nok(code);
            }
            // Can only be an eol.
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return effects.attempt(closingFenceConstruct, after, contentStart);
        }
        /**
     * After frontmatter.
     *
     * ```markdown
     *   | ---
     *   | title: "Venus"
     * > | ---
     *        ^
     * ```
     *
     * @type {State}
     */ function after(code) {
            // `code` must be eol/eof.
            effects.exit(frontmatterType);
            return ok(code);
        }
    }
    /** @type {Tokenizer} */ function tokenizeClosingFence(effects, ok, nok) {
        let bufferIndex = 0;
        return closeStart;
        "TURBOPACK unreachable";
        /**
     * Start of close sequence.
     *
     * ```markdown
     *   | ---
     *   | title: "Venus"
     * > | ---
     *     ^
     * ```
     *
     * @type {State}
     */ function closeStart(code) {
            if (code === buffer.charCodeAt(bufferIndex)) {
                effects.enter(fenceType);
                effects.enter(sequenceType);
                return closeSequence(code);
            }
            return nok(code);
        }
        /**
     * In close sequence.
     *
     * ```markdown
     *   | ---
     *   | title: "Venus"
     * > | ---
     *     ^
     * ```
     *
     * @type {State}
     */ function closeSequence(code) {
            if (bufferIndex === buffer.length) {
                effects.exit(sequenceType);
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code)) {
                    effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].whitespace);
                    return closeSequenceWhitespace(code);
                }
                return closeAfter(code);
            }
            if (code === buffer.charCodeAt(bufferIndex++)) {
                effects.consume(code);
                return closeSequence;
            }
            return nok(code);
        }
        /**
     * In whitespace after close sequence.
     *
     * ```markdown
     * > | ---
     *   | title: "Venus"
     *   | ---␠
     *        ^
     * ```
     *
     * @type {State}
     */ function closeSequenceWhitespace(code) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code)) {
                effects.consume(code);
                return closeSequenceWhitespace;
            }
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].whitespace);
            return closeAfter(code);
        }
        /**
     * After close sequence.
     *
     * ```markdown
     *   | ---
     *   | title: "Venus"
     * > | ---
     *        ^
     * ```
     *
     * @type {State}
     */ function closeAfter(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
                effects.exit(fenceType);
                return ok(code);
            }
            return nok(code);
        }
    }
}
/**
 * @param {Matter} matter
 * @param {'close' | 'open'} prop
 * @returns {string}
 */ function fence(matter, prop) {
    return matter.marker ? pick(matter.marker, prop).repeat(3) : pick(matter.fence, prop);
}
/**
 * @param {Info | string} schema
 * @param {'close' | 'open'} prop
 * @returns {string}
 */ function pick(schema, prop) {
    return typeof schema === 'string' ? schema : schema[prop];
}
}}),
"[project]/apps/website/docs/node_modules/escape-string-regexp/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>escapeStringRegexp)
});
function escapeStringRegexp(string) {
    if (typeof string !== 'string') {
        throw new TypeError('Expected a string');
    }
    // Escape characters with special meaning either inside or outside character sets.
    // Use a simple backslash escape when it’s always valid, and a `\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.
    return string.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&').replace(/-/g, '\\x2d');
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-frontmatter/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('mdast').Literal} Literal
 *
 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 *
 * @typedef {import('micromark-extension-frontmatter').Info} Info
 * @typedef {import('micromark-extension-frontmatter').Matter} Matter
 * @typedef {import('micromark-extension-frontmatter').Options} Options
 */ __turbopack_esm__({
    "frontmatterFromMarkdown": (()=>frontmatterFromMarkdown),
    "frontmatterToMarkdown": (()=>frontmatterToMarkdown)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$escape$2d$string$2d$regexp$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/escape-string-regexp/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$frontmatter$2f$dev$2f$lib$2f$to$2d$matters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-frontmatter/dev/lib/to-matters.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
;
;
;
function frontmatterFromMarkdown(options) {
    const matters = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$frontmatter$2f$dev$2f$lib$2f$to$2d$matters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toMatters"])(options);
    /** @type {FromMarkdownExtension['enter']} */ const enter = {};
    /** @type {FromMarkdownExtension['exit']} */ const exit = {};
    let index = -1;
    while(++index < matters.length){
        const matter = matters[index];
        enter[matter.type] = opener(matter);
        exit[matter.type] = close;
        exit[matter.type + 'Value'] = value;
    }
    return {
        enter,
        exit
    };
}
/**
 * @param {Matter} matter
 * @returns {FromMarkdownHandle} enter
 */ function opener(matter) {
    return open;
    "TURBOPACK unreachable";
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function open(token) {
        // @ts-expect-error: custom.
        this.enter({
            type: matter.type,
            value: ''
        }, token);
        this.buffer();
    }
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function close(token) {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])('value' in node);
    this.exit(token);
    // Remove the initial and final eol.
    node.value = data.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, '');
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function value(token) {
    this.config.enter.data.call(this, token);
    this.config.exit.data.call(this, token);
}
function frontmatterToMarkdown(options) {
    /** @type {ToMarkdownExtension['unsafe']} */ const unsafe = [];
    /** @type {ToMarkdownExtension['handlers']} */ const handlers = {};
    const matters = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$frontmatter$2f$dev$2f$lib$2f$to$2d$matters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toMatters"])(options);
    let index = -1;
    while(++index < matters.length){
        const matter = matters[index];
        // @ts-expect-error: this can add custom frontmatter nodes.
        // Typing those is the responsibility of the end user.
        handlers[matter.type] = handler(matter);
        const open = fence(matter, 'open');
        unsafe.push({
            atBreak: true,
            character: open.charAt(0),
            after: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$escape$2d$string$2d$regexp$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(open.charAt(1))
        });
    }
    return {
        unsafe,
        handlers
    };
}
/**
 * Create a handle that can serialize a frontmatter node as markdown.
 *
 * @param {Matter} matter
 *   Structure.
 * @returns {(node: Literal) => string} enter
 *   Handler.
 */ function handler(matter) {
    const open = fence(matter, 'open');
    const close = fence(matter, 'close');
    return handle;
    "TURBOPACK unreachable";
    /**
   * Serialize a frontmatter node as markdown.
   *
   * @param {Literal} node
   *   Node to serialize.
   * @returns {string}
   *   Serialized node.
   */ function handle(node) {
        return open + (node.value ? '\n' + node.value : '') + '\n' + close;
    }
}
/**
 * Get an `open` or `close` fence.
 *
 * @param {Matter} matter
 *   Structure.
 * @param {'close' | 'open'} prop
 *   Field to get.
 * @returns {string}
 *   Fence.
 */ function fence(matter, prop) {
    return matter.marker ? pick(matter.marker, prop).repeat(3) : pick(matter.fence, prop);
}
/**
 * Take `open` or `close` fields when schema is an info object, or use the
 * given value when it is a string.
 *
 * @param {Info | string} schema
 *   Info object or value.
 * @param {'close' | 'open'} prop
 *   Field to get.
 * @returns {string}
 *   Thing to use for the opening or closing.
 */ function pick(schema, prop) {
    return typeof schema === 'string' ? schema : schema[prop];
}
}}),
"[project]/apps/website/docs/node_modules/remark-frontmatter/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/// <reference types="remark-parse" />
/// <reference types="remark-stringify" />
/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('micromark-extension-frontmatter').Options} Options
 * @typedef {import('unified').Processor<Root>} Processor
 */ __turbopack_esm__({
    "default": (()=>remarkFrontmatter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$frontmatter$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-frontmatter/dev/lib/syntax.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$frontmatter$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-frontmatter/lib/index.js [app-rsc] (ecmascript)");
;
;
/** @type {Options} */ const emptyOptions = 'yaml';
function remarkFrontmatter(options) {
    // @ts-expect-error: TS is wrong about `this`.
    // eslint-disable-next-line unicorn/no-this-assignment
    const self = this;
    const settings = options || emptyOptions;
    const data = self.data();
    const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);
    const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);
    const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);
    micromarkExtensions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$frontmatter$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["frontmatter"])(settings));
    fromMarkdownExtensions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$frontmatter$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["frontmatterFromMarkdown"])(settings));
    toMarkdownExtensions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$frontmatter$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["frontmatterToMarkdown"])(settings));
}
}}),
"[project]/apps/website/docs/node_modules/estree-util-value-to-estree/dist/estree-util-value-to-estree.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Create an ESTree identifier node for a given name.
 *
 * @param name
 *   The name of the identifier.
 * @returns
 *   The identifier node.
 */ __turbopack_esm__({
    "valueToEstree": (()=>valueToEstree)
});
function identifier(name) {
    return {
        type: 'Identifier',
        name
    };
}
/**
 * Create an ESTree literal node for a given value.
 *
 * @param value
 *   The value for which to create a literal.
 * @returns
 *   The literal node.
 */ function literal(value) {
    return {
        type: 'Literal',
        value
    };
}
/**
 * Create an ESTree call expression on an object member.
 *
 * @param object
 *   The object to call the method on.
 * @param name
 *   The name of the method to call.
 * @param args
 *   Arguments to pass to the function call
 * @returns
 *   The call expression node.
 */ function methodCall(object, name, args) {
    return {
        type: 'CallExpression',
        optional: false,
        callee: {
            type: 'MemberExpression',
            computed: false,
            optional: false,
            object,
            property: identifier(name)
        },
        arguments: args
    };
}
/**
 * Turn a number or bigint into an ESTree expression. This handles positive and negative numbers and
 * bigints as well as special numbers.
 *
 * @param number
 *   The value to turn into an ESTree expression.
 * @returns
 *   An expression that represents the given value.
 */ function processNumber(number) {
    if (number < 0 || Object.is(number, -0)) {
        return {
            type: 'UnaryExpression',
            operator: '-',
            prefix: true,
            argument: processNumber(-number)
        };
    }
    if (typeof number === 'bigint') {
        return {
            type: 'Literal',
            bigint: String(number)
        };
    }
    if (number === Number.POSITIVE_INFINITY || Number.isNaN(number)) {
        return identifier(String(number));
    }
    return literal(number);
}
/**
 * Process an array of numbers. This is a shortcut for iterables whose constructor takes an array of
 * numbers as input.
 *
 * @param numbers
 *   The numbers to add to the array expression.
 * @returns
 *   An ESTree array expression whose elements match the input numbers.
 */ function processNumberArray(numbers) {
    const elements = [];
    for (const value of numbers){
        elements.push(processNumber(value));
    }
    return {
        type: 'ArrayExpression',
        elements
    };
}
/**
 * Check whether a value can be constructed from its string representation.
 *
 * @param value
 *   The value to check
 * @returns
 *   Whether or not the value can be constructed from its string representation.
 */ function isStringReconstructable(value) {
    return value instanceof URL || value instanceof URLSearchParams;
}
/**
 * Check whether a value can be constructed from its `valueOf()` result.
 *
 * @param value
 *   The value to check
 * @returns
 *   Whether or not the value can be constructed from its `valueOf()` result.
 */ // eslint-disable-next-line @typescript-eslint/ban-types
function isValueReconstructable(value) {
    return value instanceof Boolean || value instanceof Date || value instanceof Number || value instanceof String;
}
const wellKnownSymbols = new Map();
for (const name of Reflect.ownKeys(Symbol)){
    const value = Symbol[name];
    if (typeof value === 'symbol') {
        wellKnownSymbols.set(value, name);
    }
}
/**
 * Check whether a value is a typed array.
 *
 * @param value
 *   The value to check
 * @returns
 *   Whether or not the value is a typed array.
 */ function isTypedArray(value) {
    return value instanceof BigInt64Array || value instanceof BigUint64Array || value instanceof Float32Array || value instanceof Float64Array || value instanceof Int8Array || value instanceof Int16Array || value instanceof Int32Array || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Uint16Array || value instanceof Uint32Array;
}
/**
 * Compare two value contexts for sorting them based on reference count.
 *
 * @param a
 *   The first context to compare.
 * @param b
 *   The second context to compare.
 * @returns
 *   The count of context a minus the count of context b.
 */ function compareContexts(a, b) {
    const aReferencedByB = a.referencedBy.has(b.value);
    const bReferencedByA = b.referencedBy.has(a.value);
    if (aReferencedByB) {
        if (bReferencedByA) {
            return a.count - b.count;
        }
        return -1;
    }
    if (bReferencedByA) {
        return 1;
    }
    return a.count - b.count;
}
/**
 * Replace the assigned right hand expression with the new expression.
 *
 * If there is no assignment expression, the original expression is returned. Otherwise the
 * assignment is modified and returned,
 *
 * @param expression
 *   The expression to use for the assignment.
 * @param assignment
 *   The existing assignmentexpression
 * @returns
 *   The new expression.
 */ function replaceAssignment(expression, assignment) {
    if (!assignment || assignment.type !== 'AssignmentExpression') {
        return expression;
    }
    let node = assignment;
    while(node.right.type === 'AssignmentExpression'){
        node = node.right;
    }
    node.right = expression;
    return assignment;
}
/**
 * Create an ESTree epxression to represent a symbol. Global and well-known symbols are supported.
 *
 * @param symbol
 *   THe symbol to represent.
 * @returns
 *   An ESTree expression to represent the symbol.
 */ function symbolToEstree(symbol) {
    const name = wellKnownSymbols.get(symbol);
    if (name) {
        return {
            type: 'MemberExpression',
            computed: false,
            optional: false,
            object: identifier('Symbol'),
            property: identifier(name)
        };
    }
    if (symbol.description && symbol === Symbol.for(symbol.description)) {
        return methodCall(identifier('Symbol'), 'for', [
            literal(symbol.description)
        ]);
    }
    throw new TypeError(`Only global symbols are supported, got: ${String(symbol)}`, {
        cause: symbol
    });
}
/**
 * Create an ESTree property from a key and a value expression.
 *
 * @param key
 *   The property key value
 * @param value
 *   The property value as an ESTree expression.
 * @returns
 *   The ESTree properry node.
 */ function property(key, value) {
    const computed = typeof key !== 'string';
    return {
        type: 'Property',
        method: false,
        shorthand: false,
        computed,
        kind: 'init',
        key: computed ? symbolToEstree(key) : literal(key),
        value
    };
}
/**
 * Convert a Temporal value to a constructor call.
 *
 * @param name
 *   The name of the constructor.
 * @param values
 *   The numeric values to pass to the constructor.
 * @param calendar
 *   The calendar name to pass to the constructor.
 * @param defaultReferenceValue
 *   The default reference value of the temporal object.
 * @param referenceValue
 *   The reference value of the temporal object.
 * @returns
 *   An ESTree expression which represents the constructor call.
 */ function temporalConstructor(name, values, calendar = 'iso8601', defaultReferenceValue, referenceValue) {
    if (calendar && typeof calendar !== 'string') {
        throw new Error(`Unsupported calendar: ${calendar}`, {
            cause: calendar
        });
    }
    const args = [];
    if (referenceValue != null && (calendar !== 'iso8601' || referenceValue !== defaultReferenceValue)) {
        args.push(literal(referenceValue));
    }
    if (calendar !== 'iso8601' || args.length !== 0) {
        args.unshift(literal(calendar));
    }
    for(let index = values.length - 1; index >= 0; index -= 1){
        const value = values[index];
        if (value !== 0 && value !== 0n || args.length !== 0) {
            args.unshift(typeof value === 'string' ? literal(value) : processNumber(value));
        }
    }
    return {
        type: 'NewExpression',
        callee: {
            type: 'MemberExpression',
            computed: false,
            optional: false,
            object: identifier('Temporal'),
            property: identifier(name)
        },
        arguments: args
    };
}
function valueToEstree(value, options = {}) {
    const stack = [];
    const collectedContexts = new Map();
    const namedContexts = [];
    /**
     * Analyze a value and collect all reference contexts.
     *
     * @param val
     *   The value to analyze.
     */ function analyze(val) {
        if (typeof val === 'function') {
            throw new TypeError(`Unsupported value: ${val}`, {
                cause: val
            });
        }
        if (typeof val !== 'object') {
            return;
        }
        if (val == null) {
            return;
        }
        const context = collectedContexts.get(val);
        if (context) {
            if (options.preserveReferences) {
                context.count += 1;
            }
            for (const ancestor of stack){
                context.referencedBy.add(ancestor);
            }
            if (stack.includes(val)) {
                if (!options.preserveReferences) {
                    throw new Error(`Found circular reference: ${val}`, {
                        cause: val
                    });
                }
                const parent = stack.at(-1);
                const parentContext = collectedContexts.get(parent);
                parentContext.recursive = true;
                context.recursive = true;
            }
            return;
        }
        collectedContexts.set(val, {
            count: 1,
            recursive: false,
            referencedBy: new Set(stack),
            value: val
        });
        if (isTypedArray(val)) {
            return;
        }
        if (isStringReconstructable(val)) {
            return;
        }
        if (isValueReconstructable(val)) {
            return;
        }
        if (value instanceof RegExp) {
            return;
        }
        if (typeof Temporal !== 'undefined' && (value instanceof Temporal.Duration || value instanceof Temporal.Instant || value instanceof Temporal.PlainDate || value instanceof Temporal.PlainDateTime || value instanceof Temporal.PlainYearMonth || value instanceof Temporal.PlainMonthDay || value instanceof Temporal.PlainTime || value instanceof Temporal.ZonedDateTime)) {
            return;
        }
        stack.push(val);
        if (val instanceof Map) {
            for (const pair of val){
                analyze(pair[0]);
                analyze(pair[1]);
            }
        } else if (Array.isArray(val) || val instanceof Set) {
            for (const entry of val){
                analyze(entry);
            }
        } else {
            const proto = Object.getPrototypeOf(val);
            if (proto != null && proto !== Object.prototype && !options.instanceAsObject) {
                throw new TypeError(`Unsupported value: ${val}`, {
                    cause: val
                });
            }
            for (const key of Reflect.ownKeys(val)){
                analyze(val[key]);
            }
        }
        stack.pop();
    }
    /**
     * Recursively generate the ESTree expression needed to reconstruct the value.
     *
     * @param val
     *   The value to process.
     * @param isDeclaration
     *   Whether or not this is for a variable declaration.
     * @returns
     *   The ESTree expression to reconstruct the value.
     */ function generate(val, isDeclaration) {
        if (val === undefined) {
            return identifier(String(val));
        }
        if (val == null || typeof val === 'string' || typeof val === 'boolean') {
            return literal(val);
        }
        if (typeof val === 'bigint' || typeof val === 'number') {
            return processNumber(val);
        }
        if (typeof val === 'symbol') {
            return symbolToEstree(val);
        }
        const context = collectedContexts.get(val);
        if (!isDeclaration && context?.name) {
            return identifier(context.name);
        }
        if (isValueReconstructable(val)) {
            return {
                type: 'NewExpression',
                callee: identifier(val.constructor.name),
                arguments: [
                    generate(val.valueOf())
                ]
            };
        }
        if (val instanceof RegExp) {
            return {
                type: 'Literal',
                regex: {
                    pattern: val.source,
                    flags: val.flags
                }
            };
        }
        if (typeof Buffer !== 'undefined' && Buffer.isBuffer(val)) {
            return methodCall(identifier('Buffer'), 'from', [
                processNumberArray(val)
            ]);
        }
        if (isTypedArray(val)) {
            return {
                type: 'NewExpression',
                callee: identifier(val.constructor.name),
                arguments: [
                    processNumberArray(val)
                ]
            };
        }
        if (isStringReconstructable(val)) {
            return {
                type: 'NewExpression',
                callee: identifier(val.constructor.name),
                arguments: [
                    literal(String(val))
                ]
            };
        }
        if (typeof Temporal !== 'undefined') {
            if (val instanceof Temporal.Duration) {
                return temporalConstructor('Duration', [
                    val.years,
                    val.months,
                    val.weeks,
                    val.days,
                    val.hours,
                    val.minutes,
                    val.seconds,
                    val.milliseconds,
                    val.microseconds,
                    val.nanoseconds
                ]);
            }
            if (val instanceof Temporal.Instant) {
                return temporalConstructor('Instant', [
                    val.epochNanoseconds
                ]);
            }
            if (val instanceof Temporal.PlainDate) {
                const iso = val.getISOFields();
                return temporalConstructor('PlainDate', [
                    iso.isoYear,
                    iso.isoMonth,
                    iso.isoDay
                ], iso.calendar);
            }
            if (val instanceof Temporal.PlainDateTime) {
                const iso = val.getISOFields();
                return temporalConstructor('PlainDateTime', [
                    iso.isoYear,
                    iso.isoMonth,
                    iso.isoDay,
                    iso.isoHour,
                    iso.isoMinute,
                    iso.isoSecond,
                    iso.isoMillisecond,
                    iso.isoMicrosecond,
                    iso.isoNanosecond
                ], iso.calendar);
            }
            if (val instanceof Temporal.PlainMonthDay) {
                const iso = val.getISOFields();
                return temporalConstructor('PlainMonthDay', [
                    iso.isoMonth,
                    iso.isoDay
                ], iso.calendar, 1972, iso.isoYear);
            }
            if (val instanceof Temporal.PlainTime) {
                const iso = val.getISOFields();
                return temporalConstructor('PlainTime', [
                    iso.isoHour,
                    iso.isoMinute,
                    iso.isoSecond,
                    iso.isoMillisecond,
                    iso.isoMicrosecond,
                    iso.isoNanosecond
                ]);
            }
            if (val instanceof Temporal.PlainYearMonth) {
                const iso = val.getISOFields();
                return temporalConstructor('PlainYearMonth', [
                    iso.isoYear,
                    iso.isoMonth
                ], iso.calendar, 1, iso.isoDay);
            }
            if (val instanceof Temporal.ZonedDateTime) {
                const iso = val.getISOFields();
                return temporalConstructor('ZonedDateTime', [
                    val.epochNanoseconds,
                    val.timeZoneId
                ], iso.calendar);
            }
        }
        if (Array.isArray(val)) {
            const elements = Array.from({
                length: val.length
            });
            let trimmable;
            for(let index = 0; index < val.length; index += 1){
                if (!(index in val)) {
                    elements[index] = null;
                    trimmable = undefined;
                    continue;
                }
                const child = val[index];
                const childContext = collectedContexts.get(child);
                if (context && childContext && namedContexts.indexOf(childContext) >= namedContexts.indexOf(context)) {
                    elements[index] = null;
                    trimmable ||= index;
                    childContext.assignment = {
                        type: 'AssignmentExpression',
                        operator: '=',
                        left: {
                            type: 'MemberExpression',
                            computed: true,
                            optional: false,
                            object: identifier(context.name),
                            property: literal(index)
                        },
                        right: childContext.assignment || identifier(childContext.name)
                    };
                } else {
                    elements[index] = generate(child);
                    trimmable = undefined;
                }
            }
            if (trimmable != null) {
                elements.splice(trimmable);
            }
            return {
                type: 'ArrayExpression',
                elements
            };
        }
        if (val instanceof Set) {
            const elements = [];
            let finalizer;
            for (const child of val){
                if (finalizer) {
                    finalizer = methodCall(finalizer, 'add', [
                        generate(child)
                    ]);
                } else {
                    const childContext = collectedContexts.get(child);
                    if (context && childContext && namedContexts.indexOf(childContext) >= namedContexts.indexOf(context)) {
                        finalizer = methodCall(identifier(context.name), 'add', [
                            generate(child)
                        ]);
                    } else {
                        elements.push(generate(child));
                    }
                }
            }
            if (context && finalizer) {
                context.assignment = replaceAssignment(finalizer, context.assignment);
            }
            return {
                type: 'NewExpression',
                callee: identifier('Set'),
                arguments: elements.length ? [
                    {
                        type: 'ArrayExpression',
                        elements
                    }
                ] : []
            };
        }
        if (val instanceof Map) {
            const elements = [];
            let finalizer;
            for (const [key, item] of val){
                if (finalizer) {
                    finalizer = methodCall(finalizer, 'set', [
                        generate(key),
                        generate(item)
                    ]);
                } else {
                    const keyContext = collectedContexts.get(key);
                    const itemContext = collectedContexts.get(item);
                    if (context && (keyContext && namedContexts.indexOf(keyContext) >= namedContexts.indexOf(context) || itemContext && namedContexts.indexOf(itemContext) >= namedContexts.indexOf(context))) {
                        finalizer = methodCall(identifier(context.name), 'set', [
                            generate(key),
                            generate(item)
                        ]);
                    } else {
                        elements.push({
                            type: 'ArrayExpression',
                            elements: [
                                generate(key),
                                generate(item)
                            ]
                        });
                    }
                }
            }
            if (context && finalizer) {
                context.assignment = replaceAssignment(finalizer, context.assignment);
            }
            return {
                type: 'NewExpression',
                callee: identifier('Map'),
                arguments: elements.length ? [
                    {
                        type: 'ArrayExpression',
                        elements
                    }
                ] : []
            };
        }
        const properties = [];
        if (Object.getPrototypeOf(val) == null) {
            properties.push(property('__proto__', literal(null)));
        }
        const object = val;
        const propertyDescriptors = [];
        for (const key of Reflect.ownKeys(val)){
            // TODO [>=4] Throw an error for getters.
            const child = object[key];
            const { configurable, enumerable, writable } = Object.getOwnPropertyDescriptor(val, key);
            const childContext = collectedContexts.get(child);
            if (!configurable || !enumerable || !writable) {
                const propertyDescriptor = [
                    property('value', generate(child))
                ];
                if (configurable) {
                    propertyDescriptor.push(property('configurable', literal(true)));
                }
                if (enumerable) {
                    propertyDescriptor.push(property('enumerable', literal(true)));
                }
                if (writable) {
                    propertyDescriptor.push(property('writable', literal(true)));
                }
                propertyDescriptors.push(property(key, {
                    type: 'ObjectExpression',
                    properties: propertyDescriptor
                }));
            } else if (context && childContext && namedContexts.indexOf(childContext) >= namedContexts.indexOf(context)) {
                childContext.assignment = {
                    type: 'AssignmentExpression',
                    operator: '=',
                    left: {
                        type: 'MemberExpression',
                        computed: true,
                        optional: false,
                        object: identifier(context.name),
                        property: generate(key)
                    },
                    right: childContext.assignment || generate(child)
                };
            } else {
                properties.push(property(key, generate(child)));
            }
        }
        const objectExpression = {
            type: 'ObjectExpression',
            properties
        };
        if (propertyDescriptors.length) {
            if (!context) {
                return methodCall(identifier('Object'), 'defineProperties', [
                    objectExpression,
                    {
                        type: 'ObjectExpression',
                        properties: propertyDescriptors
                    }
                ]);
            }
            context.assignment = replaceAssignment(methodCall(identifier('Object'), 'defineProperties', [
                identifier(context.name),
                {
                    type: 'ObjectExpression',
                    properties: propertyDescriptors
                }
            ]), context.assignment);
        }
        return objectExpression;
    }
    analyze(value);
    for (const [val, context] of collectedContexts){
        if (context.recursive || context.count > 1) {
            // Assign reused or recursive references to a variable.
            context.name = `$${namedContexts.length}`;
            namedContexts.push(context);
        } else {
            // Otherwise don’t treat it as a reference.
            collectedContexts.delete(val);
        }
    }
    if (!namedContexts.length) {
        return generate(value);
    }
    const params = namedContexts.sort(compareContexts).map((context)=>({
            type: 'AssignmentPattern',
            left: identifier(context.name),
            right: generate(context.value, true)
        }));
    const rootContext = collectedContexts.get(value);
    const finalizers = [];
    for (const context of collectedContexts.values()){
        if (context !== rootContext && context.assignment) {
            finalizers.push(context.assignment);
        }
    }
    finalizers.push(rootContext ? rootContext.assignment || identifier(rootContext.name) : generate(value));
    return {
        type: 'CallExpression',
        optional: false,
        arguments: [],
        callee: {
            type: 'ArrowFunctionExpression',
            expression: false,
            params,
            body: {
                type: 'SequenceExpression',
                expressions: finalizers
            }
        }
    };
} //# sourceMappingURL=estree-util-value-to-estree.js.map
}}),
"[project]/apps/website/docs/node_modules/github-slugger/regex.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// This module is generated by `script/`.
/* eslint-disable no-control-regex, no-misleading-character-class, no-useless-escape */ __turbopack_esm__({
    "regex": (()=>regex)
});
const regex = /[\0-\x1F!-,\.\/:-@\[-\^`\{-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0378\u0379\u037E\u0380-\u0385\u0387\u038B\u038D\u03A2\u03F6\u0482\u0530\u0557\u0558\u055A-\u055F\u0589-\u0590\u05BE\u05C0\u05C3\u05C6\u05C8-\u05CF\u05EB-\u05EE\u05F3-\u060F\u061B-\u061F\u066A-\u066D\u06D4\u06DD\u06DE\u06E9\u06FD\u06FE\u0700-\u070F\u074B\u074C\u07B2-\u07BF\u07F6-\u07F9\u07FB\u07FC\u07FE\u07FF\u082E-\u083F\u085C-\u085F\u086B-\u089F\u08B5\u08C8-\u08D2\u08E2\u0964\u0965\u0970\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09F2-\u09FB\u09FD\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF0-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B70\u0B72-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BF0-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C7F\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D4F-\u0D53\u0D58-\u0D5E\u0D64\u0D65\u0D70-\u0D79\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF4-\u0E00\u0E3B-\u0E3F\u0E4F\u0E5A-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F01-\u0F17\u0F1A-\u0F1F\u0F2A-\u0F34\u0F36\u0F38\u0F3A-\u0F3D\u0F48\u0F6D-\u0F70\u0F85\u0F98\u0FBD-\u0FC5\u0FC7-\u0FFF\u104A-\u104F\u109E\u109F\u10C6\u10C8-\u10CC\u10CE\u10CF\u10FB\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u1360-\u137F\u1390-\u139F\u13F6\u13F7\u13FE-\u1400\u166D\u166E\u1680\u169B-\u169F\u16EB-\u16ED\u16F9-\u16FF\u170D\u1715-\u171F\u1735-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17D4-\u17D6\u17D8-\u17DB\u17DE\u17DF\u17EA-\u180A\u180E\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u1945\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DA-\u19FF\u1A1C-\u1A1F\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1AA6\u1AA8-\u1AAF\u1AC1-\u1AFF\u1B4C-\u1B4F\u1B5A-\u1B6A\u1B74-\u1B7F\u1BF4-\u1BFF\u1C38-\u1C3F\u1C4A-\u1C4C\u1C7E\u1C7F\u1C89-\u1C8F\u1CBB\u1CBC\u1CC0-\u1CCF\u1CD3\u1CFB-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FBD\u1FBF-\u1FC1\u1FC5\u1FCD-\u1FCF\u1FD4\u1FD5\u1FDC-\u1FDF\u1FED-\u1FF1\u1FF5\u1FFD-\u203E\u2041-\u2053\u2055-\u2070\u2072-\u207E\u2080-\u208F\u209D-\u20CF\u20F1-\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F-\u215F\u2189-\u24B5\u24EA-\u2BFF\u2C2F\u2C5F\u2CE5-\u2CEA\u2CF4-\u2CFF\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D70-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E00-\u2E2E\u2E30-\u3004\u3008-\u3020\u3030\u3036\u3037\u303D-\u3040\u3097\u3098\u309B\u309C\u30A0\u30FB\u3100-\u3104\u3130\u318F-\u319F\u31C0-\u31EF\u3200-\u33FF\u4DC0-\u4DFF\u9FFD-\u9FFF\uA48D-\uA4CF\uA4FE\uA4FF\uA60D-\uA60F\uA62C-\uA63F\uA673\uA67E\uA6F2-\uA716\uA720\uA721\uA789\uA78A\uA7C0\uA7C1\uA7CB-\uA7F4\uA828-\uA82B\uA82D-\uA83F\uA874-\uA87F\uA8C6-\uA8CF\uA8DA-\uA8DF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA954-\uA95F\uA97D-\uA97F\uA9C1-\uA9CE\uA9DA-\uA9DF\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A-\uAA5F\uAA77-\uAA79\uAAC3-\uAADA\uAADE\uAADF\uAAF0\uAAF1\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB5B\uAB6A-\uAB6F\uABEB\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uE000-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB29\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBB2-\uFBD2\uFD3E-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFC-\uFDFF\uFE10-\uFE1F\uFE30-\uFE32\uFE35-\uFE4C\uFE50-\uFE6F\uFE75\uFEFD-\uFF0F\uFF1A-\uFF20\uFF3B-\uFF3E\uFF40\uFF5B-\uFF65\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFFF]|\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDD3F\uDD75-\uDDFC\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEE1-\uDEFF\uDF20-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDF9F\uDFC4-\uDFC7\uDFD0\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56-\uDC5F\uDC77-\uDC7F\uDC9F-\uDCDF\uDCF3\uDCF6-\uDCFF\uDD16-\uDD1F\uDD3A-\uDD7F\uDDB8-\uDDBD\uDDC0-\uDDFF\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE40-\uDE5F\uDE7D-\uDE7F\uDE9D-\uDEBF\uDEC8\uDEE7-\uDEFF\uDF36-\uDF3F\uDF56-\uDF5F\uDF73-\uDF7F\uDF92-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCFF\uDD28-\uDD2F\uDD3A-\uDE7F\uDEAA\uDEAD-\uDEAF\uDEB2-\uDEFF\uDF1D-\uDF26\uDF28-\uDF2F\uDF51-\uDFAF\uDFC5-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC47-\uDC65\uDC70-\uDC7E\uDCBB-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD40-\uDD43\uDD48-\uDD4F\uDD74\uDD75\uDD77-\uDD7F\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDFF\uDE12\uDE38-\uDE3D\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEA9-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC4B-\uDC4F\uDC5A-\uDC5D\uDC62-\uDC7F\uDCC6\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDC1-\uDDD7\uDDDE-\uDDFF\uDE41-\uDE43\uDE45-\uDE4F\uDE5A-\uDE7F\uDEB9-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF3A-\uDFFF]|\uD806[\uDC3B-\uDC9F\uDCEA-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD44-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE2\uDDE5-\uDDFF\uDE3F-\uDE46\uDE48-\uDE4F\uDE9A-\uDE9C\uDE9E-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC41-\uDC4F\uDC5A-\uDC71\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF7-\uDFAF\uDFB1-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD824-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83D\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDECF\uDEEE\uDEEF\uDEF5-\uDEFF\uDF37-\uDF3F\uDF44-\uDF4F\uDF5A-\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE80-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE2\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82C[\uDD1F-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A-\uDC9C\uDC9F-\uDFFF]|\uD834[\uDC00-\uDD64\uDD6A-\uDD6C\uDD73-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDE41\uDE45-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3\uDFCC\uDFCD]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD4F-\uDEBF\uDEFA-\uDFFF]|\uD83A[\uDCC5-\uDCCF\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDFFF]|\uD83C[\uDC00-\uDD2F\uDD4A-\uDD4F\uDD6A-\uDD6F\uDD8A-\uDFFF]|\uD83E[\uDC00-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEDE-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]/g;
}}),
"[project]/apps/website/docs/node_modules/github-slugger/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>BananaSlug),
    "slug": (()=>slug)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$github$2d$slugger$2f$regex$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/github-slugger/regex.js [app-rsc] (ecmascript)");
;
const own = Object.hasOwnProperty;
class BananaSlug {
    /**
   * Create a new slug class.
   */ constructor(){
        /** @type {Record<string, number>} */ // eslint-disable-next-line no-unused-expressions
        this.occurrences;
        this.reset();
    }
    /**
   * Generate a unique slug.
  *
  * Tracks previously generated slugs: repeated calls with the same value
  * will result in different slugs.
  * Use the `slug` function to get same slugs.
   *
   * @param  {string} value
   *   String of text to slugify
   * @param  {boolean} [maintainCase=false]
   *   Keep the current case, otherwise make all lowercase
   * @return {string}
   *   A unique slug string
   */ slug(value, maintainCase) {
        const self = this;
        let result = slug(value, maintainCase === true);
        const originalSlug = result;
        while(own.call(self.occurrences, result)){
            self.occurrences[originalSlug]++;
            result = originalSlug + '-' + self.occurrences[originalSlug];
        }
        self.occurrences[result] = 0;
        return result;
    }
    /**
   * Reset - Forget all previous slugs
   *
   * @return void
   */ reset() {
        this.occurrences = Object.create(null);
    }
}
function slug(value, maintainCase) {
    if (typeof value !== 'string') return '';
    if (!maintainCase) value = value.toLowerCase();
    return value.replace(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$github$2d$slugger$2f$regex$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["regex"], '').replace(/ /g, '-');
}
}}),
"[project]/apps/website/docs/node_modules/slash/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>slash)
});
function slash(path) {
    const isExtendedLengthPath = path.startsWith('\\\\?\\');
    if (isExtendedLengthPath) {
        return path;
    }
    return path.replace(/\\/g, '/');
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-gfm-autolink-literal/dev/lib/syntax.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'
 */ __turbopack_esm__({
    "gfmAutolinkLiteral": (()=>gfmAutolinkLiteral)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
;
;
const wwwPrefix = {
    tokenize: tokenizeWwwPrefix,
    partial: true
};
const domain = {
    tokenize: tokenizeDomain,
    partial: true
};
const path = {
    tokenize: tokenizePath,
    partial: true
};
const trail = {
    tokenize: tokenizeTrail,
    partial: true
};
const emailDomainDotTrail = {
    tokenize: tokenizeEmailDomainDotTrail,
    partial: true
};
const wwwAutolink = {
    name: 'wwwAutolink',
    tokenize: tokenizeWwwAutolink,
    previous: previousWww
};
const protocolAutolink = {
    name: 'protocolAutolink',
    tokenize: tokenizeProtocolAutolink,
    previous: previousProtocol
};
const emailAutolink = {
    name: 'emailAutolink',
    tokenize: tokenizeEmailAutolink,
    previous: previousEmail
};
/** @type {ConstructRecord} */ const text = {};
function gfmAutolinkLiteral() {
    return {
        text
    };
}
/** @type {Code} */ let code = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].digit0;
// Add alphanumerics.
while(code < __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace){
    text[code] = emailAutolink;
    code++;
    if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].colon) code = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].uppercaseA;
    else if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket) code = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseA;
}
text[__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].plusSign] = emailAutolink;
text[__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dash] = emailAutolink;
text[__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dot] = emailAutolink;
text[__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].underscore] = emailAutolink;
text[__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].uppercaseH] = [
    emailAutolink,
    protocolAutolink
];
text[__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseH] = [
    emailAutolink,
    protocolAutolink
];
text[__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].uppercaseW] = [
    emailAutolink,
    wwwAutolink
];
text[__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseW] = [
    emailAutolink,
    wwwAutolink
];
// To do: perform email autolink literals on events, afterwards.
// That’s where `markdown-rs` and `cmark-gfm` perform it.
// It should look for `@`, then for atext backwards, and then for a label
// forwards.
// To do: `mailto:`, `xmpp:` protocol as prefix.
/**
 * Email autolink literal.
 *
 * ```markdown
 * > | a contact@example.org b
 *       ^^^^^^^^^^^^^^^^^^^
 * ```
 *
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeEmailAutolink(effects, ok, nok) {
    const self = this;
    /** @type {boolean | undefined} */ let dot;
    /** @type {boolean} */ let data;
    return start;
    "TURBOPACK unreachable";
    /**
   * Start of email autolink literal.
   *
   * ```markdown
   * > | a contact@example.org b
   *       ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {
            return nok(code);
        }
        effects.enter('literalAutolink');
        effects.enter('literalAutolinkEmail');
        return atext(code);
    }
    /**
   * In email atext.
   *
   * ```markdown
   * > | a contact@example.org b
   *       ^
   * ```
   *
   * @type {State}
   */ function atext(code) {
        if (gfmAtext(code)) {
            effects.consume(code);
            return atext;
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].atSign) {
            effects.consume(code);
            return emailDomain;
        }
        return nok(code);
    }
    /**
   * In email domain.
   *
   * The reference code is a bit overly complex as it handles the `@`, of which
   * there may be just one.
   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>
   *
   * ```markdown
   * > | a contact@example.org b
   *               ^
   * ```
   *
   * @type {State}
   */ function emailDomain(code) {
        // Dot followed by alphanumerical (not `-` or `_`).
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dot) {
            return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);
        }
        // Alphanumerical, `-`, and `_`.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].underscore || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["asciiAlphanumeric"])(code)) {
            data = true;
            effects.consume(code);
            return emailDomain;
        }
        // To do: `/` if xmpp.
        // Note: normally we’d truncate trailing punctuation from the link.
        // However, email autolink literals cannot contain any of those markers,
        // except for `.`, but that can only occur if it isn’t trailing.
        // So we can ignore truncating!
        return emailDomainAfter(code);
    }
    /**
   * In email domain, on dot that is not a trail.
   *
   * ```markdown
   * > | a contact@example.org b
   *                      ^
   * ```
   *
   * @type {State}
   */ function emailDomainDot(code) {
        effects.consume(code);
        dot = true;
        return emailDomain;
    }
    /**
   * After email domain.
   *
   * ```markdown
   * > | a contact@example.org b
   *                          ^
   * ```
   *
   * @type {State}
   */ function emailDomainAfter(code) {
        // Domain must not be empty, must include a dot, and must end in alphabetical.
        // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.
        if (data && dot && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["asciiAlpha"])(self.previous)) {
            effects.exit('literalAutolinkEmail');
            effects.exit('literalAutolink');
            return ok(code);
        }
        return nok(code);
    }
}
/**
 * `www` autolink literal.
 *
 * ```markdown
 * > | a www.example.org b
 *       ^^^^^^^^^^^^^^^
 * ```
 *
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeWwwAutolink(effects, ok, nok) {
    const self = this;
    return wwwStart;
    "TURBOPACK unreachable";
    /**
   * Start of www autolink literal.
   *
   * ```markdown
   * > | www.example.com/a?b#c
   *     ^
   * ```
   *
   * @type {State}
   */ function wwwStart(code) {
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].uppercaseW && code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseW || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {
            return nok(code);
        }
        effects.enter('literalAutolink');
        effects.enter('literalAutolinkWww');
        // Note: we *check*, so we can discard the `www.` we parsed.
        // If it worked, we consider it as a part of the domain.
        return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);
    }
    /**
   * After a www autolink literal.
   *
   * ```markdown
   * > | www.example.com/a?b#c
   *                          ^
   * ```
   *
   * @type {State}
   */ function wwwAfter(code) {
        effects.exit('literalAutolinkWww');
        effects.exit('literalAutolink');
        return ok(code);
    }
}
/**
 * Protocol autolink literal.
 *
 * ```markdown
 * > | a https://example.org b
 *       ^^^^^^^^^^^^^^^^^^^
 * ```
 *
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeProtocolAutolink(effects, ok, nok) {
    const self = this;
    let buffer = '';
    let seen = false;
    return protocolStart;
    "TURBOPACK unreachable";
    /**
   * Start of protocol autolink literal.
   *
   * ```markdown
   * > | https://example.com/a?b#c
   *     ^
   * ```
   *
   * @type {State}
   */ function protocolStart(code) {
        if ((code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].uppercaseH || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseH) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {
            effects.enter('literalAutolink');
            effects.enter('literalAutolinkHttp');
            buffer += String.fromCodePoint(code);
            effects.consume(code);
            return protocolPrefixInside;
        }
        return nok(code);
    }
    /**
   * In protocol.
   *
   * ```markdown
   * > | https://example.com/a?b#c
   *     ^^^^^
   * ```
   *
   * @type {State}
   */ function protocolPrefixInside(code) {
        // `5` is size of `https`
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["asciiAlpha"])(code) && buffer.length < 5) {
            // @ts-expect-error: definitely number.
            buffer += String.fromCodePoint(code);
            effects.consume(code);
            return protocolPrefixInside;
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].colon) {
            const protocol = buffer.toLowerCase();
            if (protocol === 'http' || protocol === 'https') {
                effects.consume(code);
                return protocolSlashesInside;
            }
        }
        return nok(code);
    }
    /**
   * In slashes.
   *
   * ```markdown
   * > | https://example.com/a?b#c
   *           ^^
   * ```
   *
   * @type {State}
   */ function protocolSlashesInside(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash) {
            effects.consume(code);
            if (seen) {
                return afterProtocol;
            }
            seen = true;
            return protocolSlashesInside;
        }
        return nok(code);
    }
    /**
   * After protocol, before domain.
   *
   * ```markdown
   * > | https://example.com/a?b#c
   *             ^
   * ```
   *
   * @type {State}
   */ function afterProtocol(code) {
        // To do: this is different from `markdown-rs`:
        // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["asciiControl"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodePunctuation"])(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);
    }
    /**
   * After a protocol autolink literal.
   *
   * ```markdown
   * > | https://example.com/a?b#c
   *                              ^
   * ```
   *
   * @type {State}
   */ function protocolAfter(code) {
        effects.exit('literalAutolinkHttp');
        effects.exit('literalAutolink');
        return ok(code);
    }
}
/**
 * `www` prefix.
 *
 * ```markdown
 * > | a www.example.org b
 *       ^^^^
 * ```
 *
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeWwwPrefix(effects, ok, nok) {
    let size = 0;
    return wwwPrefixInside;
    "TURBOPACK unreachable";
    /**
   * In www prefix.
   *
   * ```markdown
   * > | www.example.com
   *     ^^^^
   * ```
   *
   * @type {State}
   */ function wwwPrefixInside(code) {
        if ((code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].uppercaseW || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseW) && size < 3) {
            size++;
            effects.consume(code);
            return wwwPrefixInside;
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dot && size === 3) {
            effects.consume(code);
            return wwwPrefixAfter;
        }
        return nok(code);
    }
    /**
   * After www prefix.
   *
   * ```markdown
   * > | www.example.com
   *         ^
   * ```
   *
   * @type {State}
   */ function wwwPrefixAfter(code) {
        // If there is *anything*, we can link.
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof ? nok(code) : ok(code);
    }
}
/**
 * Domain.
 *
 * ```markdown
 * > | a https://example.org b
 *               ^^^^^^^^^^^
 * ```
 *
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeDomain(effects, ok, nok) {
    /** @type {boolean | undefined} */ let underscoreInLastSegment;
    /** @type {boolean | undefined} */ let underscoreInLastLastSegment;
    /** @type {boolean | undefined} */ let seen;
    return domainInside;
    "TURBOPACK unreachable";
    /**
   * In domain.
   *
   * ```markdown
   * > | https://example.com/a
   *             ^^^^^^^^^^^
   * ```
   *
   * @type {State}
   */ function domainInside(code) {
        // Check whether this marker, which is a trailing punctuation
        // marker, optionally followed by more trailing markers, and then
        // followed by an end.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dot || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].underscore) {
            return effects.check(trail, domainAfter, domainAtPunctuation)(code);
        }
        // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can
        // occur, which sounds like ASCII only, but they also support `www.點看.com`,
        // so that’s Unicode.
        // Instead of some new production for Unicode alphanumerics, markdown
        // already has that for Unicode punctuation and whitespace, so use those.
        // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"])(code) || code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dash && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodePunctuation"])(code)) {
            return domainAfter(code);
        }
        seen = true;
        effects.consume(code);
        return domainInside;
    }
    /**
   * In domain, at potential trailing punctuation, that was not trailing.
   *
   * ```markdown
   * > | https://example.com
   *                    ^
   * ```
   *
   * @type {State}
   */ function domainAtPunctuation(code) {
        // There is an underscore in the last segment of the domain
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].underscore) {
            underscoreInLastSegment = true;
        } else {
            underscoreInLastLastSegment = underscoreInLastSegment;
            underscoreInLastSegment = undefined;
        }
        effects.consume(code);
        return domainInside;
    }
    /**
   * After domain.
   *
   * ```markdown
   * > | https://example.com/a
   *                        ^
   * ```
   *
   * @type {State} */ function domainAfter(code) {
        // Note: that’s GH says a dot is needed, but it’s not true:
        // <https://github.com/github/cmark-gfm/issues/279>
        if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {
            return nok(code);
        }
        return ok(code);
    }
}
/**
 * Path.
 *
 * ```markdown
 * > | a https://example.org/stuff b
 *                          ^^^^^^
 * ```
 *
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizePath(effects, ok) {
    let sizeOpen = 0;
    let sizeClose = 0;
    return pathInside;
    "TURBOPACK unreachable";
    /**
   * In path.
   *
   * ```markdown
   * > | https://example.com/a
   *                        ^^
   * ```
   *
   * @type {State}
   */ function pathInside(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis) {
            sizeOpen++;
            effects.consume(code);
            return pathInside;
        }
        // To do: `markdown-rs` also needs this.
        // If this is a paren, and there are less closings than openings,
        // we don’t check for a trail.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis && sizeClose < sizeOpen) {
            return pathAtPunctuation(code);
        }
        // Check whether this trailing punctuation marker is optionally
        // followed by more trailing markers, and then followed
        // by an end.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].exclamationMark || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].quotationMark || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].ampersand || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].apostrophe || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].asterisk || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].comma || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dot || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].colon || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].semicolon || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].questionMark || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].underscore || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].tilde) {
            return effects.check(trail, ok, pathAtPunctuation)(code);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"])(code)) {
            return ok(code);
        }
        effects.consume(code);
        return pathInside;
    }
    /**
   * In path, at potential trailing punctuation, that was not trailing.
   *
   * ```markdown
   * > | https://example.com/a"b
   *                          ^
   * ```
   *
   * @type {State}
   */ function pathAtPunctuation(code) {
        // Count closing parens.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis) {
            sizeClose++;
        }
        effects.consume(code);
        return pathInside;
    }
}
/**
 * Trail.
 *
 * This calls `ok` if this *is* the trail, followed by an end, which means
 * the entire trail is not part of the link.
 * It calls `nok` if this *is* part of the link.
 *
 * ```markdown
 * > | https://example.com").
 *                        ^^^
 * ```
 *
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeTrail(effects, ok, nok) {
    return trail;
    "TURBOPACK unreachable";
    /**
   * In trail of domain or path.
   *
   * ```markdown
   * > | https://example.com").
   *                        ^
   * ```
   *
   * @type {State}
   */ function trail(code) {
        // Regular trailing punctuation.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].exclamationMark || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].quotationMark || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].apostrophe || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].asterisk || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].comma || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dot || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].colon || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].semicolon || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].questionMark || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].underscore || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].tilde) {
            effects.consume(code);
            return trail;
        }
        // `&` followed by one or more alphabeticals and then a `;`, is
        // as a whole considered as trailing punctuation.
        // In all other cases, it is considered as continuation of the URL.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].ampersand) {
            effects.consume(code);
            return trailCharacterReferenceStart;
        }
        // Needed because we allow literals after `[`, as we fix:
        // <https://github.com/github/cmark-gfm/issues/278>.
        // Check that it is not followed by `(` or `[`.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket) {
            effects.consume(code);
            return trailBracketAfter;
        }
        if (// `<` is an end.
        code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan || // So is whitespace.
        code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"])(code)) {
            return ok(code);
        }
        return nok(code);
    }
    /**
   * In trail, after `]`.
   *
   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.
   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.
   *
   * ```markdown
   * > | https://example.com](
   *                         ^
   * ```
   *
   * @type {State}
   */ function trailBracketAfter(code) {
        // Whitespace or something that could start a resource or reference is the end.
        // Switch back to trail otherwise.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"])(code)) {
            return ok(code);
        }
        return trail(code);
    }
    /**
   * In character-reference like trail, after `&`.
   *
   * ```markdown
   * > | https://example.com&amp;).
   *                         ^
   * ```
   *
   * @type {State}
   */ function trailCharacterReferenceStart(code) {
        // When non-alpha, it’s not a trail.
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["asciiAlpha"])(code) ? trailCharacterReferenceInside(code) : nok(code);
    }
    /**
   * In character-reference like trail.
   *
   * ```markdown
   * > | https://example.com&amp;).
   *                         ^
   * ```
   *
   * @type {State}
   */ function trailCharacterReferenceInside(code) {
        // Switch back to trail if this is well-formed.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].semicolon) {
            effects.consume(code);
            return trail;
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["asciiAlpha"])(code)) {
            effects.consume(code);
            return trailCharacterReferenceInside;
        }
        // It’s not a trail.
        return nok(code);
    }
}
/**
 * Dot in email domain trail.
 *
 * This calls `ok` if this *is* the trail, followed by an end, which means
 * the trail is not part of the link.
 * It calls `nok` if this *is* part of the link.
 *
 * ```markdown
 * > | contact@example.org.
 *                        ^
 * ```
 *
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeEmailDomainDotTrail(effects, ok, nok) {
    return start;
    "TURBOPACK unreachable";
    /**
   * Dot.
   *
   * ```markdown
   * > | contact@example.org.
   *                    ^   ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        // Must be dot.
        effects.consume(code);
        return after;
    }
    /**
   * After dot.
   *
   * ```markdown
   * > | contact@example.org.
   *                     ^   ^
   * ```
   *
   * @type {State}
   */ function after(code) {
        // Not a trail if alphanumeric.
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["asciiAlphanumeric"])(code) ? nok(code) : ok(code);
    }
}
/**
 * See:
 * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.
 *
 * @type {Previous}
 */ function previousWww(code) {
    return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].asterisk || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].underscore || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].tilde || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code);
}
/**
 * See:
 * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.
 *
 * @type {Previous}
 */ function previousProtocol(code) {
    return !(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["asciiAlpha"])(code);
}
/**
 * @this {TokenizeContext}
 * @type {Previous}
 */ function previousEmail(code) {
    // Do not allow a slash “inside” atext.
    // The reference code is a bit weird, but that’s what it results in.
    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.
    // Other than slash, every preceding character is allowed.
    return !(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].slash || gfmAtext(code));
}
/**
 * @param {Code} code
 * @returns {boolean}
 */ function gfmAtext(code) {
    return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].plusSign || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dot || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].underscore || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["asciiAlphanumeric"])(code);
}
/**
 * @param {Array<Event>} events
 * @returns {boolean}
 */ function previousUnbalanced(events) {
    let index = events.length;
    let result = false;
    while(index--){
        const token = events[index][1];
        if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {
            result = true;
            break;
        }
        // If we’ve seen this token, and it was marked as not having any unbalanced
        // bracket before it, we can exit.
        if (token._gfmAutolinkLiteralWalkedInto) {
            result = false;
            break;
        }
    }
    if (events.length > 0 && !result) {
        // Mark the last token as “walked into” w/o finding
        // anything.
        events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;
    }
    return result;
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-gfm-autolink-literal/dev/lib/html.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {CompileContext, Handle, HtmlExtension, Token} from 'micromark-util-types'
 */ __turbopack_esm__({
    "gfmAutolinkLiteralHtml": (()=>gfmAutolinkLiteralHtml)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-sanitize-uri/dev/index.js [app-rsc] (ecmascript)");
;
function gfmAutolinkLiteralHtml() {
    return {
        exit: {
            literalAutolinkEmail,
            literalAutolinkHttp,
            literalAutolinkWww
        }
    };
}
/**
 * @this {CompileContext}
 * @type {Handle}
 */ function literalAutolinkWww(token) {
    anchorFromToken.call(this, token, 'http://');
}
/**
 * @this {CompileContext}
 * @type {Handle}
 */ function literalAutolinkEmail(token) {
    anchorFromToken.call(this, token, 'mailto:');
}
/**
 * @this {CompileContext}
 * @type {Handle}
 */ function literalAutolinkHttp(token) {
    anchorFromToken.call(this, token);
}
/**
 * @this CompileContext
 * @param {Token} token
 * @param {string | null | undefined} [protocol]
 * @returns {undefined}
 */ function anchorFromToken(token, protocol) {
    const url = this.sliceSerialize(token);
    this.tag('<a href="' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeUri"])((protocol || '') + url) + '">');
    this.raw(this.encode(url));
    this.tag('</a>');
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-gfm-footnote/dev/lib/syntax.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'
 */ __turbopack_esm__({
    "gfmFootnote": (()=>gfmFootnote)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$normalize$2d$identifier$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-normalize-identifier/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-factory-space/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$blank$2d$line$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-core-commonmark/dev/lib/blank-line.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const indent = {
    tokenize: tokenizeIndent,
    partial: true
};
function gfmFootnote() {
    /** @type {Extension} */ return {
        document: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket]: {
                name: 'gfmFootnoteDefinition',
                tokenize: tokenizeDefinitionStart,
                continuation: {
                    tokenize: tokenizeDefinitionContinuation
                },
                exit: gfmFootnoteDefinitionEnd
            }
        },
        text: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket]: {
                name: 'gfmFootnoteCall',
                tokenize: tokenizeGfmFootnoteCall
            },
            [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket]: {
                name: 'gfmPotentialFootnoteCall',
                add: 'after',
                tokenize: tokenizePotentialGfmFootnoteCall,
                resolveTo: resolveToPotentialGfmFootnoteCall
            }
        }
    };
}
// To do: remove after micromark update.
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizePotentialGfmFootnoteCall(effects, ok, nok) {
    const self = this;
    let index = self.events.length;
    const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);
    /** @type {Token} */ let labelStart;
    // Find an opening.
    while(index--){
        const token = self.events[index][1];
        if (token.type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].labelImage) {
            labelStart = token;
            break;
        }
        // Exit if we’ve walked far enough.
        if (token.type === 'gfmFootnoteCall' || token.type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].labelLink || token.type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].label || token.type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].image || token.type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].link) {
            break;
        }
    }
    return start;
    "TURBOPACK unreachable";
    /**
   * @type {State}
   */ function start(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket, 'expected `]`');
        if (!labelStart || !labelStart._balanced) {
            return nok(code);
        }
        const id = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$normalize$2d$identifier$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeIdentifier"])(self.sliceSerialize({
            start: labelStart.end,
            end: self.now()
        }));
        if (id.codePointAt(0) !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].caret || !defined.includes(id.slice(1))) {
            return nok(code);
        }
        effects.enter('gfmFootnoteCallLabelMarker');
        effects.consume(code);
        effects.exit('gfmFootnoteCallLabelMarker');
        return ok(code);
    }
}
// To do: remove after micromark update.
/** @type {Resolver} */ function resolveToPotentialGfmFootnoteCall(events, context) {
    let index = events.length;
    /** @type {Token | undefined} */ let labelStart;
    // Find an opening.
    while(index--){
        if (events[index][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].labelImage && events[index][0] === 'enter') {
            labelStart = events[index][1];
            break;
        }
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(labelStart, 'expected `labelStart` to resolve');
    // Change the `labelImageMarker` to a `data`.
    events[index + 1][1].type = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].data;
    events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';
    // The whole (without `!`):
    /** @type {Token} */ const call = {
        type: 'gfmFootnoteCall',
        start: Object.assign({}, events[index + 3][1].start),
        end: Object.assign({}, events[events.length - 1][1].end)
    };
    // The `^` marker
    /** @type {Token} */ const marker = {
        type: 'gfmFootnoteCallMarker',
        start: Object.assign({}, events[index + 3][1].end),
        end: Object.assign({}, events[index + 3][1].end)
    };
    // Increment the end 1 character.
    marker.end.column++;
    marker.end.offset++;
    marker.end._bufferIndex++;
    /** @type {Token} */ const string = {
        type: 'gfmFootnoteCallString',
        start: Object.assign({}, marker.end),
        end: Object.assign({}, events[events.length - 1][1].start)
    };
    /** @type {Token} */ const chunk = {
        type: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkString,
        contentType: 'string',
        start: Object.assign({}, string.start),
        end: Object.assign({}, string.end)
    };
    /** @type {Array<Event>} */ const replacement = [
        // Take the `labelImageMarker` (now `data`, the `!`)
        events[index + 1],
        events[index + 2],
        [
            'enter',
            call,
            context
        ],
        // The `[`
        events[index + 3],
        events[index + 4],
        // The `^`.
        [
            'enter',
            marker,
            context
        ],
        [
            'exit',
            marker,
            context
        ],
        // Everything in between.
        [
            'enter',
            string,
            context
        ],
        [
            'enter',
            chunk,
            context
        ],
        [
            'exit',
            chunk,
            context
        ],
        [
            'exit',
            string,
            context
        ],
        // The ending (`]`, properly parsed and labelled).
        events[events.length - 2],
        events[events.length - 1],
        [
            'exit',
            call,
            context
        ]
    ];
    events.splice(index, events.length - index + 1, ...replacement);
    return events;
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeGfmFootnoteCall(effects, ok, nok) {
    const self = this;
    const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);
    let size = 0;
    /** @type {boolean} */ let data;
    // Note: the implementation of `markdown-rs` is different, because it houses
    // core *and* extensions in one project.
    // Therefore, it can include footnote logic inside `label-end`.
    // We can’t do that, but luckily, we can parse footnotes in a simpler way than
    // needed for labels.
    return start;
    "TURBOPACK unreachable";
    /**
   * Start of footnote label.
   *
   * ```markdown
   * > | a [^b] c
   *       ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket, 'expected `[`');
        effects.enter('gfmFootnoteCall');
        effects.enter('gfmFootnoteCallLabelMarker');
        effects.consume(code);
        effects.exit('gfmFootnoteCallLabelMarker');
        return callStart;
    }
    /**
   * After `[`, at `^`.
   *
   * ```markdown
   * > | a [^b] c
   *        ^
   * ```
   *
   * @type {State}
   */ function callStart(code) {
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].caret) return nok(code);
        effects.enter('gfmFootnoteCallMarker');
        effects.consume(code);
        effects.exit('gfmFootnoteCallMarker');
        effects.enter('gfmFootnoteCallString');
        effects.enter('chunkString').contentType = 'string';
        return callData;
    }
    /**
   * In label.
   *
   * ```markdown
   * > | a [^b] c
   *         ^
   * ```
   *
   * @type {State}
   */ function callData(code) {
        if (// Too long.
        size > __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].linkReferenceSizeMax || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket && !data || // Space or tab is not supported by GFM for some reason.
        // `\n` and `[` not being supported makes sense.
        code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code)) {
            return nok(code);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket) {
            effects.exit('chunkString');
            const token = effects.exit('gfmFootnoteCallString');
            if (!defined.includes((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$normalize$2d$identifier$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeIdentifier"])(self.sliceSerialize(token)))) {
                return nok(code);
            }
            effects.enter('gfmFootnoteCallLabelMarker');
            effects.consume(code);
            effects.exit('gfmFootnoteCallLabelMarker');
            effects.exit('gfmFootnoteCall');
            return ok;
        }
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code)) {
            data = true;
        }
        size++;
        effects.consume(code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? callEscape : callData;
    }
    /**
   * On character after escape.
   *
   * ```markdown
   * > | a [^b\c] d
   *           ^
   * ```
   *
   * @type {State}
   */ function callEscape(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket) {
            effects.consume(code);
            size++;
            return callData;
        }
        return callData(code);
    }
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeDefinitionStart(effects, ok, nok) {
    const self = this;
    const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);
    /** @type {string} */ let identifier;
    let size = 0;
    /** @type {boolean | undefined} */ let data;
    return start;
    "TURBOPACK unreachable";
    /**
   * Start of GFM footnote definition.
   *
   * ```markdown
   * > | [^a]: b
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket, 'expected `[`');
        effects.enter('gfmFootnoteDefinition')._container = true;
        effects.enter('gfmFootnoteDefinitionLabel');
        effects.enter('gfmFootnoteDefinitionLabelMarker');
        effects.consume(code);
        effects.exit('gfmFootnoteDefinitionLabelMarker');
        return labelAtMarker;
    }
    /**
   * In label, at caret.
   *
   * ```markdown
   * > | [^a]: b
   *      ^
   * ```
   *
   * @type {State}
   */ function labelAtMarker(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].caret) {
            effects.enter('gfmFootnoteDefinitionMarker');
            effects.consume(code);
            effects.exit('gfmFootnoteDefinitionMarker');
            effects.enter('gfmFootnoteDefinitionLabelString');
            effects.enter('chunkString').contentType = 'string';
            return labelInside;
        }
        return nok(code);
    }
    /**
   * In label.
   *
   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote
   * > definition labels.
   *
   * ```markdown
   * > | [^a]: b
   *       ^
   * ```
   *
   * @type {State}
   */ function labelInside(code) {
        if (// Too long.
        size > __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].linkReferenceSizeMax || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket && !data || // Space or tab is not supported by GFM for some reason.
        // `\n` and `[` not being supported makes sense.
        code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code)) {
            return nok(code);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket) {
            effects.exit('chunkString');
            const token = effects.exit('gfmFootnoteDefinitionLabelString');
            identifier = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$normalize$2d$identifier$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeIdentifier"])(self.sliceSerialize(token));
            effects.enter('gfmFootnoteDefinitionLabelMarker');
            effects.consume(code);
            effects.exit('gfmFootnoteDefinitionLabelMarker');
            effects.exit('gfmFootnoteDefinitionLabel');
            return labelAfter;
        }
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code)) {
            data = true;
        }
        size++;
        effects.consume(code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? labelEscape : labelInside;
    }
    /**
   * After `\`, at a special character.
   *
   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:
   * > <https://github.com/github/cmark-gfm/issues/240>
   *
   * ```markdown
   * > | [^a\*b]: c
   *         ^
   * ```
   *
   * @type {State}
   */ function labelEscape(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket) {
            effects.consume(code);
            size++;
            return labelInside;
        }
        return labelInside(code);
    }
    /**
   * After definition label.
   *
   * ```markdown
   * > | [^a]: b
   *         ^
   * ```
   *
   * @type {State}
   */ function labelAfter(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].colon) {
            effects.enter('definitionMarker');
            effects.consume(code);
            effects.exit('definitionMarker');
            if (!defined.includes(identifier)) {
                defined.push(identifier);
            }
            // Any whitespace after the marker is eaten, forming indented code
            // is not possible.
            // No space is also fine, just like a block quote marker.
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');
        }
        return nok(code);
    }
    /**
   * After definition prefix.
   *
   * ```markdown
   * > | [^a]: b
   *           ^
   * ```
   *
   * @type {State}
   */ function whitespaceAfter(code) {
        // `markdown-rs` has a wrapping token for the prefix that is closed here.
        return ok(code);
    }
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeDefinitionContinuation(effects, ok, nok) {
    /// Start of footnote definition continuation.
    ///
    /// ```markdown
    ///   | [^a]: b
    /// > |     c
    ///     ^
    /// ```
    //
    // Either a blank line, which is okay, or an indented thing.
    return effects.check(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$lib$2f$blank$2d$line$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["blankLine"], ok, effects.attempt(indent, ok, nok));
}
/** @type {Exiter} */ function gfmFootnoteDefinitionEnd(effects) {
    effects.exit('gfmFootnoteDefinition');
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeIndent(effects, ok, nok) {
    const self = this;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].tabSize + 1);
    "TURBOPACK unreachable";
    /**
   * @type {State}
   */ function afterPrefix(code) {
        const tail = self.events[self.events.length - 1];
        return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].tabSize ? ok(code) : nok(code);
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-gfm-footnote/dev/lib/html.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {HtmlOptions as Options} from 'micromark-extension-gfm-footnote'
 * @import {HtmlExtension} from 'micromark-util-types'
 */ __turbopack_esm__({
    "defaultBackLabel": (()=>defaultBackLabel),
    "gfmFootnoteHtml": (()=>gfmFootnoteHtml)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$normalize$2d$identifier$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-normalize-identifier/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-sanitize-uri/dev/index.js [app-rsc] (ecmascript)");
;
;
;
const own = {}.hasOwnProperty;
/** @type {Options} */ const emptyOptions = {};
function defaultBackLabel(referenceIndex, rereferenceIndex) {
    return 'Back to reference ' + (referenceIndex + 1) + (rereferenceIndex > 1 ? '-' + rereferenceIndex : '');
}
function gfmFootnoteHtml(options) {
    const config = options || emptyOptions;
    const label = config.label || 'Footnotes';
    const labelTagName = config.labelTagName || 'h2';
    const labelAttributes = config.labelAttributes === null || config.labelAttributes === undefined ? 'class="sr-only"' : config.labelAttributes;
    const backLabel = config.backLabel || defaultBackLabel;
    const clobberPrefix = config.clobberPrefix === null || config.clobberPrefix === undefined ? 'user-content-' : config.clobberPrefix;
    return {
        enter: {
            gfmFootnoteDefinition () {
                const stack = this.getData('tightStack');
                stack.push(false);
            },
            gfmFootnoteDefinitionLabelString () {
                this.buffer();
            },
            gfmFootnoteCallString () {
                this.buffer();
            }
        },
        exit: {
            gfmFootnoteDefinition () {
                let definitions = this.getData('gfmFootnoteDefinitions');
                const footnoteStack = this.getData('gfmFootnoteDefinitionStack');
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(footnoteStack, 'expected `footnoteStack`');
                const tightStack = this.getData('tightStack');
                const current = footnoteStack.pop();
                const value = this.resume();
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(current, 'expected to be in a footnote');
                if (!definitions) {
                    this.setData('gfmFootnoteDefinitions', definitions = {});
                }
                if (!own.call(definitions, current)) definitions[current] = value;
                tightStack.pop();
                this.setData('slurpOneLineEnding', true);
                // “Hack” to prevent a line ending from showing up if we’re in a definition in
                // an empty list item.
                this.setData('lastWasTag');
            },
            gfmFootnoteDefinitionLabelString (token) {
                let footnoteStack = this.getData('gfmFootnoteDefinitionStack');
                if (!footnoteStack) {
                    this.setData('gfmFootnoteDefinitionStack', footnoteStack = []);
                }
                footnoteStack.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$normalize$2d$identifier$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeIdentifier"])(this.sliceSerialize(token)));
                this.resume() // Drop the label.
                ;
                this.buffer() // Get ready for a value.
                ;
            },
            gfmFootnoteCallString (token) {
                let calls = this.getData('gfmFootnoteCallOrder');
                let counts = this.getData('gfmFootnoteCallCounts');
                const id = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$normalize$2d$identifier$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeIdentifier"])(this.sliceSerialize(token));
                /** @type {number} */ let counter;
                this.resume();
                if (!calls) this.setData('gfmFootnoteCallOrder', calls = []);
                if (!counts) this.setData('gfmFootnoteCallCounts', counts = {});
                const index = calls.indexOf(id);
                const safeId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeUri"])(id.toLowerCase());
                if (index === -1) {
                    calls.push(id);
                    counts[id] = 1;
                    counter = calls.length;
                } else {
                    counts[id]++;
                    counter = index + 1;
                }
                const reuseCounter = counts[id];
                this.tag('<sup><a href="#' + clobberPrefix + 'fn-' + safeId + '" id="' + clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : '') + '" data-footnote-ref="" aria-describedby="footnote-label">' + String(counter) + '</a></sup>');
            },
            null () {
                const calls = this.getData('gfmFootnoteCallOrder') || [];
                const counts = this.getData('gfmFootnoteCallCounts') || {};
                const definitions = this.getData('gfmFootnoteDefinitions') || {};
                let index = -1;
                if (calls.length > 0) {
                    this.lineEndingIfNeeded();
                    this.tag('<section data-footnotes="" class="footnotes"><' + labelTagName + ' id="footnote-label"' + (labelAttributes ? ' ' + labelAttributes : '') + '>');
                    this.raw(this.encode(label));
                    this.tag('</' + labelTagName + '>');
                    this.lineEndingIfNeeded();
                    this.tag('<ol>');
                }
                while(++index < calls.length){
                    // Called definitions are always defined.
                    const id = calls[index];
                    const safeId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$sanitize$2d$uri$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeUri"])(id.toLowerCase());
                    let referenceIndex = 0;
                    /** @type {Array<string>} */ const references = [];
                    while(++referenceIndex <= counts[id]){
                        references.push('<a href="#' + clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : '') + '" data-footnote-backref="" aria-label="' + this.encode(typeof backLabel === 'string' ? backLabel : backLabel(index, referenceIndex)) + '" class="data-footnote-backref">↩' + (referenceIndex > 1 ? '<sup>' + referenceIndex + '</sup>' : '') + '</a>');
                    }
                    const reference = references.join(' ');
                    let injected = false;
                    this.lineEndingIfNeeded();
                    this.tag('<li id="' + clobberPrefix + 'fn-' + safeId + '">');
                    this.lineEndingIfNeeded();
                    this.tag(definitions[id].replace(/<\/p>(?:\r?\n|\r)?$/, function($0) {
                        injected = true;
                        return ' ' + reference + $0;
                    }));
                    if (!injected) {
                        this.lineEndingIfNeeded();
                        this.tag(reference);
                    }
                    this.lineEndingIfNeeded();
                    this.tag('</li>');
                }
                if (calls.length > 0) {
                    this.lineEndingIfNeeded();
                    this.tag('</ol>');
                    this.lineEndingIfNeeded();
                    this.tag('</section>');
                }
            }
        }
    };
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-gfm-strikethrough/dev/lib/syntax.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options} from 'micromark-extension-gfm-strikethrough'
 * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'
 */ __turbopack_esm__({
    "gfmStrikethrough": (()=>gfmStrikethrough)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-chunked/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$resolve$2d$all$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-resolve-all/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$classify$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-classify-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
;
;
;
;
;
function gfmStrikethrough(options) {
    const options_ = options || {};
    let single = options_.singleTilde;
    const tokenizer = {
        name: 'strikethrough',
        tokenize: tokenizeStrikethrough,
        resolveAll: resolveAllStrikethrough
    };
    if (single === null || single === undefined) {
        single = true;
    }
    return {
        text: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].tilde]: tokenizer
        },
        insideSpan: {
            null: [
                tokenizer
            ]
        },
        attentionMarkers: {
            null: [
                __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].tilde
            ]
        }
    };
    "TURBOPACK unreachable";
    /**
   * Take events and resolve strikethrough.
   *
   * @type {Resolver}
   */ function resolveAllStrikethrough(events, context) {
        let index = -1;
        // Walk through all events.
        while(++index < events.length){
            // Find a token that can close.
            if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {
                let open = index;
                // Now walk back to find an opener.
                while(open--){
                    // Find a token that can open the closer.
                    if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open && // If the sizes are the same:
                    events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {
                        events[index][1].type = 'strikethroughSequence';
                        events[open][1].type = 'strikethroughSequence';
                        /** @type {Token} */ const strikethrough = {
                            type: 'strikethrough',
                            start: Object.assign({}, events[open][1].start),
                            end: Object.assign({}, events[index][1].end)
                        };
                        /** @type {Token} */ const text = {
                            type: 'strikethroughText',
                            start: Object.assign({}, events[open][1].end),
                            end: Object.assign({}, events[index][1].start)
                        };
                        // Opening.
                        /** @type {Array<Event>} */ const nextEvents = [
                            [
                                'enter',
                                strikethrough,
                                context
                            ],
                            [
                                'enter',
                                events[open][1],
                                context
                            ],
                            [
                                'exit',
                                events[open][1],
                                context
                            ],
                            [
                                'enter',
                                text,
                                context
                            ]
                        ];
                        const insideSpan = context.parser.constructs.insideSpan.null;
                        if (insideSpan) {
                            // Between.
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["splice"])(nextEvents, nextEvents.length, 0, (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$resolve$2d$all$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["resolveAll"])(insideSpan, events.slice(open + 1, index), context));
                        }
                        // Closing.
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["splice"])(nextEvents, nextEvents.length, 0, [
                            [
                                'exit',
                                text,
                                context
                            ],
                            [
                                'enter',
                                events[index][1],
                                context
                            ],
                            [
                                'exit',
                                events[index][1],
                                context
                            ],
                            [
                                'exit',
                                strikethrough,
                                context
                            ]
                        ]);
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["splice"])(events, open - 1, index - open + 3, nextEvents);
                        index = open + nextEvents.length - 2;
                        break;
                    }
                }
            }
        }
        index = -1;
        while(++index < events.length){
            if (events[index][1].type === 'strikethroughSequenceTemporary') {
                events[index][1].type = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].data;
            }
        }
        return events;
    }
    /**
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeStrikethrough(effects, ok, nok) {
        const previous = this.previous;
        const events = this.events;
        let size = 0;
        return start;
        "TURBOPACK unreachable";
        /** @type {State} */ function start(code) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].tilde, 'expected `~`');
            if (previous === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].tilde && events[events.length - 1][1].type !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].characterEscape) {
                return nok(code);
            }
            effects.enter('strikethroughSequenceTemporary');
            return more(code);
        }
        /** @type {State} */ function more(code) {
            const before = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$classify$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["classifyCharacter"])(previous);
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].tilde) {
                // If this is the third marker, exit.
                if (size > 1) return nok(code);
                effects.consume(code);
                size++;
                return more;
            }
            if (size < 2 && !single) return nok(code);
            const token = effects.exit('strikethroughSequenceTemporary');
            const after = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$classify$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["classifyCharacter"])(code);
            token._open = !after || after === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].attentionSideAfter && Boolean(before);
            token._close = !before || before === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].attentionSideAfter && Boolean(after);
            return ok(code);
        }
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-gfm-strikethrough/dev/lib/html.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {HtmlExtension} from 'micromark-util-types'
 */ /**
 * Create an HTML extension for `micromark` to support GFM strikethrough when
 * serializing to HTML.
 *
 * @returns {HtmlExtension}
 *   Extension for `micromark` that can be passed in `htmlExtensions`, to
 *   support GFM strikethrough when serializing to HTML.
 */ __turbopack_esm__({
    "gfmStrikethroughHtml": (()=>gfmStrikethroughHtml)
});
function gfmStrikethroughHtml() {
    return {
        enter: {
            strikethrough () {
                this.tag('<del>');
            }
        },
        exit: {
            strikethrough () {
                this.tag('</del>');
            }
        }
    };
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-gfm-table/dev/lib/edit-map.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Event} from 'micromark-util-types'
 */ // Port of `edit_map.rs` from `markdown-rs`.
// This should move to `markdown-js` later.
// Deal with several changes in events, batching them together.
//
// Preferably, changes should be kept to a minimum.
// Sometimes, it’s needed to change the list of events, because parsing can be
// messy, and it helps to expose a cleaner interface of events to the compiler
// and other users.
// It can also help to merge many adjacent similar events.
// And, in other cases, it’s needed to parse subcontent: pass some events
// through another tokenizer and inject the result.
/**
 * @typedef {[number, number, Array<Event>]} Change
 * @typedef {[number, number, number]} Jump
 */ /**
 * Tracks a bunch of edits.
 */ __turbopack_esm__({
    "EditMap": (()=>EditMap)
});
class EditMap {
    /**
   * Create a new edit map.
   */ constructor(){
        /**
     * Record of changes.
     *
     * @type {Array<Change>}
     */ this.map = [];
    }
    /**
   * Create an edit: a remove and/or add at a certain place.
   *
   * @param {number} index
   * @param {number} remove
   * @param {Array<Event>} add
   * @returns {undefined}
   */ add(index, remove, add) {
        addImplementation(this, index, remove, add);
    }
    // To do: add this when moving to `micromark`.
    // /**
    //  * Create an edit: but insert `add` before existing additions.
    //  *
    //  * @param {number} index
    //  * @param {number} remove
    //  * @param {Array<Event>} add
    //  * @returns {undefined}
    //  */
    // addBefore(index, remove, add) {
    //   addImplementation(this, index, remove, add, true)
    // }
    /**
   * Done, change the events.
   *
   * @param {Array<Event>} events
   * @returns {undefined}
   */ consume(events) {
        this.map.sort(function(a, b) {
            return a[0] - b[0];
        });
        /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */ if (this.map.length === 0) {
            return;
        }
        // To do: if links are added in events, like they are in `markdown-rs`,
        // this is needed.
        // // Calculate jumps: where items in the current list move to.
        // /** @type {Array<Jump>} */
        // const jumps = []
        // let index = 0
        // let addAcc = 0
        // let removeAcc = 0
        // while (index < this.map.length) {
        //   const [at, remove, add] = this.map[index]
        //   removeAcc += remove
        //   addAcc += add.length
        //   jumps.push([at, removeAcc, addAcc])
        //   index += 1
        // }
        //
        // . shiftLinks(events, jumps)
        let index = this.map.length;
        /** @type {Array<Array<Event>>} */ const vecs = [];
        while(index > 0){
            index -= 1;
            vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);
            // Truncate rest.
            events.length = this.map[index][0];
        }
        vecs.push(events.slice());
        events.length = 0;
        let slice = vecs.pop();
        while(slice){
            for (const element of slice){
                events.push(element);
            }
            slice = vecs.pop();
        }
        // Truncate everything.
        this.map.length = 0;
    }
}
/**
 * Create an edit.
 *
 * @param {EditMap} editMap
 * @param {number} at
 * @param {number} remove
 * @param {Array<Event>} add
 * @returns {undefined}
 */ function addImplementation(editMap, at, remove, add) {
    let index = 0;
    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */ if (remove === 0 && add.length === 0) {
        return;
    }
    while(index < editMap.map.length){
        if (editMap.map[index][0] === at) {
            editMap.map[index][1] += remove;
            // To do: before not used by tables, use when moving to micromark.
            // if (before) {
            //   add.push(...editMap.map[index][2])
            //   editMap.map[index][2] = add
            // } else {
            editMap.map[index][2].push(...add);
            // }
            return;
        }
        index += 1;
    }
    editMap.map.push([
        at,
        remove,
        add
    ]);
} // /**
 //  * Shift `previous` and `next` links according to `jumps`.
 //  *
 //  * This fixes links in case there are events removed or added between them.
 //  *
 //  * @param {Array<Event>} events
 //  * @param {Array<Jump>} jumps
 //  */
 // function shiftLinks(events, jumps) {
 //   let jumpIndex = 0
 //   let index = 0
 //   let add = 0
 //   let rm = 0
 //   while (index < events.length) {
 //     const rmCurr = rm
 //     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {
 //       add = jumps[jumpIndex][2]
 //       rm = jumps[jumpIndex][1]
 //       jumpIndex += 1
 //     }
 //     // Ignore items that will be removed.
 //     if (rm > rmCurr) {
 //       index += rm - rmCurr
 //     } else {
 //       // ?
 //       // if let Some(link) = &events[index].link {
 //       //     if let Some(next) = link.next {
 //       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);
 //       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {
 //       //             add = jumps[jumpIndex].2;
 //       //             rm = jumps[jumpIndex].1;
 //       //             jumpIndex += 1;
 //       //         }
 //       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);
 //       //         index = next;
 //       //         continue;
 //       //     }
 //       // }
 //       index += 1
 //     }
 //   }
 // }
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-gfm-table/dev/lib/infer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Event} from 'micromark-util-types'
 */ /**
 * @typedef {'center' | 'left' | 'none' | 'right'} Align
 */ __turbopack_esm__({
    "gfmTableAlign": (()=>gfmTableAlign)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
;
function gfmTableAlign(events, index) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(events[index][1].type === 'table', 'expected table');
    let inDelimiterRow = false;
    /** @type {Array<Align>} */ const align = [];
    while(index < events.length){
        const event = events[index];
        if (inDelimiterRow) {
            if (event[0] === 'enter') {
                // Start of alignment value: set a new column.
                // To do: `markdown-rs` uses `tableDelimiterCellValue`.
                if (event[1].type === 'tableContent') {
                    align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');
                }
            } else if (event[1].type === 'tableContent') {
                if (events[index - 1][1].type === 'tableDelimiterMarker') {
                    const alignIndex = align.length - 1;
                    align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';
                }
            } else if (event[1].type === 'tableDelimiterRow') {
                break;
            }
        } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {
            inDelimiterRow = true;
        }
        index += 1;
    }
    return align;
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-gfm-table/dev/lib/syntax.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'
 */ /**
 * @typedef {[number, number, number, number]} Range
 *   Cell info.
 *
 * @typedef {0 | 1 | 2 | 3} RowKind
 *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.
 */ __turbopack_esm__({
    "gfmTable": (()=>gfmTable)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-factory-space/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$table$2f$dev$2f$lib$2f$edit$2d$map$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-gfm-table/dev/lib/edit-map.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$table$2f$dev$2f$lib$2f$infer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-gfm-table/dev/lib/infer.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
function gfmTable() {
    return {
        flow: {
            null: {
                name: 'table',
                tokenize: tokenizeTable,
                resolveAll: resolveTable
            }
        }
    };
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeTable(effects, ok, nok) {
    const self = this;
    let size = 0;
    let sizeB = 0;
    /** @type {boolean | undefined} */ let seen;
    return start;
    "TURBOPACK unreachable";
    /**
   * Start of a GFM table.
   *
   * If there is a valid table row or table head before, then we try to parse
   * another row.
   * Otherwise, we try to parse a head.
   *
   * ```markdown
   * > | | a |
   *     ^
   *   | | - |
   * > | | b |
   *     ^
   * ```
   * @type {State}
   */ function start(code) {
        let index = self.events.length - 1;
        while(index > -1){
            const type = self.events[index][1].type;
            if (type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding || // Note: markdown-rs uses `whitespace` instead of `linePrefix`
            type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix) index--;
            else break;
        }
        const tail = index > -1 ? self.events[index][1].type : null;
        const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;
        // Don’t allow lazy body rows.
        if (next === bodyRowStart && self.parser.lazy[self.now().line]) {
            return nok(code);
        }
        return next(code);
    }
    /**
   * Before table head row.
   *
   * ```markdown
   * > | | a |
   *     ^
   *   | | - |
   *   | | b |
   * ```
   *
   * @type {State}
   */ function headRowBefore(code) {
        effects.enter('tableHead');
        effects.enter('tableRow');
        return headRowStart(code);
    }
    /**
   * Before table head row, after whitespace.
   *
   * ```markdown
   * > | | a |
   *     ^
   *   | | - |
   *   | | b |
   * ```
   *
   * @type {State}
   */ function headRowStart(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].verticalBar) {
            return headRowBreak(code);
        }
        // To do: micromark-js should let us parse our own whitespace in extensions,
        // like `markdown-rs`:
        //
        // ```js
        // // 4+ spaces.
        // if (markdownSpace(code)) {
        //   return nok(code)
        // }
        // ```
        seen = true;
        // Count the first character, that isn’t a pipe, double.
        sizeB += 1;
        return headRowBreak(code);
    }
    /**
   * At break in table head row.
   *
   * ```markdown
   * > | | a |
   *     ^
   *       ^
   *         ^
   *   | | - |
   *   | | b |
   * ```
   *
   * @type {State}
   */ function headRowBreak(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.
            return nok(code);
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            // If anything other than one pipe (ignoring whitespace) was used, it’s fine.
            if (sizeB > 1) {
                sizeB = 0;
                // To do: check if this works.
                // Feel free to interrupt:
                self.interrupt = true;
                effects.exit('tableRow');
                effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
                effects.consume(code);
                effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
                return headDelimiterStart;
            }
            // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.
            return nok(code);
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code)) {
            // To do: check if this is fine.
            // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)
            // State::Retry(space_or_tab(tokenizer))
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, headRowBreak, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].whitespace)(code);
        }
        sizeB += 1;
        if (seen) {
            seen = false;
            // Header cell count.
            size += 1;
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].verticalBar) {
            effects.enter('tableCellDivider');
            effects.consume(code);
            effects.exit('tableCellDivider');
            // Whether a delimiter was seen.
            seen = true;
            return headRowBreak;
        }
        // Anything else is cell data.
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].data);
        return headRowData(code);
    }
    /**
   * In table head row data.
   *
   * ```markdown
   * > | | a |
   *       ^
   *   | | - |
   *   | | b |
   * ```
   *
   * @type {State}
   */ function headRowData(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].verticalBar || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code)) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].data);
            return headRowBreak(code);
        }
        effects.consume(code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? headRowEscape : headRowData;
    }
    /**
   * In table head row escape.
   *
   * ```markdown
   * > | | a\-b |
   *         ^
   *   | | ---- |
   *   | | c    |
   * ```
   *
   * @type {State}
   */ function headRowEscape(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].verticalBar) {
            effects.consume(code);
            return headRowData;
        }
        return headRowData(code);
    }
    /**
   * Before delimiter row.
   *
   * ```markdown
   *   | | a |
   * > | | - |
   *     ^
   *   | | b |
   * ```
   *
   * @type {State}
   */ function headDelimiterStart(code) {
        // Reset `interrupt`.
        self.interrupt = false;
        // Note: in `markdown-rs`, we need to handle piercing here too.
        if (self.parser.lazy[self.now().line]) {
            return nok(code);
        }
        effects.enter('tableDelimiterRow');
        // Track if we’ve seen a `:` or `|`.
        seen = false;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code)) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(self.parser.constructs.disable.null, 'expected `disabled.null`');
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, headDelimiterBefore, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix, self.parser.constructs.disable.null.includes('codeIndented') ? undefined : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].tabSize)(code);
        }
        return headDelimiterBefore(code);
    }
    /**
   * Before delimiter row, after optional whitespace.
   *
   * Reused when a `|` is found later, to parse another cell.
   *
   * ```markdown
   *   | | a |
   * > | | - |
   *     ^
   *   | | b |
   * ```
   *
   * @type {State}
   */ function headDelimiterBefore(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].colon) {
            return headDelimiterValueBefore(code);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].verticalBar) {
            seen = true;
            // If we start with a pipe, we open a cell marker.
            effects.enter('tableCellDivider');
            effects.consume(code);
            effects.exit('tableCellDivider');
            return headDelimiterCellBefore;
        }
        // More whitespace / empty row not allowed at start.
        return headDelimiterNok(code);
    }
    /**
   * After `|`, before delimiter cell.
   *
   * ```markdown
   *   | | a |
   * > | | - |
   *      ^
   * ```
   *
   * @type {State}
   */ function headDelimiterCellBefore(code) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code)) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, headDelimiterValueBefore, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].whitespace)(code);
        }
        return headDelimiterValueBefore(code);
    }
    /**
   * Before delimiter cell value.
   *
   * ```markdown
   *   | | a |
   * > | | - |
   *       ^
   * ```
   *
   * @type {State}
   */ function headDelimiterValueBefore(code) {
        // Align: left.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].colon) {
            sizeB += 1;
            seen = true;
            effects.enter('tableDelimiterMarker');
            effects.consume(code);
            effects.exit('tableDelimiterMarker');
            return headDelimiterLeftAlignmentAfter;
        }
        // Align: none.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dash) {
            sizeB += 1;
            // To do: seems weird that this *isn’t* left aligned, but that state is used?
            return headDelimiterLeftAlignmentAfter(code);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            return headDelimiterCellAfter(code);
        }
        return headDelimiterNok(code);
    }
    /**
   * After delimiter cell left alignment marker.
   *
   * ```markdown
   *   | | a  |
   * > | | :- |
   *        ^
   * ```
   *
   * @type {State}
   */ function headDelimiterLeftAlignmentAfter(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dash) {
            effects.enter('tableDelimiterFiller');
            return headDelimiterFiller(code);
        }
        // Anything else is not ok after the left-align colon.
        return headDelimiterNok(code);
    }
    /**
   * In delimiter cell filler.
   *
   * ```markdown
   *   | | a |
   * > | | - |
   *       ^
   * ```
   *
   * @type {State}
   */ function headDelimiterFiller(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dash) {
            effects.consume(code);
            return headDelimiterFiller;
        }
        // Align is `center` if it was `left`, `right` otherwise.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].colon) {
            seen = true;
            effects.exit('tableDelimiterFiller');
            effects.enter('tableDelimiterMarker');
            effects.consume(code);
            effects.exit('tableDelimiterMarker');
            return headDelimiterRightAlignmentAfter;
        }
        effects.exit('tableDelimiterFiller');
        return headDelimiterRightAlignmentAfter(code);
    }
    /**
   * After delimiter cell right alignment marker.
   *
   * ```markdown
   *   | |  a |
   * > | | -: |
   *         ^
   * ```
   *
   * @type {State}
   */ function headDelimiterRightAlignmentAfter(code) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code)) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, headDelimiterCellAfter, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].whitespace)(code);
        }
        return headDelimiterCellAfter(code);
    }
    /**
   * After delimiter cell.
   *
   * ```markdown
   *   | |  a |
   * > | | -: |
   *          ^
   * ```
   *
   * @type {State}
   */ function headDelimiterCellAfter(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].verticalBar) {
            return headDelimiterBefore(code);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            // Exit when:
            // * there was no `:` or `|` at all (it’s a thematic break or setext
            //   underline instead)
            // * the header cell count is not the delimiter cell count
            if (!seen || size !== sizeB) {
                return headDelimiterNok(code);
            }
            // Note: in markdown-rs`, a reset is needed here.
            effects.exit('tableDelimiterRow');
            effects.exit('tableHead');
            // To do: in `markdown-rs`, resolvers need to be registered manually.
            // effects.register_resolver(ResolveName::GfmTable)
            return ok(code);
        }
        return headDelimiterNok(code);
    }
    /**
   * In delimiter row, at a disallowed byte.
   *
   * ```markdown
   *   | | a |
   * > | | x |
   *       ^
   * ```
   *
   * @type {State}
   */ function headDelimiterNok(code) {
        // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.
        return nok(code);
    }
    /**
   * Before table body row.
   *
   * ```markdown
   *   | | a |
   *   | | - |
   * > | | b |
   *     ^
   * ```
   *
   * @type {State}
   */ function bodyRowStart(code) {
        // Note: in `markdown-rs` we need to manually take care of a prefix,
        // but in `micromark-js` that is done for us, so if we’re here, we’re
        // never at whitespace.
        effects.enter('tableRow');
        return bodyRowBreak(code);
    }
    /**
   * At break in table body row.
   *
   * ```markdown
   *   | | a |
   *   | | - |
   * > | | b |
   *     ^
   *       ^
   *         ^
   * ```
   *
   * @type {State}
   */ function bodyRowBreak(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].verticalBar) {
            effects.enter('tableCellDivider');
            effects.consume(code);
            effects.exit('tableCellDivider');
            return bodyRowBreak;
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            effects.exit('tableRow');
            return ok(code);
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code)) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, bodyRowBreak, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].whitespace)(code);
        }
        // Anything else is cell content.
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].data);
        return bodyRowData(code);
    }
    /**
   * In table body row data.
   *
   * ```markdown
   *   | | a |
   *   | | - |
   * > | | b |
   *       ^
   * ```
   *
   * @type {State}
   */ function bodyRowData(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].verticalBar || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code)) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].data);
            return bodyRowBreak(code);
        }
        effects.consume(code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? bodyRowEscape : bodyRowData;
    }
    /**
   * In table body row escape.
   *
   * ```markdown
   *   | | a    |
   *   | | ---- |
   * > | | b\-c |
   *         ^
   * ```
   *
   * @type {State}
   */ function bodyRowEscape(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].backslash || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].verticalBar) {
            effects.consume(code);
            return bodyRowData;
        }
        return bodyRowData(code);
    }
}
/** @type {Resolver} */ function resolveTable(events, context) {
    let index = -1;
    let inFirstCellAwaitingPipe = true;
    /** @type {RowKind} */ let rowKind = 0;
    /** @type {Range} */ let lastCell = [
        0,
        0,
        0,
        0
    ];
    /** @type {Range} */ let cell = [
        0,
        0,
        0,
        0
    ];
    let afterHeadAwaitingFirstBodyRow = false;
    let lastTableEnd = 0;
    /** @type {Token | undefined} */ let currentTable;
    /** @type {Token | undefined} */ let currentBody;
    /** @type {Token | undefined} */ let currentCell;
    const map = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$table$2f$dev$2f$lib$2f$edit$2d$map$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EditMap"]();
    while(++index < events.length){
        const event = events[index];
        const token = event[1];
        if (event[0] === 'enter') {
            // Start of head.
            if (token.type === 'tableHead') {
                afterHeadAwaitingFirstBodyRow = false;
                // Inject previous (body end and) table end.
                if (lastTableEnd !== 0) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(currentTable, 'there should be a table opening');
                    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);
                    currentBody = undefined;
                    lastTableEnd = 0;
                }
                // Inject table start.
                currentTable = {
                    type: 'table',
                    start: Object.assign({}, token.start),
                    // Note: correct end is set later.
                    end: Object.assign({}, token.end)
                };
                map.add(index, 0, [
                    [
                        'enter',
                        currentTable,
                        context
                    ]
                ]);
            } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {
                inFirstCellAwaitingPipe = true;
                currentCell = undefined;
                lastCell = [
                    0,
                    0,
                    0,
                    0
                ];
                cell = [
                    0,
                    index + 1,
                    0,
                    0
                ];
                // Inject table body start.
                if (afterHeadAwaitingFirstBodyRow) {
                    afterHeadAwaitingFirstBodyRow = false;
                    currentBody = {
                        type: 'tableBody',
                        start: Object.assign({}, token.start),
                        // Note: correct end is set later.
                        end: Object.assign({}, token.end)
                    };
                    map.add(index, 0, [
                        [
                            'enter',
                            currentBody,
                            context
                        ]
                    ]);
                }
                rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;
            } else if (rowKind && (token.type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].data || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {
                inFirstCellAwaitingPipe = false;
                // First value in cell.
                if (cell[2] === 0) {
                    if (lastCell[1] !== 0) {
                        cell[0] = cell[1];
                        currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);
                        lastCell = [
                            0,
                            0,
                            0,
                            0
                        ];
                    }
                    cell[2] = index;
                }
            } else if (token.type === 'tableCellDivider') {
                if (inFirstCellAwaitingPipe) {
                    inFirstCellAwaitingPipe = false;
                } else {
                    if (lastCell[1] !== 0) {
                        cell[0] = cell[1];
                        currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);
                    }
                    lastCell = cell;
                    cell = [
                        lastCell[1],
                        index,
                        0,
                        0
                    ];
                }
            }
        } else if (token.type === 'tableHead') {
            afterHeadAwaitingFirstBodyRow = true;
            lastTableEnd = index;
        } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {
            lastTableEnd = index;
            if (lastCell[1] !== 0) {
                cell[0] = cell[1];
                currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);
            } else if (cell[1] !== 0) {
                currentCell = flushCell(map, context, cell, rowKind, index, currentCell);
            }
            rowKind = 0;
        } else if (rowKind && (token.type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].data || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {
            cell[3] = index;
        }
    }
    if (lastTableEnd !== 0) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(currentTable, 'expected table opening');
        flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);
    }
    map.consume(context.events);
    // To do: move this into `html`, when events are exposed there.
    // That’s what `markdown-rs` does.
    // That needs updates to `mdast-util-gfm-table`.
    index = -1;
    while(++index < context.events.length){
        const event = context.events[index];
        if (event[0] === 'enter' && event[1].type === 'table') {
            event[1]._align = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$table$2f$dev$2f$lib$2f$infer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmTableAlign"])(context.events, index);
        }
    }
    return events;
}
/**
 * Generate a cell.
 *
 * @param {EditMap} map
 * @param {Readonly<TokenizeContext>} context
 * @param {Readonly<Range>} range
 * @param {RowKind} rowKind
 * @param {number | undefined} rowEnd
 * @param {Token | undefined} previousCell
 * @returns {Token | undefined}
 */ // eslint-disable-next-line max-params
function flushCell(map, context, range, rowKind, rowEnd, previousCell) {
    // `markdown-rs` uses:
    // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'
    const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';
    // `markdown-rs` uses:
    // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'
    const valueName = 'tableContent';
    // Insert an exit for the previous cell, if there is one.
    //
    // ```markdown
    // > | | aa | bb | cc |
    //          ^-- exit
    //           ^^^^-- this cell
    // ```
    if (range[0] !== 0) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(previousCell, 'expected previous cell enter');
        previousCell.end = Object.assign({}, getPoint(context.events, range[0]));
        map.add(range[0], 0, [
            [
                'exit',
                previousCell,
                context
            ]
        ]);
    }
    // Insert enter of this cell.
    //
    // ```markdown
    // > | | aa | bb | cc |
    //           ^-- enter
    //           ^^^^-- this cell
    // ```
    const now = getPoint(context.events, range[1]);
    previousCell = {
        type: groupName,
        start: Object.assign({}, now),
        // Note: correct end is set later.
        end: Object.assign({}, now)
    };
    map.add(range[1], 0, [
        [
            'enter',
            previousCell,
            context
        ]
    ]);
    // Insert text start at first data start and end at last data end, and
    // remove events between.
    //
    // ```markdown
    // > | | aa | bb | cc |
    //            ^-- enter
    //             ^-- exit
    //           ^^^^-- this cell
    // ```
    if (range[2] !== 0) {
        const relatedStart = getPoint(context.events, range[2]);
        const relatedEnd = getPoint(context.events, range[3]);
        /** @type {Token} */ const valueToken = {
            type: valueName,
            start: Object.assign({}, relatedStart),
            end: Object.assign({}, relatedEnd)
        };
        map.add(range[2], 0, [
            [
                'enter',
                valueToken,
                context
            ]
        ]);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(range[3] !== 0);
        if (rowKind !== 2) {
            // Fix positional info on remaining events
            const start = context.events[range[2]];
            const end = context.events[range[3]];
            start[1].end = Object.assign({}, end[1].end);
            start[1].type = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkText;
            start[1].contentType = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeText;
            // Remove if needed.
            if (range[3] > range[2] + 1) {
                const a = range[2] + 1;
                const b = range[3] - range[2] - 1;
                map.add(a, b, []);
            }
        }
        map.add(range[3] + 1, 0, [
            [
                'exit',
                valueToken,
                context
            ]
        ]);
    }
    // Insert an exit for the last cell, if at the row end.
    //
    // ```markdown
    // > | | aa | bb | cc |
    //                    ^-- exit
    //               ^^^^^^-- this cell (the last one contains two “between” parts)
    // ```
    if (rowEnd !== undefined) {
        previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));
        map.add(rowEnd, 0, [
            [
                'exit',
                previousCell,
                context
            ]
        ]);
        previousCell = undefined;
    }
    return previousCell;
}
/**
 * Generate table end (and table body end).
 *
 * @param {Readonly<EditMap>} map
 * @param {Readonly<TokenizeContext>} context
 * @param {number} index
 * @param {Token} table
 * @param {Token | undefined} tableBody
 */ // eslint-disable-next-line max-params
function flushTableEnd(map, context, index, table, tableBody) {
    /** @type {Array<Event>} */ const exits = [];
    const related = getPoint(context.events, index);
    if (tableBody) {
        tableBody.end = Object.assign({}, related);
        exits.push([
            'exit',
            tableBody,
            context
        ]);
    }
    table.end = Object.assign({}, related);
    exits.push([
        'exit',
        table,
        context
    ]);
    map.add(index + 1, 0, exits);
}
/**
 * @param {Readonly<Array<Event>>} events
 * @param {number} index
 * @returns {Readonly<Point>}
 */ function getPoint(events, index) {
    const event = events[index];
    const side = event[0] === 'enter' ? 'start' : 'end';
    return event[1][side];
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-gfm-table/dev/lib/html.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {HtmlExtension} from 'micromark-util-types'
 */ __turbopack_esm__({
    "gfmTableHtml": (()=>gfmTableHtml)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
;
const alignment = {
    none: '',
    left: ' align="left"',
    right: ' align="right"',
    center: ' align="center"'
};
function gfmTableHtml() {
    return {
        enter: {
            table (token) {
                const tableAlign = token._align;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tableAlign, 'expected `_align`');
                this.lineEndingIfNeeded();
                this.tag('<table>');
                this.setData('tableAlign', tableAlign);
            },
            tableBody () {
                this.tag('<tbody>');
            },
            tableData () {
                const tableAlign = this.getData('tableAlign');
                const tableColumn = this.getData('tableColumn');
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tableAlign, 'expected `tableAlign`');
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof tableColumn === 'number', 'expected `tableColumn`');
                const align = alignment[tableAlign[tableColumn]];
                if (align === undefined) {
                    // Capture results to ignore them.
                    this.buffer();
                } else {
                    this.lineEndingIfNeeded();
                    this.tag('<td' + align + '>');
                }
            },
            tableHead () {
                this.lineEndingIfNeeded();
                this.tag('<thead>');
            },
            tableHeader () {
                const tableAlign = this.getData('tableAlign');
                const tableColumn = this.getData('tableColumn');
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tableAlign, 'expected `tableAlign`');
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof tableColumn === 'number', 'expected `tableColumn`');
                const align = alignment[tableAlign[tableColumn]];
                this.lineEndingIfNeeded();
                this.tag('<th' + align + '>');
            },
            tableRow () {
                this.setData('tableColumn', 0);
                this.lineEndingIfNeeded();
                this.tag('<tr>');
            }
        },
        exit: {
            // Overwrite the default code text data handler to unescape escaped pipes when
            // they are in tables.
            codeTextData (token) {
                let value = this.sliceSerialize(token);
                if (this.getData('tableAlign')) {
                    value = value.replace(/\\([\\|])/g, replace);
                }
                this.raw(this.encode(value));
            },
            table () {
                this.setData('tableAlign');
                // Note: we don’t set `slurpAllLineEndings` anymore, in delimiter rows,
                // but we do need to reset it to match a funky newline GH generates for
                // list items combined with tables.
                this.setData('slurpAllLineEndings');
                this.lineEndingIfNeeded();
                this.tag('</table>');
            },
            tableBody () {
                this.lineEndingIfNeeded();
                this.tag('</tbody>');
            },
            tableData () {
                const tableAlign = this.getData('tableAlign');
                const tableColumn = this.getData('tableColumn');
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tableAlign, 'expected `tableAlign`');
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof tableColumn === 'number', 'expected `tableColumn`');
                if (tableColumn in tableAlign) {
                    this.tag('</td>');
                    this.setData('tableColumn', tableColumn + 1);
                } else {
                    // Stop capturing.
                    this.resume();
                }
            },
            tableHead () {
                this.lineEndingIfNeeded();
                this.tag('</thead>');
            },
            tableHeader () {
                const tableColumn = this.getData('tableColumn');
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof tableColumn === 'number', 'expected `tableColumn`');
                this.tag('</th>');
                this.setData('tableColumn', tableColumn + 1);
            },
            tableRow () {
                const tableAlign = this.getData('tableAlign');
                let tableColumn = this.getData('tableColumn');
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(tableAlign, 'expected `tableAlign`');
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof tableColumn === 'number', 'expected `tableColumn`');
                while(tableColumn < tableAlign.length){
                    this.lineEndingIfNeeded();
                    this.tag('<td' + alignment[tableAlign[tableColumn]] + '></td>');
                    tableColumn++;
                }
                this.setData('tableColumn', tableColumn);
                this.lineEndingIfNeeded();
                this.tag('</tr>');
            }
        }
    };
}
/**
 * @param {string} $0
 * @param {string} $1
 * @returns {string}
 */ function replace($0, $1) {
    // Pipes work, backslashes don’t (but can’t escape pipes).
    return $1 === '|' ? $1 : $0;
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-gfm-task-list-item/dev/lib/syntax.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'
 */ __turbopack_esm__({
    "gfmTaskListItem": (()=>gfmTaskListItem)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-factory-space/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
;
;
;
;
const tasklistCheck = {
    name: 'tasklistCheck',
    tokenize: tokenizeTasklistCheck
};
function gfmTaskListItem() {
    return {
        text: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket]: tasklistCheck
        }
    };
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeTasklistCheck(effects, ok, nok) {
    const self = this;
    return open;
    "TURBOPACK unreachable";
    /**
   * At start of task list item check.
   *
   * ```markdown
   * > | * [x] y.
   *       ^
   * ```
   *
   * @type {State}
   */ function open(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket, 'expected `[`');
        if (// Exit if there’s stuff before.
        self.previous !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || // Exit if not in the first content that is the first child of a list
        // item.
        !self._gfmTasklistFirstContentOfListItem) {
            return nok(code);
        }
        effects.enter('taskListCheck');
        effects.enter('taskListCheckMarker');
        effects.consume(code);
        effects.exit('taskListCheckMarker');
        return inside;
    }
    /**
   * In task list item check.
   *
   * ```markdown
   * > | * [x] y.
   *        ^
   * ```
   *
   * @type {State}
   */ function inside(code) {
        // Currently we match how GH works in files.
        // To match how GH works in comments, use `markdownSpace` (`[\t ]`) instead
        // of `markdownLineEndingOrSpace` (`[\t\n\r ]`).
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"])(code)) {
            effects.enter('taskListCheckValueUnchecked');
            effects.consume(code);
            effects.exit('taskListCheckValueUnchecked');
            return close;
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].uppercaseX || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseX) {
            effects.enter('taskListCheckValueChecked');
            effects.consume(code);
            effects.exit('taskListCheckValueChecked');
            return close;
        }
        return nok(code);
    }
    /**
   * At close of task list item check.
   *
   * ```markdown
   * > | * [x] y.
   *         ^
   * ```
   *
   * @type {State}
   */ function close(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket) {
            effects.enter('taskListCheckMarker');
            effects.consume(code);
            effects.exit('taskListCheckMarker');
            effects.exit('taskListCheck');
            return after;
        }
        return nok(code);
    }
    /**
   * @type {State}
   */ function after(code) {
        // EOL in paragraph means there must be something else after it.
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            return ok(code);
        }
        // Space or tab?
        // Check what comes after.
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownSpace"])(code)) {
            return effects.check({
                tokenize: spaceThenNonSpace
            }, ok, nok)(code);
        }
        // EOF, or non-whitespace, both wrong.
        return nok(code);
    }
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function spaceThenNonSpace(effects, ok, nok) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, after, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].whitespace);
    "TURBOPACK unreachable";
    /**
   * After whitespace, after task list item check.
   *
   * ```markdown
   * > | * [x] y.
   *           ^
   * ```
   *
   * @type {State}
   */ function after(code) {
        // EOF means there was nothing, so bad.
        // EOL means there’s content after it, so good.
        // Impossible to have more spaces.
        // Anything else is good.
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof ? nok(code) : ok(code);
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-gfm-task-list-item/dev/lib/html.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {HtmlExtension} from 'micromark-util-types'
 */ /**
 * Create an HTML extension for `micromark` to support GFM task list items when
 * serializing to HTML.
 *
 * @returns {HtmlExtension}
 *   Extension for `micromark` that can be passed in `htmlExtensions` to
 *   support GFM task list items when serializing to HTML.
 */ __turbopack_esm__({
    "gfmTaskListItemHtml": (()=>gfmTaskListItemHtml)
});
function gfmTaskListItemHtml() {
    return {
        enter: {
            taskListCheck () {
                this.tag('<input type="checkbox" disabled="" ');
            }
        },
        exit: {
            taskListCheck () {
                this.tag('/>');
            },
            taskListCheckValueChecked () {
                this.tag('checked="" ');
            }
        }
    };
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-gfm-tagfilter/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('micromark-util-types').CompileContext} CompileContext
 * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
 * @typedef {import('micromark-util-types').Token} Token
 */ // An opening or closing tag start, followed by a case-insensitive specific tag name,
// followed by HTML whitespace, a greater than, or a slash.
__turbopack_esm__({
    "gfmTagfilterHtml": (()=>gfmTagfilterHtml)
});
const reFlow = /<(\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\t\n\f\r />])/gi;
// As HTML (text) parses tags separately (and very strictly), we don’t need to be
// global.
const reText = new RegExp('^' + reFlow.source, 'i');
function gfmTagfilterHtml() {
    return {
        exit: {
            htmlFlowData (token) {
                exitHtmlData.call(this, token, reFlow);
            },
            htmlTextData (token) {
                exitHtmlData.call(this, token, reText);
            }
        }
    };
}
/**
 * @this {CompileContext}
 * @param {Token} token
 * @param {RegExp} filter
 * @returns {undefined}
 */ function exitHtmlData(token, filter) {
    let value = this.sliceSerialize(token);
    if (this.options.allowDangerousHtml) {
        value = value.replace(filter, '&lt;$1$2');
    }
    this.raw(this.encode(value));
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-gfm/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions
 * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
 */ __turbopack_esm__({
    "gfm": (()=>gfm),
    "gfmHtml": (()=>gfmHtml)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$combine$2d$extensions$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-combine-extensions/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$autolink$2d$literal$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-gfm-autolink-literal/dev/lib/syntax.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$footnote$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-gfm-footnote/dev/lib/syntax.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$strikethrough$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-gfm-strikethrough/dev/lib/syntax.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$table$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-gfm-table/dev/lib/syntax.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$task$2d$list$2d$item$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-gfm-task-list-item/dev/lib/syntax.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$autolink$2d$literal$2f$dev$2f$lib$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-gfm-autolink-literal/dev/lib/html.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$footnote$2f$dev$2f$lib$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-gfm-footnote/dev/lib/html.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$strikethrough$2f$dev$2f$lib$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-gfm-strikethrough/dev/lib/html.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$table$2f$dev$2f$lib$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-gfm-table/dev/lib/html.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$tagfilter$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-gfm-tagfilter/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$task$2d$list$2d$item$2f$dev$2f$lib$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-gfm-task-list-item/dev/lib/html.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
function gfm(options) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$combine$2d$extensions$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["combineExtensions"])([
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$autolink$2d$literal$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmAutolinkLiteral"])(),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$footnote$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmFootnote"])(),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$strikethrough$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmStrikethrough"])(options),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$table$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmTable"])(),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$task$2d$list$2d$item$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmTaskListItem"])()
    ]);
}
function gfmHtml(options) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$combine$2d$extensions$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["combineHtmlExtensions"])([
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$autolink$2d$literal$2f$dev$2f$lib$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmAutolinkLiteralHtml"])(),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$footnote$2f$dev$2f$lib$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmFootnoteHtml"])(options),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$strikethrough$2f$dev$2f$lib$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmStrikethroughHtml"])(),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$table$2f$dev$2f$lib$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmTableHtml"])(),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$tagfilter$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmTagfilterHtml"])(),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2d$task$2d$list$2d$item$2f$dev$2f$lib$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmTaskListItemHtml"])()
    ]);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-find-and-replace/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'
 * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'
 */ /**
 * @typedef RegExpMatchObject
 *   Info on the match.
 * @property {number} index
 *   The index of the search at which the result was found.
 * @property {string} input
 *   A copy of the search string in the text node.
 * @property {[...Array<Parents>, Text]} stack
 *   All ancestors of the text node, where the last node is the text itself.
 *
 * @typedef {RegExp | string} Find
 *   Pattern to find.
 *
 *   Strings are escaped and then turned into global expressions.
 *
 * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList
 *   Several find and replaces, in array form.
 *
 * @typedef {[Find, Replace?]} FindAndReplaceTuple
 *   Find and replace in tuple form.
 *
 * @typedef {ReplaceFunction | string | null | undefined} Replace
 *   Thing to replace with.
 *
 * @callback ReplaceFunction
 *   Callback called when a search matches.
 * @param {...any} parameters
 *   The parameters are the result of corresponding search expression:
 *
 *   * `value` (`string`) — whole match
 *   * `...capture` (`Array<string>`) — matches from regex capture groups
 *   * `match` (`RegExpMatchObject`) — info on the match
 * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}
 *   Thing to replace with.
 *
 *   * when `null`, `undefined`, `''`, remove the match
 *   * …or when `false`, do not replace at all
 *   * …or when `string`, replace with a text node of that value
 *   * …or when `Node` or `Array<Node>`, replace with those nodes
 *
 * @typedef {[RegExp, ReplaceFunction]} Pair
 *   Normalized find and replace.
 *
 * @typedef {Array<Pair>} Pairs
 *   All find and replaced.
 *
 * @typedef Options
 *   Configuration.
 * @property {Test | null | undefined} [ignore]
 *   Test for which nodes to ignore (optional).
 */ __turbopack_esm__({
    "findAndReplace": (()=>findAndReplace)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$escape$2d$string$2d$regexp$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/escape-string-regexp/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-is/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit-parents/lib/index.js [app-rsc] (ecmascript)");
;
;
;
function findAndReplace(tree, list, options) {
    const settings = options || {};
    const ignored = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convert"])(settings.ignore || []);
    const pairs = toPairs(list);
    let pairIndex = -1;
    while(++pairIndex < pairs.length){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["visitParents"])(tree, 'text', visitor);
    }
    /** @type {BuildVisitor<Root, 'text'>} */ function visitor(node, parents) {
        let index = -1;
        /** @type {Parents | undefined} */ let grandparent;
        while(++index < parents.length){
            const parent = parents[index];
            /** @type {Array<Nodes> | undefined} */ const siblings = grandparent ? grandparent.children : undefined;
            if (ignored(parent, siblings ? siblings.indexOf(parent) : undefined, grandparent)) {
                return;
            }
            grandparent = parent;
        }
        if (grandparent) {
            return handler(node, parents);
        }
    }
    /**
   * Handle a text node which is not in an ignored parent.
   *
   * @param {Text} node
   *   Text node.
   * @param {Array<Parents>} parents
   *   Parents.
   * @returns {VisitorResult}
   *   Result.
   */ function handler(node, parents) {
        const parent = parents[parents.length - 1];
        const find = pairs[pairIndex][0];
        const replace = pairs[pairIndex][1];
        let start = 0;
        /** @type {Array<Nodes>} */ const siblings = parent.children;
        const index = siblings.indexOf(node);
        let change = false;
        /** @type {Array<PhrasingContent>} */ let nodes = [];
        find.lastIndex = 0;
        let match = find.exec(node.value);
        while(match){
            const position = match.index;
            /** @type {RegExpMatchObject} */ const matchObject = {
                index: match.index,
                input: match.input,
                stack: [
                    ...parents,
                    node
                ]
            };
            let value = replace(...match, matchObject);
            if (typeof value === 'string') {
                value = value.length > 0 ? {
                    type: 'text',
                    value
                } : undefined;
            }
            // It wasn’t a match after all.
            if (value === false) {
                // False acts as if there was no match.
                // So we need to reset `lastIndex`, which currently being at the end of
                // the current match, to the beginning.
                find.lastIndex = position + 1;
            } else {
                if (start !== position) {
                    nodes.push({
                        type: 'text',
                        value: node.value.slice(start, position)
                    });
                }
                if (Array.isArray(value)) {
                    nodes.push(...value);
                } else if (value) {
                    nodes.push(value);
                }
                start = position + match[0].length;
                change = true;
            }
            if (!find.global) {
                break;
            }
            match = find.exec(node.value);
        }
        if (change) {
            if (start < node.value.length) {
                nodes.push({
                    type: 'text',
                    value: node.value.slice(start)
                });
            }
            parent.children.splice(index, 1, ...nodes);
        } else {
            nodes = [
                node
            ];
        }
        return index + nodes.length;
    }
}
/**
 * Turn a tuple or a list of tuples into pairs.
 *
 * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList
 *   Schema.
 * @returns {Pairs}
 *   Clean pairs.
 */ function toPairs(tupleOrList) {
    /** @type {Pairs} */ const result = [];
    if (!Array.isArray(tupleOrList)) {
        throw new TypeError('Expected find and replace tuple or list of tuples');
    }
    /** @type {FindAndReplaceList} */ // @ts-expect-error: correct.
    const list = !tupleOrList[0] || Array.isArray(tupleOrList[0]) ? tupleOrList : [
        tupleOrList
    ];
    let index = -1;
    while(++index < list.length){
        const tuple = list[index];
        result.push([
            toExpression(tuple[0]),
            toFunction(tuple[1])
        ]);
    }
    return result;
}
/**
 * Turn a find into an expression.
 *
 * @param {Find} find
 *   Find.
 * @returns {RegExp}
 *   Expression.
 */ function toExpression(find) {
    return typeof find === 'string' ? new RegExp((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$escape$2d$string$2d$regexp$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(find), 'g') : find;
}
/**
 * Turn a replace into a function.
 *
 * @param {Replace} replace
 *   Replace.
 * @returns {ReplaceFunction}
 *   Function.
 */ function toFunction(replace) {
    return typeof replace === 'function' ? replace : function() {
        return replace;
    };
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-gfm-autolink-literal/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'
 * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'
 * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'
 * @import {Link, PhrasingContent} from 'mdast'
 */ __turbopack_esm__({
    "gfmAutolinkLiteralFromMarkdown": (()=>gfmAutolinkLiteralFromMarkdown),
    "gfmAutolinkLiteralToMarkdown": (()=>gfmAutolinkLiteralToMarkdown)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$find$2d$and$2d$replace$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-find-and-replace/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$ccount$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/ccount/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
;
;
;
;
/** @type {ConstructName} */ const inConstruct = 'phrasing';
/** @type {Array<ConstructName>} */ const notInConstruct = [
    'autolink',
    'link',
    'image',
    'label'
];
function gfmAutolinkLiteralFromMarkdown() {
    return {
        transforms: [
            transformGfmAutolinkLiterals
        ],
        enter: {
            literalAutolink: enterLiteralAutolink,
            literalAutolinkEmail: enterLiteralAutolinkValue,
            literalAutolinkHttp: enterLiteralAutolinkValue,
            literalAutolinkWww: enterLiteralAutolinkValue
        },
        exit: {
            literalAutolink: exitLiteralAutolink,
            literalAutolinkEmail: exitLiteralAutolinkEmail,
            literalAutolinkHttp: exitLiteralAutolinkHttp,
            literalAutolinkWww: exitLiteralAutolinkWww
        }
    };
}
function gfmAutolinkLiteralToMarkdown() {
    return {
        unsafe: [
            {
                character: '@',
                before: '[+\\-.\\w]',
                after: '[\\-.\\w]',
                inConstruct,
                notInConstruct
            },
            {
                character: '.',
                before: '[Ww]',
                after: '[\\-.\\w]',
                inConstruct,
                notInConstruct
            },
            {
                character: ':',
                before: '[ps]',
                after: '\\/',
                inConstruct,
                notInConstruct
            }
        ]
    };
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterLiteralAutolink(token) {
    this.enter({
        type: 'link',
        title: null,
        url: '',
        children: []
    }, token);
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterLiteralAutolinkValue(token) {
    this.config.enter.autolinkProtocol.call(this, token);
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitLiteralAutolinkHttp(token) {
    this.config.exit.autolinkProtocol.call(this, token);
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitLiteralAutolinkWww(token) {
    this.config.exit.data.call(this, token);
    const node = this.stack[this.stack.length - 1];
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'link');
    node.url = 'http://' + this.sliceSerialize(token);
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitLiteralAutolinkEmail(token) {
    this.config.exit.autolinkEmail.call(this, token);
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitLiteralAutolink(token) {
    this.exit(token);
}
/** @type {FromMarkdownTransform} */ function transformGfmAutolinkLiterals(tree) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$find$2d$and$2d$replace$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findAndReplace"])(tree, [
        [
            /(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi,
            findUrl
        ],
        [
            /(?<=^|\s|\p{P}|\p{S})([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/gu,
            findEmail
        ]
    ], {
        ignore: [
            'link',
            'linkReference'
        ]
    });
}
/**
 * @type {ReplaceFunction}
 * @param {string} _
 * @param {string} protocol
 * @param {string} domain
 * @param {string} path
 * @param {RegExpMatchObject} match
 * @returns {Array<PhrasingContent> | Link | false}
 */ // eslint-disable-next-line max-params
function findUrl(_, protocol, domain, path, match) {
    let prefix = '';
    // Not an expected previous character.
    if (!previous(match)) {
        return false;
    }
    // Treat `www` as part of the domain.
    if (/^w/i.test(protocol)) {
        domain = protocol + domain;
        protocol = '';
        prefix = 'http://';
    }
    if (!isCorrectDomain(domain)) {
        return false;
    }
    const parts = splitUrl(domain + path);
    if (!parts[0]) return false;
    /** @type {Link} */ const result = {
        type: 'link',
        title: null,
        url: prefix + protocol + parts[0],
        children: [
            {
                type: 'text',
                value: protocol + parts[0]
            }
        ]
    };
    if (parts[1]) {
        return [
            result,
            {
                type: 'text',
                value: parts[1]
            }
        ];
    }
    return result;
}
/**
 * @type {ReplaceFunction}
 * @param {string} _
 * @param {string} atext
 * @param {string} label
 * @param {RegExpMatchObject} match
 * @returns {Link | false}
 */ function findEmail(_, atext, label, match) {
    if (// Not an expected previous character.
    !previous(match, true) || // Label ends in not allowed character.
    /[-\d_]$/.test(label)) {
        return false;
    }
    return {
        type: 'link',
        title: null,
        url: 'mailto:' + atext + '@' + label,
        children: [
            {
                type: 'text',
                value: atext + '@' + label
            }
        ]
    };
}
/**
 * @param {string} domain
 * @returns {boolean}
 */ function isCorrectDomain(domain) {
    const parts = domain.split('.');
    if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\d]/.test(parts[parts.length - 2]))) {
        return false;
    }
    return true;
}
/**
 * @param {string} url
 * @returns {[string, string | undefined]}
 */ function splitUrl(url) {
    const trailExec = /[!"&'),.:;<>?\]}]+$/.exec(url);
    if (!trailExec) {
        return [
            url,
            undefined
        ];
    }
    url = url.slice(0, trailExec.index);
    let trail = trailExec[0];
    let closingParenIndex = trail.indexOf(')');
    const openingParens = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$ccount$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ccount"])(url, '(');
    let closingParens = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$ccount$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ccount"])(url, ')');
    while(closingParenIndex !== -1 && openingParens > closingParens){
        url += trail.slice(0, closingParenIndex + 1);
        trail = trail.slice(closingParenIndex + 1);
        closingParenIndex = trail.indexOf(')');
        closingParens++;
    }
    return [
        url,
        trail
    ];
}
/**
 * @param {RegExpMatchObject} match
 * @param {boolean | null | undefined} [email=false]
 * @returns {boolean}
 */ function previous(match, email) {
    const code = match.input.charCodeAt(match.index - 1);
    return (match.index === 0 || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"])(code) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unicodePunctuation"])(code)) && // If it’s an email, the previous character should not be a slash.
    (!email || code !== 47);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-gfm-footnote/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {
 *   CompileContext,
 *   Extension as FromMarkdownExtension,
 *   Handle as FromMarkdownHandle
 * } from 'mdast-util-from-markdown'
 * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'
 * @import {
 *   Handle as ToMarkdownHandle,
 *   Map,
 *   Options as ToMarkdownExtension
 * } from 'mdast-util-to-markdown'
 * @import {FootnoteDefinition, FootnoteReference} from 'mdast'
 */ __turbopack_esm__({
    "gfmFootnoteFromMarkdown": (()=>gfmFootnoteFromMarkdown),
    "gfmFootnoteToMarkdown": (()=>gfmFootnoteToMarkdown)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$normalize$2d$identifier$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-normalize-identifier/dev/index.js [app-rsc] (ecmascript)");
;
;
footnoteReference.peek = footnoteReferencePeek;
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterFootnoteCallString() {
    this.buffer();
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterFootnoteCall(token) {
    this.enter({
        type: 'footnoteReference',
        identifier: '',
        label: ''
    }, token);
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterFootnoteDefinitionLabelString() {
    this.buffer();
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterFootnoteDefinition(token) {
    this.enter({
        type: 'footnoteDefinition',
        identifier: '',
        label: '',
        children: []
    }, token);
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitFootnoteCallString(token) {
    const label = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'footnoteReference');
    node.identifier = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$normalize$2d$identifier$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeIdentifier"])(this.sliceSerialize(token)).toLowerCase();
    node.label = label;
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitFootnoteCall(token) {
    this.exit(token);
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitFootnoteDefinitionLabelString(token) {
    const label = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'footnoteDefinition');
    node.identifier = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$normalize$2d$identifier$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalizeIdentifier"])(this.sliceSerialize(token)).toLowerCase();
    node.label = label;
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitFootnoteDefinition(token) {
    this.exit(token);
}
/** @type {ToMarkdownHandle} */ function footnoteReferencePeek() {
    return '[';
}
/**
 * @type {ToMarkdownHandle}
 * @param {FootnoteReference} node
 */ function footnoteReference(node, _, state, info) {
    const tracker = state.createTracker(info);
    let value = tracker.move('[^');
    const exit = state.enter('footnoteReference');
    const subexit = state.enter('reference');
    value += tracker.move(state.safe(state.associationId(node), {
        after: ']',
        before: value
    }));
    subexit();
    exit();
    value += tracker.move(']');
    return value;
}
function gfmFootnoteFromMarkdown() {
    return {
        enter: {
            gfmFootnoteCallString: enterFootnoteCallString,
            gfmFootnoteCall: enterFootnoteCall,
            gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,
            gfmFootnoteDefinition: enterFootnoteDefinition
        },
        exit: {
            gfmFootnoteCallString: exitFootnoteCallString,
            gfmFootnoteCall: exitFootnoteCall,
            gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,
            gfmFootnoteDefinition: exitFootnoteDefinition
        }
    };
}
function gfmFootnoteToMarkdown(options) {
    // To do: next major: change default.
    let firstLineBlank = false;
    if (options && options.firstLineBlank) {
        firstLineBlank = true;
    }
    return {
        handlers: {
            footnoteDefinition,
            footnoteReference
        },
        // This is on by default already.
        unsafe: [
            {
                character: '[',
                inConstruct: [
                    'label',
                    'phrasing',
                    'reference'
                ]
            }
        ]
    };
    "TURBOPACK unreachable";
    /**
   * @type {ToMarkdownHandle}
   * @param {FootnoteDefinition} node
   */ function footnoteDefinition(node, _, state, info) {
        const tracker = state.createTracker(info);
        let value = tracker.move('[^');
        const exit = state.enter('footnoteDefinition');
        const subexit = state.enter('label');
        value += tracker.move(state.safe(state.associationId(node), {
            before: value,
            after: ']'
        }));
        subexit();
        value += tracker.move(']:');
        if (node.children && node.children.length > 0) {
            tracker.shift(4);
            value += tracker.move((firstLineBlank ? '\n' : ' ') + state.indentLines(state.containerFlow(node, tracker.current()), firstLineBlank ? mapAll : mapExceptFirst));
        }
        exit();
        return value;
    }
}
/** @type {Map} */ function mapExceptFirst(line, index, blank) {
    return index === 0 ? line : mapAll(line, index, blank);
}
/** @type {Map} */ function mapAll(line, index, blank) {
    return (blank ? '' : '    ') + line;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-gfm-strikethrough/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('mdast').Delete} Delete
 *
 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 *
 * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName
 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 */ /**
 * List of constructs that occur in phrasing (paragraphs, headings), but cannot
 * contain strikethrough.
 * So they sort of cancel each other out.
 * Note: could use a better name.
 *
 * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>
 *
 * @type {Array<ConstructName>}
 */ __turbopack_esm__({
    "gfmStrikethroughFromMarkdown": (()=>gfmStrikethroughFromMarkdown),
    "gfmStrikethroughToMarkdown": (()=>gfmStrikethroughToMarkdown)
});
const constructsWithoutStrikethrough = [
    'autolink',
    'destinationLiteral',
    'destinationRaw',
    'reference',
    'titleQuote',
    'titleApostrophe'
];
handleDelete.peek = peekDelete;
function gfmStrikethroughFromMarkdown() {
    return {
        canContainEols: [
            'delete'
        ],
        enter: {
            strikethrough: enterStrikethrough
        },
        exit: {
            strikethrough: exitStrikethrough
        }
    };
}
function gfmStrikethroughToMarkdown() {
    return {
        unsafe: [
            {
                character: '~',
                inConstruct: 'phrasing',
                notInConstruct: constructsWithoutStrikethrough
            }
        ],
        handlers: {
            delete: handleDelete
        }
    };
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterStrikethrough(token) {
    this.enter({
        type: 'delete',
        children: []
    }, token);
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitStrikethrough(token) {
    this.exit(token);
}
/**
 * @type {ToMarkdownHandle}
 * @param {Delete} node
 */ function handleDelete(node, _, state, info) {
    const tracker = state.createTracker(info);
    const exit = state.enter('strikethrough');
    let value = tracker.move('~~');
    value += state.containerPhrasing(node, {
        ...tracker.current(),
        before: value,
        after: '~'
    });
    value += tracker.move('~~');
    exit();
    return value;
}
/** @type {ToMarkdownHandle} */ function peekDelete() {
    return '~';
}
}}),
"[project]/apps/website/docs/node_modules/markdown-table/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// To do: next major: remove.
/**
 * @typedef {Options} MarkdownTableOptions
 *   Configuration.
 */ /**
 * @typedef Options
 *   Configuration.
 * @property {boolean | null | undefined} [alignDelimiters=true]
 *   Whether to align the delimiters (default: `true`);
 *   they are aligned by default:
 *
 *   ```markdown
 *   | Alpha | B     |
 *   | ----- | ----- |
 *   | C     | Delta |
 *   ```
 *
 *   Pass `false` to make them staggered:
 *
 *   ```markdown
 *   | Alpha | B |
 *   | - | - |
 *   | C | Delta |
 *   ```
 * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]
 *   How to align columns (default: `''`);
 *   one style for all columns or styles for their respective columns;
 *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);
 *   other values are treated as `''`, which doesn’t place the colon in the
 *   alignment row but does align left;
 *   *only the lowercased first character is used, so `Right` is fine.*
 * @property {boolean | null | undefined} [delimiterEnd=true]
 *   Whether to end each row with the delimiter (default: `true`).
 *
 *   > 👉 **Note**: please don’t use this: it could create fragile structures
 *   > that aren’t understandable to some markdown parsers.
 *
 *   When `true`, there are ending delimiters:
 *
 *   ```markdown
 *   | Alpha | B     |
 *   | ----- | ----- |
 *   | C     | Delta |
 *   ```
 *
 *   When `false`, there are no ending delimiters:
 *
 *   ```markdown
 *   | Alpha | B
 *   | ----- | -----
 *   | C     | Delta
 *   ```
 * @property {boolean | null | undefined} [delimiterStart=true]
 *   Whether to begin each row with the delimiter (default: `true`).
 *
 *   > 👉 **Note**: please don’t use this: it could create fragile structures
 *   > that aren’t understandable to some markdown parsers.
 *
 *   When `true`, there are starting delimiters:
 *
 *   ```markdown
 *   | Alpha | B     |
 *   | ----- | ----- |
 *   | C     | Delta |
 *   ```
 *
 *   When `false`, there are no starting delimiters:
 *
 *   ```markdown
 *   Alpha | B     |
 *   ----- | ----- |
 *   C     | Delta |
 *   ```
 * @property {boolean | null | undefined} [padding=true]
 *   Whether to add a space of padding between delimiters and cells
 *   (default: `true`).
 *
 *   When `true`, there is padding:
 *
 *   ```markdown
 *   | Alpha | B     |
 *   | ----- | ----- |
 *   | C     | Delta |
 *   ```
 *
 *   When `false`, there is no padding:
 *
 *   ```markdown
 *   |Alpha|B    |
 *   |-----|-----|
 *   |C    |Delta|
 *   ```
 * @property {((value: string) => number) | null | undefined} [stringLength]
 *   Function to detect the length of table cell content (optional);
 *   this is used when aligning the delimiters (`|`) between table cells;
 *   full-width characters and emoji mess up delimiter alignment when viewing
 *   the markdown source;
 *   to fix this, you can pass this function,
 *   which receives the cell content and returns its “visible” size;
 *   note that what is and isn’t visible depends on where the text is displayed.
 *
 *   Without such a function, the following:
 *
 *   ```js
 *   markdownTable([
 *     ['Alpha', 'Bravo'],
 *     ['中文', 'Charlie'],
 *     ['👩‍❤️‍👩', 'Delta']
 *   ])
 *   ```
 *
 *   Yields:
 *
 *   ```markdown
 *   | Alpha | Bravo |
 *   | - | - |
 *   | 中文 | Charlie |
 *   | 👩‍❤️‍👩 | Delta |
 *   ```
 *
 *   With [`string-width`](https://github.com/sindresorhus/string-width):
 *
 *   ```js
 *   import stringWidth from 'string-width'
 *
 *   markdownTable(
 *     [
 *       ['Alpha', 'Bravo'],
 *       ['中文', 'Charlie'],
 *       ['👩‍❤️‍👩', 'Delta']
 *     ],
 *     {stringLength: stringWidth}
 *   )
 *   ```
 *
 *   Yields:
 *
 *   ```markdown
 *   | Alpha | Bravo   |
 *   | ----- | ------- |
 *   | 中文  | Charlie |
 *   | 👩‍❤️‍👩    | Delta   |
 *   ```
 */ /**
 * @param {string} value
 *   Cell value.
 * @returns {number}
 *   Cell size.
 */ __turbopack_esm__({
    "markdownTable": (()=>markdownTable)
});
function defaultStringLength(value) {
    return value.length;
}
function markdownTable(table, options) {
    const settings = options || {};
    // To do: next major: change to spread.
    const align = (settings.align || []).concat();
    const stringLength = settings.stringLength || defaultStringLength;
    /** @type {Array<number>} Character codes as symbols for alignment per column. */ const alignments = [];
    /** @type {Array<Array<string>>} Cells per row. */ const cellMatrix = [];
    /** @type {Array<Array<number>>} Sizes of each cell per row. */ const sizeMatrix = [];
    /** @type {Array<number>} */ const longestCellByColumn = [];
    let mostCellsPerRow = 0;
    let rowIndex = -1;
    // This is a superfluous loop if we don’t align delimiters, but otherwise we’d
    // do superfluous work when aligning, so optimize for aligning.
    while(++rowIndex < table.length){
        /** @type {Array<string>} */ const row = [];
        /** @type {Array<number>} */ const sizes = [];
        let columnIndex = -1;
        if (table[rowIndex].length > mostCellsPerRow) {
            mostCellsPerRow = table[rowIndex].length;
        }
        while(++columnIndex < table[rowIndex].length){
            const cell = serialize(table[rowIndex][columnIndex]);
            if (settings.alignDelimiters !== false) {
                const size = stringLength(cell);
                sizes[columnIndex] = size;
                if (longestCellByColumn[columnIndex] === undefined || size > longestCellByColumn[columnIndex]) {
                    longestCellByColumn[columnIndex] = size;
                }
            }
            row.push(cell);
        }
        cellMatrix[rowIndex] = row;
        sizeMatrix[rowIndex] = sizes;
    }
    // Figure out which alignments to use.
    let columnIndex = -1;
    if (typeof align === 'object' && 'length' in align) {
        while(++columnIndex < mostCellsPerRow){
            alignments[columnIndex] = toAlignment(align[columnIndex]);
        }
    } else {
        const code = toAlignment(align);
        while(++columnIndex < mostCellsPerRow){
            alignments[columnIndex] = code;
        }
    }
    // Inject the alignment row.
    columnIndex = -1;
    /** @type {Array<string>} */ const row = [];
    /** @type {Array<number>} */ const sizes = [];
    while(++columnIndex < mostCellsPerRow){
        const code = alignments[columnIndex];
        let before = '';
        let after = '';
        if (code === 99 /* `c` */ ) {
            before = ':';
            after = ':';
        } else if (code === 108 /* `l` */ ) {
            before = ':';
        } else if (code === 114 /* `r` */ ) {
            after = ':';
        }
        // There *must* be at least one hyphen-minus in each alignment cell.
        let size = settings.alignDelimiters === false ? 1 : Math.max(1, longestCellByColumn[columnIndex] - before.length - after.length);
        const cell = before + '-'.repeat(size) + after;
        if (settings.alignDelimiters !== false) {
            size = before.length + size + after.length;
            if (size > longestCellByColumn[columnIndex]) {
                longestCellByColumn[columnIndex] = size;
            }
            sizes[columnIndex] = size;
        }
        row[columnIndex] = cell;
    }
    // Inject the alignment row.
    cellMatrix.splice(1, 0, row);
    sizeMatrix.splice(1, 0, sizes);
    rowIndex = -1;
    /** @type {Array<string>} */ const lines = [];
    while(++rowIndex < cellMatrix.length){
        const row = cellMatrix[rowIndex];
        const sizes = sizeMatrix[rowIndex];
        columnIndex = -1;
        /** @type {Array<string>} */ const line = [];
        while(++columnIndex < mostCellsPerRow){
            const cell = row[columnIndex] || '';
            let before = '';
            let after = '';
            if (settings.alignDelimiters !== false) {
                const size = longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0);
                const code = alignments[columnIndex];
                if (code === 114 /* `r` */ ) {
                    before = ' '.repeat(size);
                } else if (code === 99 /* `c` */ ) {
                    if (size % 2) {
                        before = ' '.repeat(size / 2 + 0.5);
                        after = ' '.repeat(size / 2 - 0.5);
                    } else {
                        before = ' '.repeat(size / 2);
                        after = before;
                    }
                } else {
                    after = ' '.repeat(size);
                }
            }
            if (settings.delimiterStart !== false && !columnIndex) {
                line.push('|');
            }
            if (settings.padding !== false && // Don’t add the opening space if we’re not aligning and the cell is
            // empty: there will be a closing space.
            !(settings.alignDelimiters === false && cell === '') && (settings.delimiterStart !== false || columnIndex)) {
                line.push(' ');
            }
            if (settings.alignDelimiters !== false) {
                line.push(before);
            }
            line.push(cell);
            if (settings.alignDelimiters !== false) {
                line.push(after);
            }
            if (settings.padding !== false) {
                line.push(' ');
            }
            if (settings.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {
                line.push('|');
            }
        }
        lines.push(settings.delimiterEnd === false ? line.join('').replace(/ +$/, '') : line.join(''));
    }
    return lines.join('\n');
}
/**
 * @param {string | null | undefined} [value]
 *   Value to serialize.
 * @returns {string}
 *   Result.
 */ function serialize(value) {
    return value === null || value === undefined ? '' : String(value);
}
/**
 * @param {string | null | undefined} value
 *   Value.
 * @returns {number}
 *   Alignment.
 */ function toAlignment(value) {
    const code = typeof value === 'string' ? value.codePointAt(0) : 0;
    return code === 67 /* `C` */  || code === 99 /* `c` */  ? 99 /* `c` */  : code === 76 /* `L` */  || code === 108 /* `l` */  ? 108 /* `l` */  : code === 82 /* `R` */  || code === 114 /* `r` */  ? 114 /* `r` */  : 0;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Blockquote, Parents} from 'mdast'
 * @import {Info, Map, State} from 'mdast-util-to-markdown'
 */ /**
 * @param {Blockquote} node
 * @param {Parents | undefined} _
 * @param {State} state
 * @param {Info} info
 * @returns {string}
 */ __turbopack_esm__({
    "blockquote": (()=>blockquote)
});
function blockquote(node, _, state, info) {
    const exit = state.enter('blockquote');
    const tracker = state.createTracker(info);
    tracker.move('> ');
    tracker.shift(2);
    const value = state.indentLines(state.containerFlow(node, tracker.current()), map);
    exit();
    return value;
}
/** @type {Map} */ function map(line, _, blank) {
    return '>' + (blank ? '' : ' ') + line;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'
 */ /**
 * @param {Array<ConstructName>} stack
 * @param {Unsafe} pattern
 * @returns {boolean}
 */ __turbopack_esm__({
    "patternInScope": (()=>patternInScope)
});
function patternInScope(stack, pattern) {
    return listInScope(stack, pattern.inConstruct, true) && !listInScope(stack, pattern.notInConstruct, false);
}
/**
 * @param {Array<ConstructName>} stack
 * @param {Unsafe['inConstruct']} list
 * @param {boolean} none
 * @returns {boolean}
 */ function listInScope(stack, list, none) {
    if (typeof list === 'string') {
        list = [
            list
        ];
    }
    if (!list || list.length === 0) {
        return none;
    }
    let index = -1;
    while(++index < list.length){
        if (stack.includes(list[index])) {
            return true;
        }
    }
    return false;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/break.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Break, Parents} from 'mdast'
 * @import {Info, State} from 'mdast-util-to-markdown'
 */ __turbopack_esm__({
    "hardBreak": (()=>hardBreak)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$pattern$2d$in$2d$scope$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js [app-rsc] (ecmascript)");
;
function hardBreak(_, _1, state, info) {
    let index = -1;
    while(++index < state.unsafe.length){
        // If we can’t put eols in this construct (setext headings, tables), use a
        // space instead.
        if (state.unsafe[index].character === '\n' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$pattern$2d$in$2d$scope$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["patternInScope"])(state.stack, state.unsafe[index])) {
            return /[ \t]/.test(info.before) ? '' : ' ';
        }
    }
    return '\\\n';
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-fence.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options, State} from 'mdast-util-to-markdown'
 */ /**
 * @param {State} state
 * @returns {Exclude<Options['fence'], null | undefined>}
 */ __turbopack_esm__({
    "checkFence": (()=>checkFence)
});
function checkFence(state) {
    const marker = state.options.fence || '`';
    if (marker !== '`' && marker !== '~') {
        throw new Error('Cannot serialize code with `' + marker + '` for `options.fence`, expected `` ` `` or `~`');
    }
    return marker;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {State} from 'mdast-util-to-markdown'
 * @import {Code} from 'mdast'
 */ /**
 * @param {Code} node
 * @param {State} state
 * @returns {boolean}
 */ __turbopack_esm__({
    "formatCodeAsIndented": (()=>formatCodeAsIndented)
});
function formatCodeAsIndented(node, state) {
    return Boolean(state.options.fences === false && node.value && // If there’s no info…
    !node.lang && // And there’s a non-whitespace character…
    /[^ \r\n]/.test(node.value) && // And the value doesn’t start or end in a blank…
    !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(node.value));
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/code.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Info, Map, State} from 'mdast-util-to-markdown'
 * @import {Code, Parents} from 'mdast'
 */ __turbopack_esm__({
    "code": (()=>code)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$fence$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-fence.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$format$2d$code$2d$as$2d$indented$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$longest$2d$streak$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/longest-streak/index.js [app-rsc] (ecmascript)");
;
;
;
function code(node, _, state, info) {
    const marker = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$fence$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkFence"])(state);
    const raw = node.value || '';
    const suffix = marker === '`' ? 'GraveAccent' : 'Tilde';
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$format$2d$code$2d$as$2d$indented$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatCodeAsIndented"])(node, state)) {
        const exit = state.enter('codeIndented');
        const value = state.indentLines(raw, map);
        exit();
        return value;
    }
    const tracker = state.createTracker(info);
    const sequence = marker.repeat(Math.max((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$longest$2d$streak$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["longestStreak"])(raw, marker) + 1, 3));
    const exit = state.enter('codeFenced');
    let value = tracker.move(sequence);
    if (node.lang) {
        const subexit = state.enter(`codeFencedLang${suffix}`);
        value += tracker.move(state.safe(node.lang, {
            before: value,
            after: ' ',
            encode: [
                '`'
            ],
            ...tracker.current()
        }));
        subexit();
    }
    if (node.lang && node.meta) {
        const subexit = state.enter(`codeFencedMeta${suffix}`);
        value += tracker.move(' ');
        value += tracker.move(state.safe(node.meta, {
            before: value,
            after: '\n',
            encode: [
                '`'
            ],
            ...tracker.current()
        }));
        subexit();
    }
    value += tracker.move('\n');
    if (raw) {
        value += tracker.move(raw + '\n');
    }
    value += tracker.move(sequence);
    exit();
    return value;
}
/** @type {Map} */ function map(line, _, blank) {
    return (blank ? '' : '    ') + line;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-quote.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options, State} from 'mdast-util-to-markdown'
 */ /**
 * @param {State} state
 * @returns {Exclude<Options['quote'], null | undefined>}
 */ __turbopack_esm__({
    "checkQuote": (()=>checkQuote)
});
function checkQuote(state) {
    const marker = state.options.quote || '"';
    if (marker !== '"' && marker !== "'") {
        throw new Error('Cannot serialize title with `' + marker + '` for `options.quote`, expected `"`, or `\'`');
    }
    return marker;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/definition.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Info, State} from 'mdast-util-to-markdown'
 * @import {Definition, Parents} from 'mdast'
 */ __turbopack_esm__({
    "definition": (()=>definition)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$quote$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-quote.js [app-rsc] (ecmascript)");
;
function definition(node, _, state, info) {
    const quote = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$quote$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkQuote"])(state);
    const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
    const exit = state.enter('definition');
    let subexit = state.enter('label');
    const tracker = state.createTracker(info);
    let value = tracker.move('[');
    value += tracker.move(state.safe(state.associationId(node), {
        before: value,
        after: ']',
        ...tracker.current()
    }));
    value += tracker.move(']: ');
    subexit();
    if (// If there’s no url, or…
    !node.url || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node.url)) {
        subexit = state.enter('destinationLiteral');
        value += tracker.move('<');
        value += tracker.move(state.safe(node.url, {
            before: value,
            after: '>',
            ...tracker.current()
        }));
        value += tracker.move('>');
    } else {
        // No whitespace, raw is prettier.
        subexit = state.enter('destinationRaw');
        value += tracker.move(state.safe(node.url, {
            before: value,
            after: node.title ? ' ' : '\n',
            ...tracker.current()
        }));
    }
    subexit();
    if (node.title) {
        subexit = state.enter(`title${suffix}`);
        value += tracker.move(' ' + quote);
        value += tracker.move(state.safe(node.title, {
            before: value,
            after: quote,
            ...tracker.current()
        }));
        value += tracker.move(quote);
        subexit();
    }
    exit();
    return value;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options, State} from 'mdast-util-to-markdown'
 */ /**
 * @param {State} state
 * @returns {Exclude<Options['emphasis'], null | undefined>}
 */ __turbopack_esm__({
    "checkEmphasis": (()=>checkEmphasis)
});
function checkEmphasis(state) {
    const marker = state.options.emphasis || '*';
    if (marker !== '*' && marker !== '_') {
        throw new Error('Cannot serialize emphasis with `' + marker + '` for `options.emphasis`, expected `*`, or `_`');
    }
    return marker;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/encode-info.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {EncodeSides} from '../types.js'
 */ __turbopack_esm__({
    "encodeInfo": (()=>encodeInfo)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$classify$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-classify-character/dev/index.js [app-rsc] (ecmascript)");
;
function encodeInfo(outside, inside, marker) {
    const outsideKind = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$classify$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["classifyCharacter"])(outside);
    const insideKind = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$classify$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["classifyCharacter"])(inside);
    // Letter outside:
    if (outsideKind === undefined) {
        return insideKind === undefined ? // we have to encode *both* letters for `_` as it is looser.
        // it already forms for `*` (and GFMs `~`).
        marker === '_' ? {
            inside: true,
            outside: true
        } : {
            inside: false,
            outside: false
        } : insideKind === 1 ? {
            inside: true,
            outside: true
        } : {
            inside: false,
            outside: true
        };
    }
    // Whitespace outside:
    if (outsideKind === 1) {
        return insideKind === undefined ? {
            inside: false,
            outside: false
        } : insideKind === 1 ? {
            inside: true,
            outside: true
        } : {
            inside: false,
            outside: false
        };
    }
    // Punctuation outside:
    return insideKind === undefined ? {
        inside: false,
        outside: false
    } : insideKind === 1 ? {
        inside: true,
        outside: false
    } : {
        inside: false,
        outside: false
    };
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Encode a code point as a character reference.
 *
 * @param {number} code
 *   Code point to encode.
 * @returns {string}
 *   Encoded character reference.
 */ __turbopack_esm__({
    "encodeCharacterReference": (()=>encodeCharacterReference)
});
function encodeCharacterReference(code) {
    return '&#x' + code.toString(16).toUpperCase() + ';';
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Info, State} from 'mdast-util-to-markdown'
 * @import {Emphasis, Parents} from 'mdast'
 */ __turbopack_esm__({
    "emphasis": (()=>emphasis)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$emphasis$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$encode$2d$info$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/encode-info.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$encode$2d$character$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js [app-rsc] (ecmascript)");
;
;
;
emphasis.peek = emphasisPeek;
function emphasis(node, _, state, info) {
    const marker = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$emphasis$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkEmphasis"])(state);
    const exit = state.enter('emphasis');
    const tracker = state.createTracker(info);
    const before = tracker.move(marker);
    let between = tracker.move(state.containerPhrasing(node, {
        after: marker,
        before,
        ...tracker.current()
    }));
    const betweenHead = between.charCodeAt(0);
    const open = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$encode$2d$info$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeInfo"])(info.before.charCodeAt(info.before.length - 1), betweenHead, marker);
    if (open.inside) {
        between = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$encode$2d$character$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeCharacterReference"])(betweenHead) + between.slice(1);
    }
    const betweenTail = between.charCodeAt(between.length - 1);
    const close = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$encode$2d$info$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeInfo"])(info.after.charCodeAt(0), betweenTail, marker);
    if (close.inside) {
        between = between.slice(0, -1) + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$encode$2d$character$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeCharacterReference"])(betweenTail);
    }
    const after = tracker.move(marker);
    exit();
    state.attentionEncodeSurroundingInfo = {
        after: close.outside,
        before: open.outside
    };
    return before + between + after;
}
/**
 * @param {Emphasis} _
 * @param {Parents | undefined} _1
 * @param {State} state
 * @returns {string}
 */ function emphasisPeek(_, _1, state) {
    return state.options.emphasis || '*';
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {State} from 'mdast-util-to-markdown'
 * @import {Heading} from 'mdast'
 */ __turbopack_esm__({
    "formatHeadingAsSetext": (()=>formatHeadingAsSetext)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit/lib/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit-parents/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-string/lib/index.js [app-rsc] (ecmascript)");
;
;
function formatHeadingAsSetext(node, state) {
    let literalWithBreak = false;
    // Look for literals with a line break.
    // Note that this also
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(node, function(node) {
        if ('value' in node && /\r?\n|\r/.test(node.value) || node.type === 'break') {
            literalWithBreak = true;
            return __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EXIT"];
        }
    });
    return Boolean((!node.depth || node.depth < 3) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(node) && (state.options.setext || literalWithBreak));
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/heading.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Info, State} from 'mdast-util-to-markdown'
 * @import {Heading, Parents} from 'mdast'
 */ __turbopack_esm__({
    "heading": (()=>heading)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$format$2d$heading$2d$as$2d$setext$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$encode$2d$character$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js [app-rsc] (ecmascript)");
;
;
function heading(node, _, state, info) {
    const rank = Math.max(Math.min(6, node.depth || 1), 1);
    const tracker = state.createTracker(info);
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$format$2d$heading$2d$as$2d$setext$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatHeadingAsSetext"])(node, state)) {
        const exit = state.enter('headingSetext');
        const subexit = state.enter('phrasing');
        const value = state.containerPhrasing(node, {
            ...tracker.current(),
            before: '\n',
            after: '\n'
        });
        subexit();
        exit();
        return value + '\n' + (rank === 1 ? '=' : '-').repeat(// The whole size…
        value.length - // Minus the position of the character after the last EOL (or
        // 0 if there is none)…
        (Math.max(value.lastIndexOf('\r'), value.lastIndexOf('\n')) + 1));
    }
    const sequence = '#'.repeat(rank);
    const exit = state.enter('headingAtx');
    const subexit = state.enter('phrasing');
    // Note: for proper tracking, we should reset the output positions when there
    // is no content returned, because then the space is not output.
    // Practically, in that case, there is no content, so it doesn’t matter that
    // we’ve tracked one too many characters.
    tracker.move(sequence + ' ');
    let value = state.containerPhrasing(node, {
        before: '# ',
        after: '\n',
        ...tracker.current()
    });
    if (/^[\t ]/.test(value)) {
        // To do: what effect has the character reference on tracking?
        value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$encode$2d$character$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeCharacterReference"])(value.charCodeAt(0)) + value.slice(1);
    }
    value = value ? sequence + ' ' + value : sequence;
    if (state.options.closeAtx) {
        value += ' ' + sequence;
    }
    subexit();
    exit();
    return value;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/html.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Html} from 'mdast'
 */ __turbopack_esm__({
    "html": (()=>html)
});
html.peek = htmlPeek;
function html(node) {
    return node.value || '';
}
/**
 * @returns {string}
 */ function htmlPeek() {
    return '<';
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/image.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Info, State} from 'mdast-util-to-markdown'
 * @import {Image, Parents} from 'mdast'
 */ __turbopack_esm__({
    "image": (()=>image)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$quote$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-quote.js [app-rsc] (ecmascript)");
;
image.peek = imagePeek;
function image(node, _, state, info) {
    const quote = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$quote$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkQuote"])(state);
    const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
    const exit = state.enter('image');
    let subexit = state.enter('label');
    const tracker = state.createTracker(info);
    let value = tracker.move('![');
    value += tracker.move(state.safe(node.alt, {
        before: value,
        after: ']',
        ...tracker.current()
    }));
    value += tracker.move('](');
    subexit();
    if (// If there’s no url but there is a title…
    !node.url && node.title || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node.url)) {
        subexit = state.enter('destinationLiteral');
        value += tracker.move('<');
        value += tracker.move(state.safe(node.url, {
            before: value,
            after: '>',
            ...tracker.current()
        }));
        value += tracker.move('>');
    } else {
        // No whitespace, raw is prettier.
        subexit = state.enter('destinationRaw');
        value += tracker.move(state.safe(node.url, {
            before: value,
            after: node.title ? ' ' : ')',
            ...tracker.current()
        }));
    }
    subexit();
    if (node.title) {
        subexit = state.enter(`title${suffix}`);
        value += tracker.move(' ' + quote);
        value += tracker.move(state.safe(node.title, {
            before: value,
            after: quote,
            ...tracker.current()
        }));
        value += tracker.move(quote);
        subexit();
    }
    value += tracker.move(')');
    exit();
    return value;
}
/**
 * @returns {string}
 */ function imagePeek() {
    return '!';
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Info, State} from 'mdast-util-to-markdown'
 * @import {ImageReference, Parents} from 'mdast'
 */ __turbopack_esm__({
    "imageReference": (()=>imageReference)
});
imageReference.peek = imageReferencePeek;
function imageReference(node, _, state, info) {
    const type = node.referenceType;
    const exit = state.enter('imageReference');
    let subexit = state.enter('label');
    const tracker = state.createTracker(info);
    let value = tracker.move('![');
    const alt = state.safe(node.alt, {
        before: value,
        after: ']',
        ...tracker.current()
    });
    value += tracker.move(alt + '][');
    subexit();
    // Hide the fact that we’re in phrasing, because escapes don’t work.
    const stack = state.stack;
    state.stack = [];
    subexit = state.enter('reference');
    // Note: for proper tracking, we should reset the output positions when we end
    // up making a `shortcut` reference, because then there is no brace output.
    // Practically, in that case, there is no content, so it doesn’t matter that
    // we’ve tracked one too many characters.
    const reference = state.safe(state.associationId(node), {
        before: value,
        after: ']',
        ...tracker.current()
    });
    subexit();
    state.stack = stack;
    exit();
    if (type === 'full' || !alt || alt !== reference) {
        value += tracker.move(reference + ']');
    } else if (type === 'shortcut') {
        // Remove the unwanted `[`.
        value = value.slice(0, -1);
    } else {
        value += tracker.move(']');
    }
    return value;
}
/**
 * @returns {string}
 */ function imageReferencePeek() {
    return '!';
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {State} from 'mdast-util-to-markdown'
 * @import {InlineCode, Parents} from 'mdast'
 */ __turbopack_esm__({
    "inlineCode": (()=>inlineCode)
});
inlineCode.peek = inlineCodePeek;
function inlineCode(node, _, state) {
    let value = node.value || '';
    let sequence = '`';
    let index = -1;
    // If there is a single grave accent on its own in the code, use a fence of
    // two.
    // If there are two in a row, use one.
    while(new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)){
        sequence += '`';
    }
    // If this is not just spaces or eols (tabs don’t count), and either the
    // first or last character are a space, eol, or tick, then pad with spaces.
    if (/[^ \r\n]/.test(value) && (/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value) || /^`|`$/.test(value))) {
        value = ' ' + value + ' ';
    }
    // We have a potential problem: certain characters after eols could result in
    // blocks being seen.
    // For example, if someone injected the string `'\n# b'`, then that would
    // result in an ATX heading.
    // We can’t escape characters in `inlineCode`, but because eols are
    // transformed to spaces when going from markdown to HTML anyway, we can swap
    // them out.
    while(++index < state.unsafe.length){
        const pattern = state.unsafe[index];
        const expression = state.compilePattern(pattern);
        /** @type {RegExpExecArray | null} */ let match;
        // Only look for `atBreak`s.
        // Btw: note that `atBreak` patterns will always start the regex at LF or
        // CR.
        if (!pattern.atBreak) continue;
        while(match = expression.exec(value)){
            let position = match.index;
            // Support CRLF (patterns only look for one of the characters).
            if (value.charCodeAt(position) === 10 /* `\n` */  && value.charCodeAt(position - 1) === 13 /* `\r` */ ) {
                position--;
            }
            value = value.slice(0, position) + ' ' + value.slice(match.index + 1);
        }
    }
    return sequence + value + sequence;
}
/**
 * @returns {string}
 */ function inlineCodePeek() {
    return '`';
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {State} from 'mdast-util-to-markdown'
 * @import {Link} from 'mdast'
 */ __turbopack_esm__({
    "formatLinkAsAutolink": (()=>formatLinkAsAutolink)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-string/lib/index.js [app-rsc] (ecmascript)");
;
function formatLinkAsAutolink(node, state) {
    const raw = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(node);
    return Boolean(!state.options.resourceLink && // If there’s a url…
    node.url && // And there’s a no title…
    !node.title && // And the content of `node` is a single text node…
    node.children && node.children.length === 1 && node.children[0].type === 'text' && // And if the url is the same as the content…
    (raw === node.url || 'mailto:' + raw === node.url) && // And that starts w/ a protocol…
    /^[a-z][a-z+.-]+:/i.test(node.url) && // And that doesn’t contain ASCII control codes (character escapes and
    // references don’t work), space, or angle brackets…
    !/[\0- <>\u007F]/.test(node.url));
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/link.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Info, State} from 'mdast-util-to-markdown'
 * @import {Link, Parents} from 'mdast'
 * @import {Exit} from '../types.js'
 */ __turbopack_esm__({
    "link": (()=>link)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$quote$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-quote.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$format$2d$link$2d$as$2d$autolink$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js [app-rsc] (ecmascript)");
;
;
link.peek = linkPeek;
function link(node, _, state, info) {
    const quote = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$quote$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkQuote"])(state);
    const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
    const tracker = state.createTracker(info);
    /** @type {Exit} */ let exit;
    /** @type {Exit} */ let subexit;
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$format$2d$link$2d$as$2d$autolink$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatLinkAsAutolink"])(node, state)) {
        // Hide the fact that we’re in phrasing, because escapes don’t work.
        const stack = state.stack;
        state.stack = [];
        exit = state.enter('autolink');
        let value = tracker.move('<');
        value += tracker.move(state.containerPhrasing(node, {
            before: value,
            after: '>',
            ...tracker.current()
        }));
        value += tracker.move('>');
        exit();
        state.stack = stack;
        return value;
    }
    exit = state.enter('link');
    subexit = state.enter('label');
    let value = tracker.move('[');
    value += tracker.move(state.containerPhrasing(node, {
        before: value,
        after: '](',
        ...tracker.current()
    }));
    value += tracker.move('](');
    subexit();
    if (// If there’s no url but there is a title…
    !node.url && node.title || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node.url)) {
        subexit = state.enter('destinationLiteral');
        value += tracker.move('<');
        value += tracker.move(state.safe(node.url, {
            before: value,
            after: '>',
            ...tracker.current()
        }));
        value += tracker.move('>');
    } else {
        // No whitespace, raw is prettier.
        subexit = state.enter('destinationRaw');
        value += tracker.move(state.safe(node.url, {
            before: value,
            after: node.title ? ' ' : ')',
            ...tracker.current()
        }));
    }
    subexit();
    if (node.title) {
        subexit = state.enter(`title${suffix}`);
        value += tracker.move(' ' + quote);
        value += tracker.move(state.safe(node.title, {
            before: value,
            after: quote,
            ...tracker.current()
        }));
        value += tracker.move(quote);
        subexit();
    }
    value += tracker.move(')');
    exit();
    return value;
}
/**
 * @param {Link} node
 * @param {Parents | undefined} _
 * @param {State} state
 * @returns {string}
 */ function linkPeek(node, _, state) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$format$2d$link$2d$as$2d$autolink$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["formatLinkAsAutolink"])(node, state) ? '<' : '[';
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Info, State} from 'mdast-util-to-markdown'
 * @import {LinkReference, Parents} from 'mdast'
 */ __turbopack_esm__({
    "linkReference": (()=>linkReference)
});
linkReference.peek = linkReferencePeek;
function linkReference(node, _, state, info) {
    const type = node.referenceType;
    const exit = state.enter('linkReference');
    let subexit = state.enter('label');
    const tracker = state.createTracker(info);
    let value = tracker.move('[');
    const text = state.containerPhrasing(node, {
        before: value,
        after: ']',
        ...tracker.current()
    });
    value += tracker.move(text + '][');
    subexit();
    // Hide the fact that we’re in phrasing, because escapes don’t work.
    const stack = state.stack;
    state.stack = [];
    subexit = state.enter('reference');
    // Note: for proper tracking, we should reset the output positions when we end
    // up making a `shortcut` reference, because then there is no brace output.
    // Practically, in that case, there is no content, so it doesn’t matter that
    // we’ve tracked one too many characters.
    const reference = state.safe(state.associationId(node), {
        before: value,
        after: ']',
        ...tracker.current()
    });
    subexit();
    state.stack = stack;
    exit();
    if (type === 'full' || !text || text !== reference) {
        value += tracker.move(reference + ']');
    } else if (type === 'shortcut') {
        // Remove the unwanted `[`.
        value = value.slice(0, -1);
    } else {
        value += tracker.move(']');
    }
    return value;
}
/**
 * @returns {string}
 */ function linkReferencePeek() {
    return '[';
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options, State} from 'mdast-util-to-markdown'
 */ /**
 * @param {State} state
 * @returns {Exclude<Options['bullet'], null | undefined>}
 */ __turbopack_esm__({
    "checkBullet": (()=>checkBullet)
});
function checkBullet(state) {
    const marker = state.options.bullet || '*';
    if (marker !== '*' && marker !== '+' && marker !== '-') {
        throw new Error('Cannot serialize items with `' + marker + '` for `options.bullet`, expected `*`, `+`, or `-`');
    }
    return marker;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options, State} from 'mdast-util-to-markdown'
 */ /**
 * @param {State} state
 * @returns {Exclude<Options['bulletOrdered'], null | undefined>}
 */ __turbopack_esm__({
    "checkBulletOrdered": (()=>checkBulletOrdered)
});
function checkBulletOrdered(state) {
    const marker = state.options.bulletOrdered || '.';
    if (marker !== '.' && marker !== ')') {
        throw new Error('Cannot serialize items with `' + marker + '` for `options.bulletOrdered`, expected `.` or `)`');
    }
    return marker;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options, State} from 'mdast-util-to-markdown'
 */ __turbopack_esm__({
    "checkBulletOther": (()=>checkBulletOther)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$bullet$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js [app-rsc] (ecmascript)");
;
function checkBulletOther(state) {
    const bullet = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$bullet$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkBullet"])(state);
    const bulletOther = state.options.bulletOther;
    if (!bulletOther) {
        return bullet === '*' ? '-' : '*';
    }
    if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {
        throw new Error('Cannot serialize items with `' + bulletOther + '` for `options.bulletOther`, expected `*`, `+`, or `-`');
    }
    if (bulletOther === bullet) {
        throw new Error('Expected `bullet` (`' + bullet + '`) and `bulletOther` (`' + bulletOther + '`) to be different');
    }
    return bulletOther;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-rule.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options, State} from 'mdast-util-to-markdown'
 */ /**
 * @param {State} state
 * @returns {Exclude<Options['rule'], null | undefined>}
 */ __turbopack_esm__({
    "checkRule": (()=>checkRule)
});
function checkRule(state) {
    const marker = state.options.rule || '*';
    if (marker !== '*' && marker !== '-' && marker !== '_') {
        throw new Error('Cannot serialize rules with `' + marker + '` for `options.rule`, expected `*`, `-`, or `_`');
    }
    return marker;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/list.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Info, State} from 'mdast-util-to-markdown'
 * @import {List, Parents} from 'mdast'
 */ __turbopack_esm__({
    "list": (()=>list)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$bullet$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$bullet$2d$ordered$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$bullet$2d$other$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$rule$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-rule.js [app-rsc] (ecmascript)");
;
;
;
;
function list(node, parent, state, info) {
    const exit = state.enter('list');
    const bulletCurrent = state.bulletCurrent;
    /** @type {string} */ let bullet = node.ordered ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$bullet$2d$ordered$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkBulletOrdered"])(state) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$bullet$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkBullet"])(state);
    /** @type {string} */ const bulletOther = node.ordered ? bullet === '.' ? ')' : '.' : (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$bullet$2d$other$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkBulletOther"])(state);
    let useDifferentMarker = parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false;
    if (!node.ordered) {
        const firstListItem = node.children ? node.children[0] : undefined;
        // If there’s an empty first list item directly in two list items,
        // we have to use a different bullet:
        //
        // ```markdown
        // * - *
        // ```
        //
        // …because otherwise it would become one big thematic break.
        if (// Bullet could be used as a thematic break marker:
        (bullet === '*' || bullet === '-') && // Empty first list item:
        firstListItem && (!firstListItem.children || !firstListItem.children[0]) && // Directly in two other list items:
        state.stack[state.stack.length - 1] === 'list' && state.stack[state.stack.length - 2] === 'listItem' && state.stack[state.stack.length - 3] === 'list' && state.stack[state.stack.length - 4] === 'listItem' && // That are each the first child.
        state.indexStack[state.indexStack.length - 1] === 0 && state.indexStack[state.indexStack.length - 2] === 0 && state.indexStack[state.indexStack.length - 3] === 0) {
            useDifferentMarker = true;
        }
        // If there’s a thematic break at the start of the first list item,
        // we have to use a different bullet:
        //
        // ```markdown
        // * ---
        // ```
        //
        // …because otherwise it would become one big thematic break.
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$rule$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkRule"])(state) === bullet && firstListItem) {
            let index = -1;
            while(++index < node.children.length){
                const item = node.children[index];
                if (item && item.type === 'listItem' && item.children && item.children[0] && item.children[0].type === 'thematicBreak') {
                    useDifferentMarker = true;
                    break;
                }
            }
        }
    }
    if (useDifferentMarker) {
        bullet = bulletOther;
    }
    state.bulletCurrent = bullet;
    const value = state.containerFlow(node, info);
    state.bulletLastUsed = bullet;
    state.bulletCurrent = bulletCurrent;
    exit();
    return value;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options, State} from 'mdast-util-to-markdown'
 */ /**
 * @param {State} state
 * @returns {Exclude<Options['listItemIndent'], null | undefined>}
 */ __turbopack_esm__({
    "checkListItemIndent": (()=>checkListItemIndent)
});
function checkListItemIndent(state) {
    const style = state.options.listItemIndent || 'one';
    if (style !== 'tab' && style !== 'one' && style !== 'mixed') {
        throw new Error('Cannot serialize items with `' + style + '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`');
    }
    return style;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/list-item.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Info, Map, State} from 'mdast-util-to-markdown'
 * @import {ListItem, Parents} from 'mdast'
 */ __turbopack_esm__({
    "listItem": (()=>listItem)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$list$2d$item$2d$indent$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$bullet$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js [app-rsc] (ecmascript)");
;
;
function listItem(node, parent, state, info) {
    const listItemIndent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$list$2d$item$2d$indent$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkListItemIndent"])(state);
    let bullet = state.bulletCurrent || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$bullet$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkBullet"])(state);
    // Add the marker value for ordered lists.
    if (parent && parent.type === 'list' && parent.ordered) {
        bullet = (typeof parent.start === 'number' && parent.start > -1 ? parent.start : 1) + (state.options.incrementListMarker === false ? 0 : parent.children.indexOf(node)) + bullet;
    }
    let size = bullet.length + 1;
    if (listItemIndent === 'tab' || listItemIndent === 'mixed' && (parent && parent.type === 'list' && parent.spread || node.spread)) {
        size = Math.ceil(size / 4) * 4;
    }
    const tracker = state.createTracker(info);
    tracker.move(bullet + ' '.repeat(size - bullet.length));
    tracker.shift(size);
    const exit = state.enter('listItem');
    const value = state.indentLines(state.containerFlow(node, tracker.current()), map);
    exit();
    return value;
    "TURBOPACK unreachable";
    /** @type {Map} */ function map(line, index, blank) {
        if (index) {
            return (blank ? '' : ' '.repeat(size)) + line;
        }
        return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line;
    }
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Info, State} from 'mdast-util-to-markdown'
 * @import {Paragraph, Parents} from 'mdast'
 */ /**
 * @param {Paragraph} node
 * @param {Parents | undefined} _
 * @param {State} state
 * @param {Info} info
 * @returns {string}
 */ __turbopack_esm__({
    "paragraph": (()=>paragraph)
});
function paragraph(node, _, state, info) {
    const exit = state.enter('paragraph');
    const subexit = state.enter('phrasing');
    const value = state.containerPhrasing(node, info);
    subexit();
    exit();
    return value;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/root.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Info, State} from 'mdast-util-to-markdown'
 * @import {Parents, Root} from 'mdast'
 */ __turbopack_esm__({
    "root": (()=>root)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$phrasing$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-phrasing/lib/index.js [app-rsc] (ecmascript)");
;
function root(node, _, state, info) {
    // Note: `html` nodes are ambiguous.
    const hasPhrasing = node.children.some(function(d) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$phrasing$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["phrasing"])(d);
    });
    const container = hasPhrasing ? state.containerPhrasing : state.containerFlow;
    return container.call(state, node, info);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-strong.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options, State} from 'mdast-util-to-markdown'
 */ /**
 * @param {State} state
 * @returns {Exclude<Options['strong'], null | undefined>}
 */ __turbopack_esm__({
    "checkStrong": (()=>checkStrong)
});
function checkStrong(state) {
    const marker = state.options.strong || '*';
    if (marker !== '*' && marker !== '_') {
        throw new Error('Cannot serialize strong with `' + marker + '` for `options.strong`, expected `*`, or `_`');
    }
    return marker;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/strong.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Info, State} from 'mdast-util-to-markdown'
 * @import {Parents, Strong} from 'mdast'
 */ __turbopack_esm__({
    "strong": (()=>strong)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$strong$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-strong.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$encode$2d$info$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/encode-info.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$encode$2d$character$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js [app-rsc] (ecmascript)");
;
;
;
strong.peek = strongPeek;
function strong(node, _, state, info) {
    const marker = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$strong$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkStrong"])(state);
    const exit = state.enter('strong');
    const tracker = state.createTracker(info);
    const before = tracker.move(marker + marker);
    let between = tracker.move(state.containerPhrasing(node, {
        after: marker,
        before,
        ...tracker.current()
    }));
    const betweenHead = between.charCodeAt(0);
    const open = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$encode$2d$info$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeInfo"])(info.before.charCodeAt(info.before.length - 1), betweenHead, marker);
    if (open.inside) {
        between = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$encode$2d$character$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeCharacterReference"])(betweenHead) + between.slice(1);
    }
    const betweenTail = between.charCodeAt(between.length - 1);
    const close = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$encode$2d$info$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeInfo"])(info.after.charCodeAt(0), betweenTail, marker);
    if (close.inside) {
        between = between.slice(0, -1) + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$encode$2d$character$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeCharacterReference"])(betweenTail);
    }
    const after = tracker.move(marker + marker);
    exit();
    state.attentionEncodeSurroundingInfo = {
        after: close.outside,
        before: open.outside
    };
    return before + between + after;
}
/**
 * @param {Strong} _
 * @param {Parents | undefined} _1
 * @param {State} state
 * @returns {string}
 */ function strongPeek(_, _1, state) {
    return state.options.strong || '*';
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/text.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Info, State} from 'mdast-util-to-markdown'
 * @import {Parents, Text} from 'mdast'
 */ /**
 * @param {Text} node
 * @param {Parents | undefined} _
 * @param {State} state
 * @param {Info} info
 * @returns {string}
 */ __turbopack_esm__({
    "text": (()=>text)
});
function text(node, _, state, info) {
    return state.safe(node.value, info);
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options, State} from 'mdast-util-to-markdown'
 */ /**
 * @param {State} state
 * @returns {Exclude<Options['ruleRepetition'], null | undefined>}
 */ __turbopack_esm__({
    "checkRuleRepetition": (()=>checkRuleRepetition)
});
function checkRuleRepetition(state) {
    const repetition = state.options.ruleRepetition || 3;
    if (repetition < 3) {
        throw new Error('Cannot serialize rules with repetition `' + repetition + '` for `options.ruleRepetition`, expected `3` or more');
    }
    return repetition;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {State} from 'mdast-util-to-markdown'
 * @import {Parents, ThematicBreak} from 'mdast'
 */ __turbopack_esm__({
    "thematicBreak": (()=>thematicBreak)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$rule$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-rule.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$rule$2d$repetition$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js [app-rsc] (ecmascript)");
;
;
function thematicBreak(_, _1, state) {
    const value = ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$rule$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkRule"])(state) + (state.options.ruleSpaces ? ' ' : '')).repeat((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$check$2d$rule$2d$repetition$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkRuleRepetition"])(state));
    return state.options.ruleSpaces ? value.slice(0, -1) : value;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "handle": (()=>handle)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$blockquote$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$break$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/break.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$code$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/code.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$definition$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/definition.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$emphasis$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$heading$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/heading.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/html.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$image$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/image.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$image$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$inline$2d$code$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/link.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$link$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/list.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$list$2d$item$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/list-item.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$paragraph$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$root$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/root.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$strong$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/strong.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/text.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$thematic$2d$break$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const handle = {
    blockquote: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$blockquote$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["blockquote"],
    break: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$break$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["hardBreak"],
    code: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$code$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["code"],
    definition: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$definition$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["definition"],
    emphasis: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$emphasis$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["emphasis"],
    hardBreak: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$break$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["hardBreak"],
    heading: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$heading$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["heading"],
    html: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["html"],
    image: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$image$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["image"],
    imageReference: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$image$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["imageReference"],
    inlineCode: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$inline$2d$code$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["inlineCode"],
    link: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$link$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["link"],
    linkReference: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$link$2d$reference$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["linkReference"],
    list: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$list$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["list"],
    listItem: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$list$2d$item$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["listItem"],
    paragraph: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$paragraph$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["paragraph"],
    root: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$root$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["root"],
    strong: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$strong$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["strong"],
    text: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["text"],
    thematicBreak: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$thematic$2d$break$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["thematicBreak"]
};
}}),
"[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/index.js [app-rsc] (ecmascript) <export handle as defaultHandlers>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "defaultHandlers": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["handle"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/index.js [app-rsc] (ecmascript)");
}}),
"[project]/apps/website/docs/node_modules/longest-streak/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Get the count of the longest repeating streak of `substring` in `value`.
 *
 * @param {string} value
 *   Content to search in.
 * @param {string} substring
 *   Substring to look for, typically one character.
 * @returns {number}
 *   Count of most frequent adjacent `substring`s in `value`.
 */ __turbopack_esm__({
    "longestStreak": (()=>longestStreak)
});
function longestStreak(value, substring) {
    const source = String(value);
    let index = source.indexOf(substring);
    let expected = index;
    let count = 0;
    let max = 0;
    if (typeof substring !== 'string') {
        throw new TypeError('Expected substring');
    }
    while(index !== -1){
        if (index === expected) {
            if (++count > max) {
                max = count;
            }
        } else {
            count = 1;
        }
        expected = index + substring.length;
        index = source.indexOf(substring, expected);
    }
    return max;
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-phrasing/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('mdast').Html} Html
 * @typedef {import('mdast').PhrasingContent} PhrasingContent
 */ __turbopack_esm__({
    "phrasing": (()=>phrasing)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-is/lib/index.js [app-rsc] (ecmascript)");
;
const phrasing = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convert"])([
    'break',
    'delete',
    'emphasis',
    // To do: next major: removed since footnotes were added to GFM.
    'footnote',
    'footnoteReference',
    'image',
    'imageReference',
    'inlineCode',
    // Enabled by `mdast-util-math`:
    'inlineMath',
    'link',
    'linkReference',
    // Enabled by `mdast-util-mdx`:
    'mdxJsxTextElement',
    // Enabled by `mdast-util-mdx`:
    'mdxTextExpression',
    'strong',
    'text',
    // Enabled by `mdast-util-directive`:
    'textDirective'
]);
}}),
"[project]/apps/website/docs/node_modules/mdast-util-gfm-table/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('mdast').InlineCode} InlineCode
 * @typedef {import('mdast').Table} Table
 * @typedef {import('mdast').TableCell} TableCell
 * @typedef {import('mdast').TableRow} TableRow
 *
 * @typedef {import('markdown-table').Options} MarkdownTableOptions
 *
 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 *
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').State} State
 * @typedef {import('mdast-util-to-markdown').Info} Info
 */ /**
 * @typedef Options
 *   Configuration.
 * @property {boolean | null | undefined} [tableCellPadding=true]
 *   Whether to add a space of padding between delimiters and cells (default:
 *   `true`).
 * @property {boolean | null | undefined} [tablePipeAlign=true]
 *   Whether to align the delimiters (default: `true`).
 * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]
 *   Function to detect the length of table cell content, used when aligning
 *   the delimiters between cells (optional).
 */ __turbopack_esm__({
    "gfmTableFromMarkdown": (()=>gfmTableFromMarkdown),
    "gfmTableToMarkdown": (()=>gfmTableToMarkdown)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$markdown$2d$table$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/markdown-table/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__handle__as__defaultHandlers$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/index.js [app-rsc] (ecmascript) <export handle as defaultHandlers>");
;
;
;
function gfmTableFromMarkdown() {
    return {
        enter: {
            table: enterTable,
            tableData: enterCell,
            tableHeader: enterCell,
            tableRow: enterRow
        },
        exit: {
            codeText: exitCodeText,
            table: exitTable,
            tableData: exit,
            tableHeader: exit,
            tableRow: exit
        }
    };
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterTable(token) {
    const align = token._align;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(align, 'expected `_align` on table');
    this.enter({
        type: 'table',
        align: align.map(function(d) {
            return d === 'none' ? null : d;
        }),
        children: []
    }, token);
    this.data.inTable = true;
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitTable(token) {
    this.exit(token);
    this.data.inTable = undefined;
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterRow(token) {
    this.enter({
        type: 'tableRow',
        children: []
    }, token);
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exit(token) {
    this.exit(token);
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterCell(token) {
    this.enter({
        type: 'tableCell',
        children: []
    }, token);
}
// Overwrite the default code text data handler to unescape escaped pipes when
// they are in tables.
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitCodeText(token) {
    let value = this.resume();
    if (this.data.inTable) {
        value = value.replace(/\\([\\|])/g, replace);
    }
    const node = this.stack[this.stack.length - 1];
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'inlineCode');
    node.value = value;
    this.exit(token);
}
/**
 * @param {string} $0
 * @param {string} $1
 * @returns {string}
 */ function replace($0, $1) {
    // Pipes work, backslashes don’t (but can’t escape pipes).
    return $1 === '|' ? $1 : $0;
}
function gfmTableToMarkdown(options) {
    const settings = options || {};
    const padding = settings.tableCellPadding;
    const alignDelimiters = settings.tablePipeAlign;
    const stringLength = settings.stringLength;
    const around = padding ? ' ' : '|';
    return {
        unsafe: [
            {
                character: '\r',
                inConstruct: 'tableCell'
            },
            {
                character: '\n',
                inConstruct: 'tableCell'
            },
            // A pipe, when followed by a tab or space (padding), or a dash or colon
            // (unpadded delimiter row), could result in a table.
            {
                atBreak: true,
                character: '|',
                after: '[\t :-]'
            },
            // A pipe in a cell must be encoded.
            {
                character: '|',
                inConstruct: 'tableCell'
            },
            // A colon must be followed by a dash, in which case it could start a
            // delimiter row.
            {
                atBreak: true,
                character: ':',
                after: '-'
            },
            // A delimiter row can also start with a dash, when followed by more
            // dashes, a colon, or a pipe.
            // This is a stricter version than the built in check for lists, thematic
            // breaks, and setex heading underlines though:
            // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
            {
                atBreak: true,
                character: '-',
                after: '[:|-]'
            }
        ],
        handlers: {
            inlineCode: inlineCodeWithTable,
            table: handleTable,
            tableCell: handleTableCell,
            tableRow: handleTableRow
        }
    };
    "TURBOPACK unreachable";
    /**
   * @type {ToMarkdownHandle}
   * @param {Table} node
   */ function handleTable(node, _, state, info) {
        return serializeData(handleTableAsData(node, state, info), node.align);
    }
    /**
   * This function isn’t really used normally, because we handle rows at the
   * table level.
   * But, if someone passes in a table row, this ensures we make somewhat sense.
   *
   * @type {ToMarkdownHandle}
   * @param {TableRow} node
   */ function handleTableRow(node, _, state, info) {
        const row = handleTableRowAsData(node, state, info);
        const value = serializeData([
            row
        ]);
        // `markdown-table` will always add an align row
        return value.slice(0, value.indexOf('\n'));
    }
    /**
   * @type {ToMarkdownHandle}
   * @param {TableCell} node
   */ function handleTableCell(node, _, state, info) {
        const exit = state.enter('tableCell');
        const subexit = state.enter('phrasing');
        const value = state.containerPhrasing(node, {
            ...info,
            before: around,
            after: around
        });
        subexit();
        exit();
        return value;
    }
    /**
   * @param {Array<Array<string>>} matrix
   * @param {Array<string | null | undefined> | null | undefined} [align]
   */ function serializeData(matrix, align) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$markdown$2d$table$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownTable"])(matrix, {
            align,
            // @ts-expect-error: `markdown-table` types should support `null`.
            alignDelimiters,
            // @ts-expect-error: `markdown-table` types should support `null`.
            padding,
            // @ts-expect-error: `markdown-table` types should support `null`.
            stringLength
        });
    }
    /**
   * @param {Table} node
   * @param {State} state
   * @param {Info} info
   */ function handleTableAsData(node, state, info) {
        const children = node.children;
        let index = -1;
        /** @type {Array<Array<string>>} */ const result = [];
        const subexit = state.enter('table');
        while(++index < children.length){
            result[index] = handleTableRowAsData(children[index], state, info);
        }
        subexit();
        return result;
    }
    /**
   * @param {TableRow} node
   * @param {State} state
   * @param {Info} info
   */ function handleTableRowAsData(node, state, info) {
        const children = node.children;
        let index = -1;
        /** @type {Array<string>} */ const result = [];
        const subexit = state.enter('tableRow');
        while(++index < children.length){
            // Note: the positional info as used here is incorrect.
            // Making it correct would be impossible due to aligning cells?
            // And it would need copy/pasting `markdown-table` into this project.
            result[index] = handleTableCell(children[index], node, state, info);
        }
        subexit();
        return result;
    }
    /**
   * @type {ToMarkdownHandle}
   * @param {InlineCode} node
   */ function inlineCodeWithTable(node, parent, state) {
        let value = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__handle__as__defaultHandlers$3e$__["defaultHandlers"].inlineCode(node, parent, state);
        if (state.stack.includes('tableCell')) {
            value = value.replace(/\|/g, '\\$&');
        }
        return value;
    }
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-gfm-task-list-item/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('mdast').ListItem} ListItem
 * @typedef {import('mdast').Paragraph} Paragraph
 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
 */ __turbopack_esm__({
    "gfmTaskListItemFromMarkdown": (()=>gfmTaskListItemFromMarkdown),
    "gfmTaskListItemToMarkdown": (()=>gfmTaskListItemToMarkdown)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__handle__as__defaultHandlers$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-to-markdown/lib/handle/index.js [app-rsc] (ecmascript) <export handle as defaultHandlers>");
;
;
function gfmTaskListItemFromMarkdown() {
    return {
        exit: {
            taskListCheckValueChecked: exitCheck,
            taskListCheckValueUnchecked: exitCheck,
            paragraph: exitParagraphWithTaskListItem
        }
    };
}
function gfmTaskListItemToMarkdown() {
    return {
        unsafe: [
            {
                atBreak: true,
                character: '-',
                after: '[:|-]'
            }
        ],
        handlers: {
            listItem: listItemWithTaskListItem
        }
    };
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitCheck(token) {
    // We’re always in a paragraph, in a list item.
    const node = this.stack[this.stack.length - 2];
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'listItem');
    node.checked = token.type === 'taskListCheckValueChecked';
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitParagraphWithTaskListItem(token) {
    const parent = this.stack[this.stack.length - 2];
    if (parent && parent.type === 'listItem' && typeof parent.checked === 'boolean') {
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'paragraph');
        const head = node.children[0];
        if (head && head.type === 'text') {
            const siblings = parent.children;
            let index = -1;
            /** @type {Paragraph | undefined} */ let firstParaghraph;
            while(++index < siblings.length){
                const sibling = siblings[index];
                if (sibling.type === 'paragraph') {
                    firstParaghraph = sibling;
                    break;
                }
            }
            if (firstParaghraph === node) {
                // Must start with a space or a tab.
                head.value = head.value.slice(1);
                if (head.value.length === 0) {
                    node.children.shift();
                } else if (node.position && head.position && typeof head.position.start.offset === 'number') {
                    head.position.start.column++;
                    head.position.start.offset++;
                    node.position.start = Object.assign({}, head.position.start);
                }
            }
        }
    }
    this.exit(token);
}
/**
 * @type {ToMarkdownHandle}
 * @param {ListItem} node
 */ function listItemWithTaskListItem(node, parent, state, info) {
    const head = node.children[0];
    const checkable = typeof node.checked === 'boolean' && head && head.type === 'paragraph';
    const checkbox = '[' + (node.checked ? 'x' : ' ') + '] ';
    const tracker = state.createTracker(info);
    if (checkable) {
        tracker.move(checkbox);
    }
    let value = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$handle$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__handle__as__defaultHandlers$3e$__["defaultHandlers"].listItem(node, parent, state, {
        ...info,
        ...tracker.current()
    });
    if (checkable) {
        value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
    }
    return value;
    "TURBOPACK unreachable";
    /**
   * @param {string} $0
   * @returns {string}
   */ function check($0) {
        return $0 + checkbox;
    }
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-gfm/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'
 * @import {Options} from 'mdast-util-gfm'
 * @import {Options as ToMarkdownExtension} from 'mdast-util-to-markdown'
 */ __turbopack_esm__({
    "gfmFromMarkdown": (()=>gfmFromMarkdown),
    "gfmToMarkdown": (()=>gfmToMarkdown)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2d$autolink$2d$literal$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-gfm-autolink-literal/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2d$footnote$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-gfm-footnote/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2d$strikethrough$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-gfm-strikethrough/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2d$table$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-gfm-table/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2d$task$2d$list$2d$item$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-gfm-task-list-item/lib/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
function gfmFromMarkdown() {
    return [
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2d$autolink$2d$literal$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmAutolinkLiteralFromMarkdown"])(),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2d$footnote$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmFootnoteFromMarkdown"])(),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2d$strikethrough$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmStrikethroughFromMarkdown"])(),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2d$table$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmTableFromMarkdown"])(),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2d$task$2d$list$2d$item$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmTaskListItemFromMarkdown"])()
    ];
}
function gfmToMarkdown(options) {
    return {
        extensions: [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2d$autolink$2d$literal$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmAutolinkLiteralToMarkdown"])(),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2d$footnote$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmFootnoteToMarkdown"])(options),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2d$strikethrough$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmStrikethroughToMarkdown"])(),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2d$table$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmTableToMarkdown"])(options),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2d$task$2d$list$2d$item$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmTaskListItemToMarkdown"])()
        ]
    };
}
}}),
"[project]/apps/website/docs/node_modules/remark-gfm/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Root} from 'mdast'
 * @import {Options} from 'remark-gfm'
 * @import {} from 'remark-parse'
 * @import {} from 'remark-stringify'
 * @import {Processor} from 'unified'
 */ __turbopack_esm__({
    "default": (()=>remarkGfm)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-gfm/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-gfm/lib/index.js [app-rsc] (ecmascript)");
;
;
/** @type {Options} */ const emptyOptions = {};
function remarkGfm(options) {
    // @ts-expect-error: TS is wrong about `this`.
    // eslint-disable-next-line unicorn/no-this-assignment
    const self = this;
    const settings = options || emptyOptions;
    const data = self.data();
    const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);
    const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);
    const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);
    micromarkExtensions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$gfm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfm"])(settings));
    fromMarkdownExtensions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmFromMarkdown"])());
    toMarkdownExtensions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$gfm$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["gfmToMarkdown"])(settings));
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-math/dev/lib/math-flow.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Construct, State, TokenizeContext, Tokenizer} from 'micromark-util-types'
 */ __turbopack_esm__({
    "mathFlow": (()=>mathFlow)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-factory-space/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/constants.js [app-rsc] (ecmascript)");
;
;
;
;
const mathFlow = {
    tokenize: tokenizeMathFenced,
    concrete: true,
    name: 'mathFlow'
};
/** @type {Construct} */ const nonLazyContinuation = {
    tokenize: tokenizeNonLazyContinuation,
    partial: true
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeMathFenced(effects, ok, nok) {
    const self = this;
    const tail = self.events[self.events.length - 1];
    const initialSize = tail && tail[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix ? tail[2].sliceSerialize(tail[1], true).length : 0;
    let sizeOpen = 0;
    return start;
    "TURBOPACK unreachable";
    /**
   * Start of math.
   *
   * ```markdown
   * > | $$
   *     ^
   *   | \frac{1}{2}
   *   | $$
   * ```
   *
   * @type {State}
   */ function start(code) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dollarSign, 'expected `$`');
        effects.enter('mathFlow');
        effects.enter('mathFlowFence');
        effects.enter('mathFlowFenceSequence');
        return sequenceOpen(code);
    }
    /**
   * In opening fence sequence.
   *
   * ```markdown
   * > | $$
   *      ^
   *   | \frac{1}{2}
   *   | $$
   * ```
   *
   * @type {State}
   */ function sequenceOpen(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dollarSign) {
            effects.consume(code);
            sizeOpen++;
            return sequenceOpen;
        }
        if (sizeOpen < 2) {
            return nok(code);
        }
        effects.exit('mathFlowFenceSequence');
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, metaBefore, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].whitespace)(code);
    }
    /**
   * In opening fence, before meta.
   *
   * ```markdown
   * > | $$asciimath
   *       ^
   *   | x < y
   *   | $$
   * ```
   *
   * @type {State}
   */ function metaBefore(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            return metaAfter(code);
        }
        effects.enter('mathFlowFenceMeta');
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkString, {
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeString
        });
        return meta(code);
    }
    /**
   * In meta.
   *
   * ```markdown
   * > | $$asciimath
   *        ^
   *   | x < y
   *   | $$
   * ```
   *
   * @type {State}
   */ function meta(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].chunkString);
            effects.exit('mathFlowFenceMeta');
            return metaAfter(code);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dollarSign) {
            return nok(code);
        }
        effects.consume(code);
        return meta;
    }
    /**
   * After meta.
   *
   * ```markdown
   * > | $$
   *       ^
   *   | \frac{1}{2}
   *   | $$
   * ```
   *
   * @type {State}
   */ function metaAfter(code) {
        // Guaranteed to be eol/eof.
        effects.exit('mathFlowFence');
        if (self.interrupt) {
            return ok(code);
        }
        return effects.attempt(nonLazyContinuation, beforeNonLazyContinuation, after)(code);
    }
    /**
   * After eol/eof in math, at a non-lazy closing fence or content.
   *
   * ```markdown
   *   | $$
   * > | \frac{1}{2}
   *     ^
   * > | $$
   *     ^
   * ```
   *
   * @type {State}
   */ function beforeNonLazyContinuation(code) {
        return effects.attempt({
            tokenize: tokenizeClosingFence,
            partial: true
        }, after, contentStart)(code);
    }
    /**
   * Before math content, definitely not before a closing fence.
   *
   * ```markdown
   *   | $$
   * > | \frac{1}{2}
   *     ^
   *   | $$
   * ```
   *
   * @type {State}
   */ function contentStart(code) {
        return (initialSize ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, beforeContentChunk, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix, initialSize + 1) : beforeContentChunk)(code);
    }
    /**
   * Before math content, after optional prefix.
   *
   * ```markdown
   *   | $$
   * > | \frac{1}{2}
   *     ^
   *   | $$
   * ```
   *
   * @type {State}
   */ function beforeContentChunk(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            return after(code);
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            return effects.attempt(nonLazyContinuation, beforeNonLazyContinuation, after)(code);
        }
        effects.enter('mathFlowValue');
        return contentChunk(code);
    }
    /**
   * In math content.
   *
   * ```markdown
   *   | $$
   * > | \frac{1}{2}
   *      ^
   *   | $$
   * ```
   *
   * @type {State}
   */ function contentChunk(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
            effects.exit('mathFlowValue');
            return beforeContentChunk(code);
        }
        effects.consume(code);
        return contentChunk;
    }
    /**
   * After math (ha!).
   *
   * ```markdown
   *   | $$
   *   | \frac{1}{2}
   * > | $$
   *       ^
   * ```
   *
   * @type {State}
   */ function after(code) {
        effects.exit('mathFlow');
        return ok(code);
    }
    /** @type {Tokenizer} */ function tokenizeClosingFence(effects, ok, nok) {
        let size = 0;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(self.parser.constructs.disable.null, 'expected `disable.null`');
        /**
     * Before closing fence, at optional whitespace.
     *
     * ```markdown
     *   | $$
     *   | \frac{1}{2}
     * > | $$
     *     ^
     * ```
     */ return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, beforeSequenceClose, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix, self.parser.constructs.disable.null.includes('codeIndented') ? undefined : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["constants"].tabSize);
        "TURBOPACK unreachable";
        /**
     * In closing fence, after optional whitespace, at sequence.
     *
     * ```markdown
     *   | $$
     *   | \frac{1}{2}
     * > | $$
     *     ^
     * ```
     *
     * @type {State}
     */ function beforeSequenceClose(code) {
            effects.enter('mathFlowFence');
            effects.enter('mathFlowFenceSequence');
            return sequenceClose(code);
        }
        /**
     * In closing fence sequence.
     *
     * ```markdown
     *   | $$
     *   | \frac{1}{2}
     * > | $$
     *      ^
     * ```
     *
     * @type {State}
     */ function sequenceClose(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dollarSign) {
                size++;
                effects.consume(code);
                return sequenceClose;
            }
            if (size < sizeOpen) {
                return nok(code);
            }
            effects.exit('mathFlowFenceSequence');
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["factorySpace"])(effects, afterSequenceClose, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].whitespace)(code);
        }
        /**
     * After closing fence sequence, after optional whitespace.
     *
     * ```markdown
     *   | $$
     *   | \frac{1}{2}
     * > | $$
     *       ^
     * ```
     *
     * @type {State}
     */ function afterSequenceClose(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
                effects.exit('mathFlowFence');
                return ok(code);
            }
            return nok(code);
        }
    }
}
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeNonLazyContinuation(effects, ok, nok) {
    const self = this;
    return start;
    "TURBOPACK unreachable";
    /** @type {State} */ function start(code) {
        if (code === null) {
            return ok(code);
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code), 'expected eol');
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
        effects.consume(code);
        effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
        return lineStart;
    }
    /** @type {State} */ function lineStart(code) {
        return self.parser.lazy[self.now().line] ? nok(code) : ok(code);
    }
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-math/dev/lib/math-text.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options} from 'micromark-extension-math'
 * @import {Construct, Previous, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'
 */ // To do: next major: clean spaces in HTML compiler.
// This has to be coordinated together with `mdast-util-math`.
__turbopack_esm__({
    "mathText": (()=>mathText)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-character/dev/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/types.js [app-rsc] (ecmascript)");
;
;
;
function mathText(options) {
    const options_ = options || {};
    let single = options_.singleDollarTextMath;
    if (single === null || single === undefined) {
        single = true;
    }
    return {
        tokenize: tokenizeMathText,
        resolve: resolveMathText,
        previous,
        name: 'mathText'
    };
    "TURBOPACK unreachable";
    /**
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeMathText(effects, ok, nok) {
        const self = this;
        let sizeOpen = 0;
        /** @type {number} */ let size;
        /** @type {Token} */ let token;
        return start;
        "TURBOPACK unreachable";
        /**
     * Start of math (text).
     *
     * ```markdown
     * > | $a$
     *     ^
     * > | \$a$
     *      ^
     * ```
     *
     * @type {State}
     */ function start(code) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dollarSign, 'expected `$`');
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(previous.call(self, self.previous), 'expected correct previous');
            effects.enter('mathText');
            effects.enter('mathTextSequence');
            return sequenceOpen(code);
        }
        /**
     * In opening sequence.
     *
     * ```markdown
     * > | $a$
     *     ^
     * ```
     *
     * @type {State}
     */ function sequenceOpen(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dollarSign) {
                effects.consume(code);
                sizeOpen++;
                return sequenceOpen;
            }
            // Not enough markers in the sequence.
            if (sizeOpen < 2 && !single) {
                return nok(code);
            }
            effects.exit('mathTextSequence');
            return between(code);
        }
        /**
     * Between something and something else.
     *
     * ```markdown
     * > | $a$
     *      ^^
     * ```
     *
     * @type {State}
     */ function between(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
                return nok(code);
            }
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dollarSign) {
                token = effects.enter('mathTextSequence');
                size = 0;
                return sequenceClose(code);
            }
            // Tabs don’t work, and virtual spaces don’t make sense.
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].space) {
                effects.enter('space');
                effects.consume(code);
                effects.exit('space');
                return between;
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
                effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
                effects.consume(code);
                effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
                return between;
            }
            // Data.
            effects.enter('mathTextData');
            return data(code);
        }
        /**
     * In data.
     *
     * ```markdown
     * > | $a$
     *      ^
     * ```
     *
     * @type {State}
     */ function data(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].space || code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dollarSign || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"])(code)) {
                effects.exit('mathTextData');
                return between(code);
            }
            effects.consume(code);
            return data;
        }
        /**
     * In closing sequence.
     *
     * ```markdown
     * > | `a`
     *       ^
     * ```
     *
     * @type {State}
     */ function sequenceClose(code) {
            // More.
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dollarSign) {
                effects.consume(code);
                size++;
                return sequenceClose;
            }
            // Done!
            if (size === sizeOpen) {
                effects.exit('mathTextSequence');
                effects.exit('mathText');
                return ok(code);
            }
            // More or less accents: mark as data.
            token.type = 'mathTextData';
            return data(code);
        }
    }
}
/** @type {Resolver} */ function resolveMathText(events) {
    let tailExitIndex = events.length - 4;
    let headEnterIndex = 3;
    /** @type {number} */ let index;
    /** @type {number | undefined} */ let enter;
    // If we start and end with an EOL or a space.
    if ((events[headEnterIndex][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding || events[tailExitIndex][1].type === 'space')) {
        index = headEnterIndex;
        // And we have data.
        while(++index < tailExitIndex){
            if (events[index][1].type === 'mathTextData') {
                // Then we have padding.
                events[tailExitIndex][1].type = 'mathTextPadding';
                events[headEnterIndex][1].type = 'mathTextPadding';
                headEnterIndex += 2;
                tailExitIndex -= 2;
                break;
            }
        }
    }
    // Merge adjacent spaces and data.
    index = headEnterIndex - 1;
    tailExitIndex++;
    while(++index <= tailExitIndex){
        if (enter === undefined) {
            if (index !== tailExitIndex && events[index][1].type !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding) {
                enter = index;
            }
        } else if (index === tailExitIndex || events[index][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding) {
            events[enter][1].type = 'mathTextData';
            if (index !== enter + 2) {
                events[enter][1].end = events[index - 1][1].end;
                events.splice(enter + 2, index - enter - 2);
                tailExitIndex -= index - enter - 2;
                index = enter + 2;
            }
            enter = undefined;
        }
    }
    return events;
}
/**
 * @this {TokenizeContext}
 * @type {Previous}
 */ function previous(code) {
    // If there is a previous code, there will always be a tail.
    return code !== __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dollarSign || this.events[this.events.length - 1][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["types"].characterEscape;
}
}}),
"[project]/apps/website/docs/node_modules/micromark-extension-math/dev/lib/syntax.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options} from 'micromark-extension-math'
 * @import {Extension} from 'micromark-util-types'
 */ __turbopack_esm__({
    "math": (()=>math)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-util-symbol/lib/codes.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$math$2f$dev$2f$lib$2f$math$2d$flow$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-math/dev/lib/math-flow.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$math$2f$dev$2f$lib$2f$math$2d$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-math/dev/lib/math-text.js [app-rsc] (ecmascript)");
;
;
;
function math(options) {
    return {
        flow: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dollarSign]: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$math$2f$dev$2f$lib$2f$math$2d$flow$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mathFlow"]
        },
        text: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["codes"].dollarSign]: (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$math$2f$dev$2f$lib$2f$math$2d$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mathText"])(options)
        }
    };
}
}}),
"[project]/apps/website/docs/node_modules/mdast-util-math/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} HastElement
 * @typedef {import('hast').ElementContent} HastElementContent
 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 * @typedef {import('../index.js').InlineMath} InlineMath
 * @typedef {import('../index.js').Math} Math
 *
 * @typedef ToOptions
 *   Configuration.
 * @property {boolean | null | undefined} [singleDollarTextMath=true]
 *   Whether to support math (text) with a single dollar (default: `true`).
 *
 *   Single dollars work in Pandoc and many other places, but often interfere
 *   with “normal” dollars in text.
 *   If you turn this off, you can still use two or more dollars for text math.
 */ __turbopack_esm__({
    "mathFromMarkdown": (()=>mathFromMarkdown),
    "mathToMarkdown": (()=>mathToMarkdown)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$longest$2d$streak$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/longest-streak/index.js [app-rsc] (ecmascript)");
;
;
function mathFromMarkdown() {
    return {
        enter: {
            mathFlow: enterMathFlow,
            mathFlowFenceMeta: enterMathFlowMeta,
            mathText: enterMathText
        },
        exit: {
            mathFlow: exitMathFlow,
            mathFlowFence: exitMathFlowFence,
            mathFlowFenceMeta: exitMathFlowMeta,
            mathFlowValue: exitMathData,
            mathText: exitMathText,
            mathTextData: exitMathData
        }
    };
    "TURBOPACK unreachable";
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMathFlow(token) {
        /** @type {HastElement} */ const code = {
            type: 'element',
            tagName: 'code',
            properties: {
                className: [
                    'language-math',
                    'math-display'
                ]
            },
            children: []
        };
        this.enter({
            type: 'math',
            meta: null,
            value: '',
            data: {
                hName: 'pre',
                hChildren: [
                    code
                ]
            }
        }, token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMathFlowMeta() {
        this.buffer();
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMathFlowMeta() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'math');
        node.meta = data;
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMathFlowFence() {
        // Exit if this is the closing fence.
        if (this.data.mathFlowInside) return;
        this.buffer();
        this.data.mathFlowInside = true;
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMathFlow(token) {
        const data = this.resume().replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, '');
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'math');
        this.exit(token);
        node.value = data;
        // @ts-expect-error: we defined it in `enterMathFlow`.
        const code = node.data.hChildren[0];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code.type === 'element');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(code.tagName === 'code');
        code.children.push({
            type: 'text',
            value: data
        });
        this.data.mathFlowInside = undefined;
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMathText(token) {
        this.enter({
            type: 'inlineMath',
            value: '',
            data: {
                hName: 'code',
                hProperties: {
                    className: [
                        'language-math',
                        'math-inline'
                    ]
                },
                hChildren: []
            }
        }, token);
        this.buffer();
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMathText(token) {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(node.type === 'inlineMath');
        this.exit(token);
        node.value = data;
        const children = // @ts-expect-error: we defined it in `enterMathFlow`.
        node.data.hChildren;
        children.push({
            type: 'text',
            value: data
        });
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMathData(token) {
        this.config.enter.data.call(this, token);
        this.config.exit.data.call(this, token);
    }
}
function mathToMarkdown(options) {
    let single = (options || {}).singleDollarTextMath;
    if (single === null || single === undefined) {
        single = true;
    }
    inlineMath.peek = inlineMathPeek;
    return {
        unsafe: [
            {
                character: '\r',
                inConstruct: 'mathFlowMeta'
            },
            {
                character: '\n',
                inConstruct: 'mathFlowMeta'
            },
            {
                character: '$',
                after: single ? undefined : '\\$',
                inConstruct: 'phrasing'
            },
            {
                character: '$',
                inConstruct: 'mathFlowMeta'
            },
            {
                atBreak: true,
                character: '$',
                after: '\\$'
            }
        ],
        handlers: {
            math,
            inlineMath
        }
    };
    "TURBOPACK unreachable";
    /**
   * @type {ToMarkdownHandle}
   * @param {Math} node
   */ // Note: fixing this code? Please also fix the similar code for code:
    // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/main/lib/handle/code.js>
    function math(node, _, state, info) {
        const raw = node.value || '';
        const tracker = state.createTracker(info);
        const sequence = '$'.repeat(Math.max((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$longest$2d$streak$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["longestStreak"])(raw, '$') + 1, 2));
        const exit = state.enter('mathFlow');
        let value = tracker.move(sequence);
        if (node.meta) {
            const subexit = state.enter('mathFlowMeta');
            value += tracker.move(state.safe(node.meta, {
                after: '\n',
                before: value,
                encode: [
                    '$'
                ],
                ...tracker.current()
            }));
            subexit();
        }
        value += tracker.move('\n');
        if (raw) {
            value += tracker.move(raw + '\n');
        }
        value += tracker.move(sequence);
        exit();
        return value;
    }
    /**
   * @type {ToMarkdownHandle}
   * @param {InlineMath} node
   */ // Note: fixing this code? Please also fix the similar code for inline code:
    // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/main/lib/handle/inline-code.js>
    function inlineMath(node, _, state) {
        let value = node.value || '';
        let size = 1;
        if (!single) size++;
        // If there is a single dollar sign on its own in the math, use a fence of
        // two.
        // If there are two in a row, use one.
        while(new RegExp('(^|[^$])' + '\\$'.repeat(size) + '([^$]|$)').test(value)){
            size++;
        }
        const sequence = '$'.repeat(size);
        // If this is not just spaces or eols (tabs don’t count), and either the
        // first and last character are a space or eol, or the first or last
        // character are dollar signs, then pad with spaces.
        if (// Contains non-space.
        /[^ \r\n]/.test(value) && // Starts with space and ends with space.
        (/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value) || // Starts or ends with dollar.
        /^\$|\$$/.test(value))) {
            value = ' ' + value + ' ';
        }
        let index = -1;
        // We have a potential problem: certain characters after eols could result in
        // blocks being seen.
        // For example, if someone injected the string `'\n# b'`, then that would
        // result in an ATX heading.
        // We can’t escape characters in `inlineMath`, but because eols are
        // transformed to spaces when going from markdown to HTML anyway, we can swap
        // them out.
        while(++index < state.unsafe.length){
            const pattern = state.unsafe[index];
            // Only look for `atBreak`s.
            // Btw: note that `atBreak` patterns will always start the regex at LF or
            // CR.
            if (!pattern.atBreak) continue;
            const expression = state.compilePattern(pattern);
            /** @type {RegExpExecArray | null} */ let match;
            while(match = expression.exec(value)){
                let position = match.index;
                // Support CRLF (patterns only look for one of the characters).
                if (value.codePointAt(position) === 10 /* `\n` */  && value.codePointAt(position - 1) === 13 /* `\r` */ ) {
                    position--;
                }
                value = value.slice(0, position) + ' ' + value.slice(match.index + 1);
            }
        }
        return sequence + value + sequence;
    }
    /**
   * @returns {string}
   */ function inlineMathPeek() {
        return '$';
    }
}
}}),
"[project]/apps/website/docs/node_modules/remark-math/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/// <reference types="mdast-util-math" />
/// <reference types="remark-parse" />
/// <reference types="remark-stringify" />
/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast-util-math').ToOptions} Options
 * @typedef {import('unified').Processor<Root>} Processor
 */ __turbopack_esm__({
    "default": (()=>remarkMath)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$math$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/micromark-extension-math/dev/lib/syntax.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$math$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/mdast-util-math/lib/index.js [app-rsc] (ecmascript)");
;
;
/** @type {Readonly<Options>} */ const emptyOptions = {};
function remarkMath(options) {
    // @ts-expect-error: TS is wrong about `this`.
    // eslint-disable-next-line unicorn/no-this-assignment
    const self = this;
    const settings = options || emptyOptions;
    const data = self.data();
    const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);
    const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);
    const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);
    micromarkExtensions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$micromark$2d$extension$2d$math$2f$dev$2f$lib$2f$syntax$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["math"])(settings));
    fromMarkdownExtensions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$math$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mathFromMarkdown"])());
    toMarkdownExtensions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$mdast$2d$util$2d$math$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mathToMarkdown"])(settings));
}
}}),
"[project]/apps/website/docs/node_modules/entities/lib/esm/generated/decode-data-html.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// Generated using scripts/write-decode-map.ts
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = new Uint16Array(// prettier-ignore
"\u1d41<\xd5\u0131\u028a\u049d\u057b\u05d0\u0675\u06de\u07a2\u07d6\u080f\u0a4a\u0a91\u0da1\u0e6d\u0f09\u0f26\u10ca\u1228\u12e1\u1415\u149d\u14c3\u14df\u1525\0\0\0\0\0\0\u156b\u16cd\u198d\u1c12\u1ddd\u1f7e\u2060\u21b0\u228d\u23c0\u23fb\u2442\u2824\u2912\u2d08\u2e48\u2fce\u3016\u32ba\u3639\u37ac\u38fe\u3a28\u3a71\u3ae0\u3b2e\u0800EMabcfglmnoprstu\\bfms\x7f\x84\x8b\x90\x95\x98\xa6\xb3\xb9\xc8\xcflig\u803b\xc6\u40c6P\u803b&\u4026cute\u803b\xc1\u40c1reve;\u4102\u0100iyx}rc\u803b\xc2\u40c2;\u4410r;\uc000\ud835\udd04rave\u803b\xc0\u40c0pha;\u4391acr;\u4100d;\u6a53\u0100gp\x9d\xa1on;\u4104f;\uc000\ud835\udd38plyFunction;\u6061ing\u803b\xc5\u40c5\u0100cs\xbe\xc3r;\uc000\ud835\udc9cign;\u6254ilde\u803b\xc3\u40c3ml\u803b\xc4\u40c4\u0400aceforsu\xe5\xfb\xfe\u0117\u011c\u0122\u0127\u012a\u0100cr\xea\xf2kslash;\u6216\u0176\xf6\xf8;\u6ae7ed;\u6306y;\u4411\u0180crt\u0105\u010b\u0114ause;\u6235noullis;\u612ca;\u4392r;\uc000\ud835\udd05pf;\uc000\ud835\udd39eve;\u42d8c\xf2\u0113mpeq;\u624e\u0700HOacdefhilorsu\u014d\u0151\u0156\u0180\u019e\u01a2\u01b5\u01b7\u01ba\u01dc\u0215\u0273\u0278\u027ecy;\u4427PY\u803b\xa9\u40a9\u0180cpy\u015d\u0162\u017aute;\u4106\u0100;i\u0167\u0168\u62d2talDifferentialD;\u6145leys;\u612d\u0200aeio\u0189\u018e\u0194\u0198ron;\u410cdil\u803b\xc7\u40c7rc;\u4108nint;\u6230ot;\u410a\u0100dn\u01a7\u01adilla;\u40b8terDot;\u40b7\xf2\u017fi;\u43a7rcle\u0200DMPT\u01c7\u01cb\u01d1\u01d6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01e2\u01f8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020foubleQuote;\u601duote;\u6019\u0200lnpu\u021e\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6a74\u0180git\u022f\u0236\u023aruent;\u6261nt;\u622fourIntegral;\u622e\u0100fr\u024c\u024e;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6a2fcr;\uc000\ud835\udc9ep\u0100;C\u0284\u0285\u62d3ap;\u624d\u0580DJSZacefios\u02a0\u02ac\u02b0\u02b4\u02b8\u02cb\u02d7\u02e1\u02e6\u0333\u048d\u0100;o\u0179\u02a5trahd;\u6911cy;\u4402cy;\u4405cy;\u440f\u0180grs\u02bf\u02c4\u02c7ger;\u6021r;\u61a1hv;\u6ae4\u0100ay\u02d0\u02d5ron;\u410e;\u4414l\u0100;t\u02dd\u02de\u6207a;\u4394r;\uc000\ud835\udd07\u0100af\u02eb\u0327\u0100cm\u02f0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031ccute;\u40b4o\u0174\u030b\u030d;\u42d9bleAcute;\u42ddrave;\u4060ilde;\u42dcond;\u62c4ferentialD;\u6146\u0470\u033d\0\0\0\u0342\u0354\0\u0405f;\uc000\ud835\udd3b\u0180;DE\u0348\u0349\u034d\u40a8ot;\u60dcqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03cf\u03e2\u03f8ontourIntegra\xec\u0239o\u0274\u0379\0\0\u037b\xbb\u0349nArrow;\u61d3\u0100eo\u0387\u03a4ft\u0180ART\u0390\u0396\u03a1rrow;\u61d0ightArrow;\u61d4e\xe5\u02cang\u0100LR\u03ab\u03c4eft\u0100AR\u03b3\u03b9rrow;\u67f8ightArrow;\u67faightArrow;\u67f9ight\u0100AT\u03d8\u03derrow;\u61d2ee;\u62a8p\u0241\u03e9\0\0\u03efrrow;\u61d1ownArrow;\u61d5erticalBar;\u6225n\u0300ABLRTa\u0412\u042a\u0430\u045e\u047f\u037crrow\u0180;BU\u041d\u041e\u0422\u6193ar;\u6913pArrow;\u61f5reve;\u4311eft\u02d2\u043a\0\u0446\0\u0450ightVector;\u6950eeVector;\u695eector\u0100;B\u0459\u045a\u61bdar;\u6956ight\u01d4\u0467\0\u0471eeVector;\u695fector\u0100;B\u047a\u047b\u61c1ar;\u6957ee\u0100;A\u0486\u0487\u62a4rrow;\u61a7\u0100ct\u0492\u0497r;\uc000\ud835\udc9frok;\u4110\u0800NTacdfglmopqstux\u04bd\u04c0\u04c4\u04cb\u04de\u04e2\u04e7\u04ee\u04f5\u0521\u052f\u0536\u0552\u055d\u0560\u0565G;\u414aH\u803b\xd0\u40d0cute\u803b\xc9\u40c9\u0180aiy\u04d2\u04d7\u04dcron;\u411arc\u803b\xca\u40ca;\u442dot;\u4116r;\uc000\ud835\udd08rave\u803b\xc8\u40c8ement;\u6208\u0100ap\u04fa\u04fecr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65fberySmallSquare;\u65ab\u0100gp\u0526\u052aon;\u4118f;\uc000\ud835\udd3csilon;\u4395u\u0100ai\u053c\u0549l\u0100;T\u0542\u0543\u6a75ilde;\u6242librium;\u61cc\u0100ci\u0557\u055ar;\u6130m;\u6a73a;\u4397ml\u803b\xcb\u40cb\u0100ip\u056a\u056fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058d\u05b2\u05ccy;\u4424r;\uc000\ud835\udd09lled\u0253\u0597\0\0\u05a3mallSquare;\u65fcerySmallSquare;\u65aa\u0370\u05ba\0\u05bf\0\0\u05c4f;\uc000\ud835\udd3dAll;\u6200riertrf;\u6131c\xf2\u05cb\u0600JTabcdfgorst\u05e8\u05ec\u05ef\u05fa\u0600\u0612\u0616\u061b\u061d\u0623\u066c\u0672cy;\u4403\u803b>\u403emma\u0100;d\u05f7\u05f8\u4393;\u43dcreve;\u411e\u0180eiy\u0607\u060c\u0610dil;\u4122rc;\u411c;\u4413ot;\u4120r;\uc000\ud835\udd0a;\u62d9pf;\uc000\ud835\udd3eeater\u0300EFGLST\u0635\u0644\u064e\u0656\u065b\u0666qual\u0100;L\u063e\u063f\u6265ess;\u62dbullEqual;\u6267reater;\u6aa2ess;\u6277lantEqual;\u6a7eilde;\u6273cr;\uc000\ud835\udca2;\u626b\u0400Aacfiosu\u0685\u068b\u0696\u069b\u069e\u06aa\u06be\u06caRDcy;\u442a\u0100ct\u0690\u0694ek;\u42c7;\u405eirc;\u4124r;\u610clbertSpace;\u610b\u01f0\u06af\0\u06b2f;\u610dizontalLine;\u6500\u0100ct\u06c3\u06c5\xf2\u06a9rok;\u4126mp\u0144\u06d0\u06d8ownHum\xf0\u012fqual;\u624f\u0700EJOacdfgmnostu\u06fa\u06fe\u0703\u0707\u070e\u071a\u071e\u0721\u0728\u0744\u0778\u078b\u078f\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803b\xcd\u40cd\u0100iy\u0713\u0718rc\u803b\xce\u40ce;\u4418ot;\u4130r;\u6111rave\u803b\xcc\u40cc\u0180;ap\u0720\u072f\u073f\u0100cg\u0734\u0737r;\u412ainaryI;\u6148lie\xf3\u03dd\u01f4\u0749\0\u0762\u0100;e\u074d\u074e\u622c\u0100gr\u0753\u0758ral;\u622bsection;\u62c2isible\u0100CT\u076c\u0772omma;\u6063imes;\u6062\u0180gpt\u077f\u0783\u0788on;\u412ef;\uc000\ud835\udd40a;\u4399cr;\u6110ilde;\u4128\u01eb\u079a\0\u079ecy;\u4406l\u803b\xcf\u40cf\u0280cfosu\u07ac\u07b7\u07bc\u07c2\u07d0\u0100iy\u07b1\u07b5rc;\u4134;\u4419r;\uc000\ud835\udd0dpf;\uc000\ud835\udd41\u01e3\u07c7\0\u07ccr;\uc000\ud835\udca5rcy;\u4408kcy;\u4404\u0380HJacfos\u07e4\u07e8\u07ec\u07f1\u07fd\u0802\u0808cy;\u4425cy;\u440cppa;\u439a\u0100ey\u07f6\u07fbdil;\u4136;\u441ar;\uc000\ud835\udd0epf;\uc000\ud835\udd42cr;\uc000\ud835\udca6\u0580JTaceflmost\u0825\u0829\u082c\u0850\u0863\u09b3\u09b8\u09c7\u09cd\u0a37\u0a47cy;\u4409\u803b<\u403c\u0280cmnpr\u0837\u083c\u0841\u0844\u084dute;\u4139bda;\u439bg;\u67ealacetrf;\u6112r;\u619e\u0180aey\u0857\u085c\u0861ron;\u413ddil;\u413b;\u441b\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087e\u08a9\u08b1\u08e0\u08e6\u08fc\u092f\u095b\u0390\u096a\u0100nr\u0883\u088fgleBracket;\u67e8row\u0180;BR\u0899\u089a\u089e\u6190ar;\u61e4ightArrow;\u61c6eiling;\u6308o\u01f5\u08b7\0\u08c3bleBracket;\u67e6n\u01d4\u08c8\0\u08d2eeVector;\u6961ector\u0100;B\u08db\u08dc\u61c3ar;\u6959loor;\u630aight\u0100AV\u08ef\u08f5rrow;\u6194ector;\u694e\u0100er\u0901\u0917e\u0180;AV\u0909\u090a\u0910\u62a3rrow;\u61a4ector;\u695aiangle\u0180;BE\u0924\u0925\u0929\u62b2ar;\u69cfqual;\u62b4p\u0180DTV\u0937\u0942\u094cownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61bfar;\u6958ector\u0100;B\u0965\u0966\u61bcar;\u6952ight\xe1\u039cs\u0300EFGLST\u097e\u098b\u0995\u099d\u09a2\u09adqualGreater;\u62daullEqual;\u6266reater;\u6276ess;\u6aa1lantEqual;\u6a7dilde;\u6272r;\uc000\ud835\udd0f\u0100;e\u09bd\u09be\u62d8ftarrow;\u61daidot;\u413f\u0180npw\u09d4\u0a16\u0a1bg\u0200LRlr\u09de\u09f7\u0a02\u0a10eft\u0100AR\u09e6\u09ecrrow;\u67f5ightArrow;\u67f7ightArrow;\u67f6eft\u0100ar\u03b3\u0a0aight\xe1\u03bfight\xe1\u03caf;\uc000\ud835\udd43er\u0100LR\u0a22\u0a2ceftArrow;\u6199ightArrow;\u6198\u0180cht\u0a3e\u0a40\u0a42\xf2\u084c;\u61b0rok;\u4141;\u626a\u0400acefiosu\u0a5a\u0a5d\u0a60\u0a77\u0a7c\u0a85\u0a8b\u0a8ep;\u6905y;\u441c\u0100dl\u0a65\u0a6fiumSpace;\u605flintrf;\u6133r;\uc000\ud835\udd10nusPlus;\u6213pf;\uc000\ud835\udd44c\xf2\u0a76;\u439c\u0480Jacefostu\u0aa3\u0aa7\u0aad\u0ac0\u0b14\u0b19\u0d91\u0d97\u0d9ecy;\u440acute;\u4143\u0180aey\u0ab4\u0ab9\u0aberon;\u4147dil;\u4145;\u441d\u0180gsw\u0ac7\u0af0\u0b0eative\u0180MTV\u0ad3\u0adf\u0ae8ediumSpace;\u600bhi\u0100cn\u0ae6\u0ad8\xeb\u0ad9eryThi\xee\u0ad9ted\u0100GL\u0af8\u0b06reaterGreate\xf2\u0673essLes\xf3\u0a48Line;\u400ar;\uc000\ud835\udd11\u0200Bnpt\u0b22\u0b28\u0b37\u0b3areak;\u6060BreakingSpace;\u40a0f;\u6115\u0680;CDEGHLNPRSTV\u0b55\u0b56\u0b6a\u0b7c\u0ba1\u0beb\u0c04\u0c5e\u0c84\u0ca6\u0cd8\u0d61\u0d85\u6aec\u0100ou\u0b5b\u0b64ngruent;\u6262pCap;\u626doubleVerticalBar;\u6226\u0180lqx\u0b83\u0b8a\u0b9bement;\u6209ual\u0100;T\u0b92\u0b93\u6260ilde;\uc000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0bb6\u0bb7\u0bbd\u0bc9\u0bd3\u0bd8\u0be5\u626fqual;\u6271ullEqual;\uc000\u2267\u0338reater;\uc000\u226b\u0338ess;\u6279lantEqual;\uc000\u2a7e\u0338ilde;\u6275ump\u0144\u0bf2\u0bfdownHump;\uc000\u224e\u0338qual;\uc000\u224f\u0338e\u0100fs\u0c0a\u0c27tTriangle\u0180;BE\u0c1a\u0c1b\u0c21\u62eaar;\uc000\u29cf\u0338qual;\u62ecs\u0300;EGLST\u0c35\u0c36\u0c3c\u0c44\u0c4b\u0c58\u626equal;\u6270reater;\u6278ess;\uc000\u226a\u0338lantEqual;\uc000\u2a7d\u0338ilde;\u6274ested\u0100GL\u0c68\u0c79reaterGreater;\uc000\u2aa2\u0338essLess;\uc000\u2aa1\u0338recedes\u0180;ES\u0c92\u0c93\u0c9b\u6280qual;\uc000\u2aaf\u0338lantEqual;\u62e0\u0100ei\u0cab\u0cb9verseElement;\u620cghtTriangle\u0180;BE\u0ccb\u0ccc\u0cd2\u62ebar;\uc000\u29d0\u0338qual;\u62ed\u0100qu\u0cdd\u0d0cuareSu\u0100bp\u0ce8\u0cf9set\u0100;E\u0cf0\u0cf3\uc000\u228f\u0338qual;\u62e2erset\u0100;E\u0d03\u0d06\uc000\u2290\u0338qual;\u62e3\u0180bcp\u0d13\u0d24\u0d4eset\u0100;E\u0d1b\u0d1e\uc000\u2282\u20d2qual;\u6288ceeds\u0200;EST\u0d32\u0d33\u0d3b\u0d46\u6281qual;\uc000\u2ab0\u0338lantEqual;\u62e1ilde;\uc000\u227f\u0338erset\u0100;E\u0d58\u0d5b\uc000\u2283\u20d2qual;\u6289ilde\u0200;EFT\u0d6e\u0d6f\u0d75\u0d7f\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uc000\ud835\udca9ilde\u803b\xd1\u40d1;\u439d\u0700Eacdfgmoprstuv\u0dbd\u0dc2\u0dc9\u0dd5\u0ddb\u0de0\u0de7\u0dfc\u0e02\u0e20\u0e22\u0e32\u0e3f\u0e44lig;\u4152cute\u803b\xd3\u40d3\u0100iy\u0dce\u0dd3rc\u803b\xd4\u40d4;\u441eblac;\u4150r;\uc000\ud835\udd12rave\u803b\xd2\u40d2\u0180aei\u0dee\u0df2\u0df6cr;\u414cga;\u43a9cron;\u439fpf;\uc000\ud835\udd46enCurly\u0100DQ\u0e0e\u0e1aoubleQuote;\u601cuote;\u6018;\u6a54\u0100cl\u0e27\u0e2cr;\uc000\ud835\udcaaash\u803b\xd8\u40d8i\u016c\u0e37\u0e3cde\u803b\xd5\u40d5es;\u6a37ml\u803b\xd6\u40d6er\u0100BP\u0e4b\u0e60\u0100ar\u0e50\u0e53r;\u603eac\u0100ek\u0e5a\u0e5c;\u63deet;\u63b4arenthesis;\u63dc\u0480acfhilors\u0e7f\u0e87\u0e8a\u0e8f\u0e92\u0e94\u0e9d\u0eb0\u0efcrtialD;\u6202y;\u441fr;\uc000\ud835\udd13i;\u43a6;\u43a0usMinus;\u40b1\u0100ip\u0ea2\u0eadncareplan\xe5\u069df;\u6119\u0200;eio\u0eb9\u0eba\u0ee0\u0ee4\u6abbcedes\u0200;EST\u0ec8\u0ec9\u0ecf\u0eda\u627aqual;\u6aaflantEqual;\u627cilde;\u627eme;\u6033\u0100dp\u0ee9\u0eeeuct;\u620fortion\u0100;a\u0225\u0ef9l;\u621d\u0100ci\u0f01\u0f06r;\uc000\ud835\udcab;\u43a8\u0200Ufos\u0f11\u0f16\u0f1b\u0f1fOT\u803b\"\u4022r;\uc000\ud835\udd14pf;\u611acr;\uc000\ud835\udcac\u0600BEacefhiorsu\u0f3e\u0f43\u0f47\u0f60\u0f73\u0fa7\u0faa\u0fad\u1096\u10a9\u10b4\u10bearr;\u6910G\u803b\xae\u40ae\u0180cnr\u0f4e\u0f53\u0f56ute;\u4154g;\u67ebr\u0100;t\u0f5c\u0f5d\u61a0l;\u6916\u0180aey\u0f67\u0f6c\u0f71ron;\u4158dil;\u4156;\u4420\u0100;v\u0f78\u0f79\u611cerse\u0100EU\u0f82\u0f99\u0100lq\u0f87\u0f8eement;\u620builibrium;\u61cbpEquilibrium;\u696fr\xbb\u0f79o;\u43a1ght\u0400ACDFTUVa\u0fc1\u0feb\u0ff3\u1022\u1028\u105b\u1087\u03d8\u0100nr\u0fc6\u0fd2gleBracket;\u67e9row\u0180;BL\u0fdc\u0fdd\u0fe1\u6192ar;\u61e5eftArrow;\u61c4eiling;\u6309o\u01f5\u0ff9\0\u1005bleBracket;\u67e7n\u01d4\u100a\0\u1014eeVector;\u695dector\u0100;B\u101d\u101e\u61c2ar;\u6955loor;\u630b\u0100er\u102d\u1043e\u0180;AV\u1035\u1036\u103c\u62a2rrow;\u61a6ector;\u695biangle\u0180;BE\u1050\u1051\u1055\u62b3ar;\u69d0qual;\u62b5p\u0180DTV\u1063\u106e\u1078ownVector;\u694feeVector;\u695cector\u0100;B\u1082\u1083\u61bear;\u6954ector\u0100;B\u1091\u1092\u61c0ar;\u6953\u0100pu\u109b\u109ef;\u611dndImplies;\u6970ightarrow;\u61db\u0100ch\u10b9\u10bcr;\u611b;\u61b1leDelayed;\u69f4\u0680HOacfhimoqstu\u10e4\u10f1\u10f7\u10fd\u1119\u111e\u1151\u1156\u1161\u1167\u11b5\u11bb\u11bf\u0100Cc\u10e9\u10eeHcy;\u4429y;\u4428FTcy;\u442ccute;\u415a\u0280;aeiy\u1108\u1109\u110e\u1113\u1117\u6abcron;\u4160dil;\u415erc;\u415c;\u4421r;\uc000\ud835\udd16ort\u0200DLRU\u112a\u1134\u113e\u1149ownArrow\xbb\u041eeftArrow\xbb\u089aightArrow\xbb\u0fddpArrow;\u6191gma;\u43a3allCircle;\u6218pf;\uc000\ud835\udd4a\u0272\u116d\0\0\u1170t;\u621aare\u0200;ISU\u117b\u117c\u1189\u11af\u65a1ntersection;\u6293u\u0100bp\u118f\u119eset\u0100;E\u1197\u1198\u628fqual;\u6291erset\u0100;E\u11a8\u11a9\u6290qual;\u6292nion;\u6294cr;\uc000\ud835\udcaear;\u62c6\u0200bcmp\u11c8\u11db\u1209\u120b\u0100;s\u11cd\u11ce\u62d0et\u0100;E\u11cd\u11d5qual;\u6286\u0100ch\u11e0\u1205eeds\u0200;EST\u11ed\u11ee\u11f4\u11ff\u627bqual;\u6ab0lantEqual;\u627dilde;\u627fTh\xe1\u0f8c;\u6211\u0180;es\u1212\u1213\u1223\u62d1rset\u0100;E\u121c\u121d\u6283qual;\u6287et\xbb\u1213\u0580HRSacfhiors\u123e\u1244\u1249\u1255\u125e\u1271\u1276\u129f\u12c2\u12c8\u12d1ORN\u803b\xde\u40deADE;\u6122\u0100Hc\u124e\u1252cy;\u440by;\u4426\u0100bu\u125a\u125c;\u4009;\u43a4\u0180aey\u1265\u126a\u126fron;\u4164dil;\u4162;\u4422r;\uc000\ud835\udd17\u0100ei\u127b\u1289\u01f2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128e\u1298kSpace;\uc000\u205f\u200aSpace;\u6009lde\u0200;EFT\u12ab\u12ac\u12b2\u12bc\u623cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uc000\ud835\udd4bipleDot;\u60db\u0100ct\u12d6\u12dbr;\uc000\ud835\udcafrok;\u4166\u0ae1\u12f7\u130e\u131a\u1326\0\u132c\u1331\0\0\0\0\0\u1338\u133d\u1377\u1385\0\u13ff\u1404\u140a\u1410\u0100cr\u12fb\u1301ute\u803b\xda\u40dar\u0100;o\u1307\u1308\u619fcir;\u6949r\u01e3\u1313\0\u1316y;\u440eve;\u416c\u0100iy\u131e\u1323rc\u803b\xdb\u40db;\u4423blac;\u4170r;\uc000\ud835\udd18rave\u803b\xd9\u40d9acr;\u416a\u0100di\u1341\u1369er\u0100BP\u1348\u135d\u0100ar\u134d\u1350r;\u405fac\u0100ek\u1357\u1359;\u63dfet;\u63b5arenthesis;\u63ddon\u0100;P\u1370\u1371\u62c3lus;\u628e\u0100gp\u137b\u137fon;\u4172f;\uc000\ud835\udd4c\u0400ADETadps\u1395\u13ae\u13b8\u13c4\u03e8\u13d2\u13d7\u13f3rrow\u0180;BD\u1150\u13a0\u13a4ar;\u6912ownArrow;\u61c5ownArrow;\u6195quilibrium;\u696eee\u0100;A\u13cb\u13cc\u62a5rrow;\u61a5own\xe1\u03f3er\u0100LR\u13de\u13e8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13f9\u13fa\u43d2on;\u43a5ing;\u416ecr;\uc000\ud835\udcb0ilde;\u4168ml\u803b\xdc\u40dc\u0480Dbcdefosv\u1427\u142c\u1430\u1433\u143e\u1485\u148a\u1490\u1496ash;\u62abar;\u6aeby;\u4412ash\u0100;l\u143b\u143c\u62a9;\u6ae6\u0100er\u1443\u1445;\u62c1\u0180bty\u144c\u1450\u147aar;\u6016\u0100;i\u144f\u1455cal\u0200BLST\u1461\u1465\u146a\u1474ar;\u6223ine;\u407ceparator;\u6758ilde;\u6240ThinSpace;\u600ar;\uc000\ud835\udd19pf;\uc000\ud835\udd4dcr;\uc000\ud835\udcb1dash;\u62aa\u0280cefos\u14a7\u14ac\u14b1\u14b6\u14bcirc;\u4174dge;\u62c0r;\uc000\ud835\udd1apf;\uc000\ud835\udd4ecr;\uc000\ud835\udcb2\u0200fios\u14cb\u14d0\u14d2\u14d8r;\uc000\ud835\udd1b;\u439epf;\uc000\ud835\udd4fcr;\uc000\ud835\udcb3\u0480AIUacfosu\u14f1\u14f5\u14f9\u14fd\u1504\u150f\u1514\u151a\u1520cy;\u442fcy;\u4407cy;\u442ecute\u803b\xdd\u40dd\u0100iy\u1509\u150drc;\u4176;\u442br;\uc000\ud835\udd1cpf;\uc000\ud835\udd50cr;\uc000\ud835\udcb4ml;\u4178\u0400Hacdefos\u1535\u1539\u153f\u154b\u154f\u155d\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417d;\u4417ot;\u417b\u01f2\u1554\0\u155boWidt\xe8\u0ad9a;\u4396r;\u6128pf;\u6124cr;\uc000\ud835\udcb5\u0be1\u1583\u158a\u1590\0\u15b0\u15b6\u15bf\0\0\0\0\u15c6\u15db\u15eb\u165f\u166d\0\u1695\u169b\u16b2\u16b9\0\u16becute\u803b\xe1\u40e1reve;\u4103\u0300;Ediuy\u159c\u159d\u15a1\u15a3\u15a8\u15ad\u623e;\uc000\u223e\u0333;\u623frc\u803b\xe2\u40e2te\u80bb\xb4\u0306;\u4430lig\u803b\xe6\u40e6\u0100;r\xb2\u15ba;\uc000\ud835\udd1erave\u803b\xe0\u40e0\u0100ep\u15ca\u15d6\u0100fp\u15cf\u15d4sym;\u6135\xe8\u15d3ha;\u43b1\u0100ap\u15dfc\u0100cl\u15e4\u15e7r;\u4101g;\u6a3f\u0264\u15f0\0\0\u160a\u0280;adsv\u15fa\u15fb\u15ff\u1601\u1607\u6227nd;\u6a55;\u6a5clope;\u6a58;\u6a5a\u0380;elmrsz\u1618\u1619\u161b\u161e\u163f\u164f\u1659\u6220;\u69a4e\xbb\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163a\u163c\u163e;\u69a8;\u69a9;\u69aa;\u69ab;\u69ac;\u69ad;\u69ae;\u69aft\u0100;v\u1645\u1646\u621fb\u0100;d\u164c\u164d\u62be;\u699d\u0100pt\u1654\u1657h;\u6222\xbb\xb9arr;\u637c\u0100gp\u1663\u1667on;\u4105f;\uc000\ud835\udd52\u0380;Eaeiop\u12c1\u167b\u167d\u1682\u1684\u1687\u168a;\u6a70cir;\u6a6f;\u624ad;\u624bs;\u4027rox\u0100;e\u12c1\u1692\xf1\u1683ing\u803b\xe5\u40e5\u0180cty\u16a1\u16a6\u16a8r;\uc000\ud835\udcb6;\u402amp\u0100;e\u12c1\u16af\xf1\u0288ilde\u803b\xe3\u40e3ml\u803b\xe4\u40e4\u0100ci\u16c2\u16c8onin\xf4\u0272nt;\u6a11\u0800Nabcdefiklnoprsu\u16ed\u16f1\u1730\u173c\u1743\u1748\u1778\u177d\u17e0\u17e6\u1839\u1850\u170d\u193d\u1948\u1970ot;\u6aed\u0100cr\u16f6\u171ek\u0200ceps\u1700\u1705\u170d\u1713ong;\u624cpsilon;\u43f6rime;\u6035im\u0100;e\u171a\u171b\u623dq;\u62cd\u0176\u1722\u1726ee;\u62bded\u0100;g\u172c\u172d\u6305e\xbb\u172drk\u0100;t\u135c\u1737brk;\u63b6\u0100oy\u1701\u1741;\u4431quo;\u601e\u0280cmprt\u1753\u175b\u1761\u1764\u1768aus\u0100;e\u010a\u0109ptyv;\u69b0s\xe9\u170cno\xf5\u0113\u0180ahw\u176f\u1771\u1773;\u43b2;\u6136een;\u626cr;\uc000\ud835\udd1fg\u0380costuvw\u178d\u179d\u17b3\u17c1\u17d5\u17db\u17de\u0180aiu\u1794\u1796\u179a\xf0\u0760rc;\u65efp\xbb\u1371\u0180dpt\u17a4\u17a8\u17adot;\u6a00lus;\u6a01imes;\u6a02\u0271\u17b9\0\0\u17becup;\u6a06ar;\u6605riangle\u0100du\u17cd\u17d2own;\u65bdp;\u65b3plus;\u6a04e\xe5\u1444\xe5\u14adarow;\u690d\u0180ako\u17ed\u1826\u1835\u0100cn\u17f2\u1823k\u0180lst\u17fa\u05ab\u1802ozenge;\u69ebriangle\u0200;dlr\u1812\u1813\u1818\u181d\u65b4own;\u65beeft;\u65c2ight;\u65b8k;\u6423\u01b1\u182b\0\u1833\u01b2\u182f\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183e\u184d\u0100;q\u1843\u1846\uc000=\u20e5uiv;\uc000\u2261\u20e5t;\u6310\u0200ptwx\u1859\u185e\u1867\u186cf;\uc000\ud835\udd53\u0100;t\u13cb\u1863om\xbb\u13cctie;\u62c8\u0600DHUVbdhmptuv\u1885\u1896\u18aa\u18bb\u18d7\u18db\u18ec\u18ff\u1905\u190a\u1910\u1921\u0200LRlr\u188e\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18a1\u18a2\u18a4\u18a6\u18a8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18b3\u18b5\u18b7\u18b9;\u655d;\u655a;\u655c;\u6559\u0380;HLRhlr\u18ca\u18cb\u18cd\u18cf\u18d1\u18d3\u18d5\u6551;\u656c;\u6563;\u6560;\u656b;\u6562;\u655fox;\u69c9\u0200LRlr\u18e4\u18e6\u18e8\u18ea;\u6555;\u6552;\u6510;\u650c\u0280;DUdu\u06bd\u18f7\u18f9\u18fb\u18fd;\u6565;\u6568;\u652c;\u6534inus;\u629flus;\u629eimes;\u62a0\u0200LRlr\u1919\u191b\u191d\u191f;\u655b;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193b\u6502;\u656a;\u6561;\u655e;\u653c;\u6524;\u651c\u0100ev\u0123\u1942bar\u803b\xa6\u40a6\u0200ceio\u1951\u1956\u195a\u1960r;\uc000\ud835\udcb7mi;\u604fm\u0100;e\u171a\u171cl\u0180;bh\u1968\u1969\u196b\u405c;\u69c5sub;\u67c8\u016c\u1974\u197el\u0100;e\u1979\u197a\u6022t\xbb\u197ap\u0180;Ee\u012f\u1985\u1987;\u6aae\u0100;q\u06dc\u06db\u0ce1\u19a7\0\u19e8\u1a11\u1a15\u1a32\0\u1a37\u1a50\0\0\u1ab4\0\0\u1ac1\0\0\u1b21\u1b2e\u1b4d\u1b52\0\u1bfd\0\u1c0c\u0180cpr\u19ad\u19b2\u19ddute;\u4107\u0300;abcds\u19bf\u19c0\u19c4\u19ca\u19d5\u19d9\u6229nd;\u6a44rcup;\u6a49\u0100au\u19cf\u19d2p;\u6a4bp;\u6a47ot;\u6a40;\uc000\u2229\ufe00\u0100eo\u19e2\u19e5t;\u6041\xee\u0693\u0200aeiu\u19f0\u19fb\u1a01\u1a05\u01f0\u19f5\0\u19f8s;\u6a4don;\u410ddil\u803b\xe7\u40e7rc;\u4109ps\u0100;s\u1a0c\u1a0d\u6a4cm;\u6a50ot;\u410b\u0180dmn\u1a1b\u1a20\u1a26il\u80bb\xb8\u01adptyv;\u69b2t\u8100\xa2;e\u1a2d\u1a2e\u40a2r\xe4\u01b2r;\uc000\ud835\udd20\u0180cei\u1a3d\u1a40\u1a4dy;\u4447ck\u0100;m\u1a47\u1a48\u6713ark\xbb\u1a48;\u43c7r\u0380;Ecefms\u1a5f\u1a60\u1a62\u1a6b\u1aa4\u1aaa\u1aae\u65cb;\u69c3\u0180;el\u1a69\u1a6a\u1a6d\u42c6q;\u6257e\u0261\u1a74\0\0\u1a88rrow\u0100lr\u1a7c\u1a81eft;\u61baight;\u61bb\u0280RSacd\u1a92\u1a94\u1a96\u1a9a\u1a9f\xbb\u0f47;\u64c8st;\u629birc;\u629aash;\u629dnint;\u6a10id;\u6aefcir;\u69c2ubs\u0100;u\u1abb\u1abc\u6663it\xbb\u1abc\u02ec\u1ac7\u1ad4\u1afa\0\u1b0aon\u0100;e\u1acd\u1ace\u403a\u0100;q\xc7\xc6\u026d\u1ad9\0\0\u1ae2a\u0100;t\u1ade\u1adf\u402c;\u4040\u0180;fl\u1ae8\u1ae9\u1aeb\u6201\xee\u1160e\u0100mx\u1af1\u1af6ent\xbb\u1ae9e\xf3\u024d\u01e7\u1afe\0\u1b07\u0100;d\u12bb\u1b02ot;\u6a6dn\xf4\u0246\u0180fry\u1b10\u1b14\u1b17;\uc000\ud835\udd54o\xe4\u0254\u8100\xa9;s\u0155\u1b1dr;\u6117\u0100ao\u1b25\u1b29rr;\u61b5ss;\u6717\u0100cu\u1b32\u1b37r;\uc000\ud835\udcb8\u0100bp\u1b3c\u1b44\u0100;e\u1b41\u1b42\u6acf;\u6ad1\u0100;e\u1b49\u1b4a\u6ad0;\u6ad2dot;\u62ef\u0380delprvw\u1b60\u1b6c\u1b77\u1b82\u1bac\u1bd4\u1bf9arr\u0100lr\u1b68\u1b6a;\u6938;\u6935\u0270\u1b72\0\0\u1b75r;\u62dec;\u62dfarr\u0100;p\u1b7f\u1b80\u61b6;\u693d\u0300;bcdos\u1b8f\u1b90\u1b96\u1ba1\u1ba5\u1ba8\u622arcap;\u6a48\u0100au\u1b9b\u1b9ep;\u6a46p;\u6a4aot;\u628dr;\u6a45;\uc000\u222a\ufe00\u0200alrv\u1bb5\u1bbf\u1bde\u1be3rr\u0100;m\u1bbc\u1bbd\u61b7;\u693cy\u0180evw\u1bc7\u1bd4\u1bd8q\u0270\u1bce\0\0\u1bd2re\xe3\u1b73u\xe3\u1b75ee;\u62ceedge;\u62cfen\u803b\xa4\u40a4earrow\u0100lr\u1bee\u1bf3eft\xbb\u1b80ight\xbb\u1bbde\xe4\u1bdd\u0100ci\u1c01\u1c07onin\xf4\u01f7nt;\u6231lcty;\u632d\u0980AHabcdefhijlorstuwz\u1c38\u1c3b\u1c3f\u1c5d\u1c69\u1c75\u1c8a\u1c9e\u1cac\u1cb7\u1cfb\u1cff\u1d0d\u1d7b\u1d91\u1dab\u1dbb\u1dc6\u1dcdr\xf2\u0381ar;\u6965\u0200glrs\u1c48\u1c4d\u1c52\u1c54ger;\u6020eth;\u6138\xf2\u1133h\u0100;v\u1c5a\u1c5b\u6010\xbb\u090a\u016b\u1c61\u1c67arow;\u690fa\xe3\u0315\u0100ay\u1c6e\u1c73ron;\u410f;\u4434\u0180;ao\u0332\u1c7c\u1c84\u0100gr\u02bf\u1c81r;\u61catseq;\u6a77\u0180glm\u1c91\u1c94\u1c98\u803b\xb0\u40b0ta;\u43b4ptyv;\u69b1\u0100ir\u1ca3\u1ca8sht;\u697f;\uc000\ud835\udd21ar\u0100lr\u1cb3\u1cb5\xbb\u08dc\xbb\u101e\u0280aegsv\u1cc2\u0378\u1cd6\u1cdc\u1ce0m\u0180;os\u0326\u1cca\u1cd4nd\u0100;s\u0326\u1cd1uit;\u6666amma;\u43ddin;\u62f2\u0180;io\u1ce7\u1ce8\u1cf8\u40f7de\u8100\xf7;o\u1ce7\u1cf0ntimes;\u62c7n\xf8\u1cf7cy;\u4452c\u026f\u1d06\0\0\u1d0arn;\u631eop;\u630d\u0280lptuw\u1d18\u1d1d\u1d22\u1d49\u1d55lar;\u4024f;\uc000\ud835\udd55\u0280;emps\u030b\u1d2d\u1d37\u1d3d\u1d42q\u0100;d\u0352\u1d33ot;\u6251inus;\u6238lus;\u6214quare;\u62a1blebarwedg\xe5\xfan\u0180adh\u112e\u1d5d\u1d67ownarrow\xf3\u1c83arpoon\u0100lr\u1d72\u1d76ef\xf4\u1cb4igh\xf4\u1cb6\u0162\u1d7f\u1d85karo\xf7\u0f42\u026f\u1d8a\0\0\u1d8ern;\u631fop;\u630c\u0180cot\u1d98\u1da3\u1da6\u0100ry\u1d9d\u1da1;\uc000\ud835\udcb9;\u4455l;\u69f6rok;\u4111\u0100dr\u1db0\u1db4ot;\u62f1i\u0100;f\u1dba\u1816\u65bf\u0100ah\u1dc0\u1dc3r\xf2\u0429a\xf2\u0fa6angle;\u69a6\u0100ci\u1dd2\u1dd5y;\u445fgrarr;\u67ff\u0900Dacdefglmnopqrstux\u1e01\u1e09\u1e19\u1e38\u0578\u1e3c\u1e49\u1e61\u1e7e\u1ea5\u1eaf\u1ebd\u1ee1\u1f2a\u1f37\u1f44\u1f4e\u1f5a\u0100Do\u1e06\u1d34o\xf4\u1c89\u0100cs\u1e0e\u1e14ute\u803b\xe9\u40e9ter;\u6a6e\u0200aioy\u1e22\u1e27\u1e31\u1e36ron;\u411br\u0100;c\u1e2d\u1e2e\u6256\u803b\xea\u40ealon;\u6255;\u444dot;\u4117\u0100Dr\u1e41\u1e45ot;\u6252;\uc000\ud835\udd22\u0180;rs\u1e50\u1e51\u1e57\u6a9aave\u803b\xe8\u40e8\u0100;d\u1e5c\u1e5d\u6a96ot;\u6a98\u0200;ils\u1e6a\u1e6b\u1e72\u1e74\u6a99nters;\u63e7;\u6113\u0100;d\u1e79\u1e7a\u6a95ot;\u6a97\u0180aps\u1e85\u1e89\u1e97cr;\u4113ty\u0180;sv\u1e92\u1e93\u1e95\u6205et\xbb\u1e93p\u01001;\u1e9d\u1ea4\u0133\u1ea1\u1ea3;\u6004;\u6005\u6003\u0100gs\u1eaa\u1eac;\u414bp;\u6002\u0100gp\u1eb4\u1eb8on;\u4119f;\uc000\ud835\udd56\u0180als\u1ec4\u1ece\u1ed2r\u0100;s\u1eca\u1ecb\u62d5l;\u69e3us;\u6a71i\u0180;lv\u1eda\u1edb\u1edf\u43b5on\xbb\u1edb;\u43f5\u0200csuv\u1eea\u1ef3\u1f0b\u1f23\u0100io\u1eef\u1e31rc\xbb\u1e2e\u0269\u1ef9\0\0\u1efb\xed\u0548ant\u0100gl\u1f02\u1f06tr\xbb\u1e5dess\xbb\u1e7a\u0180aei\u1f12\u1f16\u1f1als;\u403dst;\u625fv\u0100;D\u0235\u1f20D;\u6a78parsl;\u69e5\u0100Da\u1f2f\u1f33ot;\u6253rr;\u6971\u0180cdi\u1f3e\u1f41\u1ef8r;\u612fo\xf4\u0352\u0100ah\u1f49\u1f4b;\u43b7\u803b\xf0\u40f0\u0100mr\u1f53\u1f57l\u803b\xeb\u40ebo;\u60ac\u0180cip\u1f61\u1f64\u1f67l;\u4021s\xf4\u056e\u0100eo\u1f6c\u1f74ctatio\xee\u0559nential\xe5\u0579\u09e1\u1f92\0\u1f9e\0\u1fa1\u1fa7\0\0\u1fc6\u1fcc\0\u1fd3\0\u1fe6\u1fea\u2000\0\u2008\u205allingdotse\xf1\u1e44y;\u4444male;\u6640\u0180ilr\u1fad\u1fb3\u1fc1lig;\u8000\ufb03\u0269\u1fb9\0\0\u1fbdg;\u8000\ufb00ig;\u8000\ufb04;\uc000\ud835\udd23lig;\u8000\ufb01lig;\uc000fj\u0180alt\u1fd9\u1fdc\u1fe1t;\u666dig;\u8000\ufb02ns;\u65b1of;\u4192\u01f0\u1fee\0\u1ff3f;\uc000\ud835\udd57\u0100ak\u05bf\u1ff7\u0100;v\u1ffc\u1ffd\u62d4;\u6ad9artint;\u6a0d\u0100ao\u200c\u2055\u0100cs\u2011\u2052\u03b1\u201a\u2030\u2038\u2045\u2048\0\u2050\u03b2\u2022\u2025\u2027\u202a\u202c\0\u202e\u803b\xbd\u40bd;\u6153\u803b\xbc\u40bc;\u6155;\u6159;\u615b\u01b3\u2034\0\u2036;\u6154;\u6156\u02b4\u203e\u2041\0\0\u2043\u803b\xbe\u40be;\u6157;\u615c5;\u6158\u01b6\u204c\0\u204e;\u615a;\u615d8;\u615el;\u6044wn;\u6322cr;\uc000\ud835\udcbb\u0880Eabcdefgijlnorstv\u2082\u2089\u209f\u20a5\u20b0\u20b4\u20f0\u20f5\u20fa\u20ff\u2103\u2112\u2138\u0317\u213e\u2152\u219e\u0100;l\u064d\u2087;\u6a8c\u0180cmp\u2090\u2095\u209dute;\u41f5ma\u0100;d\u209c\u1cda\u43b3;\u6a86reve;\u411f\u0100iy\u20aa\u20aerc;\u411d;\u4433ot;\u4121\u0200;lqs\u063e\u0642\u20bd\u20c9\u0180;qs\u063e\u064c\u20c4lan\xf4\u0665\u0200;cdl\u0665\u20d2\u20d5\u20e5c;\u6aa9ot\u0100;o\u20dc\u20dd\u6a80\u0100;l\u20e2\u20e3\u6a82;\u6a84\u0100;e\u20ea\u20ed\uc000\u22db\ufe00s;\u6a94r;\uc000\ud835\udd24\u0100;g\u0673\u061bmel;\u6137cy;\u4453\u0200;Eaj\u065a\u210c\u210e\u2110;\u6a92;\u6aa5;\u6aa4\u0200Eaes\u211b\u211d\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6a8arox\xbb\u2124\u0100;q\u212e\u212f\u6a88\u0100;q\u212e\u211bim;\u62e7pf;\uc000\ud835\udd58\u0100ci\u2143\u2146r;\u610am\u0180;el\u066b\u214e\u2150;\u6a8e;\u6a90\u8300>;cdlqr\u05ee\u2160\u216a\u216e\u2173\u2179\u0100ci\u2165\u2167;\u6aa7r;\u6a7aot;\u62d7Par;\u6995uest;\u6a7c\u0280adels\u2184\u216a\u2190\u0656\u219b\u01f0\u2189\0\u218epro\xf8\u209er;\u6978q\u0100lq\u063f\u2196les\xf3\u2088i\xed\u066b\u0100en\u21a3\u21adrtneqq;\uc000\u2269\ufe00\xc5\u21aa\u0500Aabcefkosy\u21c4\u21c7\u21f1\u21f5\u21fa\u2218\u221d\u222f\u2268\u227dr\xf2\u03a0\u0200ilmr\u21d0\u21d4\u21d7\u21dbrs\xf0\u1484f\xbb\u2024il\xf4\u06a9\u0100dr\u21e0\u21e4cy;\u444a\u0180;cw\u08f4\u21eb\u21efir;\u6948;\u61adar;\u610firc;\u4125\u0180alr\u2201\u220e\u2213rts\u0100;u\u2209\u220a\u6665it\xbb\u220alip;\u6026con;\u62b9r;\uc000\ud835\udd25s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223a\u223e\u2243\u225e\u2263rr;\u61fftht;\u623bk\u0100lr\u2249\u2253eftarrow;\u61a9ightarrow;\u61aaf;\uc000\ud835\udd59bar;\u6015\u0180clt\u226f\u2274\u2278r;\uc000\ud835\udcbdas\xe8\u21f4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xbb\u1c5b\u0ae1\u22a3\0\u22aa\0\u22b8\u22c5\u22ce\0\u22d5\u22f3\0\0\u22f8\u2322\u2367\u2362\u237f\0\u2386\u23aa\u23b4cute\u803b\xed\u40ed\u0180;iy\u0771\u22b0\u22b5rc\u803b\xee\u40ee;\u4438\u0100cx\u22bc\u22bfy;\u4435cl\u803b\xa1\u40a1\u0100fr\u039f\u22c9;\uc000\ud835\udd26rave\u803b\xec\u40ec\u0200;ino\u073e\u22dd\u22e9\u22ee\u0100in\u22e2\u22e6nt;\u6a0ct;\u622dfin;\u69dcta;\u6129lig;\u4133\u0180aop\u22fe\u231a\u231d\u0180cgt\u2305\u2308\u2317r;\u412b\u0180elp\u071f\u230f\u2313in\xe5\u078ear\xf4\u0720h;\u4131f;\u62b7ed;\u41b5\u0280;cfot\u04f4\u232c\u2331\u233d\u2341are;\u6105in\u0100;t\u2338\u2339\u621eie;\u69dddo\xf4\u2319\u0280;celp\u0757\u234c\u2350\u235b\u2361al;\u62ba\u0100gr\u2355\u2359er\xf3\u1563\xe3\u234darhk;\u6a17rod;\u6a3c\u0200cgpt\u236f\u2372\u2376\u237by;\u4451on;\u412ff;\uc000\ud835\udd5aa;\u43b9uest\u803b\xbf\u40bf\u0100ci\u238a\u238fr;\uc000\ud835\udcben\u0280;Edsv\u04f4\u239b\u239d\u23a1\u04f3;\u62f9ot;\u62f5\u0100;v\u23a6\u23a7\u62f4;\u62f3\u0100;i\u0777\u23aelde;\u4129\u01eb\u23b8\0\u23bccy;\u4456l\u803b\xef\u40ef\u0300cfmosu\u23cc\u23d7\u23dc\u23e1\u23e7\u23f5\u0100iy\u23d1\u23d5rc;\u4135;\u4439r;\uc000\ud835\udd27ath;\u4237pf;\uc000\ud835\udd5b\u01e3\u23ec\0\u23f1r;\uc000\ud835\udcbfrcy;\u4458kcy;\u4454\u0400acfghjos\u240b\u2416\u2422\u2427\u242d\u2431\u2435\u243bppa\u0100;v\u2413\u2414\u43ba;\u43f0\u0100ey\u241b\u2420dil;\u4137;\u443ar;\uc000\ud835\udd28reen;\u4138cy;\u4445cy;\u445cpf;\uc000\ud835\udd5ccr;\uc000\ud835\udcc0\u0b80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248d\u2491\u250e\u253d\u255a\u2580\u264e\u265e\u2665\u2679\u267d\u269a\u26b2\u26d8\u275d\u2768\u278b\u27c0\u2801\u2812\u0180art\u2477\u247a\u247cr\xf2\u09c6\xf2\u0395ail;\u691barr;\u690e\u0100;g\u0994\u248b;\u6a8bar;\u6962\u0963\u24a5\0\u24aa\0\u24b1\0\0\0\0\0\u24b5\u24ba\0\u24c6\u24c8\u24cd\0\u24f9ute;\u413amptyv;\u69b4ra\xee\u084cbda;\u43bbg\u0180;dl\u088e\u24c1\u24c3;\u6991\xe5\u088e;\u6a85uo\u803b\xab\u40abr\u0400;bfhlpst\u0899\u24de\u24e6\u24e9\u24eb\u24ee\u24f1\u24f5\u0100;f\u089d\u24e3s;\u691fs;\u691d\xeb\u2252p;\u61abl;\u6939im;\u6973l;\u61a2\u0180;ae\u24ff\u2500\u2504\u6aabil;\u6919\u0100;s\u2509\u250a\u6aad;\uc000\u2aad\ufe00\u0180abr\u2515\u2519\u251drr;\u690crk;\u6772\u0100ak\u2522\u252cc\u0100ek\u2528\u252a;\u407b;\u405b\u0100es\u2531\u2533;\u698bl\u0100du\u2539\u253b;\u698f;\u698d\u0200aeuy\u2546\u254b\u2556\u2558ron;\u413e\u0100di\u2550\u2554il;\u413c\xec\u08b0\xe2\u2529;\u443b\u0200cqrs\u2563\u2566\u256d\u257da;\u6936uo\u0100;r\u0e19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694bh;\u61b2\u0280;fgqs\u258b\u258c\u0989\u25f3\u25ff\u6264t\u0280ahlrt\u2598\u25a4\u25b7\u25c2\u25e8rrow\u0100;t\u0899\u25a1a\xe9\u24f6arpoon\u0100du\u25af\u25b4own\xbb\u045ap\xbb\u0966eftarrows;\u61c7ight\u0180ahs\u25cd\u25d6\u25derrow\u0100;s\u08f4\u08a7arpoon\xf3\u0f98quigarro\xf7\u21f0hreetimes;\u62cb\u0180;qs\u258b\u0993\u25falan\xf4\u09ac\u0280;cdgs\u09ac\u260a\u260d\u261d\u2628c;\u6aa8ot\u0100;o\u2614\u2615\u6a7f\u0100;r\u261a\u261b\u6a81;\u6a83\u0100;e\u2622\u2625\uc000\u22da\ufe00s;\u6a93\u0280adegs\u2633\u2639\u263d\u2649\u264bppro\xf8\u24c6ot;\u62d6q\u0100gq\u2643\u2645\xf4\u0989gt\xf2\u248c\xf4\u099bi\xed\u09b2\u0180ilr\u2655\u08e1\u265asht;\u697c;\uc000\ud835\udd29\u0100;E\u099c\u2663;\u6a91\u0161\u2669\u2676r\u0100du\u25b2\u266e\u0100;l\u0965\u2673;\u696alk;\u6584cy;\u4459\u0280;acht\u0a48\u2688\u268b\u2691\u2696r\xf2\u25c1orne\xf2\u1d08ard;\u696bri;\u65fa\u0100io\u269f\u26a4dot;\u4140ust\u0100;a\u26ac\u26ad\u63b0che\xbb\u26ad\u0200Eaes\u26bb\u26bd\u26c9\u26d4;\u6268p\u0100;p\u26c3\u26c4\u6a89rox\xbb\u26c4\u0100;q\u26ce\u26cf\u6a87\u0100;q\u26ce\u26bbim;\u62e6\u0400abnoptwz\u26e9\u26f4\u26f7\u271a\u272f\u2741\u2747\u2750\u0100nr\u26ee\u26f1g;\u67ecr;\u61fdr\xeb\u08c1g\u0180lmr\u26ff\u270d\u2714eft\u0100ar\u09e6\u2707ight\xe1\u09f2apsto;\u67fcight\xe1\u09fdparrow\u0100lr\u2725\u2729ef\xf4\u24edight;\u61ac\u0180afl\u2736\u2739\u273dr;\u6985;\uc000\ud835\udd5dus;\u6a2dimes;\u6a34\u0161\u274b\u274fst;\u6217\xe1\u134e\u0180;ef\u2757\u2758\u1800\u65cange\xbb\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277c\u2785\u2787r\xf2\u08a8orne\xf2\u1d8car\u0100;d\u0f98\u2783;\u696d;\u600eri;\u62bf\u0300achiqt\u2798\u279d\u0a40\u27a2\u27ae\u27bbquo;\u6039r;\uc000\ud835\udcc1m\u0180;eg\u09b2\u27aa\u27ac;\u6a8d;\u6a8f\u0100bu\u252a\u27b3o\u0100;r\u0e1f\u27b9;\u601arok;\u4142\u8400<;cdhilqr\u082b\u27d2\u2639\u27dc\u27e0\u27e5\u27ea\u27f0\u0100ci\u27d7\u27d9;\u6aa6r;\u6a79re\xe5\u25f2mes;\u62c9arr;\u6976uest;\u6a7b\u0100Pi\u27f5\u27f9ar;\u6996\u0180;ef\u2800\u092d\u181b\u65c3r\u0100du\u2807\u280dshar;\u694ahar;\u6966\u0100en\u2817\u2821rtneqq;\uc000\u2268\ufe00\xc5\u281e\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288e\u2893\u28a0\u28a5\u28a8\u28da\u28e2\u28e4\u0a83\u28f3\u2902Dot;\u623a\u0200clpr\u284e\u2852\u2863\u287dr\u803b\xaf\u40af\u0100et\u2857\u2859;\u6642\u0100;e\u285e\u285f\u6720se\xbb\u285f\u0100;s\u103b\u2868to\u0200;dlu\u103b\u2873\u2877\u287bow\xee\u048cef\xf4\u090f\xf0\u13d1ker;\u65ae\u0100oy\u2887\u288cmma;\u6a29;\u443cash;\u6014asuredangle\xbb\u1626r;\uc000\ud835\udd2ao;\u6127\u0180cdn\u28af\u28b4\u28c9ro\u803b\xb5\u40b5\u0200;acd\u1464\u28bd\u28c0\u28c4s\xf4\u16a7ir;\u6af0ot\u80bb\xb7\u01b5us\u0180;bd\u28d2\u1903\u28d3\u6212\u0100;u\u1d3c\u28d8;\u6a2a\u0163\u28de\u28e1p;\u6adb\xf2\u2212\xf0\u0a81\u0100dp\u28e9\u28eeels;\u62a7f;\uc000\ud835\udd5e\u0100ct\u28f8\u28fdr;\uc000\ud835\udcc2pos\xbb\u159d\u0180;lm\u2909\u290a\u290d\u43bctimap;\u62b8\u0c00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297e\u2989\u2998\u29da\u29e9\u2a15\u2a1a\u2a58\u2a5d\u2a83\u2a95\u2aa4\u2aa8\u2b04\u2b07\u2b44\u2b7f\u2bae\u2c34\u2c67\u2c7c\u2ce9\u0100gt\u2947\u294b;\uc000\u22d9\u0338\u0100;v\u2950\u0bcf\uc000\u226b\u20d2\u0180elt\u295a\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61cdightarrow;\u61ce;\uc000\u22d8\u0338\u0100;v\u297b\u0c47\uc000\u226a\u20d2ightarrow;\u61cf\u0100Dd\u298e\u2993ash;\u62afash;\u62ae\u0280bcnpt\u29a3\u29a7\u29ac\u29b1\u29ccla\xbb\u02deute;\u4144g;\uc000\u2220\u20d2\u0280;Eiop\u0d84\u29bc\u29c0\u29c5\u29c8;\uc000\u2a70\u0338d;\uc000\u224b\u0338s;\u4149ro\xf8\u0d84ur\u0100;a\u29d3\u29d4\u666el\u0100;s\u29d3\u0b38\u01f3\u29df\0\u29e3p\u80bb\xa0\u0b37mp\u0100;e\u0bf9\u0c00\u0280aeouy\u29f4\u29fe\u2a03\u2a10\u2a13\u01f0\u29f9\0\u29fb;\u6a43on;\u4148dil;\u4146ng\u0100;d\u0d7e\u2a0aot;\uc000\u2a6d\u0338p;\u6a42;\u443dash;\u6013\u0380;Aadqsx\u0b92\u2a29\u2a2d\u2a3b\u2a41\u2a45\u2a50rr;\u61d7r\u0100hr\u2a33\u2a36k;\u6924\u0100;o\u13f2\u13f0ot;\uc000\u2250\u0338ui\xf6\u0b63\u0100ei\u2a4a\u2a4ear;\u6928\xed\u0b98ist\u0100;s\u0ba0\u0b9fr;\uc000\ud835\udd2b\u0200Eest\u0bc5\u2a66\u2a79\u2a7c\u0180;qs\u0bbc\u2a6d\u0be1\u0180;qs\u0bbc\u0bc5\u2a74lan\xf4\u0be2i\xed\u0bea\u0100;r\u0bb6\u2a81\xbb\u0bb7\u0180Aap\u2a8a\u2a8d\u2a91r\xf2\u2971rr;\u61aear;\u6af2\u0180;sv\u0f8d\u2a9c\u0f8c\u0100;d\u2aa1\u2aa2\u62fc;\u62facy;\u445a\u0380AEadest\u2ab7\u2aba\u2abe\u2ac2\u2ac5\u2af6\u2af9r\xf2\u2966;\uc000\u2266\u0338rr;\u619ar;\u6025\u0200;fqs\u0c3b\u2ace\u2ae3\u2aeft\u0100ar\u2ad4\u2ad9rro\xf7\u2ac1ightarro\xf7\u2a90\u0180;qs\u0c3b\u2aba\u2aealan\xf4\u0c55\u0100;s\u0c55\u2af4\xbb\u0c36i\xed\u0c5d\u0100;r\u0c35\u2afei\u0100;e\u0c1a\u0c25i\xe4\u0d90\u0100pt\u2b0c\u2b11f;\uc000\ud835\udd5f\u8180\xac;in\u2b19\u2b1a\u2b36\u40acn\u0200;Edv\u0b89\u2b24\u2b28\u2b2e;\uc000\u22f9\u0338ot;\uc000\u22f5\u0338\u01e1\u0b89\u2b33\u2b35;\u62f7;\u62f6i\u0100;v\u0cb8\u2b3c\u01e1\u0cb8\u2b41\u2b43;\u62fe;\u62fd\u0180aor\u2b4b\u2b63\u2b69r\u0200;ast\u0b7b\u2b55\u2b5a\u2b5flle\xec\u0b7bl;\uc000\u2afd\u20e5;\uc000\u2202\u0338lint;\u6a14\u0180;ce\u0c92\u2b70\u2b73u\xe5\u0ca5\u0100;c\u0c98\u2b78\u0100;e\u0c92\u2b7d\xf1\u0c98\u0200Aait\u2b88\u2b8b\u2b9d\u2ba7r\xf2\u2988rr\u0180;cw\u2b94\u2b95\u2b99\u619b;\uc000\u2933\u0338;\uc000\u219d\u0338ghtarrow\xbb\u2b95ri\u0100;e\u0ccb\u0cd6\u0380chimpqu\u2bbd\u2bcd\u2bd9\u2b04\u0b78\u2be4\u2bef\u0200;cer\u0d32\u2bc6\u0d37\u2bc9u\xe5\u0d45;\uc000\ud835\udcc3ort\u026d\u2b05\0\0\u2bd6ar\xe1\u2b56m\u0100;e\u0d6e\u2bdf\u0100;q\u0d74\u0d73su\u0100bp\u2beb\u2bed\xe5\u0cf8\xe5\u0d0b\u0180bcp\u2bf6\u2c11\u2c19\u0200;Ees\u2bff\u2c00\u0d22\u2c04\u6284;\uc000\u2ac5\u0338et\u0100;e\u0d1b\u2c0bq\u0100;q\u0d23\u2c00c\u0100;e\u0d32\u2c17\xf1\u0d38\u0200;Ees\u2c22\u2c23\u0d5f\u2c27\u6285;\uc000\u2ac6\u0338et\u0100;e\u0d58\u2c2eq\u0100;q\u0d60\u2c23\u0200gilr\u2c3d\u2c3f\u2c45\u2c47\xec\u0bd7lde\u803b\xf1\u40f1\xe7\u0c43iangle\u0100lr\u2c52\u2c5ceft\u0100;e\u0c1a\u2c5a\xf1\u0c26ight\u0100;e\u0ccb\u2c65\xf1\u0cd7\u0100;m\u2c6c\u2c6d\u43bd\u0180;es\u2c74\u2c75\u2c79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2c8f\u2c94\u2c99\u2c9e\u2ca3\u2cb0\u2cb6\u2cd3\u2ce3ash;\u62adarr;\u6904p;\uc000\u224d\u20d2ash;\u62ac\u0100et\u2ca8\u2cac;\uc000\u2265\u20d2;\uc000>\u20d2nfin;\u69de\u0180Aet\u2cbd\u2cc1\u2cc5rr;\u6902;\uc000\u2264\u20d2\u0100;r\u2cca\u2ccd\uc000<\u20d2ie;\uc000\u22b4\u20d2\u0100At\u2cd8\u2cdcrr;\u6903rie;\uc000\u22b5\u20d2im;\uc000\u223c\u20d2\u0180Aan\u2cf0\u2cf4\u2d02rr;\u61d6r\u0100hr\u2cfa\u2cfdk;\u6923\u0100;o\u13e7\u13e5ear;\u6927\u1253\u1a95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2d2d\0\u2d38\u2d48\u2d60\u2d65\u2d72\u2d84\u1b07\0\0\u2d8d\u2dab\0\u2dc8\u2dce\0\u2ddc\u2e19\u2e2b\u2e3e\u2e43\u0100cs\u2d31\u1a97ute\u803b\xf3\u40f3\u0100iy\u2d3c\u2d45r\u0100;c\u1a9e\u2d42\u803b\xf4\u40f4;\u443e\u0280abios\u1aa0\u2d52\u2d57\u01c8\u2d5alac;\u4151v;\u6a38old;\u69bclig;\u4153\u0100cr\u2d69\u2d6dir;\u69bf;\uc000\ud835\udd2c\u036f\u2d79\0\0\u2d7c\0\u2d82n;\u42dbave\u803b\xf2\u40f2;\u69c1\u0100bm\u2d88\u0df4ar;\u69b5\u0200acit\u2d95\u2d98\u2da5\u2da8r\xf2\u1a80\u0100ir\u2d9d\u2da0r;\u69beoss;\u69bbn\xe5\u0e52;\u69c0\u0180aei\u2db1\u2db5\u2db9cr;\u414dga;\u43c9\u0180cdn\u2dc0\u2dc5\u01cdron;\u43bf;\u69b6pf;\uc000\ud835\udd60\u0180ael\u2dd4\u2dd7\u01d2r;\u69b7rp;\u69b9\u0380;adiosv\u2dea\u2deb\u2dee\u2e08\u2e0d\u2e10\u2e16\u6228r\xf2\u1a86\u0200;efm\u2df7\u2df8\u2e02\u2e05\u6a5dr\u0100;o\u2dfe\u2dff\u6134f\xbb\u2dff\u803b\xaa\u40aa\u803b\xba\u40bagof;\u62b6r;\u6a56lope;\u6a57;\u6a5b\u0180clo\u2e1f\u2e21\u2e27\xf2\u2e01ash\u803b\xf8\u40f8l;\u6298i\u016c\u2e2f\u2e34de\u803b\xf5\u40f5es\u0100;a\u01db\u2e3as;\u6a36ml\u803b\xf6\u40f6bar;\u633d\u0ae1\u2e5e\0\u2e7d\0\u2e80\u2e9d\0\u2ea2\u2eb9\0\0\u2ecb\u0e9c\0\u2f13\0\0\u2f2b\u2fbc\0\u2fc8r\u0200;ast\u0403\u2e67\u2e72\u0e85\u8100\xb6;l\u2e6d\u2e6e\u40b6le\xec\u0403\u0269\u2e78\0\0\u2e7bm;\u6af3;\u6afdy;\u443fr\u0280cimpt\u2e8b\u2e8f\u2e93\u1865\u2e97nt;\u4025od;\u402eil;\u6030enk;\u6031r;\uc000\ud835\udd2d\u0180imo\u2ea8\u2eb0\u2eb4\u0100;v\u2ead\u2eae\u43c6;\u43d5ma\xf4\u0a76ne;\u660e\u0180;tv\u2ebf\u2ec0\u2ec8\u43c0chfork\xbb\u1ffd;\u43d6\u0100au\u2ecf\u2edfn\u0100ck\u2ed5\u2eddk\u0100;h\u21f4\u2edb;\u610e\xf6\u21f4s\u0480;abcdemst\u2ef3\u2ef4\u1908\u2ef9\u2efd\u2f04\u2f06\u2f0a\u2f0e\u402bcir;\u6a23ir;\u6a22\u0100ou\u1d40\u2f02;\u6a25;\u6a72n\u80bb\xb1\u0e9dim;\u6a26wo;\u6a27\u0180ipu\u2f19\u2f20\u2f25ntint;\u6a15f;\uc000\ud835\udd61nd\u803b\xa3\u40a3\u0500;Eaceinosu\u0ec8\u2f3f\u2f41\u2f44\u2f47\u2f81\u2f89\u2f92\u2f7e\u2fb6;\u6ab3p;\u6ab7u\xe5\u0ed9\u0100;c\u0ece\u2f4c\u0300;acens\u0ec8\u2f59\u2f5f\u2f66\u2f68\u2f7eppro\xf8\u2f43urlye\xf1\u0ed9\xf1\u0ece\u0180aes\u2f6f\u2f76\u2f7approx;\u6ab9qq;\u6ab5im;\u62e8i\xed\u0edfme\u0100;s\u2f88\u0eae\u6032\u0180Eas\u2f78\u2f90\u2f7a\xf0\u2f75\u0180dfp\u0eec\u2f99\u2faf\u0180als\u2fa0\u2fa5\u2faalar;\u632eine;\u6312urf;\u6313\u0100;t\u0efb\u2fb4\xef\u0efbrel;\u62b0\u0100ci\u2fc0\u2fc5r;\uc000\ud835\udcc5;\u43c8ncsp;\u6008\u0300fiopsu\u2fda\u22e2\u2fdf\u2fe5\u2feb\u2ff1r;\uc000\ud835\udd2epf;\uc000\ud835\udd62rime;\u6057cr;\uc000\ud835\udcc6\u0180aeo\u2ff8\u3009\u3013t\u0100ei\u2ffe\u3005rnion\xf3\u06b0nt;\u6a16st\u0100;e\u3010\u3011\u403f\xf1\u1f19\xf4\u0f14\u0a80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30e0\u310e\u312b\u3147\u3162\u3172\u318e\u3206\u3215\u3224\u3229\u3258\u326e\u3272\u3290\u32b0\u32b7\u0180art\u3047\u304a\u304cr\xf2\u10b3\xf2\u03ddail;\u691car\xf2\u1c65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307f\u308f\u3094\u30cc\u0100eu\u306d\u3071;\uc000\u223d\u0331te;\u4155i\xe3\u116emptyv;\u69b3g\u0200;del\u0fd1\u3089\u308b\u308d;\u6992;\u69a5\xe5\u0fd1uo\u803b\xbb\u40bbr\u0580;abcfhlpstw\u0fdc\u30ac\u30af\u30b7\u30b9\u30bc\u30be\u30c0\u30c3\u30c7\u30cap;\u6975\u0100;f\u0fe0\u30b4s;\u6920;\u6933s;\u691e\xeb\u225d\xf0\u272el;\u6945im;\u6974l;\u61a3;\u619d\u0100ai\u30d1\u30d5il;\u691ao\u0100;n\u30db\u30dc\u6236al\xf3\u0f1e\u0180abr\u30e7\u30ea\u30eer\xf2\u17e5rk;\u6773\u0100ak\u30f3\u30fdc\u0100ek\u30f9\u30fb;\u407d;\u405d\u0100es\u3102\u3104;\u698cl\u0100du\u310a\u310c;\u698e;\u6990\u0200aeuy\u3117\u311c\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xec\u0ff2\xe2\u30fa;\u4440\u0200clqs\u3134\u3137\u313d\u3144a;\u6937dhar;\u6969uo\u0100;r\u020e\u020dh;\u61b3\u0180acg\u314e\u315f\u0f44l\u0200;ips\u0f78\u3158\u315b\u109cn\xe5\u10bbar\xf4\u0fa9t;\u65ad\u0180ilr\u3169\u1023\u316esht;\u697d;\uc000\ud835\udd2f\u0100ao\u3177\u3186r\u0100du\u317d\u317f\xbb\u047b\u0100;l\u1091\u3184;\u696c\u0100;v\u318b\u318c\u43c1;\u43f1\u0180gns\u3195\u31f9\u31fcht\u0300ahlrst\u31a4\u31b0\u31c2\u31d8\u31e4\u31eerrow\u0100;t\u0fdc\u31ada\xe9\u30c8arpoon\u0100du\u31bb\u31bfow\xee\u317ep\xbb\u1092eft\u0100ah\u31ca\u31d0rrow\xf3\u0feaarpoon\xf3\u0551ightarrows;\u61c9quigarro\xf7\u30cbhreetimes;\u62ccg;\u42daingdotse\xf1\u1f32\u0180ahm\u320d\u3210\u3213r\xf2\u0feaa\xf2\u0551;\u600foust\u0100;a\u321e\u321f\u63b1che\xbb\u321fmid;\u6aee\u0200abpt\u3232\u323d\u3240\u3252\u0100nr\u3237\u323ag;\u67edr;\u61fer\xeb\u1003\u0180afl\u3247\u324a\u324er;\u6986;\uc000\ud835\udd63us;\u6a2eimes;\u6a35\u0100ap\u325d\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6a12ar\xf2\u31e3\u0200achq\u327b\u3280\u10bc\u3285quo;\u603ar;\uc000\ud835\udcc7\u0100bu\u30fb\u328ao\u0100;r\u0214\u0213\u0180hir\u3297\u329b\u32a0re\xe5\u31f8mes;\u62cai\u0200;efl\u32aa\u1059\u1821\u32ab\u65b9tri;\u69celuhar;\u6968;\u611e\u0d61\u32d5\u32db\u32df\u332c\u3338\u3371\0\u337a\u33a4\0\0\u33ec\u33f0\0\u3428\u3448\u345a\u34ad\u34b1\u34ca\u34f1\0\u3616\0\0\u3633cute;\u415bqu\xef\u27ba\u0500;Eaceinpsy\u11ed\u32f3\u32f5\u32ff\u3302\u330b\u330f\u331f\u3326\u3329;\u6ab4\u01f0\u32fa\0\u32fc;\u6ab8on;\u4161u\xe5\u11fe\u0100;d\u11f3\u3307il;\u415frc;\u415d\u0180Eas\u3316\u3318\u331b;\u6ab6p;\u6abaim;\u62e9olint;\u6a13i\xed\u1204;\u4441ot\u0180;be\u3334\u1d47\u3335\u62c5;\u6a66\u0380Aacmstx\u3346\u334a\u3357\u335b\u335e\u3363\u336drr;\u61d8r\u0100hr\u3350\u3352\xeb\u2228\u0100;o\u0a36\u0a34t\u803b\xa7\u40a7i;\u403bwar;\u6929m\u0100in\u3369\xf0nu\xf3\xf1t;\u6736r\u0100;o\u3376\u2055\uc000\ud835\udd30\u0200acoy\u3382\u3386\u3391\u33a0rp;\u666f\u0100hy\u338b\u338fcy;\u4449;\u4448rt\u026d\u3399\0\0\u339ci\xe4\u1464ara\xec\u2e6f\u803b\xad\u40ad\u0100gm\u33a8\u33b4ma\u0180;fv\u33b1\u33b2\u33b2\u43c3;\u43c2\u0400;deglnpr\u12ab\u33c5\u33c9\u33ce\u33d6\u33de\u33e1\u33e6ot;\u6a6a\u0100;q\u12b1\u12b0\u0100;E\u33d3\u33d4\u6a9e;\u6aa0\u0100;E\u33db\u33dc\u6a9d;\u6a9fe;\u6246lus;\u6a24arr;\u6972ar\xf2\u113d\u0200aeit\u33f8\u3408\u340f\u3417\u0100ls\u33fd\u3404lsetm\xe9\u336ahp;\u6a33parsl;\u69e4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341c\u341d\u6aaa\u0100;s\u3422\u3423\u6aac;\uc000\u2aac\ufe00\u0180flp\u342e\u3433\u3442tcy;\u444c\u0100;b\u3438\u3439\u402f\u0100;a\u343e\u343f\u69c4r;\u633ff;\uc000\ud835\udd64a\u0100dr\u344d\u0402es\u0100;u\u3454\u3455\u6660it\xbb\u3455\u0180csu\u3460\u3479\u349f\u0100au\u3465\u346fp\u0100;s\u1188\u346b;\uc000\u2293\ufe00p\u0100;s\u11b4\u3475;\uc000\u2294\ufe00u\u0100bp\u347f\u348f\u0180;es\u1197\u119c\u3486et\u0100;e\u1197\u348d\xf1\u119d\u0180;es\u11a8\u11ad\u3496et\u0100;e\u11a8\u349d\xf1\u11ae\u0180;af\u117b\u34a6\u05b0r\u0165\u34ab\u05b1\xbb\u117car\xf2\u1148\u0200cemt\u34b9\u34be\u34c2\u34c5r;\uc000\ud835\udcc8tm\xee\xf1i\xec\u3415ar\xe6\u11be\u0100ar\u34ce\u34d5r\u0100;f\u34d4\u17bf\u6606\u0100an\u34da\u34edight\u0100ep\u34e3\u34eapsilo\xee\u1ee0h\xe9\u2eafs\xbb\u2852\u0280bcmnp\u34fb\u355e\u1209\u358b\u358e\u0480;Edemnprs\u350e\u350f\u3511\u3515\u351e\u3523\u352c\u3531\u3536\u6282;\u6ac5ot;\u6abd\u0100;d\u11da\u351aot;\u6ac3ult;\u6ac1\u0100Ee\u3528\u352a;\u6acb;\u628alus;\u6abfarr;\u6979\u0180eiu\u353d\u3552\u3555t\u0180;en\u350e\u3545\u354bq\u0100;q\u11da\u350feq\u0100;q\u352b\u3528m;\u6ac7\u0100bp\u355a\u355c;\u6ad5;\u6ad3c\u0300;acens\u11ed\u356c\u3572\u3579\u357b\u3326ppro\xf8\u32faurlye\xf1\u11fe\xf1\u11f3\u0180aes\u3582\u3588\u331bppro\xf8\u331aq\xf1\u3317g;\u666a\u0680123;Edehlmnps\u35a9\u35ac\u35af\u121c\u35b2\u35b4\u35c0\u35c9\u35d5\u35da\u35df\u35e8\u35ed\u803b\xb9\u40b9\u803b\xb2\u40b2\u803b\xb3\u40b3;\u6ac6\u0100os\u35b9\u35bct;\u6abeub;\u6ad8\u0100;d\u1222\u35c5ot;\u6ac4s\u0100ou\u35cf\u35d2l;\u67c9b;\u6ad7arr;\u697bult;\u6ac2\u0100Ee\u35e4\u35e6;\u6acc;\u628blus;\u6ac0\u0180eiu\u35f4\u3609\u360ct\u0180;en\u121c\u35fc\u3602q\u0100;q\u1222\u35b2eq\u0100;q\u35e7\u35e4m;\u6ac8\u0100bp\u3611\u3613;\u6ad4;\u6ad6\u0180Aan\u361c\u3620\u362drr;\u61d9r\u0100hr\u3626\u3628\xeb\u222e\u0100;o\u0a2b\u0a29war;\u692alig\u803b\xdf\u40df\u0be1\u3651\u365d\u3660\u12ce\u3673\u3679\0\u367e\u36c2\0\0\0\0\0\u36db\u3703\0\u3709\u376c\0\0\0\u3787\u0272\u3656\0\0\u365bget;\u6316;\u43c4r\xeb\u0e5f\u0180aey\u3666\u366b\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uc000\ud835\udd31\u0200eiko\u3686\u369d\u36b5\u36bc\u01f2\u368b\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369b\u43b8ym;\u43d1\u0100cn\u36a2\u36b2k\u0100as\u36a8\u36aeppro\xf8\u12c1im\xbb\u12acs\xf0\u129e\u0100as\u36ba\u36ae\xf0\u12c1rn\u803b\xfe\u40fe\u01ec\u031f\u36c6\u22e7es\u8180\xd7;bd\u36cf\u36d0\u36d8\u40d7\u0100;a\u190f\u36d5r;\u6a31;\u6a30\u0180eps\u36e1\u36e3\u3700\xe1\u2a4d\u0200;bcf\u0486\u36ec\u36f0\u36f4ot;\u6336ir;\u6af1\u0100;o\u36f9\u36fc\uc000\ud835\udd65rk;\u6ada\xe1\u3362rime;\u6034\u0180aip\u370f\u3712\u3764d\xe5\u1248\u0380adempst\u3721\u374d\u3740\u3751\u3757\u375c\u375fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65b5own\xbb\u1dbbeft\u0100;e\u2800\u373e\xf1\u092e;\u625cight\u0100;e\u32aa\u374b\xf1\u105aot;\u65ecinus;\u6a3alus;\u6a39b;\u69cdime;\u6a3bezium;\u63e2\u0180cht\u3772\u377d\u3781\u0100ry\u3777\u377b;\uc000\ud835\udcc9;\u4446cy;\u445brok;\u4167\u0100io\u378b\u378ex\xf4\u1777head\u0100lr\u3797\u37a0eftarro\xf7\u084fightarrow\xbb\u0f5d\u0900AHabcdfghlmoprstuw\u37d0\u37d3\u37d7\u37e4\u37f0\u37fc\u380e\u381c\u3823\u3834\u3851\u385d\u386b\u38a9\u38cc\u38d2\u38ea\u38f6r\xf2\u03edar;\u6963\u0100cr\u37dc\u37e2ute\u803b\xfa\u40fa\xf2\u1150r\u01e3\u37ea\0\u37edy;\u445eve;\u416d\u0100iy\u37f5\u37farc\u803b\xfb\u40fb;\u4443\u0180abh\u3803\u3806\u380br\xf2\u13adlac;\u4171a\xf2\u13c3\u0100ir\u3813\u3818sht;\u697e;\uc000\ud835\udd32rave\u803b\xf9\u40f9\u0161\u3827\u3831r\u0100lr\u382c\u382e\xbb\u0957\xbb\u1083lk;\u6580\u0100ct\u3839\u384d\u026f\u383f\0\0\u384arn\u0100;e\u3845\u3846\u631cr\xbb\u3846op;\u630fri;\u65f8\u0100al\u3856\u385acr;\u416b\u80bb\xa8\u0349\u0100gp\u3862\u3866on;\u4173f;\uc000\ud835\udd66\u0300adhlsu\u114b\u3878\u387d\u1372\u3891\u38a0own\xe1\u13b3arpoon\u0100lr\u3888\u388cef\xf4\u382digh\xf4\u382fi\u0180;hl\u3899\u389a\u389c\u43c5\xbb\u13faon\xbb\u389aparrows;\u61c8\u0180cit\u38b0\u38c4\u38c8\u026f\u38b6\0\0\u38c1rn\u0100;e\u38bc\u38bd\u631dr\xbb\u38bdop;\u630eng;\u416fri;\u65f9cr;\uc000\ud835\udcca\u0180dir\u38d9\u38dd\u38e2ot;\u62f0lde;\u4169i\u0100;f\u3730\u38e8\xbb\u1813\u0100am\u38ef\u38f2r\xf2\u38a8l\u803b\xfc\u40fcangle;\u69a7\u0780ABDacdeflnoprsz\u391c\u391f\u3929\u392d\u39b5\u39b8\u39bd\u39df\u39e4\u39e8\u39f3\u39f9\u39fd\u3a01\u3a20r\xf2\u03f7ar\u0100;v\u3926\u3927\u6ae8;\u6ae9as\xe8\u03e1\u0100nr\u3932\u3937grt;\u699c\u0380eknprst\u34e3\u3946\u394b\u3952\u395d\u3964\u3996app\xe1\u2415othin\xe7\u1e96\u0180hir\u34eb\u2ec8\u3959op\xf4\u2fb5\u0100;h\u13b7\u3962\xef\u318d\u0100iu\u3969\u396dgm\xe1\u33b3\u0100bp\u3972\u3984setneq\u0100;q\u397d\u3980\uc000\u228a\ufe00;\uc000\u2acb\ufe00setneq\u0100;q\u398f\u3992\uc000\u228b\ufe00;\uc000\u2acc\ufe00\u0100hr\u399b\u399fet\xe1\u369ciangle\u0100lr\u39aa\u39afeft\xbb\u0925ight\xbb\u1051y;\u4432ash\xbb\u1036\u0180elr\u39c4\u39d2\u39d7\u0180;be\u2dea\u39cb\u39cfar;\u62bbq;\u625alip;\u62ee\u0100bt\u39dc\u1468a\xf2\u1469r;\uc000\ud835\udd33tr\xe9\u39aesu\u0100bp\u39ef\u39f1\xbb\u0d1c\xbb\u0d59pf;\uc000\ud835\udd67ro\xf0\u0efbtr\xe9\u39b4\u0100cu\u3a06\u3a0br;\uc000\ud835\udccb\u0100bp\u3a10\u3a18n\u0100Ee\u3980\u3a16\xbb\u397en\u0100Ee\u3992\u3a1e\xbb\u3990igzag;\u699a\u0380cefoprs\u3a36\u3a3b\u3a56\u3a5b\u3a54\u3a61\u3a6airc;\u4175\u0100di\u3a40\u3a51\u0100bg\u3a45\u3a49ar;\u6a5fe\u0100;q\u15fa\u3a4f;\u6259erp;\u6118r;\uc000\ud835\udd34pf;\uc000\ud835\udd68\u0100;e\u1479\u3a66at\xe8\u1479cr;\uc000\ud835\udccc\u0ae3\u178e\u3a87\0\u3a8b\0\u3a90\u3a9b\0\0\u3a9d\u3aa8\u3aab\u3aaf\0\0\u3ac3\u3ace\0\u3ad8\u17dc\u17dftr\xe9\u17d1r;\uc000\ud835\udd35\u0100Aa\u3a94\u3a97r\xf2\u03c3r\xf2\u09f6;\u43be\u0100Aa\u3aa1\u3aa4r\xf2\u03b8r\xf2\u09eba\xf0\u2713is;\u62fb\u0180dpt\u17a4\u3ab5\u3abe\u0100fl\u3aba\u17a9;\uc000\ud835\udd69im\xe5\u17b2\u0100Aa\u3ac7\u3acar\xf2\u03cer\xf2\u0a01\u0100cq\u3ad2\u17b8r;\uc000\ud835\udccd\u0100pt\u17d6\u3adcr\xe9\u17d4\u0400acefiosu\u3af0\u3afd\u3b08\u3b0c\u3b11\u3b15\u3b1b\u3b21c\u0100uy\u3af6\u3afbte\u803b\xfd\u40fd;\u444f\u0100iy\u3b02\u3b06rc;\u4177;\u444bn\u803b\xa5\u40a5r;\uc000\ud835\udd36cy;\u4457pf;\uc000\ud835\udd6acr;\uc000\ud835\udcce\u0100cm\u3b26\u3b29y;\u444el\u803b\xff\u40ff\u0500acdefhiosw\u3b42\u3b48\u3b54\u3b58\u3b64\u3b69\u3b6d\u3b74\u3b7a\u3b80cute;\u417a\u0100ay\u3b4d\u3b52ron;\u417e;\u4437ot;\u417c\u0100et\u3b5d\u3b61tr\xe6\u155fa;\u43b6r;\uc000\ud835\udd37cy;\u4436grarr;\u61ddpf;\uc000\ud835\udd6bcr;\uc000\ud835\udccf\u0100jn\u3b85\u3b87;\u600dj;\u600c".split("").map((c)=>c.charCodeAt(0)));
 //# sourceMappingURL=decode-data-html.js.map
}}),
"[project]/apps/website/docs/node_modules/entities/lib/esm/generated/decode-data-xml.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// Generated using scripts/write-decode-map.ts
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = new Uint16Array(// prettier-ignore
"\u0200aglq\t\x15\x18\x1b\u026d\x0f\0\0\x12p;\u4026os;\u4027t;\u403et;\u403cuot;\u4022".split("").map((c)=>c.charCodeAt(0)));
 //# sourceMappingURL=decode-data-xml.js.map
}}),
"[project]/apps/website/docs/node_modules/entities/lib/esm/decode_codepoint.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134
__turbopack_esm__({
    "default": (()=>decodeCodePoint),
    "fromCodePoint": (()=>fromCodePoint),
    "replaceCodePoint": (()=>replaceCodePoint)
});
var _a;
const decodeMap = new Map([
    [
        0,
        65533
    ],
    // C1 Unicode control character reference replacements
    [
        128,
        8364
    ],
    [
        130,
        8218
    ],
    [
        131,
        402
    ],
    [
        132,
        8222
    ],
    [
        133,
        8230
    ],
    [
        134,
        8224
    ],
    [
        135,
        8225
    ],
    [
        136,
        710
    ],
    [
        137,
        8240
    ],
    [
        138,
        352
    ],
    [
        139,
        8249
    ],
    [
        140,
        338
    ],
    [
        142,
        381
    ],
    [
        145,
        8216
    ],
    [
        146,
        8217
    ],
    [
        147,
        8220
    ],
    [
        148,
        8221
    ],
    [
        149,
        8226
    ],
    [
        150,
        8211
    ],
    [
        151,
        8212
    ],
    [
        152,
        732
    ],
    [
        153,
        8482
    ],
    [
        154,
        353
    ],
    [
        155,
        8250
    ],
    [
        156,
        339
    ],
    [
        158,
        382
    ],
    [
        159,
        376
    ]
]);
const fromCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function(codePoint) {
    let output = "";
    if (codePoint > 0xffff) {
        codePoint -= 0x10000;
        output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);
        codePoint = 0xdc00 | codePoint & 0x3ff;
    }
    output += String.fromCharCode(codePoint);
    return output;
};
function replaceCodePoint(codePoint) {
    var _a;
    if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) {
        return 0xfffd;
    }
    return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;
}
function decodeCodePoint(codePoint) {
    return fromCodePoint(replaceCodePoint(codePoint));
} //# sourceMappingURL=decode_codepoint.js.map
}}),
"[project]/apps/website/docs/node_modules/entities/lib/esm/decode.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "BinTrieFlags": (()=>BinTrieFlags),
    "DecodingMode": (()=>DecodingMode),
    "EntityDecoder": (()=>EntityDecoder),
    "decodeHTML": (()=>decodeHTML),
    "decodeHTMLAttribute": (()=>decodeHTMLAttribute),
    "decodeHTMLStrict": (()=>decodeHTMLStrict),
    "decodeXML": (()=>decodeXML),
    "determineBranch": (()=>determineBranch)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$entities$2f$lib$2f$esm$2f$decode_codepoint$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/entities/lib/esm/decode_codepoint.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$entities$2f$lib$2f$esm$2f$generated$2f$decode$2d$data$2d$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/entities/lib/esm/generated/decode-data-html.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$entities$2f$lib$2f$esm$2f$generated$2f$decode$2d$data$2d$xml$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/entities/lib/esm/generated/decode-data-xml.js [app-rsc] (ecmascript)");
;
;
;
;
;
var CharCodes;
(function(CharCodes) {
    CharCodes[CharCodes["NUM"] = 35] = "NUM";
    CharCodes[CharCodes["SEMI"] = 59] = "SEMI";
    CharCodes[CharCodes["EQUALS"] = 61] = "EQUALS";
    CharCodes[CharCodes["ZERO"] = 48] = "ZERO";
    CharCodes[CharCodes["NINE"] = 57] = "NINE";
    CharCodes[CharCodes["LOWER_A"] = 97] = "LOWER_A";
    CharCodes[CharCodes["LOWER_F"] = 102] = "LOWER_F";
    CharCodes[CharCodes["LOWER_X"] = 120] = "LOWER_X";
    CharCodes[CharCodes["LOWER_Z"] = 122] = "LOWER_Z";
    CharCodes[CharCodes["UPPER_A"] = 65] = "UPPER_A";
    CharCodes[CharCodes["UPPER_F"] = 70] = "UPPER_F";
    CharCodes[CharCodes["UPPER_Z"] = 90] = "UPPER_Z";
})(CharCodes || (CharCodes = {}));
/** Bit that needs to be set to convert an upper case ASCII character to lower case */ const TO_LOWER_BIT = 0b100000;
var BinTrieFlags;
(function(BinTrieFlags) {
    BinTrieFlags[BinTrieFlags["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
    BinTrieFlags[BinTrieFlags["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
    BinTrieFlags[BinTrieFlags["JUMP_TABLE"] = 127] = "JUMP_TABLE";
})(BinTrieFlags || (BinTrieFlags = {}));
function isNumber(code) {
    return code >= CharCodes.ZERO && code <= CharCodes.NINE;
}
function isHexadecimalCharacter(code) {
    return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;
}
function isAsciiAlphaNumeric(code) {
    return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);
}
/**
 * Checks if the given character is a valid end character for an entity in an attribute.
 *
 * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.
 * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state
 */ function isEntityInAttributeInvalidEnd(code) {
    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
}
var EntityDecoderState;
(function(EntityDecoderState) {
    EntityDecoderState[EntityDecoderState["EntityStart"] = 0] = "EntityStart";
    EntityDecoderState[EntityDecoderState["NumericStart"] = 1] = "NumericStart";
    EntityDecoderState[EntityDecoderState["NumericDecimal"] = 2] = "NumericDecimal";
    EntityDecoderState[EntityDecoderState["NumericHex"] = 3] = "NumericHex";
    EntityDecoderState[EntityDecoderState["NamedEntity"] = 4] = "NamedEntity";
})(EntityDecoderState || (EntityDecoderState = {}));
var DecodingMode;
(function(DecodingMode) {
    /** Entities in text nodes that can end with any character. */ DecodingMode[DecodingMode["Legacy"] = 0] = "Legacy";
    /** Only allow entities terminated with a semicolon. */ DecodingMode[DecodingMode["Strict"] = 1] = "Strict";
    /** Entities in attributes have limitations on ending characters. */ DecodingMode[DecodingMode["Attribute"] = 2] = "Attribute";
})(DecodingMode || (DecodingMode = {}));
class EntityDecoder {
    constructor(/** The tree used to decode entities. */ decodeTree, /**
     * The function that is called when a codepoint is decoded.
     *
     * For multi-byte named entities, this will be called multiple times,
     * with the second codepoint, and the same `consumed` value.
     *
     * @param codepoint The decoded codepoint.
     * @param consumed The number of bytes consumed by the decoder.
     */ emitCodePoint, /** An object that is used to produce errors. */ errors){
        this.decodeTree = decodeTree;
        this.emitCodePoint = emitCodePoint;
        this.errors = errors;
        /** The current state of the decoder. */ this.state = EntityDecoderState.EntityStart;
        /** Characters that were consumed while parsing an entity. */ this.consumed = 1;
        /**
         * The result of the entity.
         *
         * Either the result index of a numeric entity, or the codepoint of a
         * numeric entity.
         */ this.result = 0;
        /** The current index in the decode tree. */ this.treeIndex = 0;
        /** The number of characters that were consumed in excess. */ this.excess = 1;
        /** The mode in which the decoder is operating. */ this.decodeMode = DecodingMode.Strict;
    }
    /** Resets the instance to make it reusable. */ startEntity(decodeMode) {
        this.decodeMode = decodeMode;
        this.state = EntityDecoderState.EntityStart;
        this.result = 0;
        this.treeIndex = 0;
        this.excess = 1;
        this.consumed = 1;
    }
    /**
     * Write an entity to the decoder. This can be called multiple times with partial entities.
     * If the entity is incomplete, the decoder will return -1.
     *
     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
     * entity is incomplete, and resume when the next string is written.
     *
     * @param string The string containing the entity (or a continuation of the entity).
     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ write(str, offset) {
        switch(this.state){
            case EntityDecoderState.EntityStart:
                {
                    if (str.charCodeAt(offset) === CharCodes.NUM) {
                        this.state = EntityDecoderState.NumericStart;
                        this.consumed += 1;
                        return this.stateNumericStart(str, offset + 1);
                    }
                    this.state = EntityDecoderState.NamedEntity;
                    return this.stateNamedEntity(str, offset);
                }
            case EntityDecoderState.NumericStart:
                {
                    return this.stateNumericStart(str, offset);
                }
            case EntityDecoderState.NumericDecimal:
                {
                    return this.stateNumericDecimal(str, offset);
                }
            case EntityDecoderState.NumericHex:
                {
                    return this.stateNumericHex(str, offset);
                }
            case EntityDecoderState.NamedEntity:
                {
                    return this.stateNamedEntity(str, offset);
                }
        }
    }
    /**
     * Switches between the numeric decimal and hexadecimal states.
     *
     * Equivalent to the `Numeric character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ stateNumericStart(str, offset) {
        if (offset >= str.length) {
            return -1;
        }
        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
            this.state = EntityDecoderState.NumericHex;
            this.consumed += 1;
            return this.stateNumericHex(str, offset + 1);
        }
        this.state = EntityDecoderState.NumericDecimal;
        return this.stateNumericDecimal(str, offset);
    }
    addToNumericResult(str, start, end, base) {
        if (start !== end) {
            const digitCount = end - start;
            this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);
            this.consumed += digitCount;
        }
    }
    /**
     * Parses a hexadecimal numeric entity.
     *
     * Equivalent to the `Hexademical character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ stateNumericHex(str, offset) {
        const startIdx = offset;
        while(offset < str.length){
            const char = str.charCodeAt(offset);
            if (isNumber(char) || isHexadecimalCharacter(char)) {
                offset += 1;
            } else {
                this.addToNumericResult(str, startIdx, offset, 16);
                return this.emitNumericEntity(char, 3);
            }
        }
        this.addToNumericResult(str, startIdx, offset, 16);
        return -1;
    }
    /**
     * Parses a decimal numeric entity.
     *
     * Equivalent to the `Decimal character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ stateNumericDecimal(str, offset) {
        const startIdx = offset;
        while(offset < str.length){
            const char = str.charCodeAt(offset);
            if (isNumber(char)) {
                offset += 1;
            } else {
                this.addToNumericResult(str, startIdx, offset, 10);
                return this.emitNumericEntity(char, 2);
            }
        }
        this.addToNumericResult(str, startIdx, offset, 10);
        return -1;
    }
    /**
     * Validate and emit a numeric entity.
     *
     * Implements the logic from the `Hexademical character reference start
     * state` and `Numeric character reference end state` in the HTML spec.
     *
     * @param lastCp The last code point of the entity. Used to see if the
     *               entity was terminated with a semicolon.
     * @param expectedLength The minimum number of characters that should be
     *                       consumed. Used to validate that at least one digit
     *                       was consumed.
     * @returns The number of characters that were consumed.
     */ emitNumericEntity(lastCp, expectedLength) {
        var _a;
        // Ensure we consumed at least one digit.
        if (this.consumed <= expectedLength) {
            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
            return 0;
        }
        // Figure out if this is a legit end of the entity
        if (lastCp === CharCodes.SEMI) {
            this.consumed += 1;
        } else if (this.decodeMode === DecodingMode.Strict) {
            return 0;
        }
        this.emitCodePoint((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$entities$2f$lib$2f$esm$2f$decode_codepoint$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["replaceCodePoint"])(this.result), this.consumed);
        if (this.errors) {
            if (lastCp !== CharCodes.SEMI) {
                this.errors.missingSemicolonAfterCharacterReference();
            }
            this.errors.validateNumericCharacterReference(this.result);
        }
        return this.consumed;
    }
    /**
     * Parses a named entity.
     *
     * Equivalent to the `Named character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ stateNamedEntity(str, offset) {
        const { decodeTree } = this;
        let current = decodeTree[this.treeIndex];
        // The mask is the number of bytes of the value, including the current byte.
        let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
        for(; offset < str.length; offset++, this.excess++){
            const char = str.charCodeAt(offset);
            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
            if (this.treeIndex < 0) {
                return this.result === 0 || this.decodeMode === DecodingMode.Attribute && // We shouldn't have consumed any characters after the entity,
                (valueLength === 0 || // And there should be no invalid characters.
                isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
            }
            current = decodeTree[this.treeIndex];
            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
            // If the branch is a value, store it and continue
            if (valueLength !== 0) {
                // If the entity is terminated by a semicolon, we are done.
                if (char === CharCodes.SEMI) {
                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
                }
                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.
                if (this.decodeMode !== DecodingMode.Strict) {
                    this.result = this.treeIndex;
                    this.consumed += this.excess;
                    this.excess = 0;
                }
            }
        }
        return -1;
    }
    /**
     * Emit a named entity that was not terminated with a semicolon.
     *
     * @returns The number of characters consumed.
     */ emitNotTerminatedNamedEntity() {
        var _a;
        const { result, decodeTree } = this;
        const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
        this.emitNamedEntityData(result, valueLength, this.consumed);
        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();
        return this.consumed;
    }
    /**
     * Emit a named entity.
     *
     * @param result The index of the entity in the decode tree.
     * @param valueLength The number of bytes in the entity.
     * @param consumed The number of characters consumed.
     *
     * @returns The number of characters consumed.
     */ emitNamedEntityData(result, valueLength, consumed) {
        const { decodeTree } = this;
        this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);
        if (valueLength === 3) {
            // For multi-byte values, we need to emit the second byte.
            this.emitCodePoint(decodeTree[result + 2], consumed);
        }
        return consumed;
    }
    /**
     * Signal to the parser that the end of the input was reached.
     *
     * Remaining data will be emitted and relevant errors will be produced.
     *
     * @returns The number of characters consumed.
     */ end() {
        var _a;
        switch(this.state){
            case EntityDecoderState.NamedEntity:
                {
                    // Emit a named entity if we have one.
                    return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
                }
            // Otherwise, emit a numeric entity if we have one.
            case EntityDecoderState.NumericDecimal:
                {
                    return this.emitNumericEntity(0, 2);
                }
            case EntityDecoderState.NumericHex:
                {
                    return this.emitNumericEntity(0, 3);
                }
            case EntityDecoderState.NumericStart:
                {
                    (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
                    return 0;
                }
            case EntityDecoderState.EntityStart:
                {
                    // Return 0 if we have no entity.
                    return 0;
                }
        }
    }
}
/**
 * Creates a function that decodes entities in a string.
 *
 * @param decodeTree The decode tree.
 * @returns A function that decodes entities in a string.
 */ function getDecoder(decodeTree) {
    let ret = "";
    const decoder = new EntityDecoder(decodeTree, (str)=>ret += (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$entities$2f$lib$2f$esm$2f$decode_codepoint$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fromCodePoint"])(str));
    return function decodeWithTrie(str, decodeMode) {
        let lastIndex = 0;
        let offset = 0;
        while((offset = str.indexOf("&", offset)) >= 0){
            ret += str.slice(lastIndex, offset);
            decoder.startEntity(decodeMode);
            const len = decoder.write(str, // Skip the "&"
            offset + 1);
            if (len < 0) {
                lastIndex = offset + decoder.end();
                break;
            }
            lastIndex = offset + len;
            // If `len` is 0, skip the current `&` and continue.
            offset = len === 0 ? lastIndex + 1 : lastIndex;
        }
        const result = ret + str.slice(lastIndex);
        // Make sure we don't keep a reference to the final string.
        ret = "";
        return result;
    };
}
function determineBranch(decodeTree, current, nodeIdx, char) {
    const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
    const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
    // Case 1: Single branch encoded in jump offset
    if (branchCount === 0) {
        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
    }
    // Case 2: Multiple branches encoded in jump table
    if (jumpOffset) {
        const value = char - jumpOffset;
        return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
    }
    // Case 3: Multiple branches encoded in dictionary
    // Binary search for the character.
    let lo = nodeIdx;
    let hi = lo + branchCount - 1;
    while(lo <= hi){
        const mid = lo + hi >>> 1;
        const midVal = decodeTree[mid];
        if (midVal < char) {
            lo = mid + 1;
        } else if (midVal > char) {
            hi = mid - 1;
        } else {
            return decodeTree[mid + branchCount];
        }
    }
    return -1;
}
const htmlDecoder = getDecoder(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$entities$2f$lib$2f$esm$2f$generated$2f$decode$2d$data$2d$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]);
const xmlDecoder = getDecoder(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$entities$2f$lib$2f$esm$2f$generated$2f$decode$2d$data$2d$xml$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]);
function decodeHTML(str, mode = DecodingMode.Legacy) {
    return htmlDecoder(str, mode);
}
function decodeHTMLAttribute(str) {
    return htmlDecoder(str, DecodingMode.Attribute);
}
function decodeHTMLStrict(str) {
    return htmlDecoder(str, DecodingMode.Strict);
}
function decodeXML(str) {
    return xmlDecoder(str, DecodingMode.Strict);
} //# sourceMappingURL=decode.js.map
}}),
"[project]/apps/website/docs/node_modules/entities/lib/esm/decode.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$entities$2f$lib$2f$esm$2f$generated$2f$decode$2d$data$2d$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/entities/lib/esm/generated/decode-data-html.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$entities$2f$lib$2f$esm$2f$generated$2f$decode$2d$data$2d$xml$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/entities/lib/esm/generated/decode-data-xml.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$entities$2f$lib$2f$esm$2f$decode_codepoint$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/entities/lib/esm/decode_codepoint.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$entities$2f$lib$2f$esm$2f$decode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/entities/lib/esm/decode.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/apps/website/docs/node_modules/entities/lib/esm/generated/decode-data-html.js [app-rsc] (ecmascript) <export default as htmlDecodeTree>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "htmlDecodeTree": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$entities$2f$lib$2f$esm$2f$generated$2f$decode$2d$data$2d$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$entities$2f$lib$2f$esm$2f$generated$2f$decode$2d$data$2d$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/entities/lib/esm/generated/decode-data-html.js [app-rsc] (ecmascript)");
}}),
"[project]/apps/website/docs/node_modules/entities/lib/esm/escape.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "encodeXML": (()=>encodeXML),
    "escape": (()=>escape),
    "escapeAttribute": (()=>escapeAttribute),
    "escapeText": (()=>escapeText),
    "escapeUTF8": (()=>escapeUTF8),
    "getCodePoint": (()=>getCodePoint),
    "xmlReplacer": (()=>xmlReplacer)
});
const xmlReplacer = /["&'<>$\x80-\uFFFF]/g;
const xmlCodeMap = new Map([
    [
        34,
        "&quot;"
    ],
    [
        38,
        "&amp;"
    ],
    [
        39,
        "&apos;"
    ],
    [
        60,
        "&lt;"
    ],
    [
        62,
        "&gt;"
    ]
]);
const getCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
String.prototype.codePointAt != null ? (str, index)=>str.codePointAt(index) : (c, index)=>(c.charCodeAt(index) & 0xfc00) === 0xd800 ? (c.charCodeAt(index) - 0xd800) * 0x400 + c.charCodeAt(index + 1) - 0xdc00 + 0x10000 : c.charCodeAt(index);
function encodeXML(str) {
    let ret = "";
    let lastIdx = 0;
    let match;
    while((match = xmlReplacer.exec(str)) !== null){
        const i = match.index;
        const char = str.charCodeAt(i);
        const next = xmlCodeMap.get(char);
        if (next !== undefined) {
            ret += str.substring(lastIdx, i) + next;
            lastIdx = i + 1;
        } else {
            ret += `${str.substring(lastIdx, i)}&#x${getCodePoint(str, i).toString(16)};`;
            // Increase by 1 if we have a surrogate pair
            lastIdx = xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);
        }
    }
    return ret + str.substr(lastIdx);
}
const escape = encodeXML;
/**
 * Creates a function that escapes all characters matched by the given regular
 * expression using the given map of characters to escape to their entities.
 *
 * @param regex Regular expression to match characters to escape.
 * @param map Map of characters to escape to their entities.
 *
 * @returns Function that escapes all characters matched by the given regular
 * expression using the given map of characters to escape to their entities.
 */ function getEscaper(regex, map) {
    return function escape(data) {
        let match;
        let lastIdx = 0;
        let result = "";
        while(match = regex.exec(data)){
            if (lastIdx !== match.index) {
                result += data.substring(lastIdx, match.index);
            }
            // We know that this character will be in the map.
            result += map.get(match[0].charCodeAt(0));
            // Every match will be of length 1
            lastIdx = match.index + 1;
        }
        return result + data.substring(lastIdx);
    };
}
const escapeUTF8 = getEscaper(/[&<>'"]/g, xmlCodeMap);
const escapeAttribute = getEscaper(/["&\u00A0]/g, new Map([
    [
        34,
        "&quot;"
    ],
    [
        38,
        "&amp;"
    ],
    [
        160,
        "&nbsp;"
    ]
]));
const escapeText = getEscaper(/[&<>\u00A0]/g, new Map([
    [
        38,
        "&amp;"
    ],
    [
        60,
        "&lt;"
    ],
    [
        62,
        "&gt;"
    ],
    [
        160,
        "&nbsp;"
    ]
])); //# sourceMappingURL=escape.js.map
}}),
"[project]/apps/website/docs/node_modules/vfile-location/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {VFile, Value} from 'vfile'
 * @import {Location} from 'vfile-location'
 */ /**
 * Create an index of the given document to translate between line/column and
 * offset based positional info.
 *
 * Also implemented in Rust in [`wooorm/markdown-rs`][markdown-rs].
 *
 * [markdown-rs]: https://github.com/wooorm/markdown-rs/blob/main/src/util/location.rs
 *
 * @param {VFile | Value} file
 *   File to index.
 * @returns {Location}
 *   Accessors for index.
 */ __turbopack_esm__({
    "location": (()=>location)
});
function location(file) {
    const value = String(file);
    /**
   * List, where each index is a line number (0-based), and each value is the
   * byte index *after* where the line ends.
   *
   * @type {Array<number>}
   */ const indices = [];
    return {
        toOffset,
        toPoint
    };
    "TURBOPACK unreachable";
    /** @type {Location['toPoint']} */ function toPoint(offset) {
        if (typeof offset === 'number' && offset > -1 && offset <= value.length) {
            let index = 0;
            while(true){
                let end = indices[index];
                if (end === undefined) {
                    const eol = next(value, indices[index - 1]);
                    end = eol === -1 ? value.length + 1 : eol + 1;
                    indices[index] = end;
                }
                if (end > offset) {
                    return {
                        line: index + 1,
                        column: offset - (index > 0 ? indices[index - 1] : 0) + 1,
                        offset
                    };
                }
                index++;
            }
        }
    }
    /** @type {Location['toOffset']} */ function toOffset(point) {
        if (point && typeof point.line === 'number' && typeof point.column === 'number' && !Number.isNaN(point.line) && !Number.isNaN(point.column)) {
            while(indices.length < point.line){
                const from = indices[indices.length - 1];
                const eol = next(value, from);
                const end = eol === -1 ? value.length + 1 : eol + 1;
                if (from === end) break;
                indices.push(end);
            }
            const offset = (point.line > 1 ? indices[point.line - 2] : 0) + point.column - 1;
            // The given `column` could not exist on this line.
            if (offset < indices[point.line - 1]) return offset;
        }
    }
}
/**
 * @param {string} value
 * @param {number} from
 */ function next(value, from) {
    const cr = value.indexOf('\r', from);
    const lf = value.indexOf('\n', from);
    if (lf === -1) return cr;
    if (cr === -1 || cr + 1 === lf) return lf;
    return cr < lf ? cr : lf;
}
}}),
"[project]/apps/website/docs/node_modules/web-namespaces/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Map of web namespaces.
 *
 * @type {Record<string, string>}
 */ __turbopack_esm__({
    "webNamespaces": (()=>webNamespaces)
});
const webNamespaces = {
    html: 'http://www.w3.org/1999/xhtml',
    mathml: 'http://www.w3.org/1998/Math/MathML',
    svg: 'http://www.w3.org/2000/svg',
    xlink: 'http://www.w3.org/1999/xlink',
    xml: 'http://www.w3.org/XML/1998/namespace',
    xmlns: 'http://www.w3.org/2000/xmlns/'
};
}}),
"[project]/apps/website/docs/node_modules/hast-util-parse-selector/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 */ /**
 * @template {string} SimpleSelector
 *   Selector type.
 * @template {string} DefaultTagName
 *   Default tag name.
 * @typedef {(
 *   SimpleSelector extends ''
 *     ? DefaultTagName
 *     : SimpleSelector extends `${infer TagName}.${infer Rest}`
 *     ? ExtractTagName<TagName, DefaultTagName>
 *     : SimpleSelector extends `${infer TagName}#${infer Rest}`
 *     ? ExtractTagName<TagName, DefaultTagName>
 *     : SimpleSelector extends string
 *     ? SimpleSelector
 *     : DefaultTagName
 * )} ExtractTagName
 *   Extract tag name from a simple selector.
 */ __turbopack_esm__({
    "parseSelector": (()=>parseSelector)
});
const search = /[#.]/g;
function parseSelector(selector, defaultTagName) {
    const value = selector || '';
    /** @type {Properties} */ const props = {};
    let start = 0;
    /** @type {string | undefined} */ let previous;
    /** @type {string | undefined} */ let tagName;
    while(start < value.length){
        search.lastIndex = start;
        const match = search.exec(value);
        const subvalue = value.slice(start, match ? match.index : value.length);
        if (subvalue) {
            if (!previous) {
                tagName = subvalue;
            } else if (previous === '#') {
                props.id = subvalue;
            } else if (Array.isArray(props.className)) {
                props.className.push(subvalue);
            } else {
                props.className = [
                    subvalue
                ];
            }
            start += subvalue.length;
        }
        if (match) {
            previous = match[0];
            start++;
        }
    }
    return {
        type: 'element',
        // @ts-expect-error: tag name is parsed.
        tagName: tagName || defaultTagName || 'div',
        properties: props,
        children: []
    };
}
}}),
"[project]/apps/website/docs/node_modules/hastscript/lib/create-h.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Nodes} Nodes
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').RootContent} RootContent
 *
 * @typedef {import('property-information').Info} Info
 * @typedef {import('property-information').Schema} Schema
 */ /**
 * @typedef {Element | Root} Result
 *   Result from a `h` (or `s`) call.
 *
 * @typedef {number | string} StyleValue
 *   Value for a CSS style field.
 * @typedef {Record<string, StyleValue>} Style
 *   Supported value of a `style` prop.
 * @typedef {boolean | number | string | null | undefined} PrimitiveValue
 *   Primitive property value.
 * @typedef {Array<number | string>} ArrayValue
 *   List of property values for space- or comma separated values (such as `className`).
 * @typedef {ArrayValue | PrimitiveValue} PropertyValue
 *   Primitive value or list value.
 * @typedef {{[property: string]: PropertyValue | Style}} Properties
 *   Acceptable value for element properties.
 *
 * @typedef {number | string | null | undefined} PrimitiveChild
 *   Primitive children, either ignored (nullish), or turned into text nodes.
 * @typedef {Array<ArrayChildNested | Nodes | PrimitiveChild>} ArrayChild
 *   List of children.
 * @typedef {Array<Nodes | PrimitiveChild>} ArrayChildNested
 *   List of children (deep).
 * @typedef {ArrayChild | Nodes | PrimitiveChild} Child
 *   Acceptable child value.
 */ __turbopack_esm__({
    "createH": (()=>createH)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$parse$2d$selector$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-parse-selector/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$find$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/find.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/space-separated-tokens/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/comma-separated-tokens/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$normalize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/normalize.js [app-rsc] (ecmascript)");
;
;
;
;
const own = {}.hasOwnProperty;
function createH(schema, defaultTagName, caseSensitive) {
    const adjust = caseSensitive && createAdjustMap(caseSensitive);
    /**
   * Hyperscript compatible DSL for creating virtual hast trees.
   *
   * @overload
   * @param {null | undefined} [selector]
   * @param {...Child} children
   * @returns {Root}
   *
   * @overload
   * @param {string} selector
   * @param {Properties} properties
   * @param {...Child} children
   * @returns {Element}
   *
   * @overload
   * @param {string} selector
   * @param {...Child} children
   * @returns {Element}
   *
   * @param {string | null | undefined} [selector]
   *   Selector.
   * @param {Child | Properties | null | undefined} [properties]
   *   Properties (or first child) (default: `undefined`).
   * @param {...Child} children
   *   Children.
   * @returns {Result}
   *   Result.
   */ function h(selector, properties, ...children) {
        let index = -1;
        /** @type {Result} */ let node;
        if (selector === undefined || selector === null) {
            node = {
                type: 'root',
                children: []
            };
            // Properties are not supported for roots.
            const child = properties;
            children.unshift(child);
        } else {
            node = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$parse$2d$selector$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["parseSelector"])(selector, defaultTagName);
            // Normalize the name.
            node.tagName = node.tagName.toLowerCase();
            if (adjust && own.call(adjust, node.tagName)) {
                node.tagName = adjust[node.tagName];
            }
            // Handle props.
            if (isChild(properties)) {
                children.unshift(properties);
            } else {
                /** @type {string} */ let key;
                for(key in properties){
                    if (own.call(properties, key)) {
                        addProperty(schema, node.properties, key, properties[key]);
                    }
                }
            }
        }
        // Handle children.
        while(++index < children.length){
            addChild(node.children, children[index]);
        }
        if (node.type === 'element' && node.tagName === 'template') {
            node.content = {
                type: 'root',
                children: node.children
            };
            node.children = [];
        }
        return node;
    }
    return h;
}
/**
 * Check if something is properties or a child.
 *
 * @param {Child | Properties} value
 *   Value to check.
 * @returns {value is Child}
 *   Whether `value` is definitely a child.
 */ function isChild(value) {
    // Never properties if not an object.
    if (value === null || typeof value !== 'object' || Array.isArray(value)) {
        return true;
    }
    // Never node without `type`; that’s the main discriminator.
    if (typeof value.type !== 'string') return false;
    // Slower check: never property value if object or array with
    // non-number/strings.
    const record = value;
    const keys = Object.keys(value);
    for (const key of keys){
        const value = record[key];
        if (value && typeof value === 'object') {
            if (!Array.isArray(value)) return true;
            const list = value;
            for (const item of list){
                if (typeof item !== 'number' && typeof item !== 'string') {
                    return true;
                }
            }
        }
    }
    // Also see empty `children` as a node.
    if ('children' in value && Array.isArray(value.children)) {
        return true;
    }
    // Default to properties, someone can always pass an empty object,
    // put `data: {}` in a node,
    // or wrap it in an array.
    return false;
}
/**
 * @param {Schema} schema
 *   Schema.
 * @param {Properties} properties
 *   Properties object.
 * @param {string} key
 *   Property name.
 * @param {PropertyValue | Style} value
 *   Property value.
 * @returns {undefined}
 *   Nothing.
 */ function addProperty(schema, properties, key, value) {
    const info = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$find$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["find"])(schema, key);
    let index = -1;
    /** @type {PropertyValue} */ let result;
    // Ignore nullish and NaN values.
    if (value === undefined || value === null) return;
    if (typeof value === 'number') {
        // Ignore NaN.
        if (Number.isNaN(value)) return;
        result = value;
    } else if (typeof value === 'boolean') {
        result = value;
    } else if (typeof value === 'string') {
        if (info.spaceSeparated) {
            result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["parse"])(value);
        } else if (info.commaSeparated) {
            result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["parse"])(value);
        } else if (info.commaOrSpaceSeparated) {
            result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["parse"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["parse"])(value).join(' '));
        } else {
            result = parsePrimitive(info, info.property, value);
        }
    } else if (Array.isArray(value)) {
        result = value.concat();
    } else {
        result = info.property === 'style' ? style(value) : String(value);
    }
    if (Array.isArray(result)) {
        /** @type {Array<number | string>} */ const finalResult = [];
        while(++index < result.length){
            // Assume no booleans in array.
            const value = parsePrimitive(info, info.property, result[index]);
            finalResult[index] = value;
        }
        result = finalResult;
    }
    // Class names (which can be added both on the `selector` and here).
    if (info.property === 'className' && Array.isArray(properties.className)) {
        // Assume no booleans in `className`.
        const value = result;
        result = properties.className.concat(value);
    }
    properties[info.property] = result;
}
/**
 * @param {Array<RootContent>} nodes
 *   Children.
 * @param {Child} value
 *   Child.
 * @returns {undefined}
 *   Nothing.
 */ function addChild(nodes, value) {
    let index = -1;
    if (value === undefined || value === null) {
    // Empty.
    } else if (typeof value === 'string' || typeof value === 'number') {
        nodes.push({
            type: 'text',
            value: String(value)
        });
    } else if (Array.isArray(value)) {
        while(++index < value.length){
            addChild(nodes, value[index]);
        }
    } else if (typeof value === 'object' && 'type' in value) {
        if (value.type === 'root') {
            addChild(nodes, value.children);
        } else {
            nodes.push(value);
        }
    } else {
        throw new Error('Expected node, nodes, or string, got `' + value + '`');
    }
}
/**
 * Parse a single primitives.
 *
 * @param {Info} info
 *   Property information.
 * @param {string} name
 *   Property name.
 * @param {PrimitiveValue} value
 *   Property value.
 * @returns {PrimitiveValue}
 *   Property value.
 */ function parsePrimitive(info, name, value) {
    if (typeof value === 'string') {
        if (info.number && value && !Number.isNaN(Number(value))) {
            return Number(value);
        }
        if ((info.boolean || info.overloadedBoolean) && (value === '' || (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$normalize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalize"])(value) === (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$normalize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["normalize"])(name))) {
            return true;
        }
    }
    return value;
}
/**
 * Serialize a `style` object as a string.
 *
 * @param {Style} value
 *   Style object.
 * @returns {string}
 *   CSS string.
 */ function style(value) {
    /** @type {Array<string>} */ const result = [];
    /** @type {string} */ let key;
    for(key in value){
        if (own.call(value, key)) {
            result.push([
                key,
                value[key]
            ].join(': '));
        }
    }
    return result.join('; ');
}
/**
 * Create a map to adjust casing.
 *
 * @param {Array<string>} values
 *   List of properly cased keys.
 * @returns {Record<string, string>}
 *   Map of lowercase keys to uppercase keys.
 */ function createAdjustMap(values) {
    /** @type {Record<string, string>} */ const result = {};
    let index = -1;
    while(++index < values.length){
        result[values[index].toLowerCase()] = values[index];
    }
    return result;
}
}}),
"[project]/apps/website/docs/node_modules/hastscript/lib/svg-case-sensitive-tag-names.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "svgCaseSensitiveTagNames": (()=>svgCaseSensitiveTagNames)
});
const svgCaseSensitiveTagNames = [
    'altGlyph',
    'altGlyphDef',
    'altGlyphItem',
    'animateColor',
    'animateMotion',
    'animateTransform',
    'clipPath',
    'feBlend',
    'feColorMatrix',
    'feComponentTransfer',
    'feComposite',
    'feConvolveMatrix',
    'feDiffuseLighting',
    'feDisplacementMap',
    'feDistantLight',
    'feDropShadow',
    'feFlood',
    'feFuncA',
    'feFuncB',
    'feFuncG',
    'feFuncR',
    'feGaussianBlur',
    'feImage',
    'feMerge',
    'feMergeNode',
    'feMorphology',
    'feOffset',
    'fePointLight',
    'feSpecularLighting',
    'feSpotLight',
    'feTile',
    'feTurbulence',
    'foreignObject',
    'glyphRef',
    'linearGradient',
    'radialGradient',
    'solidColor',
    'textArea',
    'textPath'
];
}}),
"[project]/apps/website/docs/node_modules/hastscript/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('./create-h.js').Child} Child
 *   Acceptable child value.
 * @typedef {import('./create-h.js').Properties} Properties
 *   Acceptable value for element properties.
 * @typedef {import('./create-h.js').Result} Result
 *   Result from a `h` (or `s`) call.
 */ // Register the JSX namespace on `h`.
/**
 * @typedef {import('./jsx-classic.js').Element} h.JSX.Element
 * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute
 * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes
 * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements
 */ // Register the JSX namespace on `s`.
/**
 * @typedef {import('./jsx-classic.js').Element} s.JSX.Element
 * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute
 * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes
 * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements
 */ __turbopack_esm__({
    "h": (()=>h),
    "s": (()=>s)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hastscript$2f$lib$2f$create$2d$h$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hastscript/lib/create-h.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hastscript$2f$lib$2f$svg$2d$case$2d$sensitive$2d$tag$2d$names$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hastscript/lib/svg-case-sensitive-tag-names.js [app-rsc] (ecmascript)");
;
;
;
const h = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hastscript$2f$lib$2f$create$2d$h$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createH"])(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["html"], 'div');
const s = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hastscript$2f$lib$2f$create$2d$h$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createH"])(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["svg"], 'g', __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hastscript$2f$lib$2f$svg$2d$case$2d$sensitive$2d$tag$2d$names$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["svgCaseSensitiveTagNames"]);
}}),
"[project]/apps/website/docs/node_modules/hast-util-from-parse5/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {ElementData, Element, Nodes, RootContent, Root} from 'hast'
 * @import {DefaultTreeAdapterMap, Token} from 'parse5'
 * @import {Schema} from 'property-information'
 * @import {Point, Position} from 'unist'
 * @import {VFile} from 'vfile'
 * @import {Options} from 'hast-util-from-parse5'
 */ /**
 * @typedef State
 *   Info passed around about the current state.
 * @property {VFile | undefined} file
 *   Corresponding file.
 * @property {boolean} location
 *   Whether location info was found.
 * @property {Schema} schema
 *   Current schema.
 * @property {boolean | undefined} verbose
 *   Add extra positional info.
 */ __turbopack_esm__({
    "fromParse5": (()=>fromParse5)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$location$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/vfile-location/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$web$2d$namespaces$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/web-namespaces/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hastscript$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hastscript/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$find$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/find.js [app-rsc] (ecmascript)");
;
;
;
;
;
const own = {}.hasOwnProperty;
/** @type {unknown} */ // type-coverage:ignore-next-line
const proto = Object.prototype;
function fromParse5(tree, options) {
    const settings = options || {};
    return one({
        file: settings.file || undefined,
        location: false,
        schema: settings.space === 'svg' ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["svg"] : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["html"],
        verbose: settings.verbose || false
    }, tree);
}
/**
 * Transform a node.
 *
 * @param {State} state
 *   Info passed around about the current state.
 * @param {DefaultTreeAdapterMap['node']} node
 *   p5 node.
 * @returns {Nodes}
 *   hast node.
 */ function one(state, node) {
    /** @type {Nodes} */ let result;
    switch(node.nodeName){
        case '#comment':
            {
                const reference = node;
                result = {
                    type: 'comment',
                    value: reference.data
                };
                patch(state, reference, result);
                return result;
            }
        case '#document':
        case '#document-fragment':
            {
                const reference = node;
                const quirksMode = 'mode' in reference ? reference.mode === 'quirks' || reference.mode === 'limited-quirks' : false;
                result = {
                    type: 'root',
                    children: all(state, node.childNodes),
                    data: {
                        quirksMode
                    }
                };
                if (state.file && state.location) {
                    const document = String(state.file);
                    const loc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$location$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["location"])(document);
                    const start = loc.toPoint(0);
                    const end = loc.toPoint(document.length);
                    // Always defined as we give valid input.
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(start, 'expected `start`');
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(end, 'expected `end`');
                    result.position = {
                        start,
                        end
                    };
                }
                return result;
            }
        case '#documentType':
            {
                const reference = node;
                result = {
                    type: 'doctype'
                };
                patch(state, reference, result);
                return result;
            }
        case '#text':
            {
                const reference = node;
                result = {
                    type: 'text',
                    value: reference.value
                };
                patch(state, reference, result);
                return result;
            }
        // Element.
        default:
            {
                const reference = node;
                result = element(state, reference);
                return result;
            }
    }
}
/**
 * Transform children.
 *
 * @param {State} state
 *   Info passed around about the current state.
 * @param {Array<DefaultTreeAdapterMap['node']>} nodes
 *   Nodes.
 * @returns {Array<RootContent>}
 *   hast nodes.
 */ function all(state, nodes) {
    let index = -1;
    /** @type {Array<RootContent>} */ const results = [];
    while(++index < nodes.length){
        // Assume no roots in `nodes`.
        const result = one(state, nodes[index]);
        results.push(result);
    }
    return results;
}
/**
 * Transform an element.
 *
 * @param {State} state
 *   Info passed around about the current state.
 * @param {DefaultTreeAdapterMap['element']} node
 *   `parse5` node to transform.
 * @returns {Element}
 *   hast node.
 */ function element(state, node) {
    const schema = state.schema;
    state.schema = node.namespaceURI === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$web$2d$namespaces$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["webNamespaces"].svg ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["svg"] : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["html"];
    // Props.
    let index = -1;
    /** @type {Record<string, string>} */ const properties = {};
    while(++index < node.attrs.length){
        const attribute = node.attrs[index];
        const name = (attribute.prefix ? attribute.prefix + ':' : '') + attribute.name;
        if (!own.call(proto, name)) {
            properties[name] = attribute.value;
        }
    }
    // Build.
    const x = state.schema.space === 'svg' ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hastscript$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["s"] : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hastscript$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["h"];
    const result = x(node.tagName, properties, all(state, node.childNodes));
    patch(state, node, result);
    // Switch content.
    if (result.tagName === 'template') {
        const reference = node;
        const pos = reference.sourceCodeLocation;
        const startTag = pos && pos.startTag && position(pos.startTag);
        const endTag = pos && pos.endTag && position(pos.endTag);
        // Root in, root out.
        const content = one(state, reference.content);
        if (startTag && endTag && state.file) {
            content.position = {
                start: startTag.end,
                end: endTag.start
            };
        }
        result.content = content;
    }
    state.schema = schema;
    return result;
}
/**
 * Patch positional info from `from` onto `to`.
 *
 * @param {State} state
 *   Info passed around about the current state.
 * @param {DefaultTreeAdapterMap['node']} from
 *   p5 node.
 * @param {Nodes} to
 *   hast node.
 * @returns {undefined}
 *   Nothing.
 */ function patch(state, from, to) {
    if ('sourceCodeLocation' in from && from.sourceCodeLocation && state.file) {
        const position = createLocation(state, to, from.sourceCodeLocation);
        if (position) {
            state.location = true;
            to.position = position;
        }
    }
}
/**
 * Create clean positional information.
 *
 * @param {State} state
 *   Info passed around about the current state.
 * @param {Nodes} node
 *   hast node.
 * @param {Token.ElementLocation} location
 *   p5 location info.
 * @returns {Position | undefined}
 *   Position, or nothing.
 */ function createLocation(state, node, location) {
    const result = position(location);
    if (node.type === 'element') {
        const tail = node.children[node.children.length - 1];
        // Bug for unclosed with children.
        // See: <https://github.com/inikulin/parse5/issues/109>.
        if (result && !location.endTag && tail && tail.position && tail.position.end) {
            result.end = Object.assign({}, tail.position.end);
        }
        if (state.verbose) {
            /** @type {Record<string, Position | undefined>} */ const properties = {};
            /** @type {string} */ let key;
            if (location.attrs) {
                for(key in location.attrs){
                    if (own.call(location.attrs, key)) {
                        properties[(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$find$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["find"])(state.schema, key).property] = position(location.attrs[key]);
                    }
                }
            }
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(location.startTag, 'a start tag should exist');
            const opening = position(location.startTag);
            const closing = location.endTag ? position(location.endTag) : undefined;
            /** @type {ElementData['position']} */ const data = {
                opening
            };
            if (closing) data.closing = closing;
            data.properties = properties;
            node.data = {
                position: data
            };
        }
    }
    return result;
}
/**
 * Turn a p5 location into a position.
 *
 * @param {Token.Location} loc
 *   Location.
 * @returns {Position | undefined}
 *   Position or nothing.
 */ function position(loc) {
    const start = point({
        line: loc.startLine,
        column: loc.startCol,
        offset: loc.startOffset
    });
    const end = point({
        line: loc.endLine,
        column: loc.endCol,
        offset: loc.endOffset
    });
    // @ts-expect-error: we do use `undefined` for points if one or the other
    // exists.
    return start || end ? {
        start,
        end
    } : undefined;
}
/**
 * Filter out invalid points.
 *
 * @param {Point} point
 *   Point with potentially `undefined` values.
 * @returns {Point | undefined}
 *   Point or nothing.
 */ function point(point) {
    return point.line && point.column ? point : undefined;
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-parse5/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Comment} Comment
 * @typedef {import('hast').Doctype} Doctype
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Nodes} Nodes
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').RootContent} RootContent
 * @typedef {import('hast').Text} Text
 *
 * @typedef {import('parse5').DefaultTreeAdapterMap['document']} Parse5Document
 * @typedef {import('parse5').DefaultTreeAdapterMap['documentFragment']} Parse5Fragment
 * @typedef {import('parse5').DefaultTreeAdapterMap['element']} Parse5Element
 * @typedef {import('parse5').DefaultTreeAdapterMap['node']} Parse5Nodes
 * @typedef {import('parse5').DefaultTreeAdapterMap['documentType']} Parse5Doctype
 * @typedef {import('parse5').DefaultTreeAdapterMap['commentNode']} Parse5Comment
 * @typedef {import('parse5').DefaultTreeAdapterMap['textNode']} Parse5Text
 * @typedef {import('parse5').DefaultTreeAdapterMap['parentNode']} Parse5Parent
 * @typedef {import('parse5').Token.Attribute} Parse5Attribute
 *
 * @typedef {import('property-information').Schema} Schema
 */ /**
 * @typedef Options
 *   Configuration.
 * @property {Space | null | undefined} [space='html']
 *   Which space the document is in (default: `'html'`).
 *
 *   When an `<svg>` element is found in the HTML space, this package already
 *   automatically switches to and from the SVG space when entering and exiting
 *   it.
 *
 * @typedef {Exclude<Parse5Nodes, Parse5Document | Parse5Fragment>} Parse5Content
 *
 * @typedef {'html' | 'svg'} Space
 */ __turbopack_esm__({
    "toParse5": (()=>toParse5)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$zwitch$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/zwitch/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$web$2d$namespaces$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/web-namespaces/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$find$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/find.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/space-separated-tokens/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/comma-separated-tokens/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
/** @type {Options} */ const emptyOptions = {};
const own = {}.hasOwnProperty;
const one = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$zwitch$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["zwitch"])('type', {
    handlers: {
        root,
        element,
        text,
        comment,
        doctype
    }
});
function toParse5(tree, options) {
    const settings = options || emptyOptions;
    const space = settings.space;
    return one(tree, space === 'svg' ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["svg"] : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["html"]);
}
/**
 * @param {Root} node
 *   Node (hast) to transform.
 * @param {Schema} schema
 *   Current schema.
 * @returns {Parse5Document}
 *   Parse5 node.
 */ function root(node, schema) {
    /** @type {Parse5Document} */ const result = {
        nodeName: '#document',
        // @ts-expect-error: `parse5` uses enums, which are actually strings.
        mode: (node.data || {}).quirksMode ? 'quirks' : 'no-quirks',
        childNodes: []
    };
    result.childNodes = all(node.children, result, schema);
    patch(node, result);
    return result;
}
/**
 * @param {Root} node
 *   Node (hast) to transform.
 * @param {Schema} schema
 *   Current schema.
 * @returns {Parse5Fragment}
 *   Parse5 node.
 */ function fragment(node, schema) {
    /** @type {Parse5Fragment} */ const result = {
        nodeName: '#document-fragment',
        childNodes: []
    };
    result.childNodes = all(node.children, result, schema);
    patch(node, result);
    return result;
}
/**
 * @param {Doctype} node
 *   Node (hast) to transform.
 * @returns {Parse5Doctype}
 *   Parse5 node.
 */ function doctype(node) {
    /** @type {Parse5Doctype} */ const result = {
        nodeName: '#documentType',
        name: 'html',
        publicId: '',
        systemId: '',
        parentNode: null
    };
    patch(node, result);
    return result;
}
/**
 * @param {Text} node
 *   Node (hast) to transform.
 * @returns {Parse5Text}
 *   Parse5 node.
 */ function text(node) {
    /** @type {Parse5Text} */ const result = {
        nodeName: '#text',
        value: node.value,
        parentNode: null
    };
    patch(node, result);
    return result;
}
/**
 * @param {Comment} node
 *   Node (hast) to transform.
 * @returns {Parse5Comment}
 *   Parse5 node.
 */ function comment(node) {
    /** @type {Parse5Comment} */ const result = {
        nodeName: '#comment',
        data: node.value,
        parentNode: null
    };
    patch(node, result);
    return result;
}
/**
 * @param {Element} node
 *   Node (hast) to transform.
 * @param {Schema} schema
 *   Current schema.
 * @returns {Parse5Element}
 *   Parse5 node.
 */ function element(node, schema) {
    const parentSchema = schema;
    let currentSchema = parentSchema;
    if (node.type === 'element' && node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {
        currentSchema = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["svg"];
    }
    /** @type {Array<Parse5Attribute>} */ const attrs = [];
    /** @type {string} */ let prop;
    if (node.properties) {
        for(prop in node.properties){
            if (prop !== 'children' && own.call(node.properties, prop)) {
                const result = createProperty(currentSchema, prop, node.properties[prop]);
                if (result) {
                    attrs.push(result);
                }
            }
        }
    }
    const space = currentSchema.space;
    // `html` and `svg` both have a space.
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(space);
    /** @type {Parse5Element} */ const result = {
        nodeName: node.tagName,
        tagName: node.tagName,
        attrs,
        // @ts-expect-error: `parse5` types are wrong.
        namespaceURI: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$web$2d$namespaces$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["webNamespaces"][space],
        childNodes: [],
        parentNode: null
    };
    result.childNodes = all(node.children, result, currentSchema);
    patch(node, result);
    if (node.tagName === 'template' && node.content) {
        // @ts-expect-error: `parse5` types are wrong.
        result.content = fragment(node.content, currentSchema);
    }
    return result;
}
/**
 * Handle a property.
 *
 * @param {Schema} schema
 *   Current schema.
 * @param {string} prop
 *   Key.
 * @param {Array<number | string> | boolean | number | string | null | undefined} value
 *   hast property value.
 * @returns {Parse5Attribute | undefined}
 *   Field for runtime, optional.
 */ function createProperty(schema, prop, value) {
    const info = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$find$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["find"])(schema, prop);
    // Ignore nullish and `NaN` values.
    if (value === false || value === null || value === undefined || typeof value === 'number' && Number.isNaN(value) || !value && info.boolean) {
        return;
    }
    if (Array.isArray(value)) {
        // Accept `array`.
        // Most props are space-separated.
        value = info.commaSeparated ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringify"])(value) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringify"])(value);
    }
    /** @type {Parse5Attribute} */ const attribute = {
        name: info.attribute,
        value: value === true ? '' : String(value)
    };
    if (info.space && info.space !== 'html' && info.space !== 'svg') {
        const index = attribute.name.indexOf(':');
        if (index < 0) {
            attribute.prefix = '';
        } else {
            attribute.name = attribute.name.slice(index + 1);
            attribute.prefix = info.attribute.slice(0, index);
        }
        attribute.namespace = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$web$2d$namespaces$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["webNamespaces"][info.space];
    }
    return attribute;
}
/**
 * Transform all hast nodes.
 *
 * @param {Array<RootContent>} children
 *   List of children.
 * @param {Parse5Parent} parentNode
 *   `parse5` parent node.
 * @param {Schema} schema
 *   Current schema.
 * @returns {Array<Parse5Content>}
 *   Transformed children.
 */ function all(children, parentNode, schema) {
    let index = -1;
    /** @type {Array<Parse5Content>} */ const results = [];
    if (children) {
        while(++index < children.length){
            /** @type {Parse5Content} */ const child = one(children[index], schema);
            child.parentNode = parentNode;
            results.push(child);
        }
    }
    return results;
}
/**
 * Add position info from `from` to `to`.
 *
 * @param {Nodes} from
 *   hast node.
 * @param {Parse5Nodes} to
 *   `parse5` node.
 * @returns {undefined}
 *   Nothing.
 */ function patch(from, to) {
    const position = from.position;
    if (position && position.start && position.end) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof position.start.offset === 'number');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(typeof position.end.offset === 'number');
        to.sourceCodeLocation = {
            startLine: position.start.line,
            startCol: position.start.column,
            startOffset: position.start.offset,
            endLine: position.end.line,
            endCol: position.end.column,
            endOffset: position.end.offset
        };
    }
}
}}),
"[project]/apps/website/docs/node_modules/html-void-elements/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * List of HTML void tag names.
 *
 * @type {Array<string>}
 */ __turbopack_esm__({
    "htmlVoidElements": (()=>htmlVoidElements)
});
const htmlVoidElements = [
    'area',
    'base',
    'basefont',
    'bgsound',
    'br',
    'col',
    'command',
    'embed',
    'frame',
    'hr',
    'image',
    'img',
    'input',
    'keygen',
    'link',
    'meta',
    'param',
    'source',
    'track',
    'wbr'
];
}}),
"[project]/apps/website/docs/node_modules/hast-util-raw/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Options} from 'hast-util-raw'
 * @import {Comment, Doctype, Element, Nodes, RootContent, Root, Text} from 'hast'
 * @import {Raw} from 'mdast-util-to-hast'
 * @import {DefaultTreeAdapterMap, ParserOptions} from 'parse5'
 * @import {Point} from 'unist'
 */ /**
 * @typedef State
 *   Info passed around about the current state.
 * @property {(node: Nodes) => undefined} handle
 *   Add a hast node to the parser.
 * @property {Options} options
 *   User configuration.
 * @property {Parser<DefaultTreeAdapterMap>} parser
 *   Current parser.
 * @property {boolean} stitches
 *   Whether there are stitches.
 */ /**
 * @typedef Stitch
 *   Custom comment-like value we pass through parse5, which contains a
 *   replacement node that we’ll swap back in afterwards.
 * @property {'comment'} type
 *   Node type.
 * @property {{stitch: Nodes}} value
 *   Replacement value.
 */ __turbopack_esm__({
    "raw": (()=>raw)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse5/dist/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$zwitch$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/zwitch/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$parser$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse5/dist/parser/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-position/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$from$2d$parse5$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-from-parse5/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit/lib/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$common$2f$token$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Token$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse5/dist/common/token.js [app-rsc] (ecmascript) <export * as Token>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$tokenizer$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse5/dist/tokenizer/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$web$2d$namespaces$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/web-namespaces/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$parse5$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-parse5/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$common$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__html$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse5/dist/common/html.js [app-rsc] (ecmascript) <export * as html>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$html$2d$void$2d$elements$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/html-void-elements/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@ungap/structured-clone/esm/index.js [app-rsc] (ecmascript) <locals>");
;
;
;
;
;
;
;
;
;
const gfmTagfilterExpression = /<(\/?)(iframe|noembed|noframes|plaintext|script|style|textarea|title|xmp)(?=[\t\n\f\r />])/gi;
// Node types associated with MDX.
// <https://github.com/mdx-js/mdx/blob/8a56312/packages/mdx/lib/node-types.js>
const knownMdxNames = new Set([
    'mdxFlowExpression',
    'mdxJsxFlowElement',
    'mdxJsxTextElement',
    'mdxTextExpression',
    'mdxjsEsm'
]);
/** @type {ParserOptions<DefaultTreeAdapterMap>} */ const parseOptions = {
    sourceCodeLocationInfo: true,
    scriptingEnabled: false
};
function raw(tree, options) {
    const document = documentMode(tree);
    /** @type {(node: Nodes, state: State) => undefined} */ const one = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$zwitch$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["zwitch"])('type', {
        handlers: {
            root,
            element,
            text,
            comment,
            doctype,
            raw: handleRaw
        },
        unknown
    });
    /** @type {State} */ const state = {
        parser: document ? new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$parser$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Parser"](parseOptions) : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$parser$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Parser"].getFragmentParser(undefined, parseOptions),
        handle (node) {
            one(node, state);
        },
        stitches: false,
        options: options || {}
    };
    one(tree, state);
    resetTokenizer(state, (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["pointStart"])());
    const p5 = document ? state.parser.document : state.parser.getFragment();
    const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$from$2d$parse5$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fromParse5"])(p5, {
        // To do: support `space`?
        file: state.options.file
    });
    if (state.stitches) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(result, 'comment', function(node, index, parent) {
            const stitch = node;
            if (stitch.value.stitch && parent && index !== undefined) {
                /** @type {Array<RootContent>} */ const siblings = parent.children;
                // @ts-expect-error: assume the stitch is allowed.
                siblings[index] = stitch.value.stitch;
                return index;
            }
        });
    }
    // Unpack if possible and when not given a `root`.
    if (result.type === 'root' && result.children.length === 1 && result.children[0].type === tree.type) {
        return result.children[0];
    }
    return result;
}
/**
 * Transform all nodes
 *
 * @param {Array<RootContent>} nodes
 *   hast content.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {undefined}
 *   Nothing.
 */ function all(nodes, state) {
    let index = -1;
    /* istanbul ignore else - invalid nodes, see rehypejs/rehype-raw#7. */ if (nodes) {
        while(++index < nodes.length){
            state.handle(nodes[index]);
        }
    }
}
/**
 * Transform a root.
 *
 * @param {Root} node
 *   hast root node.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {undefined}
 *   Nothing.
 */ function root(node, state) {
    all(node.children, state);
}
/**
 * Transform an element.
 *
 * @param {Element} node
 *   hast element node.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {undefined}
 *   Nothing.
 */ function element(node, state) {
    startTag(node, state);
    all(node.children, state);
    endTag(node, state);
}
/**
 * Transform a text.
 *
 * @param {Text} node
 *   hast text node.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {undefined}
 *   Nothing.
 */ function text(node, state) {
    // Allow `DATA` through `PLAINTEXT`,
    // but when hanging in a tag for example,
    // switch back to `DATA`.
    // Note: `State` is not exposed by `parse5`, so these numbers are fragile.
    // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>
    if (state.parser.tokenizer.state > 4) {
        state.parser.tokenizer.state = 0;
    }
    /** @type {Token.CharacterToken} */ const token = {
        type: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$common$2f$token$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Token$3e$__["Token"].TokenType.CHARACTER,
        chars: node.value,
        location: createParse5Location(node)
    };
    resetTokenizer(state, (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["pointStart"])(node));
    // @ts-expect-error: private.
    state.parser.currentToken = token;
    // @ts-expect-error: private.
    state.parser._processToken(state.parser.currentToken);
}
/**
 * Transform a doctype.
 *
 * @param {Doctype} node
 *   hast doctype node.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {undefined}
 *   Nothing.
 */ function doctype(node, state) {
    /** @type {Token.DoctypeToken} */ const token = {
        type: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$common$2f$token$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Token$3e$__["Token"].TokenType.DOCTYPE,
        name: 'html',
        forceQuirks: false,
        publicId: '',
        systemId: '',
        location: createParse5Location(node)
    };
    resetTokenizer(state, (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["pointStart"])(node));
    // @ts-expect-error: private.
    state.parser.currentToken = token;
    // @ts-expect-error: private.
    state.parser._processToken(state.parser.currentToken);
}
/**
 * Transform a stitch.
 *
 * @param {Nodes} node
 *   unknown node.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {undefined}
 *   Nothing.
 */ function stitch(node, state) {
    // Mark that there are stitches, so we need to walk the tree and revert them.
    state.stitches = true;
    /** @type {Nodes} */ const clone = cloneWithoutChildren(node);
    // Recurse, because to somewhat handle `[<x>]</x>` (where `[]` denotes the
    // passed through node).
    if ('children' in node && 'children' in clone) {
        // Root in root out.
        const fakeRoot = raw({
            type: 'root',
            children: node.children
        }, state.options);
        clone.children = fakeRoot.children;
    }
    // Hack: `value` is supposed to be a string, but as none of the tools
    // (`parse5` or `hast-util-from-parse5`) looks at it, we can pass nodes
    // through.
    comment({
        type: 'comment',
        value: {
            stitch: clone
        }
    }, state);
}
/**
 * Transform a comment (or stitch).
 *
 * @param {Comment | Stitch} node
 *   hast comment node.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {undefined}
 *   Nothing.
 */ function comment(node, state) {
    /** @type {string} */ // @ts-expect-error: we pass stitches through.
    const data = node.value;
    /** @type {Token.CommentToken} */ const token = {
        type: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$common$2f$token$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Token$3e$__["Token"].TokenType.COMMENT,
        data,
        location: createParse5Location(node)
    };
    resetTokenizer(state, (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["pointStart"])(node));
    // @ts-expect-error: private.
    state.parser.currentToken = token;
    // @ts-expect-error: private.
    state.parser._processToken(state.parser.currentToken);
}
/**
 * Transform a raw node.
 *
 * @param {Raw} node
 *   hast raw node.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {undefined}
 *   Nothing.
 */ function handleRaw(node, state) {
    // Reset preprocessor:
    // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/preprocessor.ts#L18-L31>.
    state.parser.tokenizer.preprocessor.html = '';
    state.parser.tokenizer.preprocessor.pos = -1;
    // @ts-expect-error: private.
    // type-coverage:ignore-next-line
    state.parser.tokenizer.preprocessor.lastGapPos = -2;
    // @ts-expect-error: private.
    // type-coverage:ignore-next-line
    state.parser.tokenizer.preprocessor.gapStack = [];
    // @ts-expect-error: private.
    // type-coverage:ignore-next-line
    state.parser.tokenizer.preprocessor.skipNextNewLine = false;
    state.parser.tokenizer.preprocessor.lastChunkWritten = false;
    state.parser.tokenizer.preprocessor.endOfChunkHit = false;
    // @ts-expect-error: private.
    // type-coverage:ignore-next-line
    state.parser.tokenizer.preprocessor.isEol = false;
    // Now pass `node.value`.
    setPoint(state, (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["pointStart"])(node));
    state.parser.tokenizer.write(state.options.tagfilter ? node.value.replace(gfmTagfilterExpression, '&lt;$1$2') : node.value, false);
    // @ts-expect-error: private.
    state.parser.tokenizer._runParsingLoop();
    // Character references hang, so if we ended there, we need to flush
    // those too.
    // We reset the preprocessor as if the document ends here.
    // Then one single call to the relevant state does the trick, parse5
    // consumes the whole token.
    // Note: `State` is not exposed by `parse5`, so these numbers are fragile.
    // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>
    // Note: a change to `parse5`, which breaks this, was merged but not released.
    // Investigate when it is.
    // To do: remove next major.
    /* c8 ignore next 12 -- removed in <https://github.com/inikulin/parse5/pull/897> */ if (state.parser.tokenizer.state === 72 /* NAMED_CHARACTER_REFERENCE */  || // @ts-expect-error: removed.
    state.parser.tokenizer.state === 78 /* NUMERIC_CHARACTER_REFERENCE_END */ ) {
        state.parser.tokenizer.preprocessor.lastChunkWritten = true;
        /** @type {number} */ // @ts-expect-error: private.
        const cp = state.parser.tokenizer._consume();
        // @ts-expect-error: private.
        state.parser.tokenizer._callState(cp);
    }
}
/**
 * Crash on an unknown node.
 *
 * @param {unknown} node_
 *   unknown node.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {undefined}
 *   Never.
 */ function unknown(node_, state) {
    const node = node_;
    if (state.options.passThrough && state.options.passThrough.includes(node.type)) {
        stitch(node, state);
    } else {
        let extra = '';
        if (knownMdxNames.has(node.type)) {
            extra = ". It looks like you are using MDX nodes with `hast-util-raw` (or `rehype-raw`). If you use this because you are using remark or rehype plugins that inject `'html'` nodes, then please raise an issue with that plugin, as its a bad and slow idea. If you use this because you are using markdown syntax, then you have to configure this utility (or plugin) to pass through these nodes (see `passThrough` in docs), but you can also migrate to use the MDX syntax";
        }
        throw new Error('Cannot compile `' + node.type + '` node' + extra);
    }
}
/**
 * Reset the tokenizer of a parser.
 *
 * @param {State} state
 *   Info passed around about the current state.
 * @param {Point | undefined} point
 *   Point.
 * @returns {undefined}
 *   Nothing.
 */ function resetTokenizer(state, point) {
    setPoint(state, point);
    // Process final characters if they’re still there after hibernating.
    /** @type {Token.CharacterToken} */ // @ts-expect-error: private.
    const token = state.parser.tokenizer.currentCharacterToken;
    if (token && token.location) {
        token.location.endLine = state.parser.tokenizer.preprocessor.line;
        token.location.endCol = state.parser.tokenizer.preprocessor.col + 1;
        token.location.endOffset = state.parser.tokenizer.preprocessor.offset + 1;
        // @ts-expect-error: private.
        state.parser.currentToken = token;
        // @ts-expect-error: private.
        state.parser._processToken(state.parser.currentToken);
    }
    // Reset tokenizer:
    // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/index.ts#L187-L223>.
    // Especially putting it back in the `data` state is useful: some elements,
    // like textareas and iframes, change the state.
    // See GH-7.
    // But also if broken HTML is in `raw`, and then a correct element is given.
    // See GH-11.
    // @ts-expect-error: private.
    state.parser.tokenizer.paused = false;
    // @ts-expect-error: private.
    state.parser.tokenizer.inLoop = false;
    // Note: don’t reset `state`, `inForeignNode`, or `lastStartTagName`, we
    // manually update those when needed.
    state.parser.tokenizer.active = false;
    // @ts-expect-error: private.
    state.parser.tokenizer.returnState = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$tokenizer$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TokenizerMode"].DATA;
    // @ts-expect-error: private.
    state.parser.tokenizer.charRefCode = -1;
    // @ts-expect-error: private.
    state.parser.tokenizer.consumedAfterSnapshot = -1;
    // @ts-expect-error: private.
    state.parser.tokenizer.currentLocation = null;
    // @ts-expect-error: private.
    state.parser.tokenizer.currentCharacterToken = null;
    // @ts-expect-error: private.
    state.parser.tokenizer.currentToken = null;
    // @ts-expect-error: private.
    state.parser.tokenizer.currentAttr = {
        name: '',
        value: ''
    };
}
/**
 * Set current location.
 *
 * @param {State} state
 *   Info passed around about the current state.
 * @param {Point | undefined} point
 *   Point.
 * @returns {undefined}
 *   Nothing.
 */ function setPoint(state, point) {
    if (point && point.offset !== undefined) {
        /** @type {Token.Location} */ const location = {
            startLine: point.line,
            startCol: point.column,
            startOffset: point.offset,
            endLine: -1,
            endCol: -1,
            endOffset: -1
        };
        // @ts-expect-error: private.
        // type-coverage:ignore-next-line
        state.parser.tokenizer.preprocessor.lineStartPos = -point.column + 1 // Looks weird, but ensures we get correct positional info.
        ;
        state.parser.tokenizer.preprocessor.droppedBufferSize = point.offset;
        state.parser.tokenizer.preprocessor.line = point.line;
        // @ts-expect-error: private.
        state.parser.tokenizer.currentLocation = location;
    }
}
/**
 * Emit a start tag.
 *
 * @param {Element} node
 *   Element.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {undefined}
 *   Nothing.
 */ function startTag(node, state) {
    const tagName = node.tagName.toLowerCase();
    // Ignore tags if we’re in plain text.
    if (state.parser.tokenizer.state === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$tokenizer$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TokenizerMode"].PLAINTEXT) return;
    resetTokenizer(state, (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["pointStart"])(node));
    const current = state.parser.openElements.current;
    let ns = 'namespaceURI' in current ? current.namespaceURI : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$web$2d$namespaces$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["webNamespaces"].html;
    if (ns === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$web$2d$namespaces$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["webNamespaces"].html && tagName === 'svg') {
        ns = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$web$2d$namespaces$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["webNamespaces"].svg;
    }
    const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$parse5$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toParse5"])(// Shallow clone to not delve into `children`: we only need the attributes.
    {
        ...node,
        children: []
    }, {
        space: ns === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$web$2d$namespaces$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["webNamespaces"].svg ? 'svg' : 'html'
    });
    /** @type {Token.TagToken} */ const tag = {
        type: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$common$2f$token$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Token$3e$__["Token"].TokenType.START_TAG,
        tagName,
        tagID: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$common$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__html$3e$__["html"].getTagID(tagName),
        // We always send start and end tags.
        selfClosing: false,
        ackSelfClosing: false,
        // Always element.
        /* c8 ignore next */ attrs: 'attrs' in result ? result.attrs : [],
        location: createParse5Location(node)
    };
    // The HTML parsing algorithm works by doing half of the state management in
    // the tokenizer and half in the parser.
    // We can’t use the tokenizer here, as we don’t have strings.
    // So we act *as if* the tokenizer emits tokens:
    // @ts-expect-error: private.
    state.parser.currentToken = tag;
    // @ts-expect-error: private.
    state.parser._processToken(state.parser.currentToken);
    // …but then we still need a bunch of work that the tokenizer would normally
    // do, such as:
    // Set a tag name, similar to how the tokenizer would do it.
    state.parser.tokenizer.lastStartTagName = tagName;
// `inForeignNode` is correctly set by the parser.
}
/**
 * Emit an end tag.
 *
 * @param {Element} node
 *   Element.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {undefined}
 *   Nothing.
 */ function endTag(node, state) {
    const tagName = node.tagName.toLowerCase();
    // Do not emit closing tags for HTML void elements.
    if (!state.parser.tokenizer.inForeignNode && __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$html$2d$void$2d$elements$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["htmlVoidElements"].includes(tagName)) {
        return;
    }
    // Ignore tags if we’re in plain text.
    if (state.parser.tokenizer.state === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$tokenizer$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TokenizerMode"].PLAINTEXT) return;
    resetTokenizer(state, (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["pointEnd"])(node));
    /** @type {Token.TagToken} */ const tag = {
        type: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$common$2f$token$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Token$3e$__["Token"].TokenType.END_TAG,
        tagName,
        tagID: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$common$2f$html$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__html$3e$__["html"].getTagID(tagName),
        selfClosing: false,
        ackSelfClosing: false,
        attrs: [],
        location: createParse5Location(node)
    };
    // The HTML parsing algorithm works by doing half of the state management in
    // the tokenizer and half in the parser.
    // We can’t use the tokenizer here, as we don’t have strings.
    // So we act *as if* the tokenizer emits tokens:
    // @ts-expect-error: private.
    state.parser.currentToken = tag;
    // @ts-expect-error: private.
    state.parser._processToken(state.parser.currentToken);
    // …but then we still need a bunch of work that the tokenizer would normally
    // do, such as:
    // Switch back to the data state after alternative states that don’t accept
    // tags:
    if (// Current element is closed.
    tagName === state.parser.tokenizer.lastStartTagName && // `<textarea>` and `<title>`
    (state.parser.tokenizer.state === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$tokenizer$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TokenizerMode"].RCDATA || // `<iframe>`, `<noembed>`, `<noframes>`, `<style>`, `<xmp>`
    state.parser.tokenizer.state === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$tokenizer$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TokenizerMode"].RAWTEXT || // `<script>`
    state.parser.tokenizer.state === __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$tokenizer$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TokenizerMode"].SCRIPT_DATA)) {
        state.parser.tokenizer.state = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$tokenizer$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TokenizerMode"].DATA;
    }
}
/**
 * Check if `node` represents a whole document or a fragment.
 *
 * @param {Nodes} node
 *   hast node.
 * @returns {boolean}
 *   Whether this represents a whole document or a fragment.
 */ function documentMode(node) {
    const head = node.type === 'root' ? node.children[0] : node;
    return Boolean(head && (head.type === 'doctype' || head.type === 'element' && head.tagName.toLowerCase() === 'html'));
}
/**
 * Get a `parse5` location from a node.
 *
 * @param {Nodes | Stitch} node
 *   hast node.
 * @returns {Token.Location}
 *   `parse5` location.
 */ function createParse5Location(node) {
    const start = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["pointStart"])(node) || {
        line: undefined,
        column: undefined,
        offset: undefined
    };
    const end = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["pointEnd"])(node) || {
        line: undefined,
        column: undefined,
        offset: undefined
    };
    /** @type {Record<keyof Token.Location, number | undefined>} */ const location = {
        startLine: start.line,
        startCol: start.column,
        startOffset: start.offset,
        endLine: end.line,
        endCol: end.column,
        endOffset: end.offset
    };
    // @ts-expect-error: unist point values can be `undefined` in hast, which
    // `parse5` types don’t want.
    return location;
}
/**
 * @template {Nodes} NodeType
 *   Node type.
 * @param {NodeType} node
 *   Node to clone.
 * @returns {NodeType}
 *   Cloned node, without children.
 */ function cloneWithoutChildren(node) {
    return 'children' in node ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["default"])({
        ...node,
        children: []
    }) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["default"])(node);
}
}}),
"[project]/apps/website/docs/node_modules/rehype-raw/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast-util-raw').Options} RawOptions
 * @typedef {import('vfile').VFile} VFile
 */ /**
 * @typedef {Omit<RawOptions, 'file'>} Options
 *   Configuration.
 */ __turbopack_esm__({
    "default": (()=>rehypeRaw)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$raw$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-raw/lib/index.js [app-rsc] (ecmascript)");
;
function rehypeRaw(options) {
    /**
   * @param {Root} tree
   *   Tree.
   * @param {VFile} file
   *   File.
   * @returns {Root}
   *   New tree.
   */ return function(tree, file) {
        // Assume root in -> root out.
        const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$raw$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["raw"])(tree, {
            ...options,
            file
        });
        return result;
    };
}
}}),
"[project]/apps/website/docs/node_modules/shiki/dist/langs.mjs [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "bundledLanguages": (()=>bundledLanguages),
    "bundledLanguagesAlias": (()=>bundledLanguagesAlias),
    "bundledLanguagesBase": (()=>bundledLanguagesBase),
    "bundledLanguagesInfo": (()=>bundledLanguagesInfo)
});
const bundledLanguagesInfo = [
    {
        "id": "abap",
        "name": "ABAP",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/abap.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "actionscript-3",
        "name": "ActionScript",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/actionscript-3.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "ada",
        "name": "Ada",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/ada.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "angular-html",
        "name": "Angular HTML",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/angular-html.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "angular-ts",
        "name": "Angular TypeScript",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/angular-ts.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "apache",
        "name": "Apache Conf",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/apache.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "apex",
        "name": "Apex",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/apex.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "apl",
        "name": "APL",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/apl.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "applescript",
        "name": "AppleScript",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/applescript.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "ara",
        "name": "Ara",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/ara.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "asciidoc",
        "name": "AsciiDoc",
        "aliases": [
            "adoc"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/asciidoc.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "asm",
        "name": "Assembly",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/asm.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "astro",
        "name": "Astro",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/astro.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "awk",
        "name": "AWK",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/awk.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "ballerina",
        "name": "Ballerina",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/ballerina.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "bat",
        "name": "Batch File",
        "aliases": [
            "batch"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/bat.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "beancount",
        "name": "Beancount",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/beancount.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "berry",
        "name": "Berry",
        "aliases": [
            "be"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/berry.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "bibtex",
        "name": "BibTeX",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/bibtex.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "bicep",
        "name": "Bicep",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/bicep.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "blade",
        "name": "Blade",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/blade.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "bsl",
        "name": "1C (Enterprise)",
        "aliases": [
            "1c"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/bsl.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "c",
        "name": "C",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/c.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "cadence",
        "name": "Cadence",
        "aliases": [
            "cdc"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/cadence.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "cairo",
        "name": "Cairo",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/cairo.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "clarity",
        "name": "Clarity",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/clarity.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "clojure",
        "name": "Clojure",
        "aliases": [
            "clj"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/clojure.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "cmake",
        "name": "CMake",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/cmake.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "cobol",
        "name": "COBOL",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/cobol.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "codeowners",
        "name": "CODEOWNERS",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/codeowners.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "codeql",
        "name": "CodeQL",
        "aliases": [
            "ql"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/codeql.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "coffee",
        "name": "CoffeeScript",
        "aliases": [
            "coffeescript"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/coffee.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "common-lisp",
        "name": "Common Lisp",
        "aliases": [
            "lisp"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/common-lisp.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "coq",
        "name": "Coq",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/coq.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "cpp",
        "name": "C++",
        "aliases": [
            "c++"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/cpp.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "crystal",
        "name": "Crystal",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/crystal.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "csharp",
        "name": "C#",
        "aliases": [
            "c#",
            "cs"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/csharp.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "css",
        "name": "CSS",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/css.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "csv",
        "name": "CSV",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/csv.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "cue",
        "name": "CUE",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/cue.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "cypher",
        "name": "Cypher",
        "aliases": [
            "cql"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/cypher.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "d",
        "name": "D",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/d.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "dart",
        "name": "Dart",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/dart.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "dax",
        "name": "DAX",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/dax.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "desktop",
        "name": "Desktop",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/desktop.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "diff",
        "name": "Diff",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/diff.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "docker",
        "name": "Dockerfile",
        "aliases": [
            "dockerfile"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/docker.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "dotenv",
        "name": "dotEnv",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/dotenv.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "dream-maker",
        "name": "Dream Maker",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/dream-maker.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "edge",
        "name": "Edge",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/edge.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "elixir",
        "name": "Elixir",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/elixir.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "elm",
        "name": "Elm",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/elm.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "emacs-lisp",
        "name": "Emacs Lisp",
        "aliases": [
            "elisp"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/emacs-lisp.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "erb",
        "name": "ERB",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/erb.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "erlang",
        "name": "Erlang",
        "aliases": [
            "erl"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/erlang.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "fennel",
        "name": "Fennel",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/fennel.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "fish",
        "name": "Fish",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/fish.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "fluent",
        "name": "Fluent",
        "aliases": [
            "ftl"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/fluent.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "fortran-fixed-form",
        "name": "Fortran (Fixed Form)",
        "aliases": [
            "f",
            "for",
            "f77"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/fortran-fixed-form.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "fortran-free-form",
        "name": "Fortran (Free Form)",
        "aliases": [
            "f90",
            "f95",
            "f03",
            "f08",
            "f18"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/fortran-free-form.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "fsharp",
        "name": "F#",
        "aliases": [
            "f#",
            "fs"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/fsharp.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "gdresource",
        "name": "GDResource",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/gdresource.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "gdscript",
        "name": "GDScript",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/gdscript.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "gdshader",
        "name": "GDShader",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/gdshader.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "genie",
        "name": "Genie",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/genie.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "gherkin",
        "name": "Gherkin",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/gherkin.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "git-commit",
        "name": "Git Commit Message",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/git-commit.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "git-rebase",
        "name": "Git Rebase Message",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/git-rebase.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "gleam",
        "name": "Gleam",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/gleam.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "glimmer-js",
        "name": "Glimmer JS",
        "aliases": [
            "gjs"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/glimmer-js.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "glimmer-ts",
        "name": "Glimmer TS",
        "aliases": [
            "gts"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/glimmer-ts.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "glsl",
        "name": "GLSL",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/glsl.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "gnuplot",
        "name": "Gnuplot",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/gnuplot.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "go",
        "name": "Go",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/go.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "graphql",
        "name": "GraphQL",
        "aliases": [
            "gql"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/graphql.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "groovy",
        "name": "Groovy",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/groovy.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "hack",
        "name": "Hack",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/hack.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "haml",
        "name": "Ruby Haml",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/haml.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "handlebars",
        "name": "Handlebars",
        "aliases": [
            "hbs"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/handlebars.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "haskell",
        "name": "Haskell",
        "aliases": [
            "hs"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/haskell.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "haxe",
        "name": "Haxe",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/haxe.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "hcl",
        "name": "HashiCorp HCL",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/hcl.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "hjson",
        "name": "Hjson",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/hjson.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "hlsl",
        "name": "HLSL",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/hlsl.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "html",
        "name": "HTML",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/html.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "html-derivative",
        "name": "HTML (Derivative)",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/html-derivative.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "http",
        "name": "HTTP",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/http.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "hxml",
        "name": "HXML",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/hxml.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "hy",
        "name": "Hy",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/hy.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "imba",
        "name": "Imba",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/imba.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "ini",
        "name": "INI",
        "aliases": [
            "properties"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/ini.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "java",
        "name": "Java",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/java.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "javascript",
        "name": "JavaScript",
        "aliases": [
            "js"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/javascript.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "jinja",
        "name": "Jinja",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/jinja.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "jison",
        "name": "Jison",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/jison.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "json",
        "name": "JSON",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/json.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "json5",
        "name": "JSON5",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/json5.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "jsonc",
        "name": "JSON with Comments",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/jsonc.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "jsonl",
        "name": "JSON Lines",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/jsonl.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "jsonnet",
        "name": "Jsonnet",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/jsonnet.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "jssm",
        "name": "JSSM",
        "aliases": [
            "fsl"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/jssm.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "jsx",
        "name": "JSX",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/jsx.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "julia",
        "name": "Julia",
        "aliases": [
            "jl"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/julia.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "kotlin",
        "name": "Kotlin",
        "aliases": [
            "kt",
            "kts"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/kotlin.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "kusto",
        "name": "Kusto",
        "aliases": [
            "kql"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/kusto.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "latex",
        "name": "LaTeX",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/latex.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "lean",
        "name": "Lean 4",
        "aliases": [
            "lean4"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/lean.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "less",
        "name": "Less",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/less.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "liquid",
        "name": "Liquid",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/liquid.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "log",
        "name": "Log file",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/log.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "logo",
        "name": "Logo",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/logo.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "lua",
        "name": "Lua",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/lua.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "luau",
        "name": "Luau",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/luau.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "make",
        "name": "Makefile",
        "aliases": [
            "makefile"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/make.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "markdown",
        "name": "Markdown",
        "aliases": [
            "md"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/markdown.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "marko",
        "name": "Marko",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/marko.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "matlab",
        "name": "MATLAB",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/matlab.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "mdc",
        "name": "MDC",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/mdc.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "mdx",
        "name": "MDX",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/mdx.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "mermaid",
        "name": "Mermaid",
        "aliases": [
            "mmd"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/mermaid.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "mipsasm",
        "name": "MIPS Assembly",
        "aliases": [
            "mips"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/mipsasm.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "mojo",
        "name": "Mojo",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/mojo.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "move",
        "name": "Move",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/move.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "narrat",
        "name": "Narrat Language",
        "aliases": [
            "nar"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/narrat.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "nextflow",
        "name": "Nextflow",
        "aliases": [
            "nf"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/nextflow.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "nginx",
        "name": "Nginx",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/nginx.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "nim",
        "name": "Nim",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/nim.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "nix",
        "name": "Nix",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/nix.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "nushell",
        "name": "nushell",
        "aliases": [
            "nu"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/nushell.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "objective-c",
        "name": "Objective-C",
        "aliases": [
            "objc"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/objective-c.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "objective-cpp",
        "name": "Objective-C++",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/objective-cpp.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "ocaml",
        "name": "OCaml",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/ocaml.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "pascal",
        "name": "Pascal",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/pascal.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "perl",
        "name": "Perl",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/perl.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "php",
        "name": "PHP",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/php.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "plsql",
        "name": "PL/SQL",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/plsql.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "po",
        "name": "Gettext PO",
        "aliases": [
            "pot",
            "potx"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/po.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "polar",
        "name": "Polar",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/polar.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "postcss",
        "name": "PostCSS",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/postcss.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "powerquery",
        "name": "PowerQuery",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/powerquery.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "powershell",
        "name": "PowerShell",
        "aliases": [
            "ps",
            "ps1"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/powershell.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "prisma",
        "name": "Prisma",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/prisma.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "prolog",
        "name": "Prolog",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/prolog.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "proto",
        "name": "Protocol Buffer 3",
        "aliases": [
            "protobuf"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/proto.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "pug",
        "name": "Pug",
        "aliases": [
            "jade"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/pug.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "puppet",
        "name": "Puppet",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/puppet.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "purescript",
        "name": "PureScript",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/purescript.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "python",
        "name": "Python",
        "aliases": [
            "py"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/python.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "qml",
        "name": "QML",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/qml.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "qmldir",
        "name": "QML Directory",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/qmldir.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "qss",
        "name": "Qt Style Sheets",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/qss.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "r",
        "name": "R",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/r.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "racket",
        "name": "Racket",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/racket.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "raku",
        "name": "Raku",
        "aliases": [
            "perl6"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/raku.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "razor",
        "name": "ASP.NET Razor",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/razor.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "reg",
        "name": "Windows Registry Script",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/reg.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "regexp",
        "name": "RegExp",
        "aliases": [
            "regex"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/regexp.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "rel",
        "name": "Rel",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/rel.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "riscv",
        "name": "RISC-V",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/riscv.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "rst",
        "name": "reStructuredText",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/rst.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "ruby",
        "name": "Ruby",
        "aliases": [
            "rb"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/ruby.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "rust",
        "name": "Rust",
        "aliases": [
            "rs"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/rust.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "sas",
        "name": "SAS",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/sas.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "sass",
        "name": "Sass",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/sass.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "scala",
        "name": "Scala",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/scala.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "scheme",
        "name": "Scheme",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/scheme.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "scss",
        "name": "SCSS",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/scss.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "sdbl",
        "name": "1C (Query)",
        "aliases": [
            "1c-query"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/sdbl.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "shaderlab",
        "name": "ShaderLab",
        "aliases": [
            "shader"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/shaderlab.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "shellscript",
        "name": "Shell",
        "aliases": [
            "bash",
            "sh",
            "shell",
            "zsh"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/shellscript.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "shellsession",
        "name": "Shell Session",
        "aliases": [
            "console"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/shellsession.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "smalltalk",
        "name": "Smalltalk",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/smalltalk.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "solidity",
        "name": "Solidity",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/solidity.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "soy",
        "name": "Closure Templates",
        "aliases": [
            "closure-templates"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/soy.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "sparql",
        "name": "SPARQL",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/sparql.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "splunk",
        "name": "Splunk Query Language",
        "aliases": [
            "spl"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/splunk.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "sql",
        "name": "SQL",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/sql.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "ssh-config",
        "name": "SSH Config",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/ssh-config.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "stata",
        "name": "Stata",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/stata.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "stylus",
        "name": "Stylus",
        "aliases": [
            "styl"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/stylus.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "svelte",
        "name": "Svelte",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/svelte.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "swift",
        "name": "Swift",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/swift.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "system-verilog",
        "name": "SystemVerilog",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/system-verilog.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "systemd",
        "name": "Systemd Units",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/systemd.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "talonscript",
        "name": "TalonScript",
        "aliases": [
            "talon"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/talonscript.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "tasl",
        "name": "Tasl",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/tasl.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "tcl",
        "name": "Tcl",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/tcl.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "templ",
        "name": "Templ",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/templ.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "terraform",
        "name": "Terraform",
        "aliases": [
            "tf",
            "tfvars"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/terraform.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "tex",
        "name": "TeX",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/tex.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "toml",
        "name": "TOML",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/toml.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "ts-tags",
        "name": "TypeScript with Tags",
        "aliases": [
            "lit"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/ts-tags.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "tsv",
        "name": "TSV",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/tsv.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "tsx",
        "name": "TSX",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/tsx.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "turtle",
        "name": "Turtle",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/turtle.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "twig",
        "name": "Twig",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/twig.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "typescript",
        "name": "TypeScript",
        "aliases": [
            "ts"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/typescript.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "typespec",
        "name": "TypeSpec",
        "aliases": [
            "tsp"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/typespec.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "typst",
        "name": "Typst",
        "aliases": [
            "typ"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/typst.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "v",
        "name": "V",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/v.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "vala",
        "name": "Vala",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/vala.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "vb",
        "name": "Visual Basic",
        "aliases": [
            "cmd"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/vb.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "verilog",
        "name": "Verilog",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/verilog.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "vhdl",
        "name": "VHDL",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/vhdl.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "viml",
        "name": "Vim Script",
        "aliases": [
            "vim",
            "vimscript"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/viml.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "vue",
        "name": "Vue",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/vue.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "vue-html",
        "name": "Vue HTML",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/vue-html.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "vyper",
        "name": "Vyper",
        "aliases": [
            "vy"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/vyper.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "wasm",
        "name": "WebAssembly",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/wasm.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "wenyan",
        "name": "Wenyan",
        "aliases": [
            "\u6587\u8A00"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/wenyan.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "wgsl",
        "name": "WGSL",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/wgsl.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "wikitext",
        "name": "Wikitext",
        "aliases": [
            "mediawiki",
            "wiki"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/wikitext.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "wolfram",
        "name": "Wolfram",
        "aliases": [
            "wl"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/wolfram.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "xml",
        "name": "XML",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/xml.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "xsl",
        "name": "XSL",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/xsl.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "yaml",
        "name": "YAML",
        "aliases": [
            "yml"
        ],
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/yaml.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "zenscript",
        "name": "ZenScript",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/zenscript.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "zig",
        "name": "Zig",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/langs/dist/zig.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    }
];
const bundledLanguagesBase = Object.fromEntries(bundledLanguagesInfo.map((i)=>[
        i.id,
        i.import
    ]));
const bundledLanguagesAlias = Object.fromEntries(bundledLanguagesInfo.flatMap((i)=>i.aliases?.map((a)=>[
            a,
            i.import
        ]) || []));
const bundledLanguages = {
    ...bundledLanguagesBase,
    ...bundledLanguagesAlias
};
;
}}),
"[project]/apps/website/docs/node_modules/shiki/dist/themes.mjs [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "bundledThemes": (()=>bundledThemes),
    "bundledThemesInfo": (()=>bundledThemesInfo)
});
const bundledThemesInfo = [
    {
        "id": "andromeeda",
        "displayName": "Andromeeda",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/andromeeda.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "aurora-x",
        "displayName": "Aurora X",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/aurora-x.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "ayu-dark",
        "displayName": "Ayu Dark",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/ayu-dark.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "catppuccin-frappe",
        "displayName": "Catppuccin Frapp\xE9",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/catppuccin-frappe.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "catppuccin-latte",
        "displayName": "Catppuccin Latte",
        "type": "light",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/catppuccin-latte.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "catppuccin-macchiato",
        "displayName": "Catppuccin Macchiato",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/catppuccin-macchiato.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "catppuccin-mocha",
        "displayName": "Catppuccin Mocha",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/catppuccin-mocha.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "dark-plus",
        "displayName": "Dark Plus",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/dark-plus.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "dracula",
        "displayName": "Dracula Theme",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/dracula.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "dracula-soft",
        "displayName": "Dracula Theme Soft",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/dracula-soft.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "everforest-dark",
        "displayName": "Everforest Dark",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/everforest-dark.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "everforest-light",
        "displayName": "Everforest Light",
        "type": "light",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/everforest-light.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "github-dark",
        "displayName": "GitHub Dark",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/github-dark.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "github-dark-default",
        "displayName": "GitHub Dark Default",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/github-dark-default.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "github-dark-dimmed",
        "displayName": "GitHub Dark Dimmed",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/github-dark-dimmed.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "github-dark-high-contrast",
        "displayName": "GitHub Dark High Contrast",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/github-dark-high-contrast.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "github-light",
        "displayName": "GitHub Light",
        "type": "light",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/github-light.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "github-light-default",
        "displayName": "GitHub Light Default",
        "type": "light",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/github-light-default.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "github-light-high-contrast",
        "displayName": "GitHub Light High Contrast",
        "type": "light",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/github-light-high-contrast.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "houston",
        "displayName": "Houston",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/houston.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "kanagawa-dragon",
        "displayName": "Kanagawa Dragon",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/kanagawa-dragon.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "kanagawa-lotus",
        "displayName": "Kanagawa Lotus",
        "type": "light",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/kanagawa-lotus.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "kanagawa-wave",
        "displayName": "Kanagawa Wave",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/kanagawa-wave.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "laserwave",
        "displayName": "LaserWave",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/laserwave.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "light-plus",
        "displayName": "Light Plus",
        "type": "light",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/light-plus.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "material-theme",
        "displayName": "Material Theme",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/material-theme.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "material-theme-darker",
        "displayName": "Material Theme Darker",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/material-theme-darker.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "material-theme-lighter",
        "displayName": "Material Theme Lighter",
        "type": "light",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/material-theme-lighter.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "material-theme-ocean",
        "displayName": "Material Theme Ocean",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/material-theme-ocean.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "material-theme-palenight",
        "displayName": "Material Theme Palenight",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/material-theme-palenight.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "min-dark",
        "displayName": "Min Dark",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/min-dark.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "min-light",
        "displayName": "Min Light",
        "type": "light",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/min-light.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "monokai",
        "displayName": "Monokai",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/monokai.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "night-owl",
        "displayName": "Night Owl",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/night-owl.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "nord",
        "displayName": "Nord",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/nord.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "one-dark-pro",
        "displayName": "One Dark Pro",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/one-dark-pro.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "one-light",
        "displayName": "One Light",
        "type": "light",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/one-light.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "plastic",
        "displayName": "Plastic",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/plastic.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "poimandres",
        "displayName": "Poimandres",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/poimandres.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "red",
        "displayName": "Red",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/red.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "rose-pine",
        "displayName": "Ros\xE9 Pine",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/rose-pine.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "rose-pine-dawn",
        "displayName": "Ros\xE9 Pine Dawn",
        "type": "light",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/rose-pine-dawn.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "rose-pine-moon",
        "displayName": "Ros\xE9 Pine Moon",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/rose-pine-moon.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "slack-dark",
        "displayName": "Slack Dark",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/slack-dark.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "slack-ochin",
        "displayName": "Slack Ochin",
        "type": "light",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/slack-ochin.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "snazzy-light",
        "displayName": "Snazzy Light",
        "type": "light",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/snazzy-light.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "solarized-dark",
        "displayName": "Solarized Dark",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/solarized-dark.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "solarized-light",
        "displayName": "Solarized Light",
        "type": "light",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/solarized-light.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "synthwave-84",
        "displayName": "Synthwave '84",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/synthwave-84.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "tokyo-night",
        "displayName": "Tokyo Night",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/tokyo-night.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "vesper",
        "displayName": "Vesper",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/vesper.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "vitesse-black",
        "displayName": "Vitesse Black",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/vitesse-black.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "vitesse-dark",
        "displayName": "Vitesse Dark",
        "type": "dark",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/vitesse-dark.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    },
    {
        "id": "vitesse-light",
        "displayName": "Vitesse Light",
        "type": "light",
        "import": ()=>__turbopack_require__("[project]/apps/website/docs/node_modules/@shikijs/themes/dist/vitesse-light.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__)
    }
];
const bundledThemes = Object.fromEntries(bundledThemesInfo.map((i)=>[
        i.id,
        i.import
    ]));
;
}}),
"[project]/apps/website/docs/node_modules/shiki/dist/bundle-full.mjs [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "codeToHast": (()=>codeToHast),
    "codeToHtml": (()=>codeToHtml),
    "codeToTokens": (()=>codeToTokens),
    "codeToTokensBase": (()=>codeToTokensBase),
    "codeToTokensWithThemes": (()=>codeToTokensWithThemes),
    "createHighlighter": (()=>createHighlighter),
    "getHighlighter": (()=>getHighlighter),
    "getLastGrammarState": (()=>getLastGrammarState),
    "getSingletonHighlighter": (()=>getSingletonHighlighter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$shikijs$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@shikijs/core/dist/index.mjs [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$shiki$2f$dist$2f$langs$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/shiki/dist/langs.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$shiki$2f$dist$2f$themes$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/shiki/dist/themes.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$shikijs$2f$engine$2d$oniguruma$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@shikijs/engine-oniguruma/dist/index.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$shikijs$2f$core$2f$dist$2f$shared$2f$core$2e$5hv0Law9$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__w__as__warnDeprecated$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/@shikijs/core/dist/shared/core.5hv0Law9.mjs [app-rsc] (ecmascript) <export w as warnDeprecated>");
;
;
;
;
;
;
;
;
const createHighlighter = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$shikijs$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createdBundledHighlighter"])({
    langs: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$shiki$2f$dist$2f$langs$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["bundledLanguages"],
    themes: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$shiki$2f$dist$2f$themes$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["bundledThemes"],
    engine: ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$shikijs$2f$engine$2d$oniguruma$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createOnigurumaEngine"])(__turbopack_require__("[project]/apps/website/docs/node_modules/shiki/dist/wasm.mjs [app-rsc] (ecmascript, async loader)")(__turbopack_import__))
});
const { codeToHtml, codeToHast, codeToTokens, codeToTokensBase, codeToTokensWithThemes, getSingletonHighlighter, getLastGrammarState } = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$shikijs$2f$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createSingletonShorthands"])(createHighlighter);
const getHighlighter = (options)=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f40$shikijs$2f$core$2f$dist$2f$shared$2f$core$2e$5hv0Law9$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__w__as__warnDeprecated$3e$__["warnDeprecated"])("`getHighlighter` is deprecated. Use `createHighlighter` or `getSingletonHighlighter` instead.");
    return createHighlighter(options);
};
;
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-html/lib/handle/comment.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Comment, Parents} from 'hast'
 * @import {State} from '../index.js'
 */ __turbopack_esm__({
    "comment": (()=>comment)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/stringify-entities/lib/index.js [app-rsc] (ecmascript)");
;
const htmlCommentRegex = /^>|^->|<!--|-->|--!>|<!-$/g;
// Declare arrays as variables so it can be cached by `stringifyEntities`
const bogusCommentEntitySubset = [
    '>'
];
const commentEntitySubset = [
    '<',
    '>'
];
function comment(node, _1, _2, state) {
    // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>
    return state.settings.bogusComments ? '<?' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyEntities"])(node.value, Object.assign({}, state.settings.characterReferences, {
        subset: bogusCommentEntitySubset
    })) + '>' : '<!--' + node.value.replace(htmlCommentRegex, encode) + '-->';
    "TURBOPACK unreachable";
    /**
   * @param {string} $0
   */ function encode($0) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyEntities"])($0, Object.assign({}, state.settings.characterReferences, {
            subset: commentEntitySubset
        }));
    }
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-html/lib/handle/doctype.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Doctype, Parents} from 'hast'
 * @import {State} from '../index.js'
 */ /**
 * Serialize a doctype.
 *
 * @param {Doctype} _1
 *   Node to handle.
 * @param {number | undefined} _2
 *   Index of `node` in `parent.
 * @param {Parents | undefined} _3
 *   Parent of `node`.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {string}
 *   Serialized node.
 */ __turbopack_esm__({
    "doctype": (()=>doctype)
});
function doctype(_1, _2, _3, state) {
    return '<!' + (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') + (state.settings.tightDoctype ? '' : ' ') + 'html>';
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-html/lib/omission/omission.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Element, Parents} from 'hast'
 */ /**
 * @callback OmitHandle
 *   Check if a tag can be omitted.
 * @param {Element} element
 *   Element to check.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether to omit a tag.
 *
 */ __turbopack_esm__({
    "omission": (()=>omission)
});
const own = {}.hasOwnProperty;
function omission(handlers) {
    return omit;
    "TURBOPACK unreachable";
    /**
   * Check if a given node can have a tag omitted.
   *
   * @type {OmitHandle}
   */ function omit(node, index, parent) {
        return own.call(handlers, node.tagName) && handlers[node.tagName](node, index, parent);
    }
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-html/lib/omission/util/siblings.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Parents, RootContent} from 'hast'
 */ __turbopack_esm__({
    "siblingAfter": (()=>siblingAfter),
    "siblingBefore": (()=>siblingBefore)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-whitespace/lib/index.js [app-rsc] (ecmascript)");
;
const siblingAfter = siblings(1);
const siblingBefore = siblings(-1);
/** @type {Array<RootContent>} */ const emptyChildren = [];
/**
 * Factory to check siblings in a direction.
 *
 * @param {number} increment
 */ function siblings(increment) {
    return sibling;
    "TURBOPACK unreachable";
    /**
   * Find applicable siblings in a direction.
   *
   * @template {Parents} Parent
   *   Parent type.
   * @param {Parent | undefined} parent
   *   Parent.
   * @param {number | undefined} index
   *   Index of child in `parent`.
   * @param {boolean | undefined} [includeWhitespace=false]
   *   Whether to include whitespace (default: `false`).
   * @returns {Parent extends {children: Array<infer Child>} ? Child | undefined : never}
   *   Child of parent.
   */ function sibling(parent, index, includeWhitespace) {
        const siblings = parent ? parent.children : emptyChildren;
        let offset = (index || 0) + increment;
        let next = siblings[offset];
        if (!includeWhitespace) {
            while(next && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["whitespace"])(next)){
                offset += increment;
                next = siblings[offset];
            }
        }
        // @ts-expect-error: it’s a correct child.
        return next;
    }
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-html/lib/omission/closing.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Element, Parents} from 'hast'
 */ __turbopack_esm__({
    "closing": (()=>closing)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$omission$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-html/lib/omission/omission.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-html/lib/omission/util/siblings.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-whitespace/lib/index.js [app-rsc] (ecmascript)");
;
;
;
const closing = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$omission$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["omission"])({
    body,
    caption: headOrColgroupOrCaption,
    colgroup: headOrColgroupOrCaption,
    dd,
    dt,
    head: headOrColgroupOrCaption,
    html,
    li,
    optgroup,
    option,
    p,
    rp: rubyElement,
    rt: rubyElement,
    tbody,
    td: cells,
    tfoot,
    th: cells,
    thead,
    tr
});
/**
 * Macro for `</head>`, `</colgroup>`, and `</caption>`.
 *
 * @param {Element} _
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the closing tag can be omitted.
 */ function headOrColgroupOrCaption(_, index, parent) {
    const next = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(parent, index, true);
    return !next || next.type !== 'comment' && !(next.type === 'text' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["whitespace"])(next.value.charAt(0)));
}
/**
 * Whether to omit `</html>`.
 *
 * @param {Element} _
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the closing tag can be omitted.
 */ function html(_, index, parent) {
    const next = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(parent, index);
    return !next || next.type !== 'comment';
}
/**
 * Whether to omit `</body>`.
 *
 * @param {Element} _
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the closing tag can be omitted.
 */ function body(_, index, parent) {
    const next = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(parent, index);
    return !next || next.type !== 'comment';
}
/**
 * Whether to omit `</p>`.
 *
 * @param {Element} _
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the closing tag can be omitted.
 */ function p(_, index, parent) {
    const next = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(parent, index);
    return next ? next.type === 'element' && (next.tagName === 'address' || next.tagName === 'article' || next.tagName === 'aside' || next.tagName === 'blockquote' || next.tagName === 'details' || next.tagName === 'div' || next.tagName === 'dl' || next.tagName === 'fieldset' || next.tagName === 'figcaption' || next.tagName === 'figure' || next.tagName === 'footer' || next.tagName === 'form' || next.tagName === 'h1' || next.tagName === 'h2' || next.tagName === 'h3' || next.tagName === 'h4' || next.tagName === 'h5' || next.tagName === 'h6' || next.tagName === 'header' || next.tagName === 'hgroup' || next.tagName === 'hr' || next.tagName === 'main' || next.tagName === 'menu' || next.tagName === 'nav' || next.tagName === 'ol' || next.tagName === 'p' || next.tagName === 'pre' || next.tagName === 'section' || next.tagName === 'table' || next.tagName === 'ul') : !parent || // Confusing parent.
    !(parent.type === 'element' && (parent.tagName === 'a' || parent.tagName === 'audio' || parent.tagName === 'del' || parent.tagName === 'ins' || parent.tagName === 'map' || parent.tagName === 'noscript' || parent.tagName === 'video'));
}
/**
 * Whether to omit `</li>`.
 *
 * @param {Element} _
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the closing tag can be omitted.
 */ function li(_, index, parent) {
    const next = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(parent, index);
    return !next || next.type === 'element' && next.tagName === 'li';
}
/**
 * Whether to omit `</dt>`.
 *
 * @param {Element} _
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the closing tag can be omitted.
 */ function dt(_, index, parent) {
    const next = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(parent, index);
    return Boolean(next && next.type === 'element' && (next.tagName === 'dt' || next.tagName === 'dd'));
}
/**
 * Whether to omit `</dd>`.
 *
 * @param {Element} _
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the closing tag can be omitted.
 */ function dd(_, index, parent) {
    const next = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(parent, index);
    return !next || next.type === 'element' && (next.tagName === 'dt' || next.tagName === 'dd');
}
/**
 * Whether to omit `</rt>` or `</rp>`.
 *
 * @param {Element} _
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the closing tag can be omitted.
 */ function rubyElement(_, index, parent) {
    const next = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(parent, index);
    return !next || next.type === 'element' && (next.tagName === 'rp' || next.tagName === 'rt');
}
/**
 * Whether to omit `</optgroup>`.
 *
 * @param {Element} _
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the closing tag can be omitted.
 */ function optgroup(_, index, parent) {
    const next = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(parent, index);
    return !next || next.type === 'element' && next.tagName === 'optgroup';
}
/**
 * Whether to omit `</option>`.
 *
 * @param {Element} _
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the closing tag can be omitted.
 */ function option(_, index, parent) {
    const next = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(parent, index);
    return !next || next.type === 'element' && (next.tagName === 'option' || next.tagName === 'optgroup');
}
/**
 * Whether to omit `</thead>`.
 *
 * @param {Element} _
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the closing tag can be omitted.
 */ function thead(_, index, parent) {
    const next = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(parent, index);
    return Boolean(next && next.type === 'element' && (next.tagName === 'tbody' || next.tagName === 'tfoot'));
}
/**
 * Whether to omit `</tbody>`.
 *
 * @param {Element} _
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the closing tag can be omitted.
 */ function tbody(_, index, parent) {
    const next = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(parent, index);
    return !next || next.type === 'element' && (next.tagName === 'tbody' || next.tagName === 'tfoot');
}
/**
 * Whether to omit `</tfoot>`.
 *
 * @param {Element} _
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the closing tag can be omitted.
 */ function tfoot(_, index, parent) {
    return !(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(parent, index);
}
/**
 * Whether to omit `</tr>`.
 *
 * @param {Element} _
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the closing tag can be omitted.
 */ function tr(_, index, parent) {
    const next = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(parent, index);
    return !next || next.type === 'element' && next.tagName === 'tr';
}
/**
 * Whether to omit `</td>` or `</th>`.
 *
 * @param {Element} _
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the closing tag can be omitted.
 */ function cells(_, index, parent) {
    const next = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(parent, index);
    return !next || next.type === 'element' && (next.tagName === 'td' || next.tagName === 'th');
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-html/lib/omission/opening.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Element, Parents} from 'hast'
 */ __turbopack_esm__({
    "opening": (()=>opening)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$omission$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-html/lib/omission/omission.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-html/lib/omission/util/siblings.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-whitespace/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$closing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-html/lib/omission/closing.js [app-rsc] (ecmascript)");
;
;
;
;
const opening = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$omission$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["omission"])({
    body,
    colgroup,
    head,
    html,
    tbody
});
/**
 * Whether to omit `<html>`.
 *
 * @param {Element} node
 *   Element.
 * @returns {boolean}
 *   Whether the opening tag can be omitted.
 */ function html(node) {
    const head = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(node, -1);
    return !head || head.type !== 'comment';
}
/**
 * Whether to omit `<head>`.
 *
 * @param {Element} node
 *   Element.
 * @returns {boolean}
 *   Whether the opening tag can be omitted.
 */ function head(node) {
    /** @type {Set<string>} */ const seen = new Set();
    // Whether `srcdoc` or not,
    // make sure the content model at least doesn’t have too many `base`s/`title`s.
    for (const child of node.children){
        if (child.type === 'element' && (child.tagName === 'base' || child.tagName === 'title')) {
            if (seen.has(child.tagName)) return false;
            seen.add(child.tagName);
        }
    }
    // “May be omitted if the element is empty,
    // or if the first thing inside the head element is an element.”
    const child = node.children[0];
    return !child || child.type === 'element';
}
/**
 * Whether to omit `<body>`.
 *
 * @param {Element} node
 *   Element.
 * @returns {boolean}
 *   Whether the opening tag can be omitted.
 */ function body(node) {
    const head = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(node, -1, true);
    return !head || head.type !== 'comment' && !(head.type === 'text' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["whitespace"])(head.value.charAt(0))) && !(head.type === 'element' && (head.tagName === 'meta' || head.tagName === 'link' || head.tagName === 'script' || head.tagName === 'style' || head.tagName === 'template'));
}
/**
 * Whether to omit `<colgroup>`.
 * The spec describes some logic for the opening tag, but it’s easier to
 * implement in the closing tag, to the same effect, so we handle it there
 * instead.
 *
 * @param {Element} node
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the opening tag can be omitted.
 */ function colgroup(node, index, parent) {
    const previous = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingBefore"])(parent, index);
    const head = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(node, -1, true);
    // Previous colgroup was already omitted.
    if (parent && previous && previous.type === 'element' && previous.tagName === 'colgroup' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$closing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["closing"])(previous, parent.children.indexOf(previous), parent)) {
        return false;
    }
    return Boolean(head && head.type === 'element' && head.tagName === 'col');
}
/**
 * Whether to omit `<tbody>`.
 *
 * @param {Element} node
 *   Element.
 * @param {number | undefined} index
 *   Index of element in parent.
 * @param {Parents | undefined} parent
 *   Parent of element.
 * @returns {boolean}
 *   Whether the opening tag can be omitted.
 */ function tbody(node, index, parent) {
    const previous = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingBefore"])(parent, index);
    const head = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$util$2f$siblings$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["siblingAfter"])(node, -1);
    // Previous table section was already omitted.
    if (parent && previous && previous.type === 'element' && (previous.tagName === 'thead' || previous.tagName === 'tbody') && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$closing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["closing"])(previous, parent.children.indexOf(previous), parent)) {
        return false;
    }
    return Boolean(head && head.type === 'element' && head.tagName === 'tr');
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-html/lib/handle/element.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Element, Parents, Properties} from 'hast'
 * @import {State} from '../index.js'
 */ __turbopack_esm__({
    "element": (()=>element)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$opening$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-html/lib/omission/opening.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$closing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-html/lib/omission/closing.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$find$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/lib/find.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/stringify-entities/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/space-separated-tokens/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/comma-separated-tokens/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$ccount$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/ccount/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
/**
 * Maps of subsets.
 *
 * Each value is a matrix of tuples.
 * The value at `0` causes parse errors, the value at `1` is valid.
 * Of both, the value at `0` is unsafe, and the value at `1` is safe.
 *
 * @type {Record<'double' | 'name' | 'single' | 'unquoted', Array<[Array<string>, Array<string>]>>}
 */ const constants = {
    // See: <https://html.spec.whatwg.org/#attribute-name-state>.
    name: [
        [
            '\t\n\f\r &/=>'.split(''),
            '\t\n\f\r "&\'/=>`'.split('')
        ],
        [
            '\0\t\n\f\r "&\'/<=>'.split(''),
            '\0\t\n\f\r "&\'/<=>`'.split('')
        ]
    ],
    // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.
    unquoted: [
        [
            '\t\n\f\r &>'.split(''),
            '\0\t\n\f\r "&\'<=>`'.split('')
        ],
        [
            '\0\t\n\f\r "&\'<=>`'.split(''),
            '\0\t\n\f\r "&\'<=>`'.split('')
        ]
    ],
    // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.
    single: [
        [
            "&'".split(''),
            '"&\'`'.split('')
        ],
        [
            "\0&'".split(''),
            '\0"&\'`'.split('')
        ]
    ],
    // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.
    double: [
        [
            '"&'.split(''),
            '"&\'`'.split('')
        ],
        [
            '\0"&'.split(''),
            '\0"&\'`'.split('')
        ]
    ]
};
function element(node, index, parent, state) {
    const schema = state.schema;
    const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags;
    let selfClosing = schema.space === 'svg' ? state.settings.closeEmptyElements : state.settings.voids.includes(node.tagName.toLowerCase());
    /** @type {Array<string>} */ const parts = [];
    /** @type {string} */ let last;
    if (schema.space === 'html' && node.tagName === 'svg') {
        state.schema = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["svg"];
    }
    const attributes = serializeAttributes(state, node.properties);
    const content = state.all(schema.space === 'html' && node.tagName === 'template' ? node.content : node);
    state.schema = schema;
    // If the node is categorised as void, but it has children, remove the
    // categorisation.
    // This enables for example `menuitem`s, which are void in W3C HTML but not
    // void in WHATWG HTML, to be stringified properly.
    // Note: `menuitem` has since been removed from the HTML spec, and so is no
    // longer void.
    if (content) selfClosing = false;
    if (attributes || !omit || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$opening$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["opening"])(node, index, parent)) {
        parts.push('<', node.tagName, attributes ? ' ' + attributes : '');
        if (selfClosing && (schema.space === 'svg' || state.settings.closeSelfClosing)) {
            last = attributes.charAt(attributes.length - 1);
            if (!state.settings.tightSelfClosing || last === '/' || last && last !== '"' && last !== "'") {
                parts.push(' ');
            }
            parts.push('/');
        }
        parts.push('>');
    }
    parts.push(content);
    if (!selfClosing && (!omit || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$omission$2f$closing$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["closing"])(node, index, parent))) {
        parts.push('</' + node.tagName + '>');
    }
    return parts.join('');
}
/**
 * @param {State} state
 * @param {Properties | null | undefined} properties
 * @returns {string}
 */ function serializeAttributes(state, properties) {
    /** @type {Array<string>} */ const values = [];
    let index = -1;
    /** @type {string} */ let key;
    if (properties) {
        for(key in properties){
            if (properties[key] !== null && properties[key] !== undefined) {
                const value = serializeAttribute(state, key, properties[key]);
                if (value) values.push(value);
            }
        }
    }
    while(++index < values.length){
        const last = state.settings.tightAttributes ? values[index].charAt(values[index].length - 1) : undefined;
        // In tight mode, don’t add a space after quoted attributes.
        if (index !== values.length - 1 && last !== '"' && last !== "'") {
            values[index] += ' ';
        }
    }
    return values.join('');
}
/**
 * @param {State} state
 * @param {string} key
 * @param {Properties[keyof Properties]} value
 * @returns {string}
 */ function serializeAttribute(state, key, value) {
    const info = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$lib$2f$find$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["find"])(state.schema, key);
    const x = state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1;
    const y = state.settings.allowDangerousCharacters ? 0 : 1;
    let quote = state.quote;
    /** @type {string | undefined} */ let result;
    if (info.overloadedBoolean && (value === info.attribute || value === '')) {
        value = true;
    } else if ((info.boolean || info.overloadedBoolean) && (typeof value !== 'string' || value === info.attribute || value === '')) {
        value = Boolean(value);
    }
    if (value === null || value === undefined || value === false || typeof value === 'number' && Number.isNaN(value)) {
        return '';
    }
    const name = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyEntities"])(info.attribute, Object.assign({}, state.settings.characterReferences, {
        // Always encode without parse errors in non-HTML.
        subset: constants.name[x][y]
    }));
    // No value.
    // There is currently only one boolean property in SVG: `[download]` on
    // `<a>`.
    // This property does not seem to work in browsers (Firefox, Safari, Chrome),
    // so I can’t test if dropping the value works.
    // But I assume that it should:
    //
    // ```html
    // <!doctype html>
    // <svg viewBox="0 0 100 100">
    //   <a href=https://example.com download>
    //     <circle cx=50 cy=40 r=35 />
    //   </a>
    // </svg>
    // ```
    //
    // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>
    if (value === true) return name;
    // `spaces` doesn’t accept a second argument, but it’s given here just to
    // keep the code cleaner.
    value = Array.isArray(value) ? (info.commaSeparated ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringify"] : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringify"])(value, {
        padLeft: !state.settings.tightCommaSeparatedLists
    }) : String(value);
    if (state.settings.collapseEmptyAttributes && !value) return name;
    // Check unquoted value.
    if (state.settings.preferUnquoted) {
        result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyEntities"])(value, Object.assign({}, state.settings.characterReferences, {
            attribute: true,
            subset: constants.unquoted[x][y]
        }));
    }
    // If we don’t want unquoted, or if `value` contains character references when
    // unquoted…
    if (result !== value) {
        // If the alternative is less common than `quote`, switch.
        if (state.settings.quoteSmart && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$ccount$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ccount"])(value, quote) > (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$ccount$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ccount"])(value, state.alternative)) {
            quote = state.alternative;
        }
        result = quote + (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyEntities"])(value, Object.assign({}, state.settings.characterReferences, {
            // Always encode without parse errors in non-HTML.
            subset: (quote === "'" ? constants.single : constants.double)[x][y],
            attribute: true
        })) + quote;
    }
    // Don’t add a `=` for unquoted empties.
    return name + (result ? '=' + result : result);
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-html/lib/handle/text.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Parents, Text} from 'hast'
 * @import {Raw} from 'mdast-util-to-hast'
 * @import {State} from '../index.js'
 */ __turbopack_esm__({
    "text": (()=>text)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/stringify-entities/lib/index.js [app-rsc] (ecmascript)");
;
// Declare array as variable so it can be cached by `stringifyEntities`
const textEntitySubset = [
    '<',
    '&'
];
function text(node, _, parent, state) {
    // Check if content of `node` should be escaped.
    return parent && parent.type === 'element' && (parent.tagName === 'script' || parent.tagName === 'style') ? node.value : (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringifyEntities"])(node.value, Object.assign({}, state.settings.characterReferences, {
        subset: textEntitySubset
    }));
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-html/lib/handle/raw.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Parents} from 'hast'
 * @import {Raw} from 'mdast-util-to-hast'
 * @import {State} from '../index.js'
 */ __turbopack_esm__({
    "raw": (()=>raw)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-html/lib/handle/text.js [app-rsc] (ecmascript)");
;
function raw(node, index, parent, state) {
    return state.settings.allowDangerousHtml ? node.value : (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["text"])(node, index, parent, state);
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-html/lib/handle/root.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Parents, Root} from 'hast'
 * @import {State} from '../index.js'
 */ /**
 * Serialize a root.
 *
 * @param {Root} node
 *   Node to handle.
 * @param {number | undefined} _1
 *   Index of `node` in `parent.
 * @param {Parents | undefined} _2
 *   Parent of `node`.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {string}
 *   Serialized node.
 */ __turbopack_esm__({
    "root": (()=>root)
});
function root(node, _1, _2, state) {
    return state.all(node);
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-html/lib/handle/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Nodes, Parents} from 'hast'
 * @import {State} from '../index.js'
 */ __turbopack_esm__({
    "handle": (()=>handle)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$zwitch$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/zwitch/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$comment$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-html/lib/handle/comment.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$doctype$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-html/lib/handle/doctype.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$element$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-html/lib/handle/element.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$raw$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-html/lib/handle/raw.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$root$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-html/lib/handle/root.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-html/lib/handle/text.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
const handle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$zwitch$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["zwitch"])('type', {
    invalid,
    unknown,
    handlers: {
        comment: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$comment$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["comment"],
        doctype: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$doctype$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["doctype"],
        element: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$element$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["element"],
        raw: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$raw$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["raw"],
        root: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$root$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["root"],
        text: __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$text$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["text"]
    }
});
/**
 * Fail when a non-node is found in the tree.
 *
 * @param {unknown} node
 *   Unknown value.
 * @returns {never}
 *   Never.
 */ function invalid(node) {
    throw new Error('Expected node, not `' + node + '`');
}
/**
 * Fail when a node with an unknown type is found in the tree.
 *
 * @param {unknown} node_
 *  Unknown node.
 * @returns {never}
 *   Never.
 */ function unknown(node_) {
    // `type` is guaranteed by runtime JS.
    const node = node_;
    throw new Error('Cannot compile unknown node `' + node.type + '`');
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-html/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Nodes, Parents, RootContent} from 'hast'
 * @import {Schema} from 'property-information'
 * @import {Options as StringifyEntitiesOptions} from 'stringify-entities'
 */ /**
 * @typedef {Omit<StringifyEntitiesOptions, 'attribute' | 'escapeOnly' | 'subset'>} CharacterReferences
 *
 * @typedef Options
 *   Configuration.
 * @property {boolean | null | undefined} [allowDangerousCharacters=false]
 *   Do not encode some characters which cause XSS vulnerabilities in older
 *   browsers (default: `false`).
 *
 *   > ⚠️ **Danger**: only set this if you completely trust the content.
 * @property {boolean | null | undefined} [allowDangerousHtml=false]
 *   Allow `raw` nodes and insert them as raw HTML (default: `false`).
 *
 *   When `false`, `Raw` nodes are encoded.
 *
 *   > ⚠️ **Danger**: only set this if you completely trust the content.
 * @property {boolean | null | undefined} [allowParseErrors=false]
 *   Do not encode characters which cause parse errors (even though they work),
 *   to save bytes (default: `false`).
 *
 *   Not used in the SVG space.
 *
 *   > 👉 **Note**: intentionally creates parse errors in markup (how parse
 *   > errors are handled is well defined, so this works but isn’t pretty).
 * @property {boolean | null | undefined} [bogusComments=false]
 *   Use “bogus comments” instead of comments to save byes: `<?charlie>`
 *   instead of `<!--charlie-->` (default: `false`).
 *
 *   > 👉 **Note**: intentionally creates parse errors in markup (how parse
 *   > errors are handled is well defined, so this works but isn’t pretty).
 * @property {CharacterReferences | null | undefined} [characterReferences]
 *   Configure how to serialize character references (optional).
 * @property {boolean | null | undefined} [closeEmptyElements=false]
 *   Close SVG elements without any content with slash (`/`) on the opening tag
 *   instead of an end tag: `<circle />` instead of `<circle></circle>`
 *   (default: `false`).
 *
 *   See `tightSelfClosing` to control whether a space is used before the
 *   slash.
 *
 *   Not used in the HTML space.
 * @property {boolean | null | undefined} [closeSelfClosing=false]
 *   Close self-closing nodes with an extra slash (`/`): `<img />` instead of
 *   `<img>` (default: `false`).
 *
 *   See `tightSelfClosing` to control whether a space is used before the
 *   slash.
 *
 *   Not used in the SVG space.
 * @property {boolean | null | undefined} [collapseEmptyAttributes=false]
 *   Collapse empty attributes: get `class` instead of `class=""` (default:
 *   `false`).
 *
 *   Not used in the SVG space.
 *
 *   > 👉 **Note**: boolean attributes (such as `hidden`) are always collapsed.
 * @property {boolean | null | undefined} [omitOptionalTags=false]
 *   Omit optional opening and closing tags (default: `false`).
 *
 *   For example, in `<ol><li>one</li><li>two</li></ol>`, both `</li>` closing
 *   tags can be omitted.
 *   The first because it’s followed by another `li`, the last because it’s
 *   followed by nothing.
 *
 *   Not used in the SVG space.
 * @property {boolean | null | undefined} [preferUnquoted=false]
 *   Leave attributes unquoted if that results in less bytes (default: `false`).
 *
 *   Not used in the SVG space.
 * @property {boolean | null | undefined} [quoteSmart=false]
 *   Use the other quote if that results in less bytes (default: `false`).
 * @property {Quote | null | undefined} [quote='"']
 *   Preferred quote to use (default: `'"'`).
 * @property {Space | null | undefined} [space='html']
 *   When an `<svg>` element is found in the HTML space, this package already
 *   automatically switches to and from the SVG space when entering and exiting
 *   it (default: `'html'`).
 *
 *   > 👉 **Note**: hast is not XML.
 *   > It supports SVG as embedded in HTML.
 *   > It does not support the features available in XML.
 *   > Passing SVG might break but fragments of modern SVG should be fine.
 *   > Use [`xast`][xast] if you need to support SVG as XML.
 * @property {boolean | null | undefined} [tightAttributes=false]
 *   Join attributes together, without whitespace, if possible: get
 *   `class="a b"title="c d"` instead of `class="a b" title="c d"` to save
 *   bytes (default: `false`).
 *
 *   Not used in the SVG space.
 *
 *   > 👉 **Note**: intentionally creates parse errors in markup (how parse
 *   > errors are handled is well defined, so this works but isn’t pretty).
 * @property {boolean | null | undefined} [tightCommaSeparatedLists=false]
 *   Join known comma-separated attribute values with just a comma (`,`),
 *   instead of padding them on the right as well (`,␠`, where `␠` represents a
 *   space) (default: `false`).
 * @property {boolean | null | undefined} [tightDoctype=false]
 *   Drop unneeded spaces in doctypes: `<!doctypehtml>` instead of
 *   `<!doctype html>` to save bytes (default: `false`).
 *
 *   > 👉 **Note**: intentionally creates parse errors in markup (how parse
 *   > errors are handled is well defined, so this works but isn’t pretty).
 * @property {boolean | null | undefined} [tightSelfClosing=false]
 *   Do not use an extra space when closing self-closing elements: `<img/>`
 *   instead of `<img />` (default: `false`).
 *
 *   > 👉 **Note**: only used if `closeSelfClosing: true` or
 *   > `closeEmptyElements: true`.
 * @property {boolean | null | undefined} [upperDoctype=false]
 *   Use a `<!DOCTYPE…` instead of `<!doctype…` (default: `false`).
 *
 *   Useless except for XHTML.
 * @property {ReadonlyArray<string> | null | undefined} [voids]
 *   Tag names of elements to serialize without closing tag (default: `html-void-elements`).
 *
 *   Not used in the SVG space.
 *
 *   > 👉 **Note**: It’s highly unlikely that you want to pass this, because
 *   > hast is not for XML, and HTML will not add more void elements.
 *
 * @typedef {'"' | "'"} Quote
 *   HTML quotes for attribute values.
 *
 * @typedef {Omit<Required<{[key in keyof Options]: Exclude<Options[key], null | undefined>}>, 'space' | 'quote'>} Settings
 *
 * @typedef {'html' | 'svg'} Space
 *   Namespace.
 *
 * @typedef State
 *   Info passed around about the current state.
 * @property {(node: Parents | undefined) => string} all
 *   Serialize the children of a parent node.
 * @property {Quote} alternative
 *   Alternative quote.
 * @property {(node: Nodes, index: number | undefined, parent: Parents | undefined) => string} one
 *   Serialize one node.
 * @property {Quote} quote
 *   Preferred quote.
 * @property {Schema} schema
 *   Current schema.
 * @property {Settings} settings
 *   User configuration.
 */ __turbopack_esm__({
    "all": (()=>all),
    "toHtml": (()=>toHtml)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$html$2d$void$2d$elements$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/html-void-elements/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/property-information/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-html/lib/handle/index.js [app-rsc] (ecmascript)");
;
;
;
/** @type {Options} */ const emptyOptions = {};
/** @type {CharacterReferences} */ const emptyCharacterReferences = {};
/** @type {Array<never>} */ const emptyChildren = [];
function toHtml(tree, options) {
    const options_ = options || emptyOptions;
    const quote = options_.quote || '"';
    const alternative = quote === '"' ? "'" : '"';
    if (quote !== '"' && quote !== "'") {
        throw new Error('Invalid quote `' + quote + '`, expected `\'` or `"`');
    }
    /** @type {State} */ const state = {
        one,
        all,
        settings: {
            omitOptionalTags: options_.omitOptionalTags || false,
            allowParseErrors: options_.allowParseErrors || false,
            allowDangerousCharacters: options_.allowDangerousCharacters || false,
            quoteSmart: options_.quoteSmart || false,
            preferUnquoted: options_.preferUnquoted || false,
            tightAttributes: options_.tightAttributes || false,
            upperDoctype: options_.upperDoctype || false,
            tightDoctype: options_.tightDoctype || false,
            bogusComments: options_.bogusComments || false,
            tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,
            tightSelfClosing: options_.tightSelfClosing || false,
            collapseEmptyAttributes: options_.collapseEmptyAttributes || false,
            allowDangerousHtml: options_.allowDangerousHtml || false,
            voids: options_.voids || __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$html$2d$void$2d$elements$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["htmlVoidElements"],
            characterReferences: options_.characterReferences || emptyCharacterReferences,
            closeSelfClosing: options_.closeSelfClosing || false,
            closeEmptyElements: options_.closeEmptyElements || false
        },
        schema: options_.space === 'svg' ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["svg"] : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["html"],
        quote,
        alternative
    };
    return state.one(Array.isArray(tree) ? {
        type: 'root',
        children: tree
    } : tree, undefined, undefined);
}
/**
 * Serialize a node.
 *
 * @this {State}
 *   Info passed around about the current state.
 * @param {Nodes} node
 *   Node to handle.
 * @param {number | undefined} index
 *   Index of `node` in `parent.
 * @param {Parents | undefined} parent
 *   Parent of `node`.
 * @returns {string}
 *   Serialized node.
 */ function one(node, index, parent) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$html$2f$lib$2f$handle$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["handle"])(node, index, parent, this);
}
function all(parent) {
    /** @type {Array<string>} */ const results = [];
    const children = parent && parent.children || emptyChildren;
    let index = -1;
    while(++index < children.length){
        results[index] = this.one(children[index], index, parent);
    }
    return results.join('');
}
}}),
"[project]/apps/website/docs/node_modules/emoji-regex-xs/index.mjs [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
const r = String.raw;
const seq = r`(?:\p{Emoji}\uFE0F\u20E3?|\p{Emoji_Modifier_Base}\p{Emoji_Modifier}?|\p{Emoji_Presentation})`;
const sTags = r`\u{E0061}-\u{E007A}`;
const __TURBOPACK__default__export__ = ()=>new RegExp(r`[\u{1F1E6}-\u{1F1FF}]{2}|\u{1F3F4}[${sTags}]{2}[\u{E0030}-\u{E0039}${sTags}]{1,3}\u{E007F}|${seq}(?:\u200D${seq})*`, 'gu');
}}),
"[project]/apps/website/docs/node_modules/regex/src/utils-internals.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// Separating some utils for improved tree shaking of the `./internals` export
__turbopack_esm__({
    "incrementIfAtLeast": (()=>incrementIfAtLeast),
    "noncapturingDelim": (()=>noncapturingDelim),
    "spliceStr": (()=>spliceStr)
});
const noncapturingDelim = String.raw`\(\?(?:[:=!>A-Za-z\-]|<[=!]|\(DEFINE\))`;
/**
Updates the array in place by incrementing each value greater than or equal to the threshold.
@param {Array<number>} arr
@param {number} threshold
*/ function incrementIfAtLeast(arr, threshold) {
    for(let i = 0; i < arr.length; i++){
        if (arr[i] >= threshold) {
            arr[i]++;
        }
    }
}
/**
@param {string} str
@param {number} pos
@param {string} oldValue
@param {string} newValue
@returns {string}
*/ function spliceStr(str, pos, oldValue, newValue) {
    return str.slice(0, pos) + newValue + str.slice(pos + oldValue.length);
}
;
}}),
"[project]/apps/website/docs/node_modules/regex/src/atomic.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "atomic": (()=>atomic),
    "possessive": (()=>possessive)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2f$src$2f$utils$2d$internals$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/regex/src/utils-internals.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/regex-utilities/src/index.js [app-rsc] (ecmascript)");
;
;
const atomicPluginToken = new RegExp(String.raw`(?<noncapturingStart>${__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2f$src$2f$utils$2d$internals$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["noncapturingDelim"]})|(?<capturingStart>\((?:\?<[^>]+>)?)|\\?.`, 'gsu');
/**
Apply transformations for atomic groups: `(?>…)`.
@param {string} expression
@param {import('./regex.js').PluginData} [data]
@returns {Required<import('./regex.js').PluginResult>}
*/ function atomic(expression, data) {
    const hiddenCaptures = data?.hiddenCaptures ?? [];
    // Capture transfer is used by <github.com/slevithan/oniguruma-to-es>
    let captureTransfers = data?.captureTransfers ?? new Map();
    if (!/\(\?>/.test(expression)) {
        return {
            pattern: expression,
            captureTransfers,
            hiddenCaptures
        };
    }
    const aGDelim = '(?>';
    const emulatedAGDelim = '(?:(?=(';
    const captureNumMap = [
        0
    ];
    const addedHiddenCaptures = [];
    let numCapturesBeforeAG = 0;
    let numAGs = 0;
    let aGPos = NaN;
    let hasProcessedAG;
    do {
        hasProcessedAG = false;
        let numCharClassesOpen = 0;
        let numGroupsOpenInAG = 0;
        let inAG = false;
        let match;
        atomicPluginToken.lastIndex = Number.isNaN(aGPos) ? 0 : aGPos + emulatedAGDelim.length;
        while(match = atomicPluginToken.exec(expression)){
            const { 0: m, index, groups: { capturingStart, noncapturingStart } } = match;
            if (m === '[') {
                numCharClassesOpen++;
            } else if (!numCharClassesOpen) {
                if (m === aGDelim && !inAG) {
                    aGPos = index;
                    inAG = true;
                } else if (inAG && noncapturingStart) {
                    numGroupsOpenInAG++;
                } else if (capturingStart) {
                    if (inAG) {
                        numGroupsOpenInAG++;
                    } else {
                        numCapturesBeforeAG++;
                        captureNumMap.push(numCapturesBeforeAG + numAGs);
                    }
                } else if (m === ')' && inAG) {
                    if (!numGroupsOpenInAG) {
                        numAGs++;
                        const addedCaptureNum = numCapturesBeforeAG + numAGs;
                        // Replace `expression` and use `<$$N>` as a temporary wrapper for the backref so it
                        // can avoid backref renumbering afterward. Wrap the whole substitution (including the
                        // lookahead and following backref) in a noncapturing group to handle following
                        // quantifiers and literal digits
                        expression = `${expression.slice(0, aGPos)}${emulatedAGDelim}${expression.slice(aGPos + aGDelim.length, index)}))<$$${addedCaptureNum}>)${expression.slice(index + 1)}`;
                        hasProcessedAG = true;
                        addedHiddenCaptures.push(addedCaptureNum);
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2f$src$2f$utils$2d$internals$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["incrementIfAtLeast"])(hiddenCaptures, addedCaptureNum);
                        if (captureTransfers.size) {
                            const newCaptureTransfers = new Map();
                            captureTransfers.forEach((from, to)=>{
                                newCaptureTransfers.set(to >= addedCaptureNum ? to + 1 : to, from.map((f)=>f >= addedCaptureNum ? f + 1 : f));
                            });
                            captureTransfers = newCaptureTransfers;
                        }
                        break;
                    }
                    numGroupsOpenInAG--;
                }
            } else if (m === ']') {
                numCharClassesOpen--;
            }
        }
    // Start over from the beginning of the atomic group's contents, in case the processed group
    // contains additional atomic groups
    }while (hasProcessedAG)
    hiddenCaptures.push(...addedHiddenCaptures);
    // Second pass to adjust numbered backrefs
    expression = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["replaceUnescaped"])(expression, String.raw`\\(?<backrefNum>[1-9]\d*)|<\$\$(?<wrappedBackrefNum>\d+)>`, ({ 0: m, groups: { backrefNum, wrappedBackrefNum } })=>{
        if (backrefNum) {
            const bNum = +backrefNum;
            if (bNum > captureNumMap.length - 1) {
                throw new Error(`Backref "${m}" greater than number of captures`);
            }
            return `\\${captureNumMap[bNum]}`;
        }
        return `\\${wrappedBackrefNum}`;
    }, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Context"].DEFAULT);
    return {
        pattern: expression,
        captureTransfers,
        hiddenCaptures
    };
}
const baseQuantifier = String.raw`(?:[?*+]|\{\d+(?:,\d*)?\})`;
// Complete tokenizer for base syntax; doesn't (need to) know about character-class-only syntax
const possessivePluginToken = new RegExp(String.raw`
\\(?: \d+
  | c[A-Za-z]
  | [gk]<[^>]+>
  | [pPu]\{[^\}]+\}
  | u[A-Fa-f\d]{4}
  | x[A-Fa-f\d]{2}
  )
| \((?: \? (?: [:=!>]
  | <(?:[=!]|[^>]+>)
  | [A-Za-z\-]+:
  | \(DEFINE\)
  ))?
| (?<qBase>${baseQuantifier})(?<qMod>[?+]?)(?<invalidQ>[?*+\{]?)
| \\?.
`.replace(/\s+/g, ''), 'gsu');
/**
Transform posessive quantifiers into atomic groups. The posessessive quantifiers are:
`?+`, `*+`, `++`, `{N}+`, `{N,}+`, `{N,N}+`.
This follows Java, PCRE, Perl, and Python.
Possessive quantifiers in Oniguruma and Onigmo are only: `?+`, `*+`, `++`.
@param {string} expression
@returns {import('./regex.js').PluginResult}
*/ function possessive(expression) {
    if (!new RegExp(`${baseQuantifier}\\+`).test(expression)) {
        return {
            pattern: expression
        };
    }
    const openGroupIndices = [];
    let lastGroupIndex = null;
    let lastCharClassIndex = null;
    let lastToken = '';
    let numCharClassesOpen = 0;
    let match;
    possessivePluginToken.lastIndex = 0;
    while(match = possessivePluginToken.exec(expression)){
        const { 0: m, index, groups: { qBase, qMod, invalidQ } } = match;
        if (m === '[') {
            if (!numCharClassesOpen) {
                lastCharClassIndex = index;
            }
            numCharClassesOpen++;
        } else if (m === ']') {
            if (numCharClassesOpen) {
                numCharClassesOpen--;
            // Unmatched `]`
            } else {
                lastCharClassIndex = null;
            }
        } else if (!numCharClassesOpen) {
            if (qMod === '+' && lastToken && !lastToken.startsWith('(')) {
                // Invalid following quantifier would become valid via the wrapping group
                if (invalidQ) {
                    throw new Error(`Invalid quantifier "${m}"`);
                }
                let charsAdded = -1; // -1 for removed trailing `+`
                // Possessivizing fixed repetition quantifiers like `{2}` does't change their behavior, so
                // avoid doing so (convert them to greedy)
                if (/^\{\d+\}$/.test(qBase)) {
                    expression = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2f$src$2f$utils$2d$internals$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["spliceStr"])(expression, index + qBase.length, qMod, '');
                } else {
                    if (lastToken === ')' || lastToken === ']') {
                        const nodeIndex = lastToken === ')' ? lastGroupIndex : lastCharClassIndex;
                        // Unmatched `)` would break out of the wrapping group and mess with handling.
                        // Unmatched `]` wouldn't be a problem, but it's unnecessary to have dedicated support
                        // for unescaped `]++` since this won't work with flag u or v anyway
                        if (nodeIndex === null) {
                            throw new Error(`Invalid unmatched "${lastToken}"`);
                        }
                        expression = `${expression.slice(0, nodeIndex)}(?>${expression.slice(nodeIndex, index)}${qBase})${expression.slice(index + m.length)}`;
                    } else {
                        expression = `${expression.slice(0, index - lastToken.length)}(?>${lastToken}${qBase})${expression.slice(index + m.length)}`;
                    }
                    charsAdded += 4; // `(?>)`
                }
                possessivePluginToken.lastIndex += charsAdded;
            } else if (m[0] === '(') {
                openGroupIndices.push(index);
            } else if (m === ')') {
                lastGroupIndex = openGroupIndices.length ? openGroupIndices.pop() : null;
            }
        }
        lastToken = m;
    }
    return {
        pattern: expression
    };
}
;
}}),
"[project]/apps/website/docs/node_modules/regex/src/subclass.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
Works the same as JavaScript's native `RegExp` constructor in all contexts, but automatically
adjusts subpattern matches and indices (with flag `d`) to account for captures added as part of
emulating extended syntax.
*/ __turbopack_esm__({
    "RegExpSubclass": (()=>RegExpSubclass)
});
class RegExpSubclass extends RegExp {
    // Avoid `#private` to allow for subclassing
    /**
  @private
  @type {Map<number, {
    hidden: true;
  }>}
  */ _captureMap;
    /**
  @overload
  @param {string} expression
  @param {string} [flags]
  @param {{
    hiddenCaptures?: Array<number>;
  }} [options]
  */ /**
  @overload
  @param {RegExpSubclass} expression
  @param {string} [flags]
  */ constructor(expression, flags, options){
        // Argument `options` isn't provided when regexes are copied via `new RegExpSubclass(regexp)`,
        // including as part of the internal handling of string methods `matchAll` and `split`
        if (expression instanceof RegExp) {
            if (options) {
                throw new Error('Cannot provide options when copying a regexp');
            }
            super(expression, flags);
            if (expression instanceof RegExpSubclass) {
                this._captureMap = expression._captureMap;
            } else {
                this._captureMap = new Map();
            }
        } else {
            super(expression, flags);
            const hiddenCaptures = options?.hiddenCaptures ?? [];
            this._captureMap = createCaptureMap(hiddenCaptures);
        }
    }
    /**
  Called internally by all String/RegExp methods that use regexes.
  @override
  @param {string} str
  @returns {RegExpExecArray | null}
  */ exec(str) {
        const match = super.exec(str);
        if (!match || !this._captureMap.size) {
            return match;
        }
        const matchCopy = [
            ...match
        ];
        // Empty all but the first value of the array while preserving its other properties
        match.length = 1;
        let indicesCopy;
        if (this.hasIndices) {
            indicesCopy = [
                ...match.indices
            ];
            match.indices.length = 1;
        }
        for(let i = 1; i < matchCopy.length; i++){
            if (!this._captureMap.get(i)?.hidden) {
                match.push(matchCopy[i]);
                if (this.hasIndices) {
                    match.indices.push(indicesCopy[i]);
                }
            }
        }
        return match;
    }
}
/**
Build the capturing group map, with hidden captures marked to indicate their submatches shouldn't
appear in match results.
@param {Array<number>} hiddenCaptures
@returns {Map<number, {
  hidden: true;
}>}
*/ function createCaptureMap(hiddenCaptures) {
    const captureMap = new Map();
    for (const num of hiddenCaptures){
        captureMap.set(num, {
            hidden: true
        });
    }
    return captureMap;
}
;
}}),
"[project]/apps/website/docs/node_modules/regex/src/internals.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({});
;
;
}}),
"[project]/apps/website/docs/node_modules/regex/src/internals.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2f$src$2f$atomic$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/regex/src/atomic.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2f$src$2f$subclass$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/regex/src/subclass.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2f$src$2f$internals$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/regex/src/internals.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/apps/website/docs/node_modules/regex-utilities/src/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// Constant properties for tracking regex syntax context
__turbopack_esm__({
    "Context": (()=>Context),
    "execUnescaped": (()=>execUnescaped),
    "forEachUnescaped": (()=>forEachUnescaped),
    "getGroupContents": (()=>getGroupContents),
    "hasUnescaped": (()=>hasUnescaped),
    "replaceUnescaped": (()=>replaceUnescaped)
});
const Context = Object.freeze({
    DEFAULT: 'DEFAULT',
    CHAR_CLASS: 'CHAR_CLASS'
});
function replaceUnescaped(expression, needle, replacement, context) {
    const re = new RegExp(String.raw`${needle}|(?<$skip>\[\^?|\\?.)`, 'gsu');
    const negated = [
        false
    ];
    let numCharClassesOpen = 0;
    let result = '';
    for (const match of expression.matchAll(re)){
        const { 0: m, groups: { $skip } } = match;
        if (!$skip && (!context || context === Context.DEFAULT === !numCharClassesOpen)) {
            if (replacement instanceof Function) {
                result += replacement(match, {
                    context: numCharClassesOpen ? Context.CHAR_CLASS : Context.DEFAULT,
                    negated: negated[negated.length - 1]
                });
            } else {
                result += replacement;
            }
            continue;
        }
        if (m[0] === '[') {
            numCharClassesOpen++;
            negated.push(m[1] === '^');
        } else if (m === ']' && numCharClassesOpen) {
            numCharClassesOpen--;
            negated.pop();
        }
        result += m;
    }
    return result;
}
function forEachUnescaped(expression, needle, callback, context) {
    // Do this the easy way
    replaceUnescaped(expression, needle, callback, context);
}
function execUnescaped(expression, needle, pos = 0, context) {
    // Quick partial test; avoid the loop if not needed
    if (!new RegExp(needle, 'su').test(expression)) {
        return null;
    }
    const re = new RegExp(`${needle}|(?<$skip>\\\\?.)`, 'gsu');
    re.lastIndex = pos;
    let numCharClassesOpen = 0;
    let match;
    while(match = re.exec(expression)){
        const { 0: m, groups: { $skip } } = match;
        if (!$skip && (!context || context === Context.DEFAULT === !numCharClassesOpen)) {
            return match;
        }
        if (m === '[') {
            numCharClassesOpen++;
        } else if (m === ']' && numCharClassesOpen) {
            numCharClassesOpen--;
        }
        // Avoid an infinite loop on zero-length matches
        if (re.lastIndex == match.index) {
            re.lastIndex++;
        }
    }
    return null;
}
function hasUnescaped(expression, needle, context) {
    // Do this the easy way
    return !!execUnescaped(expression, needle, 0, context);
}
function getGroupContents(expression, contentsStartPos) {
    const token = /\\?./gsu;
    token.lastIndex = contentsStartPos;
    let contentsEndPos = expression.length;
    let numCharClassesOpen = 0;
    // Starting search within an open group, after the group's opening
    let numGroupsOpen = 1;
    let match;
    while(match = token.exec(expression)){
        const [m] = match;
        if (m === '[') {
            numCharClassesOpen++;
        } else if (!numCharClassesOpen) {
            if (m === '(') {
                numGroupsOpen++;
            } else if (m === ')') {
                numGroupsOpen--;
                if (!numGroupsOpen) {
                    contentsEndPos = match.index;
                    break;
                }
            }
        } else if (m === ']') {
            numCharClassesOpen--;
        }
    }
    return expression.slice(contentsStartPos, contentsEndPos);
}
}}),
"[project]/apps/website/docs/node_modules/regex-recursion/src/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "recursion": (()=>recursion)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/regex-utilities/src/index.js [app-rsc] (ecmascript)");
;
const r = String.raw;
const gRToken = r`\\g<(?<gRNameOrNum>[^>&]+)&R=(?<gRDepth>[^>]+)>`;
const recursiveToken = r`\(\?R=(?<rDepth>[^\)]+)\)|${gRToken}`;
const namedCaptureDelim = r`\(\?<(?![=!])(?<captureName>[^>]+)>`;
const captureDelim = r`${namedCaptureDelim}|(?<unnamed>\()(?!\?)`;
const token = new RegExp(r`${namedCaptureDelim}|${recursiveToken}|\(\?|\\?.`, 'gsu');
const overlappingRecursionMsg = 'Cannot use multiple overlapping recursions';
/**
@param {string} pattern
@param {{
  flags?: string;
  captureTransfers?: Map<number, Array<number>>;
  hiddenCaptures?: Array<number>;
  mode?: 'plugin' | 'external';
}} [data]
@returns {{
  pattern: string;
  captureTransfers: Map<number, Array<number>>;
  hiddenCaptures: Array<number>;
}}
*/ function recursion(pattern, data) {
    const { hiddenCaptures, mode } = {
        hiddenCaptures: [],
        mode: 'plugin',
        ...data
    };
    // Capture transfer is used by <github.com/slevithan/oniguruma-to-es>
    let captureTransfers = data?.captureTransfers ?? new Map();
    // Keep the initial fail-check (which avoids unneeded processing) as fast as possible by testing
    // without the accuracy improvement of using `hasUnescaped` with `Context.DEFAULT`
    if (!new RegExp(recursiveToken, 'su').test(pattern)) {
        return {
            pattern,
            captureTransfers,
            hiddenCaptures
        };
    }
    if (mode === 'plugin' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["hasUnescaped"])(pattern, r`\(\?\(DEFINE\)`, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Context"].DEFAULT)) {
        throw new Error('DEFINE groups cannot be used with recursion');
    }
    const addedHiddenCaptures = [];
    const hasNumberedBackref = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["hasUnescaped"])(pattern, r`\\[1-9]`, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Context"].DEFAULT);
    const groupContentsStartPos = new Map();
    const openGroups = [];
    let hasRecursed = false;
    let numCharClassesOpen = 0;
    let numCapturesPassed = 0;
    let match;
    token.lastIndex = 0;
    while(match = token.exec(pattern)){
        const { 0: m, groups: { captureName, rDepth, gRNameOrNum, gRDepth } } = match;
        if (m === '[') {
            numCharClassesOpen++;
        } else if (!numCharClassesOpen) {
            // `(?R=N)`
            if (rDepth) {
                assertMaxInBounds(rDepth);
                if (hasRecursed) {
                    throw new Error(overlappingRecursionMsg);
                }
                if (hasNumberedBackref) {
                    // Could add support for numbered backrefs with extra effort, but it's probably not worth
                    // it. To trigger this error, the regex must include recursion and one of the following:
                    // - An interpolated regex that contains a numbered backref (since other numbered
                    //   backrefs are prevented by implicit flag n).
                    // - A numbered backref, when flag n is explicitly disabled.
                    // Note that Regex+'s extended syntax (atomic groups and sometimes subroutines) can also
                    // add numbered backrefs, but those work fine because external plugins like this one run
                    // *before* the transformation of built-in syntax extensions
                    throw new Error(// When used in `external` mode by transpilers other than Regex+, backrefs might have
                    // gone through conversion from named to numbered, so avoid a misleading error
                    `${mode === 'external' ? 'Backrefs' : 'Numbered backrefs'} cannot be used with global recursion`);
                }
                const left = pattern.slice(0, match.index);
                const right = pattern.slice(token.lastIndex);
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["hasUnescaped"])(right, recursiveToken, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Context"].DEFAULT)) {
                    throw new Error(overlappingRecursionMsg);
                }
                const reps = +rDepth - 1;
                pattern = makeRecursive(left, right, reps, false, hiddenCaptures, addedHiddenCaptures, numCapturesPassed);
                captureTransfers = mapCaptureTransfers(captureTransfers, left, reps, addedHiddenCaptures.length, 0, numCapturesPassed);
                break;
            // `\g<name&R=N>`, `\g<number&R=N>`
            } else if (gRNameOrNum) {
                assertMaxInBounds(gRDepth);
                let isWithinReffedGroup = false;
                for (const g of openGroups){
                    if (g.name === gRNameOrNum || g.num === +gRNameOrNum) {
                        isWithinReffedGroup = true;
                        if (g.hasRecursedWithin) {
                            throw new Error(overlappingRecursionMsg);
                        }
                        break;
                    }
                }
                if (!isWithinReffedGroup) {
                    throw new Error(r`Recursive \g cannot be used outside the referenced group "${mode === 'external' ? gRNameOrNum : r`\g<${gRNameOrNum}&R=${gRDepth}>`}"`);
                }
                const startPos = groupContentsStartPos.get(gRNameOrNum);
                const groupContents = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getGroupContents"])(pattern, startPos);
                if (hasNumberedBackref && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["hasUnescaped"])(groupContents, r`${namedCaptureDelim}|\((?!\?)`, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Context"].DEFAULT)) {
                    throw new Error(// When used in `external` mode by transpilers other than Regex+, backrefs might have
                    // gone through conversion from named to numbered, so avoid a misleading error
                    `${mode === 'external' ? 'Backrefs' : 'Numbered backrefs'} cannot be used with recursion of capturing groups`);
                }
                const groupContentsLeft = pattern.slice(startPos, match.index);
                const groupContentsRight = groupContents.slice(groupContentsLeft.length + m.length);
                const numAddedHiddenCapturesPreExpansion = addedHiddenCaptures.length;
                const reps = +gRDepth - 1;
                const expansion = makeRecursive(groupContentsLeft, groupContentsRight, reps, true, hiddenCaptures, addedHiddenCaptures, numCapturesPassed);
                captureTransfers = mapCaptureTransfers(captureTransfers, groupContentsLeft, reps, addedHiddenCaptures.length - numAddedHiddenCapturesPreExpansion, numAddedHiddenCapturesPreExpansion, numCapturesPassed);
                const pre = pattern.slice(0, startPos);
                const post = pattern.slice(startPos + groupContents.length);
                // Modify the string we're looping over
                pattern = `${pre}${expansion}${post}`;
                // Step forward for the next loop iteration
                token.lastIndex += expansion.length - m.length - groupContentsLeft.length - groupContentsRight.length;
                openGroups.forEach((g)=>g.hasRecursedWithin = true);
                hasRecursed = true;
            } else if (captureName) {
                numCapturesPassed++;
                groupContentsStartPos.set(String(numCapturesPassed), token.lastIndex);
                groupContentsStartPos.set(captureName, token.lastIndex);
                openGroups.push({
                    num: numCapturesPassed,
                    name: captureName
                });
            } else if (m[0] === '(') {
                const isUnnamedCapture = m === '(';
                if (isUnnamedCapture) {
                    numCapturesPassed++;
                    groupContentsStartPos.set(String(numCapturesPassed), token.lastIndex);
                }
                openGroups.push(isUnnamedCapture ? {
                    num: numCapturesPassed
                } : {});
            } else if (m === ')') {
                openGroups.pop();
            }
        } else if (m === ']') {
            numCharClassesOpen--;
        }
    }
    hiddenCaptures.push(...addedHiddenCaptures);
    return {
        pattern,
        captureTransfers,
        hiddenCaptures
    };
}
/**
@param {string} max
*/ function assertMaxInBounds(max) {
    const errMsg = `Max depth must be integer between 2 and 100; used ${max}`;
    if (!/^[1-9]\d*$/.test(max)) {
        throw new Error(errMsg);
    }
    max = +max;
    if (max < 2 || max > 100) {
        throw new Error(errMsg);
    }
}
/**
@param {string} left
@param {string} right
@param {number} reps
@param {boolean} isSubpattern
@param {Array<number>} hiddenCaptures
@param {Array<number>} addedHiddenCaptures
@param {number} numCapturesPassed
@returns {string}
*/ function makeRecursive(left, right, reps, isSubpattern, hiddenCaptures, addedHiddenCaptures, numCapturesPassed) {
    const namesInRecursed = new Set();
    // Can skip this work if not needed
    if (isSubpattern) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["forEachUnescaped"])(left + right, namedCaptureDelim, ({ groups: { captureName } })=>{
            namesInRecursed.add(captureName);
        }, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Context"].DEFAULT);
    }
    const rest = [
        reps,
        isSubpattern ? namesInRecursed : null,
        hiddenCaptures,
        addedHiddenCaptures,
        numCapturesPassed
    ];
    // Depth 2: 'left(?:left(?:)right)right'
    // Depth 3: 'left(?:left(?:left(?:)right)right)right'
    // Empty group in the middle separates tokens and absorbs a following quantifier if present
    return `${left}${repeatWithDepth(`(?:${left}`, 'forward', ...rest)}(?:)${repeatWithDepth(`${right})`, 'backward', ...rest)}${right}`;
}
/**
@param {string} pattern
@param {'forward' | 'backward'} direction
@param {number} reps
@param {Set<string> | null} namesInRecursed
@param {Array<number>} hiddenCaptures
@param {Array<number>} addedHiddenCaptures
@param {number} numCapturesPassed
@returns {string}
*/ function repeatWithDepth(pattern, direction, reps, namesInRecursed, hiddenCaptures, addedHiddenCaptures, numCapturesPassed) {
    const startNum = 2;
    const getDepthNum = (i)=>direction === 'forward' ? i + startNum : reps - i + startNum - 1;
    let result = '';
    for(let i = 0; i < reps; i++){
        const depthNum = getDepthNum(i);
        result += (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["replaceUnescaped"])(pattern, r`${captureDelim}|\\k<(?<backref>[^>]+)>`, ({ 0: m, groups: { captureName, unnamed, backref } })=>{
            if (backref && namesInRecursed && !namesInRecursed.has(backref)) {
                // Don't alter backrefs to groups outside the recursed subpattern
                return m;
            }
            const suffix = `_$${depthNum}`;
            if (unnamed || captureName) {
                const addedCaptureNum = numCapturesPassed + addedHiddenCaptures.length + 1;
                addedHiddenCaptures.push(addedCaptureNum);
                incrementIfAtLeast(hiddenCaptures, addedCaptureNum);
                return unnamed ? m : `(?<${captureName}${suffix}>`;
            }
            return r`\k<${backref}${suffix}>`;
        }, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Context"].DEFAULT);
    }
    return result;
}
/**
Updates the array in place by incrementing each value greater than or equal to the threshold.
@param {Array<number>} arr
@param {number} threshold
*/ function incrementIfAtLeast(arr, threshold) {
    for(let i = 0; i < arr.length; i++){
        if (arr[i] >= threshold) {
            arr[i]++;
        }
    }
}
/**
@param {Map<number, Array<number>>} captureTransfers
@param {string} left
@param {number} reps
@param {number} numCapturesAddedInExpansion
@param {number} numAddedHiddenCapturesPreExpansion
@param {number} numCapturesPassed
@returns {Map<number, Array<number>>}
*/ function mapCaptureTransfers(captureTransfers, left, reps, numCapturesAddedInExpansion, numAddedHiddenCapturesPreExpansion, numCapturesPassed) {
    if (captureTransfers.size && numCapturesAddedInExpansion) {
        let numCapturesInLeft = 0;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["forEachUnescaped"])(left, captureDelim, ()=>numCapturesInLeft++, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$utilities$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Context"].DEFAULT);
        // Is 0 for global recursion
        const recursionDelimCaptureNum = numCapturesPassed - numCapturesInLeft + numAddedHiddenCapturesPreExpansion;
        const newCaptureTransfers = new Map();
        captureTransfers.forEach((from, to)=>{
            const numCapturesInRight = (numCapturesAddedInExpansion - numCapturesInLeft * reps) / reps;
            const numCapturesAddedInLeft = numCapturesInLeft * reps;
            const newTo = to > recursionDelimCaptureNum + numCapturesInLeft ? to + numCapturesAddedInExpansion : to;
            const newFrom = [];
            for (const f of from){
                // Before the recursed subpattern
                if (f <= recursionDelimCaptureNum) {
                    newFrom.push(f);
                // After the recursed subpattern
                } else if (f > recursionDelimCaptureNum + numCapturesInLeft + numCapturesInRight) {
                    newFrom.push(f + numCapturesAddedInExpansion);
                // Within the recursed subpattern, on the left of the recursion token
                } else if (f <= recursionDelimCaptureNum + numCapturesInLeft) {
                    for(let i = 0; i <= reps; i++){
                        newFrom.push(f + numCapturesInLeft * i);
                    }
                // Within the recursed subpattern, on the right of the recursion token
                } else {
                    for(let i = 0; i <= reps; i++){
                        newFrom.push(f + numCapturesAddedInLeft + numCapturesInRight * i);
                    }
                }
            }
            newCaptureTransfers.set(newTo, newFrom);
        });
        return newCaptureTransfers;
    }
    return captureTransfers;
}
;
}}),
"[project]/apps/website/docs/node_modules/oniguruma-to-es/dist/esm/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// src/utils.js
__turbopack_esm__({
    "EmulatedRegExp": (()=>EmulatedRegExp),
    "toOnigurumaAst": (()=>toOnigurumaAst),
    "toRegExp": (()=>toRegExp),
    "toRegExpDetails": (()=>toRegExpDetails)
});
// src/transform.js
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$emoji$2d$regex$2d$xs$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/emoji-regex-xs/index.mjs [app-rsc] (ecmascript)");
// src/index.js
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2f$src$2f$internals$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/regex/src/internals.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$recursion$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/regex-recursion/src/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2f$src$2f$atomic$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/regex/src/atomic.js [app-rsc] (ecmascript)");
var cp = String.fromCodePoint;
var r = String.raw;
var envSupportsFlagGroups = (()=>{
    try {
        new RegExp("(?i:)");
    } catch  {
        return false;
    }
    return true;
})();
var envSupportsFlagV = (()=>{
    try {
        new RegExp("", "v");
    } catch  {
        return false;
    }
    return true;
})();
function getNewCurrentFlags(current, { enable, disable }) {
    return {
        dotAll: !disable?.dotAll && !!(enable?.dotAll || current.dotAll),
        ignoreCase: !disable?.ignoreCase && !!(enable?.ignoreCase || current.ignoreCase)
    };
}
function getOrCreate(map, key, defaultValue) {
    if (!map.has(key)) {
        map.set(key, defaultValue);
    }
    return map.get(key);
}
function isMinTarget(target, min) {
    return EsVersion[target] >= EsVersion[min];
}
function throwIfNot(value, msg) {
    if (!value) {
        throw new Error(msg ?? "Value expected");
    }
    return value;
}
// src/options.js
var EsVersion = {
    ES2025: 2025,
    ES2024: 2024,
    ES2018: 2018
};
var Target = /** @type {const} */ {
    auto: "auto",
    ES2025: "ES2025",
    ES2024: "ES2024",
    ES2018: "ES2018"
};
function getOptions(options) {
    if (options?.target !== void 0 && !Target[options.target]) {
        throw new Error(`Unexpected target "${options.target}"`);
    }
    const opts = {
        // Sets the level of emulation rigor/strictness.
        accuracy: "default",
        // Disables advanced emulation that relies on returning a `RegExp` subclass, resulting in
        // certain patterns not being emulatable.
        avoidSubclass: false,
        // Oniguruma flags; a string with `i`, `m`, `x`, `D`, `S`, `W` in any order (all optional).
        // Oniguruma's `m` is equivalent to JavaScript's `s` (`dotAll`).
        flags: "",
        // Include JavaScript flag `g` (`global`) in the result.
        global: false,
        // Include JavaScript flag `d` (`hasIndices`) in the result.
        hasIndices: false,
        // Delay regex construction until first use if the transpiled pattern is at least this length.
        lazyCompileLength: Infinity,
        // JavaScript version used for generated regexes. Using `auto` detects the best value based on
        // your environment. Later targets allow faster processing, simpler generated source, and
        // support for additional features.
        target: "auto",
        // Disables optimizations that simplify the pattern when it doesn't change the meaning.
        verbose: false,
        ...options,
        // Advanced options that override standard behavior, error checking, and flags when enabled.
        rules: {
            // Useful with TextMate grammars that merge backreferences across patterns.
            allowOrphanBackrefs: false,
            // Use ASCII-based `\b` and `\B`, which increases search performance of generated regexes.
            asciiWordBoundaries: false,
            // Allow unnamed captures and numbered calls (backreferences and subroutines) when using
            // named capture. This is Oniguruma option `ONIG_OPTION_CAPTURE_GROUP`; on by default in
            // `vscode-oniguruma`.
            captureGroup: false,
            // Change the recursion depth limit from Oniguruma's `20` to an integer `2`–`20`.
            recursionLimit: 20,
            // `^` as `\A`; `$` as`\Z`. Improves search performance of generated regexes without changing
            // meaning if searching line by line. This is Oniguruma option `ONIG_OPTION_SINGLELINE`.
            singleline: false,
            ...options?.rules
        }
    };
    if (opts.target === "auto") {
        opts.target = envSupportsFlagGroups ? "ES2025" : envSupportsFlagV ? "ES2024" : "ES2018";
    }
    return opts;
}
// src/unicode.js
var CharsWithoutIgnoreCaseExpansion = /* @__PURE__ */ new Set([
    cp(304),
    // İ
    cp(305)
]);
function getIgnoreCaseMatchChars(char) {
    if (CharsWithoutIgnoreCaseExpansion.has(char)) {
        return [
            char
        ];
    }
    const set = /* @__PURE__ */ new Set();
    const lower = char.toLowerCase();
    const upper = lower.toUpperCase();
    const title = LowerToTitleCaseMap.get(lower);
    const altLower = LowerToAlternativeLowerCaseMap.get(lower);
    const altUpper = LowerToAlternativeUpperCaseMap.get(lower);
    if ([
        ...upper
    ].length === 1) {
        set.add(upper);
    }
    altUpper && set.add(altUpper);
    title && set.add(title);
    set.add(lower);
    altLower && set.add(altLower);
    return [
        ...set
    ];
}
var JsUnicodeProperties = new Set(`C Other
Cc Control cntrl
Cf Format
Cn Unassigned
Co Private_Use
Cs Surrogate
L Letter
LC Cased_Letter
Ll Lowercase_Letter
Lm Modifier_Letter
Lo Other_Letter
Lt Titlecase_Letter
Lu Uppercase_Letter
M Mark Combining_Mark
Mc Spacing_Mark
Me Enclosing_Mark
Mn Nonspacing_Mark
N Number
Nd Decimal_Number digit
Nl Letter_Number
No Other_Number
P Punctuation punct
Pc Connector_Punctuation
Pd Dash_Punctuation
Pe Close_Punctuation
Pf Final_Punctuation
Pi Initial_Punctuation
Po Other_Punctuation
Ps Open_Punctuation
S Symbol
Sc Currency_Symbol
Sk Modifier_Symbol
Sm Math_Symbol
So Other_Symbol
Z Separator
Zl Line_Separator
Zp Paragraph_Separator
Zs Space_Separator
ASCII
ASCII_Hex_Digit AHex
Alphabetic Alpha
Any
Assigned
Bidi_Control Bidi_C
Bidi_Mirrored Bidi_M
Case_Ignorable CI
Cased
Changes_When_Casefolded CWCF
Changes_When_Casemapped CWCM
Changes_When_Lowercased CWL
Changes_When_NFKC_Casefolded CWKCF
Changes_When_Titlecased CWT
Changes_When_Uppercased CWU
Dash
Default_Ignorable_Code_Point DI
Deprecated Dep
Diacritic Dia
Emoji
Emoji_Component EComp
Emoji_Modifier EMod
Emoji_Modifier_Base EBase
Emoji_Presentation EPres
Extended_Pictographic ExtPict
Extender Ext
Grapheme_Base Gr_Base
Grapheme_Extend Gr_Ext
Hex_Digit Hex
IDS_Binary_Operator IDSB
IDS_Trinary_Operator IDST
ID_Continue IDC
ID_Start IDS
Ideographic Ideo
Join_Control Join_C
Logical_Order_Exception LOE
Lowercase Lower
Math
Noncharacter_Code_Point NChar
Pattern_Syntax Pat_Syn
Pattern_White_Space Pat_WS
Quotation_Mark QMark
Radical
Regional_Indicator RI
Sentence_Terminal STerm
Soft_Dotted SD
Terminal_Punctuation Term
Unified_Ideograph UIdeo
Uppercase Upper
Variation_Selector VS
White_Space space
XID_Continue XIDC
XID_Start XIDS`.split(/\s/));
var JsUnicodePropertiesMap = /* @__PURE__ */ new Map();
for (const p of JsUnicodeProperties){
    JsUnicodePropertiesMap.set(slug(p), p);
}
var JsUnicodePropertiesOfStrings = /* @__PURE__ */ new Set([
    // ES2024 properties of strings; none are supported by Oniguruma
    "Basic_Emoji",
    "Emoji_Keycap_Sequence",
    "RGI_Emoji",
    "RGI_Emoji_Flag_Sequence",
    "RGI_Emoji_Modifier_Sequence",
    "RGI_Emoji_Tag_Sequence",
    "RGI_Emoji_ZWJ_Sequence"
]);
var JsUnicodePropertiesOfStringsMap = /* @__PURE__ */ new Map();
for (const p of JsUnicodePropertiesOfStrings){
    JsUnicodePropertiesOfStringsMap.set(slug(p), p);
}
var LowerToAlternativeLowerCaseMap = /* @__PURE__ */ new Map([
    [
        "s",
        cp(383)
    ],
    // s, ſ
    [
        cp(383),
        "s"
    ]
]);
var LowerToAlternativeUpperCaseMap = /* @__PURE__ */ new Map([
    [
        cp(223),
        cp(7838)
    ],
    // ß, ẞ
    [
        cp(107),
        cp(8490)
    ],
    // k, K (Kelvin)
    [
        cp(229),
        cp(8491)
    ],
    // å, Å (Angstrom)
    [
        cp(969),
        cp(8486)
    ]
]);
var LowerToTitleCaseMap = new Map([
    titleEntry(453),
    titleEntry(456),
    titleEntry(459),
    titleEntry(498),
    ...titleRange(8072, 8079),
    ...titleRange(8088, 8095),
    ...titleRange(8104, 8111),
    titleEntry(8124),
    titleEntry(8140),
    titleEntry(8188)
]);
var PosixClassesMap = /* @__PURE__ */ new Map([
    [
        "alnum",
        r`[\p{Alpha}\p{Nd}]`
    ],
    [
        "alpha",
        r`\p{Alpha}`
    ],
    [
        "ascii",
        r`\p{ASCII}`
    ],
    [
        "blank",
        r`[\p{Zs}\t]`
    ],
    [
        "cntrl",
        r`\p{cntrl}`
    ],
    [
        "digit",
        r`\p{Nd}`
    ],
    [
        "graph",
        r`[\P{space}&&\P{cntrl}&&\P{Cn}&&\P{Cs}]`
    ],
    [
        "lower",
        r`\p{Lower}`
    ],
    [
        "print",
        r`[[\P{space}&&\P{cntrl}&&\P{Cn}&&\P{Cs}]\p{Zs}]`
    ],
    [
        "punct",
        r`[\p{P}\p{S}]`
    ],
    // New value from Oniguruma 6.9.9
    [
        "space",
        r`\p{space}`
    ],
    [
        "upper",
        r`\p{Upper}`
    ],
    [
        "word",
        r`[\p{Alpha}\p{M}\p{Nd}\p{Pc}]`
    ],
    [
        "xdigit",
        r`\p{AHex}`
    ]
]);
var PosixProperties = /* @__PURE__ */ new Set([
    "alnum",
    "blank",
    "graph",
    "print",
    "word",
    "xdigit"
]);
function range(start, end) {
    const range2 = [];
    for(let i = start; i <= end; i++){
        range2.push(i);
    }
    return range2;
}
function slug(name) {
    return name.replace(/[- _]+/g, "").toLowerCase();
}
function titleEntry(codePoint) {
    const char = cp(codePoint);
    return [
        char.toLowerCase(),
        char
    ];
}
function titleRange(start, end) {
    return range(start, end).map((codePoint)=>titleEntry(codePoint));
}
var UnicodePropertiesWithSpecificCase = /* @__PURE__ */ new Set([
    "Lower",
    "Lowercase",
    "Upper",
    "Uppercase",
    "Ll",
    "Lowercase_Letter",
    "Lt",
    "Titlecase_Letter",
    "Lu",
    "Uppercase_Letter"
]);
// src/tokenize.js
var TokenTypes = /** @type {const} */ {
    Alternator: "Alternator",
    Assertion: "Assertion",
    Backreference: "Backreference",
    Character: "Character",
    CharacterClassClose: "CharacterClassClose",
    CharacterClassHyphen: "CharacterClassHyphen",
    CharacterClassIntersector: "CharacterClassIntersector",
    CharacterClassOpen: "CharacterClassOpen",
    CharacterSet: "CharacterSet",
    Directive: "Directive",
    GroupClose: "GroupClose",
    GroupOpen: "GroupOpen",
    Subroutine: "Subroutine",
    Quantifier: "Quantifier",
    // These aren't allowed in char classes, so they aren't equivalent to JS `[\q{}]`
    VariableLengthCharacterSet: "VariableLengthCharacterSet",
    // Intermediate representation not included in results
    EscapedNumber: "EscapedNumber"
};
var TokenCharacterSetKinds = {
    any: "any",
    digit: "digit",
    dot: "dot",
    hex: "hex",
    non_newline: "non_newline",
    posix: "posix",
    property: "property",
    space: "space",
    word: "word"
};
var TokenDirectiveKinds = {
    flags: "flags",
    keep: "keep"
};
var TokenGroupKinds = {
    absent_repeater: "absent_repeater",
    atomic: "atomic",
    capturing: "capturing",
    group: "group",
    lookahead: "lookahead",
    lookbehind: "lookbehind"
};
var EscapeCharCodes = /* @__PURE__ */ new Map([
    [
        "a",
        7
    ],
    // alert/bell (Not available in JS)
    [
        "b",
        8
    ],
    // backspace (only in char classes)
    [
        "e",
        27
    ],
    // escape (Not available in JS)
    [
        "f",
        12
    ],
    // form feed
    [
        "n",
        10
    ],
    // line feed
    [
        "r",
        13
    ],
    // carriage return
    [
        "t",
        9
    ],
    // horizontal tab
    [
        "v",
        11
    ]
]);
var charClassOpenPattern = r`\[\^?`;
var sharedEscapesPattern = `${"c.? | C(?:-.?)?"}|${// `\p{gc=L}` are invalid
r`[pP]\{(?:\^?[-\x20_]*[A-Za-z][-\x20\w]*\})?`}|${r`x[89A-Fa-f]\p{AHex}(?:\\x[89A-Fa-f]\p{AHex})*`}|${r`u(?:\p{AHex}{4})? | x\{[^\}]*\}? | x\p{AHex}{0,2}`}|${r`o\{[^\}]*\}?`}|${r`\d{1,3}`}`;
var quantifierRe = /[?*+][?+]?|\{(?:\d+(?:,\d*)?|,\d+)\}\??/;
var tokenRe = new RegExp(r`
  \\ (?:
    ${sharedEscapesPattern}
    | [gk]<[^>]*>?
    | [gk]'[^']*'?
    | .
  )
  | \( (?: \? (?:
    [:=!>(]
    | <[=!]
    | <[^>]*>
    | '[^']*'
    | ~\|?
    | # (?:[^)\\] | \\.?)*
    | [imx\-]+[:)]
  )?)?
  | ${quantifierRe.source}
  | ${charClassOpenPattern}
  | .
`.replace(/\s+/g, ""), "gsu");
var charClassTokenRe = new RegExp(r`
  \\ (?:
    ${sharedEscapesPattern}
    | .
  )
  | \[:(?:\^?\p{Alpha}+|\^):\]
  | ${charClassOpenPattern}
  | &&
  | .
`.replace(/\s+/g, ""), "gsu");
function tokenize(pattern, flags = "", rules) {
    rules = {
        // `ONIG_OPTION_CAPTURE_GROUP`
        captureGroup: false,
        // `ONIG_OPTION_SINGLELINE`
        singleline: false,
        ...rules
    };
    if (typeof pattern !== "string") {
        throw new Error("String expected as pattern");
    }
    if (!/^[imxDSW]*$/.test(flags)) {
        throw new Error(`Flags "${flags}" includes unsupported value`);
    }
    const extended = flags.includes("x");
    const xStack = [
        extended
    ];
    const context = {
        captureGroup: rules.captureGroup,
        getCurrentModX: ()=>xStack.at(-1),
        numOpenGroups: 0,
        popModX () {
            xStack.pop();
        },
        pushModX (isXOn) {
            xStack.push(isXOn);
        },
        replaceCurrentModX (isXOn) {
            xStack[xStack.length - 1] = isXOn;
        },
        singleline: rules.singleline
    };
    let tokens = [];
    let match;
    tokenRe.lastIndex = 0;
    while(match = tokenRe.exec(pattern)){
        const result = getTokenWithDetails(context, pattern, match[0], tokenRe.lastIndex);
        if (result.tokens) {
            tokens.push(...result.tokens);
        } else if (result.token) {
            tokens.push(result.token);
        }
        if (result.lastIndex !== void 0) {
            tokenRe.lastIndex = result.lastIndex;
        }
    }
    const potentialUnnamedCaptureTokens = [];
    let numNamedAndOptInUnnamedCaptures = 0;
    tokens.forEach((t)=>{
        if (t.type === TokenTypes.GroupOpen) {
            if (t.kind === TokenGroupKinds.capturing) {
                t.number = ++numNamedAndOptInUnnamedCaptures;
            } else if (t.raw === "(") {
                potentialUnnamedCaptureTokens.push(t);
            }
        }
    });
    if (!numNamedAndOptInUnnamedCaptures) {
        potentialUnnamedCaptureTokens.forEach((t, i)=>{
            t.kind = TokenGroupKinds.capturing;
            t.number = i + 1;
        });
    }
    const numCaptures = numNamedAndOptInUnnamedCaptures || potentialUnnamedCaptureTokens.length;
    tokens = tokens.map((t)=>t.type === TokenTypes.EscapedNumber ? splitEscapedNumToken(t, numCaptures) : t).flat();
    return {
        tokens,
        flags: {
            ignoreCase: flags.includes("i"),
            // Flag m is called `multiline` in Onig, but that has a different meaning in JS. Onig flag m
            // is equivalent to JS flag s
            dotAll: flags.includes("m"),
            // Flag x is fully handled during tokenization
            extended,
            // Flags D, S, W are currently only supported as top-level flags
            digitIsAscii: flags.includes("D"),
            spaceIsAscii: flags.includes("S"),
            wordIsAscii: flags.includes("W")
        },
        rules
    };
}
function getTokenWithDetails(context, pattern, m, lastIndex) {
    const [m0, m1, m2] = m;
    if (m0 === "[") {
        const result = getAllTokensForCharClass(pattern, m, lastIndex);
        return {
            // Array of all of the char class's tokens
            tokens: result.tokens,
            // Jump forward to the end of the char class
            lastIndex: result.lastIndex
        };
    }
    if (m0 === "\\") {
        if ("AbBGzZ".includes(m1)) {
            return {
                token: createToken(TokenTypes.Assertion, m, {
                    kind: m
                })
            };
        }
        if (/^\\g[<']/.test(m)) {
            if (!/^\\g(?:<[^>]+>|'[^']+')$/.test(m)) {
                throw new Error(`Invalid group name "${m}"`);
            }
            return {
                token: createToken(TokenTypes.Subroutine, m)
            };
        }
        if (/^\\k[<']/.test(m)) {
            if (!/^\\k(?:<[^>]+>|'[^']+')$/.test(m)) {
                throw new Error(`Invalid group name "${m}"`);
            }
            return {
                token: createToken(TokenTypes.Backreference, m)
            };
        }
        if (m1 === "K") {
            return {
                token: createToken(TokenTypes.Directive, m, {
                    kind: TokenDirectiveKinds.keep
                })
            };
        }
        if (m1 === "N") {
            return {
                token: createToken(TokenTypes.CharacterSet, m, {
                    kind: TokenCharacterSetKinds.non_newline
                })
            };
        }
        if (m1 === "O") {
            return {
                token: createToken(TokenTypes.CharacterSet, m, {
                    kind: TokenCharacterSetKinds.any
                })
            };
        }
        if ("RX".includes(m1)) {
            return {
                token: createToken(TokenTypes.VariableLengthCharacterSet, m, {
                    kind: m
                })
            };
        }
        if ("yY".includes(m1)) {
            throw new Error(`Unsupported grapheme boundary "${m}"`);
        }
        const result = createTokenForSharedEscape(m, {
            inCharClass: false
        });
        return Array.isArray(result) ? {
            tokens: result
        } : {
            token: result
        };
    }
    if (m0 === "(") {
        if (m2 === "#") {
            if (pattern[lastIndex] !== ")") {
                throw new Error('Unclosed comment group "(?#"');
            }
            return {
                lastIndex: lastIndex + 1
            };
        }
        if ("-imx".includes(m2)) {
            return {
                token: createTokenForFlagMod(m, context)
            };
        }
        context.pushModX(context.getCurrentModX());
        context.numOpenGroups++;
        if (// Unnamed capture if no named captures present and `captureGroup` not enabled, else
        // noncapturing group
        m === "(" && !context.captureGroup || // Noncapturing group
        m === "(?:") {
            return {
                token: createToken(TokenTypes.GroupOpen, m, {
                    // For `(`, will later change to `capturing` and add `number` prop if no named captures
                    kind: TokenGroupKinds.group
                })
            };
        }
        if (m === "(?>") {
            return {
                token: createToken(TokenTypes.GroupOpen, m, {
                    kind: TokenGroupKinds.atomic
                })
            };
        }
        if (m === "(?=" || m === "(?!" || m === "(?<=" || m === "(?<!") {
            return {
                token: createToken(TokenTypes.GroupOpen, m, {
                    kind: m2 === "<" ? TokenGroupKinds.lookbehind : TokenGroupKinds.lookahead,
                    negate: m.endsWith("!")
                })
            };
        }
        if (m2 === "<" || m2 === "'" || m === "(" && context.captureGroup) {
            const token = createToken(TokenTypes.GroupOpen, m, {
                kind: TokenGroupKinds.capturing
            });
            if (m !== "(") {
                token.name = m.slice(3, -1);
            }
            return {
                token
            };
        }
        if (m2 === "~") {
            if (m === "(?~|") {
                throw new Error(`Unsupported absent function kind "${m}"`);
            }
            return {
                token: createToken(TokenTypes.GroupOpen, m, {
                    kind: TokenGroupKinds.absent_repeater
                })
            };
        }
        if (m2 === "(") {
            throw new Error(`Unsupported conditional "${m}"`);
        }
        if (m === "(?") {
            throw new Error("Invalid group");
        }
        throw new Error(`Unexpected group "${m}"`);
    }
    if (m === ")") {
        context.popModX();
        context.numOpenGroups--;
        if (context.numOpenGroups < 0) {
            throw new Error('Unmatched ")"');
        }
        return {
            token: createToken(TokenTypes.GroupClose, m)
        };
    }
    if (m === "#" && context.getCurrentModX()) {
        const end = pattern.indexOf("\n", lastIndex);
        return {
            // Jump forward to the end of the comment
            lastIndex: end === -1 ? pattern.length : end
        };
    }
    if (/^\s$/.test(m) && context.getCurrentModX()) {
        const re = /\s+/y;
        re.lastIndex = lastIndex;
        const rest = re.exec(pattern);
        return {
            // Jump forward to the end of the whitespace
            lastIndex: rest ? re.lastIndex : lastIndex
        };
    }
    if (m === ".") {
        return {
            token: createToken(TokenTypes.CharacterSet, m, {
                kind: TokenCharacterSetKinds.dot
            })
        };
    }
    if (m === "^" || m === "$") {
        const kind = context.singleline ? ({
            "^": r`\A`,
            "$": r`\Z`
        })[m] : m;
        return {
            token: createToken(TokenTypes.Assertion, m, {
                kind
            })
        };
    }
    if (m === "|") {
        return {
            token: createToken(TokenTypes.Alternator, m)
        };
    }
    if (quantifierRe.test(m)) {
        return {
            token: createTokenForQuantifier(m)
        };
    }
    assertSingleCodePoint(m);
    return {
        token: createToken(TokenTypes.Character, m, {
            value: m.codePointAt(0)
        })
    };
}
function getAllTokensForCharClass(pattern, opener, lastIndex) {
    const tokens = [
        createToken(TokenTypes.CharacterClassOpen, opener, {
            negate: opener[1] === "^"
        })
    ];
    let numCharClassesOpen = 1;
    let match;
    charClassTokenRe.lastIndex = lastIndex;
    while(match = charClassTokenRe.exec(pattern)){
        const m = match[0];
        if (m[0] === "[" && m[1] !== ":") {
            numCharClassesOpen++;
            tokens.push(createToken(TokenTypes.CharacterClassOpen, m, {
                negate: m[1] === "^"
            }));
        } else if (m === "]") {
            if (tokens.at(-1).type === TokenTypes.CharacterClassOpen) {
                tokens.push(createToken(TokenTypes.Character, m, {
                    value: 93
                }));
            } else {
                numCharClassesOpen--;
                tokens.push(createToken(TokenTypes.CharacterClassClose, m));
                if (!numCharClassesOpen) {
                    break;
                }
            }
        } else {
            const result = createTokenForAnyTokenWithinCharClass(m);
            if (Array.isArray(result)) {
                tokens.push(...result);
            } else {
                tokens.push(result);
            }
        }
    }
    return {
        tokens,
        lastIndex: charClassTokenRe.lastIndex || pattern.length
    };
}
function createTokenForAnyTokenWithinCharClass(raw) {
    if (raw[0] === "\\") {
        return createTokenForSharedEscape(raw, {
            inCharClass: true
        });
    }
    if (raw[0] === "[") {
        const posix = /\[:(?<negate>\^?)(?<name>[a-z]+):\]/.exec(raw);
        if (!posix || !PosixClassesMap.get(posix.groups.name)) {
            throw new Error(`Invalid POSIX class "${raw}"`);
        }
        return createToken(TokenTypes.CharacterSet, raw, {
            kind: TokenCharacterSetKinds.posix,
            negate: !!posix.groups.negate,
            value: posix.groups.name
        });
    }
    if (raw === "-") {
        return createToken(TokenTypes.CharacterClassHyphen, raw);
    }
    if (raw === "&&") {
        return createToken(TokenTypes.CharacterClassIntersector, raw);
    }
    assertSingleCodePoint(raw);
    return createToken(TokenTypes.Character, raw, {
        value: raw.codePointAt(0)
    });
}
function createTokenForSharedEscape(raw, { inCharClass }) {
    const char1 = raw[1];
    if (char1 === "c" || char1 === "C") {
        return createTokenForControlChar(raw);
    }
    if ("dDhHsSwW".includes(char1)) {
        return createTokenForShorthandCharClass(raw);
    }
    if (raw.startsWith(r`\o{`)) {
        throw new Error(`Incomplete, invalid, or unsupported octal code point "${raw}"`);
    }
    if (/^\\[pP]\{/.test(raw)) {
        if (raw.length === 3) {
            throw new Error(`Incomplete or invalid Unicode property "${raw}"`);
        }
        return createTokenForUnicodeProperty(raw);
    }
    if (/^\\x[89A-Fa-f]\p{AHex}/u.test(raw)) {
        try {
            const bytes = raw.split(/\\x/).slice(1).map((hex)=>parseInt(hex, 16));
            const decoded = new TextDecoder("utf-8", {
                ignoreBOM: true,
                fatal: true
            }).decode(new Uint8Array(bytes));
            const encoder = new TextEncoder();
            const tokens = [
                ...decoded
            ].map((char)=>{
                const raw2 = [
                    ...encoder.encode(char)
                ].map((byte)=>`\\x${byte.toString(16)}`).join("");
                return createToken(TokenTypes.Character, raw2, {
                    value: char.codePointAt(0)
                });
            });
            return tokens;
        } catch  {
            throw new Error(`Multibyte code "${raw}" incomplete or invalid in Oniguruma`);
        }
    }
    if (char1 === "u" || char1 === "x") {
        return createToken(TokenTypes.Character, raw, {
            value: getValidatedHexCharCode(raw)
        });
    }
    if (EscapeCharCodes.has(char1)) {
        return createToken(TokenTypes.Character, raw, {
            value: EscapeCharCodes.get(char1)
        });
    }
    if (/\d/.test(char1)) {
        return createToken(TokenTypes.EscapedNumber, raw, {
            inCharClass
        });
    }
    if (raw === "\\") {
        throw new Error(r`Incomplete escape "\"`);
    }
    if (char1 === "M") {
        throw new Error(`Unsupported meta "${raw}"`);
    }
    if ([
        ...raw
    ].length === 2) {
        return createToken(TokenTypes.Character, raw, {
            value: raw.codePointAt(1)
        });
    }
    throw new Error(`Unexpected escape "${raw}"`);
}
function createToken(type, raw, data) {
    return {
        type,
        raw,
        ...data
    };
}
function createTokenForControlChar(raw) {
    const char = raw[1] === "c" ? raw[2] : raw[3];
    if (!char || !/[A-Za-z]/.test(char)) {
        throw new Error(`Unsupported control character "${raw}"`);
    }
    return createToken(TokenTypes.Character, raw, {
        value: char.toUpperCase().codePointAt(0) - 64
    });
}
function createTokenForFlagMod(raw, context) {
    let { on, off } = /^\(\?(?<on>[imx]*)(?:-(?<off>[imx\-]*))?/.exec(raw).groups;
    off ??= "";
    const isXOn = (context.getCurrentModX() || on.includes("x")) && !off.includes("x");
    const enabledFlags = getFlagPropsForToken(on);
    const disabledFlags = getFlagPropsForToken(off);
    const flagChanges = {};
    enabledFlags && (flagChanges.enable = enabledFlags);
    disabledFlags && (flagChanges.disable = disabledFlags);
    if (raw.endsWith(")")) {
        context.replaceCurrentModX(isXOn);
        return createToken(TokenTypes.Directive, raw, {
            kind: TokenDirectiveKinds.flags,
            flags: flagChanges
        });
    }
    if (raw.endsWith(":")) {
        context.pushModX(isXOn);
        context.numOpenGroups++;
        const token = createToken(TokenTypes.GroupOpen, raw, {
            kind: TokenGroupKinds.group
        });
        if (enabledFlags || disabledFlags) {
            token.flags = flagChanges;
        }
        return token;
    }
    throw new Error(`Unexpected flag modifier "${raw}"`);
}
function createTokenForQuantifier(raw) {
    const data = {};
    if (raw[0] === "{") {
        const { min, max } = /^\{(?<min>\d*)(?:,(?<max>\d*))?/.exec(raw).groups;
        const limit = 1e5;
        if (+min > limit || +max > limit) {
            throw new Error("Quantifier value unsupported in Oniguruma");
        }
        data.min = +min;
        data.max = max === void 0 ? +min : max === "" ? Infinity : +max;
        data.greedy = !raw.endsWith("?");
        data.possessive = false;
    } else {
        data.min = raw[0] === "+" ? 1 : 0;
        data.max = raw[0] === "?" ? 1 : Infinity;
        data.greedy = raw[1] !== "?";
        data.possessive = raw[1] === "+";
    }
    return createToken(TokenTypes.Quantifier, raw, data);
}
function createTokenForShorthandCharClass(raw) {
    const lower = raw[1].toLowerCase();
    return createToken(TokenTypes.CharacterSet, raw, {
        kind: {
            "d": TokenCharacterSetKinds.digit,
            "h": TokenCharacterSetKinds.hex,
            // Not available in JS
            "s": TokenCharacterSetKinds.space,
            // Different than JS
            "w": TokenCharacterSetKinds.word
        }[lower],
        negate: raw[1] !== lower
    });
}
function createTokenForUnicodeProperty(raw) {
    const { p, neg, value } = /^\\(?<p>[pP])\{(?<neg>\^?)(?<value>[^}]+)/.exec(raw).groups;
    const negate = p === "P" && !neg || p === "p" && !!neg;
    return createToken(TokenTypes.CharacterSet, raw, {
        kind: TokenCharacterSetKinds.property,
        negate,
        value
    });
}
function getFlagPropsForToken(flags) {
    const obj = {};
    if (flags.includes("i")) {
        obj.ignoreCase = true;
    }
    if (flags.includes("m")) {
        obj.dotAll = true;
    }
    if (flags.includes("x")) {
        obj.extended = true;
    }
    return Object.keys(obj).length ? obj : null;
}
function getValidatedHexCharCode(raw) {
    if (/^(?:\\u(?!\p{AHex}{4})|\\x(?!\p{AHex}{1,2}|\{\p{AHex}{1,8}\}))/u.test(raw)) {
        throw new Error(`Incomplete or invalid escape "${raw}"`);
    }
    const hex = raw[2] === "{" ? /^\\x\{\s*(?<hex>\p{AHex}+)/u.exec(raw).groups.hex : raw.slice(2);
    const dec = parseInt(hex, 16);
    return dec;
}
function splitEscapedNumToken(token, numCaptures) {
    const { raw, inCharClass } = token;
    const value = raw.slice(1);
    if (!inCharClass && // Single digit 1-9 outside a char class is always treated as a backref
    (value !== "0" && value.length === 1 || // Leading 0 makes it octal; backrefs can't include following literal digits
    value[0] !== "0" && +value <= numCaptures)) {
        return [
            createToken(TokenTypes.Backreference, raw)
        ];
    }
    const tokens = [];
    const matches = value.match(/^[0-7]+|\d/g);
    for(let i = 0; i < matches.length; i++){
        const m = matches[i];
        let value2;
        if (i === 0 && m !== "8" && m !== "9") {
            value2 = parseInt(m, 8);
            if (value2 > 127) {
                throw new Error(r`Octal encoded byte above 177 unsupported "${raw}"`);
            }
        } else {
            value2 = m.codePointAt(0);
        }
        tokens.push(createToken(TokenTypes.Character, (i === 0 ? "\\" : "") + m, {
            value: value2
        }));
    }
    return tokens;
}
function assertSingleCodePoint(raw) {
    if ([
        ...raw
    ].length !== 1) {
        throw new Error(`Expected "${raw}" to be a single code point`);
    }
}
// src/utils-ast.js
function hasOnlyChild({ alternatives }, kidFn) {
    return alternatives.length === 1 && alternatives[0].elements.length === 1 && (!kidFn || kidFn(alternatives[0].elements[0]));
}
function isAlwaysZeroLength({ type }) {
    return type === AstTypes.Assertion || type === AstTypes.Directive;
}
function isAlwaysNonZeroLength(node) {
    const types = [
        AstTypes.Character,
        AstTypes.CharacterClass,
        AstTypes.CharacterSet
    ];
    return types.includes(node.type) || node.type === AstTypes.Quantifier && node.min && types.includes(node.element.type);
}
function isConsumptiveGroup({ type }) {
    return type === AstTypes.CapturingGroup || type === AstTypes.Group;
}
function isLookaround({ type, kind }) {
    return type === AstTypes.Assertion && (kind === AstAssertionKinds.lookahead || kind === AstAssertionKinds.lookbehind);
}
// src/traverse.js
function traverse(path, state, visitor) {
    let ast = path.node;
    while(ast.parent){
        ast = ast.parent;
    }
    function traverseArray(array, parent) {
        for(let i = 0; i < array.length; i++){
            const keyShift = traverseNode(array[i], parent, i, array);
            i = Math.max(-1, i + keyShift);
        }
    }
    function traverseNode(node, parent = null, key = null, container = null) {
        let keyShift = 0;
        let skipTraversingKidsOfPath = false;
        const path2 = {
            node,
            parent,
            key,
            container,
            ast,
            remove () {
                throwIfNot(container, "Container expected").splice(Math.max(0, key + keyShift), 1);
                keyShift -= 1;
            },
            removeAllNextSiblings () {
                return throwIfNot(container, "Container expected").splice(key + 1);
            },
            removeAllPrevSiblings () {
                const shifted = key + keyShift;
                keyShift -= shifted;
                return throwIfNot(container, "Container expected").splice(0, Math.max(0, shifted));
            },
            replaceWith (newNode) {
                setParent(newNode, parent);
                if (container) {
                    container[Math.max(0, key + keyShift)] = newNode;
                } else {
                    parent[key] = newNode;
                }
            },
            skip () {
                skipTraversingKidsOfPath = true;
            }
        };
        const visitorKey = getAstTypeAliases(node).find((key2)=>!!visitor[key2]);
        const methods = visitorKey && visitor[visitorKey];
        const enterFn = typeof methods === "function" ? methods : methods?.enter;
        const exitFn = methods?.exit;
        enterFn?.(path2, state);
        if (!skipTraversingKidsOfPath) {
            switch(node.type){
                case AstTypes.Regex:
                    traverseNode(node.pattern, node, "pattern");
                    traverseNode(node.flags, node, "flags");
                    break;
                case AstTypes.Alternative:
                case AstTypes.CharacterClass:
                    traverseArray(node.elements, node);
                    break;
                case AstTypes.Assertion:
                    if (isLookaround(node)) {
                        traverseArray(node.alternatives, node);
                    }
                    break;
                case AstTypes.Backreference:
                case AstTypes.Character:
                case AstTypes.CharacterSet:
                case AstTypes.Directive:
                case AstTypes.Flags:
                case AstTypes.Recursion:
                case AstTypes.Subroutine:
                case AstTypes.VariableLengthCharacterSet:
                    break;
                case AstTypes.AbsentFunction:
                case AstTypes.CapturingGroup:
                case AstTypes.Group:
                case AstTypes.Pattern:
                    traverseArray(node.alternatives, node);
                    break;
                case AstTypes.CharacterClassIntersection:
                    traverseArray(node.classes, node);
                    break;
                case AstTypes.CharacterClassRange:
                    traverseNode(node.min, node, "min");
                    traverseNode(node.max, node, "max");
                    break;
                case AstTypes.Quantifier:
                    traverseNode(node.element, node, "element");
                    break;
                default:
                    throw new Error(`Unexpected node type "${node.type}"`);
            }
        }
        exitFn?.(path2, state);
        return keyShift;
    }
    traverseNode(path.node, path.parent, path.key, path.container);
}
var AstTypeAliases = {
    AnyGroup: "AnyGroup",
    AnyNode: "AnyNode"
};
function getAstTypeAliases(node) {
    const types = [
        AstTypeAliases.AnyNode
    ];
    if (isConsumptiveGroup(node) || isLookaround(node)) {
        types.push(AstTypeAliases.AnyGroup);
    }
    types.push(node.type);
    return types;
}
function setParent(node, parent) {
    if ("parent" in parent) {
        node.parent = parent;
    }
}
// src/parse.js
var AstTypes = {
    AbsentFunction: "AbsentFunction",
    Alternative: "Alternative",
    Assertion: "Assertion",
    Backreference: "Backreference",
    CapturingGroup: "CapturingGroup",
    Character: "Character",
    CharacterClass: "CharacterClass",
    CharacterClassIntersection: "CharacterClassIntersection",
    CharacterClassRange: "CharacterClassRange",
    CharacterSet: "CharacterSet",
    Directive: "Directive",
    Flags: "Flags",
    Group: "Group",
    Pattern: "Pattern",
    Quantifier: "Quantifier",
    Regex: "Regex",
    Subroutine: "Subroutine",
    VariableLengthCharacterSet: "VariableLengthCharacterSet",
    // Used only by the transformer for Regex+ ASTs
    Recursion: "Recursion"
};
var AstAbsentFunctionKinds = {
    // See <github.com/slevithan/oniguruma-to-es/issues/13>
    repeater: "repeater"
};
var AstAssertionKinds = {
    line_end: "line_end",
    line_start: "line_start",
    lookahead: "lookahead",
    lookbehind: "lookbehind",
    search_start: "search_start",
    string_end: "string_end",
    string_end_newline: "string_end_newline",
    string_start: "string_start",
    word_boundary: "word_boundary"
};
var AstCharacterSetKinds = TokenCharacterSetKinds;
var AstDirectiveKinds = TokenDirectiveKinds;
var AstVariableLengthCharacterSetKinds = {
    grapheme: "grapheme",
    newline: "newline"
};
function parse({ tokens, flags, rules }, options) {
    const opts = {
        skipBackrefValidation: false,
        skipLookbehindValidation: false,
        skipPropertyNameValidation: false,
        verbose: false,
        ...options
    };
    const context = {
        capturingGroups: [],
        current: 0,
        hasNumberedRef: false,
        namedGroupsByName: /* @__PURE__ */ new Map(),
        parent: null,
        skipBackrefValidation: opts.skipBackrefValidation,
        skipLookbehindValidation: opts.skipLookbehindValidation,
        skipPropertyNameValidation: opts.skipPropertyNameValidation,
        subroutines: [],
        token: null,
        tokens,
        verbose: opts.verbose,
        walk
    };
    function walk(parent, state) {
        const token = tokens[context.current];
        context.parent = parent;
        context.token = token;
        context.current++;
        switch(token.type){
            case TokenTypes.Alternator:
                return createAlternative();
            case TokenTypes.Assertion:
                return createAssertionFromToken(token);
            case TokenTypes.Backreference:
                return parseBackreference(context);
            case TokenTypes.Character:
                return createCharacter(token.value, {
                    useLastValid: !!state.isCheckingRangeEnd
                });
            case TokenTypes.CharacterClassHyphen:
                return parseCharacterClassHyphen(context, state);
            case TokenTypes.CharacterClassOpen:
                return parseCharacterClassOpen(context, state);
            case TokenTypes.CharacterSet:
                return parseCharacterSet(context);
            case TokenTypes.Directive:
                return createDirectiveFromToken(token);
            case TokenTypes.GroupOpen:
                return parseGroupOpen(context, state);
            case TokenTypes.Quantifier:
                return parseQuantifier(context);
            case TokenTypes.Subroutine:
                return parseSubroutine(context);
            case TokenTypes.VariableLengthCharacterSet:
                return createVariableLengthCharacterSet(token.kind);
            default:
                throw new Error(`Unexpected token type "${token.type}"`);
        }
    }
    const ast = createRegex(createPattern(), createFlags(flags));
    let top = ast.pattern.alternatives[0];
    while(context.current < tokens.length){
        const node = walk(top, {});
        if (node.type === AstTypes.Alternative) {
            ast.pattern.alternatives.push(node);
            top = node;
        } else {
            top.elements.push(node);
        }
    }
    const { capturingGroups, hasNumberedRef, namedGroupsByName, subroutines } = context;
    if (hasNumberedRef && namedGroupsByName.size && !rules.captureGroup) {
        throw new Error("Numbered backref/subroutine not allowed when using named capture");
    }
    for (const { ref } of subroutines){
        if (typeof ref === "number") {
            if (ref > capturingGroups.length) {
                throw new Error(`Subroutine uses a group number that's not defined`);
            }
        } else if (!namedGroupsByName.has(ref)) {
            throw new Error(r`Subroutine uses a group name that's not defined "\g<${ref}>"`);
        } else if (namedGroupsByName.get(ref).length > 1) {
            throw new Error(r`Subroutine uses a duplicate group name "\g<${ref}>"`);
        }
    }
    traverse({
        node: ast
    }, null, {
        AnyNode ({ node, parent }) {
            node.parent = parent;
        }
    });
    return ast;
}
function parseBackreference(context) {
    const { raw } = context.token;
    const hasKWrapper = /^\\k[<']/.test(raw);
    const ref = hasKWrapper ? raw.slice(3, -1) : raw.slice(1);
    const fromNum = (num, isRelative = false)=>{
        const numCapturesToLeft = context.capturingGroups.length;
        let orphan = false;
        if (num > numCapturesToLeft) {
            if (context.skipBackrefValidation) {
                orphan = true;
            } else {
                throw new Error(`Not enough capturing groups defined to the left "${raw}"`);
            }
        }
        context.hasNumberedRef = true;
        return createBackreference(isRelative ? numCapturesToLeft + 1 - num : num, {
            orphan
        });
    };
    if (hasKWrapper) {
        const numberedRef = /^(?<sign>-?)0*(?<num>[1-9]\d*)$/.exec(ref);
        if (numberedRef) {
            return fromNum(+numberedRef.groups.num, !!numberedRef.groups.sign);
        }
        if (/[-+]/.test(ref)) {
            throw new Error(`Invalid backref name "${raw}"`);
        }
        if (!context.namedGroupsByName.has(ref)) {
            throw new Error(`Group name not defined to the left "${raw}"`);
        }
        return createBackreference(ref);
    }
    return fromNum(+ref);
}
function parseCharacterClassHyphen(context, state) {
    const { parent, tokens, walk } = context;
    const prevSiblingNode = parent.elements.at(-1);
    const nextToken = tokens[context.current];
    if (!state.isCheckingRangeEnd && prevSiblingNode && prevSiblingNode.type !== AstTypes.CharacterClass && prevSiblingNode.type !== AstTypes.CharacterClassRange && nextToken && nextToken.type !== TokenTypes.CharacterClassOpen && nextToken.type !== TokenTypes.CharacterClassClose && nextToken.type !== TokenTypes.CharacterClassIntersector) {
        const nextNode = walk(parent, {
            ...state,
            isCheckingRangeEnd: true
        });
        if (prevSiblingNode.type === AstTypes.Character && nextNode.type === AstTypes.Character) {
            parent.elements.pop();
            return createCharacterClassRange(prevSiblingNode, nextNode);
        }
        throw new Error("Invalid character class range");
    }
    return createCharacter(45);
}
function parseCharacterClassOpen(context, state) {
    const { token, tokens, verbose, walk } = context;
    const firstClassToken = tokens[context.current];
    let node = createCharacterClass({
        negate: token.negate
    });
    const intersection = node.elements[0];
    let nextToken = throwIfUnclosedCharacterClass(firstClassToken);
    while(nextToken.type !== TokenTypes.CharacterClassClose){
        if (nextToken.type === TokenTypes.CharacterClassIntersector) {
            intersection.classes.push(createCharacterClass({
                negate: false,
                baseOnly: true
            }));
            context.current++;
        } else {
            const cc = intersection.classes.at(-1);
            cc.elements.push(walk(cc, state));
        }
        nextToken = throwIfUnclosedCharacterClass(tokens[context.current], firstClassToken);
    }
    if (!verbose) {
        optimizeCharacterClassIntersection(intersection);
    }
    if (intersection.classes.length === 1) {
        const cc = intersection.classes[0];
        cc.negate = node.negate !== cc.negate;
        node = cc;
    }
    context.current++;
    return node;
}
function parseCharacterSet({ token, skipPropertyNameValidation }) {
    let { kind, negate, value } = token;
    if (kind === TokenCharacterSetKinds.property) {
        const normalized = slug(value);
        if (PosixProperties.has(normalized)) {
            kind = TokenCharacterSetKinds.posix;
            value = normalized;
        } else {
            return createUnicodeProperty(value, {
                negate,
                skipPropertyNameValidation
            });
        }
    }
    if (kind === TokenCharacterSetKinds.posix) {
        return {
            type: AstTypes.CharacterSet,
            kind: AstCharacterSetKinds.posix,
            negate,
            value
        };
    }
    return createCharacterSet(kind, {
        negate
    });
}
function parseGroupOpen(context, state) {
    const { token, tokens, capturingGroups, namedGroupsByName, skipLookbehindValidation, verbose, walk } = context;
    let node = createByGroupKind(token);
    const isAbsentFunction = node.type === AstTypes.AbsentFunction;
    const isLookbehind = node.kind === AstAssertionKinds.lookbehind;
    const isNegLookbehind = isLookbehind && node.negate;
    if (node.type === AstTypes.CapturingGroup) {
        capturingGroups.push(node);
        if (node.name) {
            getOrCreate(namedGroupsByName, node.name, []).push(node);
        }
    }
    if (isAbsentFunction && state.isInAbsentFunction) {
        throw new Error("Nested absent function not supported by Oniguruma");
    }
    let nextToken = throwIfUnclosedGroup(tokens[context.current]);
    while(nextToken.type !== TokenTypes.GroupClose){
        if (nextToken.type === TokenTypes.Alternator) {
            node.alternatives.push(createAlternative());
            context.current++;
        } else {
            const alt = node.alternatives.at(-1);
            const child = walk(alt, {
                ...state,
                isInAbsentFunction: state.isInAbsentFunction || isAbsentFunction,
                isInLookbehind: state.isInLookbehind || isLookbehind,
                isInNegLookbehind: state.isInNegLookbehind || isNegLookbehind
            });
            alt.elements.push(child);
            if ((isLookbehind || state.isInLookbehind) && !skipLookbehindValidation) {
                const msg = "Lookbehind includes a pattern not allowed by Oniguruma";
                if (isNegLookbehind || state.isInNegLookbehind) {
                    if (child.kind === AstAssertionKinds.lookahead || child.type === AstTypes.CapturingGroup) {
                        throw new Error(msg);
                    }
                } else {
                    if (child.kind === AstAssertionKinds.lookahead || child.kind === AstAssertionKinds.lookbehind && child.negate) {
                        throw new Error(msg);
                    }
                }
            }
        }
        nextToken = throwIfUnclosedGroup(tokens[context.current]);
    }
    if (!verbose) {
        node = getOptimizedGroup(node);
    }
    context.current++;
    return node;
}
function parseQuantifier({ token, parent }) {
    const { min, max, greedy, possessive: possessive2 } = token;
    const quantifiedNode = parent.elements.at(-1);
    if (!quantifiedNode || quantifiedNode.type === AstTypes.Assertion || quantifiedNode.type === AstTypes.Directive) {
        throw new Error(`Quantifier requires a repeatable token`);
    }
    const node = createQuantifier(quantifiedNode, min, max, greedy, possessive2);
    parent.elements.pop();
    return node;
}
function parseSubroutine(context) {
    const { token, capturingGroups, subroutines } = context;
    let ref = token.raw.slice(3, -1);
    const numberedRef = /^(?<sign>[-+]?)0*(?<num>[1-9]\d*)$/.exec(ref);
    if (numberedRef) {
        const num = +numberedRef.groups.num;
        const numCapturesToLeft = capturingGroups.length;
        context.hasNumberedRef = true;
        ref = ({
            "": num,
            "+": numCapturesToLeft + num,
            "-": numCapturesToLeft + 1 - num
        })[numberedRef.groups.sign];
        if (ref < 1) {
            throw new Error("Invalid subroutine number");
        }
    } else if (ref === "0") {
        ref = 0;
    }
    const node = createSubroutine(ref);
    subroutines.push(node);
    return node;
}
function createAbsentFunction(kind) {
    if (kind !== AstAbsentFunctionKinds.repeater) {
        throw new Error(`Unexpected absent function kind "${kind}"`);
    }
    return {
        type: AstTypes.AbsentFunction,
        kind,
        alternatives: [
            createAlternative()
        ]
    };
}
function createAlternative() {
    return {
        type: AstTypes.Alternative,
        elements: []
    };
}
function createAssertion(kind, options) {
    const negate = !!options?.negate;
    return {
        type: AstTypes.Assertion,
        kind,
        ...kind === AstAssertionKinds.word_boundary && {
            negate
        }
    };
}
function createAssertionFromToken({ kind }) {
    return createAssertion(throwIfNot({
        "^": AstAssertionKinds.line_start,
        "$": AstAssertionKinds.line_end,
        "\\A": AstAssertionKinds.string_start,
        "\\b": AstAssertionKinds.word_boundary,
        "\\B": AstAssertionKinds.word_boundary,
        "\\G": AstAssertionKinds.search_start,
        "\\z": AstAssertionKinds.string_end,
        "\\Z": AstAssertionKinds.string_end_newline
    }[kind], `Unexpected assertion kind "${kind}"`), {
        negate: kind === r`\B`
    });
}
function createBackreference(ref, options) {
    const orphan = !!options?.orphan;
    return {
        type: AstTypes.Backreference,
        ...orphan && {
            orphan
        },
        ref
    };
}
function createByGroupKind({ flags, kind, name, negate, number }) {
    switch(kind){
        case TokenGroupKinds.absent_repeater:
            return createAbsentFunction(AstAbsentFunctionKinds.repeater);
        case TokenGroupKinds.atomic:
            return createGroup({
                atomic: true
            });
        case TokenGroupKinds.capturing:
            return createCapturingGroup(number, name);
        case TokenGroupKinds.group:
            return createGroup({
                flags
            });
        case TokenGroupKinds.lookahead:
        case TokenGroupKinds.lookbehind:
            return createLookaround({
                behind: kind === TokenGroupKinds.lookbehind,
                negate
            });
        default:
            throw new Error(`Unexpected group kind "${kind}"`);
    }
}
function createCapturingGroup(number, name) {
    const hasName = name !== void 0;
    if (hasName && !isValidGroupNameOniguruma(name)) {
        throw new Error(`Group name "${name}" invalid in Oniguruma`);
    }
    return {
        type: AstTypes.CapturingGroup,
        number,
        ...hasName && {
            name
        },
        alternatives: [
            createAlternative()
        ]
    };
}
function createCharacter(charCode, options) {
    const opts = {
        useLastValid: false,
        ...options
    };
    if (charCode > 1114111) {
        const hex = charCode.toString(16);
        if (opts.useLastValid) {
            charCode = 1114111;
        } else if (charCode > 1310719) {
            throw new Error(`Invalid code point out of range "\\x{${hex}}"`);
        } else {
            throw new Error(`Invalid code point out of range in JS "\\x{${hex}}"`);
        }
    }
    return {
        type: AstTypes.Character,
        value: charCode
    };
}
function createCharacterClass(options) {
    const opts = {
        baseOnly: false,
        negate: false,
        ...options
    };
    return {
        type: AstTypes.CharacterClass,
        negate: opts.negate,
        elements: opts.baseOnly ? [] : [
            createCharacterClassIntersection()
        ]
    };
}
function createCharacterClassIntersection() {
    return {
        type: AstTypes.CharacterClassIntersection,
        classes: [
            createCharacterClass({
                negate: false,
                baseOnly: true
            })
        ]
    };
}
function createCharacterClassRange(min, max) {
    if (max.value < min.value) {
        throw new Error("Character class range out of order");
    }
    return {
        type: AstTypes.CharacterClassRange,
        min,
        max
    };
}
function createCharacterSet(kind, { negate }) {
    const node = {
        type: AstTypes.CharacterSet,
        kind: throwIfNot(AstCharacterSetKinds[kind], `Unexpected character set kind "${kind}"`)
    };
    if (kind === TokenCharacterSetKinds.digit || kind === TokenCharacterSetKinds.hex || kind === TokenCharacterSetKinds.space || kind === TokenCharacterSetKinds.word) {
        node.negate = negate;
    }
    return node;
}
function createDirectiveFromToken({ kind, flags }) {
    const node = {
        type: AstTypes.Directive,
        kind: throwIfNot(AstDirectiveKinds[kind], `Unexpected directive kind "${kind}"`)
    };
    if (kind === TokenDirectiveKinds.flags) {
        node.flags = flags;
    }
    return node;
}
function createFlags({ ignoreCase, dotAll, extended, digitIsAscii, spaceIsAscii, wordIsAscii }) {
    return {
        type: AstTypes.Flags,
        ignoreCase,
        dotAll,
        extended,
        digitIsAscii,
        spaceIsAscii,
        wordIsAscii
    };
}
function createGroup(options) {
    const atomic2 = options?.atomic;
    const flags = options?.flags;
    return {
        type: AstTypes.Group,
        ...atomic2 && {
            atomic: atomic2
        },
        ...flags && {
            flags
        },
        alternatives: [
            createAlternative()
        ]
    };
}
function createLookaround(options) {
    const opts = {
        behind: false,
        negate: false,
        ...options
    };
    return {
        type: AstTypes.Assertion,
        kind: opts.behind ? AstAssertionKinds.lookbehind : AstAssertionKinds.lookahead,
        negate: opts.negate,
        alternatives: [
            createAlternative()
        ]
    };
}
function createPattern() {
    return {
        type: AstTypes.Pattern,
        alternatives: [
            createAlternative()
        ]
    };
}
function createQuantifier(element, min, max, greedy = true, possessive2 = false) {
    const node = {
        type: AstTypes.Quantifier,
        min,
        max,
        greedy,
        possessive: possessive2,
        element
    };
    if (max < min) {
        return {
            ...node,
            min: max,
            max: min,
            possessive: true
        };
    }
    return node;
}
function createRegex(pattern, flags) {
    return {
        type: AstTypes.Regex,
        pattern,
        flags
    };
}
function createSubroutine(ref) {
    return {
        type: AstTypes.Subroutine,
        ref
    };
}
function createUnicodeProperty(value, options) {
    const opts = {
        negate: false,
        skipPropertyNameValidation: false,
        ...options
    };
    return {
        type: AstTypes.CharacterSet,
        kind: AstCharacterSetKinds.property,
        value: opts.skipPropertyNameValidation ? value : getJsUnicodePropertyName(value),
        negate: opts.negate
    };
}
function createVariableLengthCharacterSet(kind) {
    return {
        type: AstTypes.VariableLengthCharacterSet,
        kind: throwIfNot({
            "\\R": AstVariableLengthCharacterSetKinds.newline,
            "\\X": AstVariableLengthCharacterSetKinds.grapheme
        }[kind], `Unexpected varcharset kind "${kind}"`)
    };
}
function getJsUnicodePropertyName(value) {
    const slugged = slug(value);
    if (JsUnicodePropertiesOfStringsMap.has(slugged)) {
        throw new Error(r`Unicode property "\p{${value}}" unsupported in Oniguruma`);
    }
    const jsName = JsUnicodePropertiesMap.get(slugged);
    if (jsName) {
        return jsName;
    }
    return value.trim().replace(/[- _]+/g, "_").replace(/[A-Z][a-z]+(?=[A-Z])/g, "$&_").replace(/[A-Za-z]+/g, (m)=>m[0].toUpperCase() + m.slice(1).toLowerCase());
}
function getOptimizedGroup(node) {
    const firstAltFirstEl = node.alternatives[0].elements[0];
    if (node.type === AstTypes.Group && hasOnlyChild(node, (kid)=>kid.type === AstTypes.Group) && !(node.atomic && firstAltFirstEl.flags) && !(node.flags && (firstAltFirstEl.atomic || firstAltFirstEl.flags))) {
        if (node.atomic) {
            firstAltFirstEl.atomic = true;
        } else if (node.flags) {
            firstAltFirstEl.flags = node.flags;
        }
        return firstAltFirstEl;
    }
    return node;
}
function isValidGroupNameOniguruma(name) {
    return /^[\p{Alpha}\p{Pc}][^)]*$/u.test(name);
}
function optimizeCharacterClassIntersection(intersection) {
    for(let i = 0; i < intersection.classes.length; i++){
        const cc = intersection.classes[i];
        const firstChild = cc.elements[0];
        if (cc.elements.length === 1 && firstChild.type === AstTypes.CharacterClass) {
            intersection.classes[i] = firstChild;
            firstChild.negate = cc.negate !== firstChild.negate;
        }
    }
}
function throwIfUnclosedCharacterClass(token, firstClassToken) {
    return throwIfNot(token, // Easier to understand error when applicable
    `${firstClassToken?.value === 93 ? "Empty" : "Unclosed"} character class`);
}
function throwIfUnclosedGroup(token) {
    return throwIfNot(token, "Unclosed group");
}
;
function transform(ast, options) {
    const opts = {
        // A couple edge cases exist where options `accuracy` and `bestEffortTarget` are used:
        // - `VariableLengthCharacterSet` kind `grapheme` (`\X`): An exact representation would require
        //   heavy Unicode data; a best-effort approximation requires knowing the target.
        // - `CharacterSet` kind `posix` with values `graph` and `print`: Their complex Unicode-based
        //   representations would be hard to change to ASCII-based after the fact in the generator
        //   based on `target`/`accuracy`, so produce the appropriate structure here.
        accuracy: "default",
        asciiWordBoundaries: false,
        avoidSubclass: false,
        bestEffortTarget: "ES2025",
        ...options
    };
    const firstPassState = {
        accuracy: opts.accuracy,
        asciiWordBoundaries: opts.asciiWordBoundaries,
        avoidSubclass: opts.avoidSubclass,
        flagDirectivesByAlt: /* @__PURE__ */ new Map(),
        jsGroupNameMap: /* @__PURE__ */ new Map(),
        minTargetEs2024: isMinTarget(opts.bestEffortTarget, "ES2024"),
        passedLookbehind: false,
        strategy: null,
        // Subroutines can appear before the groups they ref, so collect reffed nodes for a second pass 
        subroutineRefMap: /* @__PURE__ */ new Map(),
        supportedGNodes: /* @__PURE__ */ new Set(),
        digitIsAscii: ast.flags.digitIsAscii,
        spaceIsAscii: ast.flags.spaceIsAscii,
        wordIsAscii: ast.flags.wordIsAscii
    };
    traverse({
        node: ast
    }, firstPassState, FirstPassVisitor);
    const globalFlags = {
        dotAll: ast.flags.dotAll,
        ignoreCase: ast.flags.ignoreCase
    };
    const secondPassState = {
        currentFlags: globalFlags,
        prevFlags: null,
        globalFlags,
        groupOriginByCopy: /* @__PURE__ */ new Map(),
        groupsByName: /* @__PURE__ */ new Map(),
        multiplexCapturesToLeftByRef: /* @__PURE__ */ new Map(),
        openRefs: /* @__PURE__ */ new Map(),
        reffedNodesByReferencer: /* @__PURE__ */ new Map(),
        subroutineRefMap: firstPassState.subroutineRefMap
    };
    traverse({
        node: ast
    }, secondPassState, SecondPassVisitor);
    const thirdPassState = {
        groupsByName: secondPassState.groupsByName,
        highestOrphanBackref: 0,
        numCapturesToLeft: 0,
        reffedNodesByReferencer: secondPassState.reffedNodesByReferencer
    };
    traverse({
        node: ast
    }, thirdPassState, ThirdPassVisitor);
    ast._originMap = secondPassState.groupOriginByCopy;
    ast._strategy = firstPassState.strategy;
    return ast;
}
var FirstPassVisitor = {
    AbsentFunction ({ node, replaceWith }) {
        const group = prepContainer(createGroup(), [
            adoptAndSwapKids(createLookaround({
                negate: true
            }), node.alternatives),
            createUnicodeProperty("Any")
        ]);
        const quantifier = createQuantifier(group, 0, Infinity);
        group.parent = quantifier;
        replaceWith(prepContainer(createGroup(), [
            quantifier
        ]));
    },
    Alternative: {
        enter ({ node, parent, key }, { flagDirectivesByAlt }) {
            const flagDirectives = node.elements.filter((el)=>el.kind === AstDirectiveKinds.flags);
            for(let i = key + 1; i < parent.alternatives.length; i++){
                const forwardSiblingAlt = parent.alternatives[i];
                getOrCreate(flagDirectivesByAlt, forwardSiblingAlt, []).push(...flagDirectives);
            }
        },
        exit ({ node }, { flagDirectivesByAlt }) {
            if (flagDirectivesByAlt.get(node)?.length) {
                const flags = getCombinedFlagModsFromFlagNodes(flagDirectivesByAlt.get(node));
                if (flags) {
                    const flagGroup = prepContainer(createGroup({
                        flags
                    }), node.elements);
                    flagGroup.parent = node;
                    node.elements = [
                        flagGroup
                    ];
                }
            }
        }
    },
    Assertion ({ node, key, container, ast, remove, replaceWith }, state) {
        const { kind, negate } = node;
        const { asciiWordBoundaries, avoidSubclass, supportedGNodes, wordIsAscii } = state;
        if (kind === AstAssertionKinds.line_end) {
            replaceWith(parseFragment(r`(?=\z|\n)`));
        } else if (kind === AstAssertionKinds.line_start) {
            replaceWith(parseFragment(r`(?<=\A|\n(?!\z))`, {
                skipLookbehindValidation: true
            }));
        } else if (kind === AstAssertionKinds.lookbehind) {
            state.passedLookbehind = true;
        } else if (kind === AstAssertionKinds.search_start) {
            if (supportedGNodes.has(node)) {
                ast.flags.sticky = true;
                remove();
            } else {
                const prev = container[key - 1];
                if (prev && isAlwaysNonZeroLength(prev)) {
                    replaceWith(prepContainer(createLookaround({
                        negate: true
                    })));
                } else if (avoidSubclass) {
                    throw new Error(r`Uses "\G" in a way that requires a subclass`);
                } else {
                    replaceWith(createAssertion(AstAssertionKinds.string_start));
                    state.strategy = "clip_search";
                }
            }
        } else if (kind === AstAssertionKinds.string_end_newline) {
            replaceWith(parseFragment(r`(?=\n?\z)`));
        } else if (kind === AstAssertionKinds.word_boundary && !wordIsAscii && !asciiWordBoundaries) {
            const b = `(?:(?<=${defaultWordChar})(?!${defaultWordChar})|(?<!${defaultWordChar})(?=${defaultWordChar}))`;
            const B = `(?:(?<=${defaultWordChar})(?=${defaultWordChar})|(?<!${defaultWordChar})(?!${defaultWordChar}))`;
            replaceWith(parseFragment(negate ? B : b));
        }
    },
    Backreference ({ node }, { jsGroupNameMap }) {
        let { ref } = node;
        if (typeof ref === "string" && !isValidGroupNameJs(ref)) {
            ref = getAndStoreJsGroupName(ref, jsGroupNameMap);
            node.ref = ref;
        }
    },
    CapturingGroup ({ node }, { jsGroupNameMap, subroutineRefMap }) {
        let { name } = node;
        if (name && !isValidGroupNameJs(name)) {
            name = getAndStoreJsGroupName(name, jsGroupNameMap);
            node.name = name;
        }
        subroutineRefMap.set(node.number, node);
        if (name) {
            subroutineRefMap.set(name, node);
        }
    },
    CharacterSet ({ node, replaceWith }, { accuracy, minTargetEs2024, digitIsAscii, spaceIsAscii, wordIsAscii }) {
        const { kind, negate, value } = node;
        if (digitIsAscii && (kind === AstCharacterSetKinds.digit || value === "digit")) {
            replaceWith(createCharacterSet(AstCharacterSetKinds.digit, {
                negate
            }));
            return;
        }
        if (spaceIsAscii && (kind === AstCharacterSetKinds.space || value === "space")) {
            replaceWith(setNegate(parseFragment(asciiSpaceChar), negate));
            return;
        }
        if (wordIsAscii && (kind === AstCharacterSetKinds.word || value === "word")) {
            replaceWith(createCharacterSet(AstCharacterSetKinds.word, {
                negate
            }));
            return;
        }
        if (kind === AstCharacterSetKinds.any) {
            replaceWith(createUnicodeProperty("Any"));
        } else if (kind === AstCharacterSetKinds.digit) {
            replaceWith(createUnicodeProperty("Nd", {
                negate
            }));
        } else if (kind === AstCharacterSetKinds.hex) {
            replaceWith(createUnicodeProperty("AHex", {
                negate
            }));
        } else if (kind === AstCharacterSetKinds.non_newline) {
            replaceWith(parseFragment(r`[^\n]`));
        } else if (kind === AstCharacterSetKinds.space) {
            replaceWith(createUnicodeProperty("space", {
                negate
            }));
        } else if (kind === AstCharacterSetKinds.word) {
            replaceWith(setNegate(parseFragment(defaultWordChar), negate));
        } else if (kind === AstCharacterSetKinds.property) {
            if (!JsUnicodeProperties.has(value)) {
                node.key = "sc";
            }
        } else if (kind === AstCharacterSetKinds.posix) {
            if (!minTargetEs2024 && (value === "graph" || value === "print")) {
                if (accuracy === "strict") {
                    throw new Error(`POSIX class "${value}" requires min target ES2024 or non-strict accuracy`);
                }
                let ascii = {
                    graph: "!-~",
                    print: " -~"
                }[value];
                if (negate) {
                    ascii = `\0-${cp(ascii.codePointAt(0) - 1)}${cp(ascii.codePointAt(2) + 1)}-\u{10FFFF}`;
                }
                replaceWith(parseFragment(`[${ascii}]`));
            } else {
                replaceWith(setNegate(parseFragment(PosixClassesMap.get(value)), negate));
            }
        }
    },
    Directive (path, state) {
        const { node, parent, ast, remove, replaceWith, removeAllPrevSiblings, removeAllNextSiblings } = path;
        const { kind, flags } = node;
        if (kind === AstDirectiveKinds.flags) {
            if (!flags.enable && !flags.disable) {
                remove();
            } else {
                const flagGroup = prepContainer(createGroup({
                    flags
                }), removeAllNextSiblings());
                replaceWith(flagGroup);
                traverseReplacement(flagGroup, path, state, FirstPassVisitor);
            }
        } else if (kind === AstDirectiveKinds.keep) {
            const firstAltFirstEl = ast.pattern.alternatives[0].elements[0];
            const hasWrapperGroup = // Not emulatable if within a `CapturingGroup`
            hasOnlyChild(ast.pattern, (kid)=>kid.type === AstTypes.Group) && firstAltFirstEl.alternatives.length === 1;
            const topLevel = hasWrapperGroup ? firstAltFirstEl : ast.pattern;
            if (parent.parent !== topLevel || topLevel.alternatives.length > 1) {
                throw new Error(r`Uses "\K" in a way that's unsupported`);
            }
            replaceWith(prepContainer(createLookaround({
                behind: true
            }), removeAllPrevSiblings()));
        }
    },
    Flags ({ node, parent }) {
        [
            "digitIsAscii",
            // Flag D
            "extended",
            // Flag x
            "spaceIsAscii",
            // Flag S
            "wordIsAscii"
        ].forEach((f)=>delete node[f]);
        Object.assign(node, {
            // JS flag g; no Onig equiv
            global: false,
            // JS flag d; no Onig equiv
            hasIndices: false,
            // JS flag m; no Onig equiv but its behavior is always on in Onig. Onig's only line break
            // char is line feed, unlike JS, so this flag isn't used since it would produce inaccurate
            // results (also allows `^` and `$` to be used in the generator for string start and end)
            multiline: false,
            // JS flag y; no Onig equiv, but used for `\G` emulation
            sticky: node.sticky ?? false
        });
        parent.options = {
            disable: {
                // Onig uses different rules for flag x than Regex+, so disable the implicit flag
                x: true,
                // Onig has no flag to control "named capture only" mode but contextually applies its
                // behavior when named capturing is used, so disable Regex+'s implicit flag for it
                n: true
            },
            force: {
                // Always add flag v because we're generating an AST that relies on it (it enables JS
                // support for Onig features nested classes, set intersection, Unicode properties, etc.).
                // However, the generator might disable flag v based on its `target` option
                v: true
            }
        };
    },
    Group ({ node }) {
        if (!node.flags) {
            return;
        }
        const { enable, disable } = node.flags;
        enable?.extended && delete enable.extended;
        disable?.extended && delete disable.extended;
        enable?.dotAll && disable?.dotAll && delete enable.dotAll;
        enable?.ignoreCase && disable?.ignoreCase && delete enable.ignoreCase;
        enable && !Object.keys(enable).length && delete node.flags.enable;
        disable && !Object.keys(disable).length && delete node.flags.disable;
        !node.flags.enable && !node.flags.disable && delete node.flags;
    },
    Pattern: {
        enter ({ node }, { supportedGNodes }) {
            const leadingGs = [];
            let hasAltWithLeadG = false;
            let hasAltWithoutLeadG = false;
            for (const alt of node.alternatives){
                if (alt.elements.length === 1 && alt.elements[0].kind === AstAssertionKinds.search_start) {
                    alt.elements.pop();
                } else {
                    const leadingG = getLeadingG(alt.elements);
                    if (leadingG) {
                        hasAltWithLeadG = true;
                        Array.isArray(leadingG) ? leadingGs.push(...leadingG) : leadingGs.push(leadingG);
                    } else {
                        hasAltWithoutLeadG = true;
                    }
                }
            }
            if (hasAltWithLeadG && !hasAltWithoutLeadG) {
                leadingGs.forEach((g)=>supportedGNodes.add(g));
            }
        },
        exit (_, { accuracy, passedLookbehind, strategy }) {
            if (accuracy === "strict" && passedLookbehind && strategy) {
                throw new Error(r`Uses "\G" in a way that requires non-strict accuracy`);
            }
        }
    },
    Quantifier ({ node }) {
        if (node.element.type === AstTypes.Quantifier) {
            const group = prepContainer(createGroup(), [
                node.element
            ]);
            group.parent = node;
            node.element = group;
        }
    },
    Subroutine ({ node }, { jsGroupNameMap }) {
        let { ref } = node;
        if (typeof ref === "string" && !isValidGroupNameJs(ref)) {
            ref = getAndStoreJsGroupName(ref, jsGroupNameMap);
            node.ref = ref;
        }
    },
    VariableLengthCharacterSet ({ node, replaceWith }, { accuracy, minTargetEs2024 }) {
        const { kind } = node;
        if (kind === AstVariableLengthCharacterSetKinds.newline) {
            replaceWith(parseFragment("(?>\r\n?|[\n\v\f\x85\u2028\u2029])"));
        } else if (kind === AstVariableLengthCharacterSetKinds.grapheme) {
            if (accuracy === "strict") {
                throw new Error(r`Use of "\X" requires non-strict accuracy`);
            }
            const emoji = minTargetEs2024 ? r`\p{RGI_Emoji}` : (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$emoji$2d$regex$2d$xs$2f$index$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])().source.replace(/\\u\{/g, `\\x{`);
            replaceWith(parseFragment(r`(?>\r\n|${emoji}|\P{M}\p{M}*)`, {
                skipPropertyNameValidation: true
            }));
        } else {
            throw new Error(`Unexpected varcharset kind "${kind}"`);
        }
    }
};
var SecondPassVisitor = {
    Backreference ({ node }, { multiplexCapturesToLeftByRef, reffedNodesByReferencer }) {
        const { orphan, ref } = node;
        if (!orphan) {
            reffedNodesByReferencer.set(node, [
                ...multiplexCapturesToLeftByRef.get(ref).map(({ node: node2 })=>node2)
            ]);
        }
    },
    CapturingGroup: {
        enter ({ node, replaceWith, skip }, { groupOriginByCopy, groupsByName, multiplexCapturesToLeftByRef, openRefs, reffedNodesByReferencer }) {
            const origin = groupOriginByCopy.get(node);
            if (origin && openRefs.has(node.number)) {
                const recursion2 = createRecursion(node.number);
                reffedNodesByReferencer.set(recursion2, openRefs.get(node.number));
                replaceWith(recursion2);
                skip();
                return;
            }
            openRefs.set(node.number, node);
            multiplexCapturesToLeftByRef.set(node.number, []);
            if (node.name) {
                getOrCreate(multiplexCapturesToLeftByRef, node.name, []);
            }
            const multiplexNodes = multiplexCapturesToLeftByRef.get(node.name ?? node.number);
            for(let i = 0; i < multiplexNodes.length; i++){
                const multiplex = multiplexNodes[i];
                if (// This group is from subroutine expansion, and there's a multiplex value from either the
                // origin node or a prior subroutine expansion group with the same origin
                origin === multiplex.node || origin && origin === multiplex.origin || // This group is not from subroutine expansion, and it comes after a subroutine expansion
                // group that refers to this group
                node === multiplex.origin) {
                    multiplexNodes.splice(i, 1);
                    break;
                }
            }
            multiplexCapturesToLeftByRef.get(node.number).push({
                node,
                origin
            });
            if (node.name) {
                multiplexCapturesToLeftByRef.get(node.name).push({
                    node,
                    origin
                });
            }
            if (node.name) {
                const groupsWithSameName = getOrCreate(groupsByName, node.name, /* @__PURE__ */ new Map());
                let hasDuplicateNameToRemove = false;
                if (origin) {
                    hasDuplicateNameToRemove = true;
                } else {
                    for (const groupInfo of groupsWithSameName.values()){
                        if (!groupInfo.hasDuplicateNameToRemove) {
                            hasDuplicateNameToRemove = true;
                            break;
                        }
                    }
                }
                groupsByName.get(node.name).set(node, {
                    node,
                    hasDuplicateNameToRemove
                });
            }
        },
        exit ({ node }, { openRefs }) {
            openRefs.delete(node.number);
        }
    },
    Group: {
        enter ({ node }, state) {
            state.prevFlags = state.currentFlags;
            if (node.flags) {
                state.currentFlags = getNewCurrentFlags(state.currentFlags, node.flags);
            }
        },
        exit (_, state) {
            state.currentFlags = state.prevFlags;
        }
    },
    Recursion ({ node, parent }, { reffedNodesByReferencer }) {
        const { ref } = node;
        let reffed = parent;
        while(reffed = reffed.parent){
            if (reffed.type === AstTypes.CapturingGroup && (reffed.name === ref || reffed.number === ref)) {
                break;
            }
        }
        reffedNodesByReferencer.set(node, reffed);
    },
    Subroutine (path, state) {
        const { node, replaceWith } = path;
        const { ref } = node;
        const reffedGroupNode = state.subroutineRefMap.get(ref);
        const isGlobalRecursion = ref === 0;
        const expandedSubroutine = isGlobalRecursion ? createRecursion(0) : // The reffed group might itself contain subroutines, which are expanded during sub-traversal
        cloneCapturingGroup(reffedGroupNode, state.groupOriginByCopy, null);
        let replacement = expandedSubroutine;
        if (!isGlobalRecursion) {
            const reffedGroupFlagMods = getCombinedFlagModsFromFlagNodes(getAllParents(reffedGroupNode, (node2)=>{
                return node2.type === AstTypes.Group && !!node2.flags;
            }));
            const reffedGroupFlags = reffedGroupFlagMods ? getNewCurrentFlags(state.globalFlags, reffedGroupFlagMods) : state.globalFlags;
            if (!areFlagsEqual(reffedGroupFlags, state.currentFlags)) {
                replacement = prepContainer(createGroup({
                    flags: getFlagModsFromFlags(reffedGroupFlags)
                }), [
                    expandedSubroutine
                ]);
            }
        }
        replaceWith(replacement);
        if (!isGlobalRecursion) {
            traverseReplacement(replacement, path, state, SecondPassVisitor);
        }
    }
};
var ThirdPassVisitor = {
    Backreference ({ node, replaceWith }, state) {
        if (node.orphan) {
            state.highestOrphanBackref = Math.max(state.highestOrphanBackref, node.ref);
            return;
        }
        const reffedNodes = state.reffedNodesByReferencer.get(node);
        const participants = reffedNodes.filter((reffed)=>canParticipateWithNode(reffed, node));
        if (!participants.length) {
            replaceWith(prepContainer(createLookaround({
                negate: true
            })));
        } else if (participants.length > 1) {
            const alts = participants.map((reffed)=>adoptAndSwapKids(createAlternative(), [
                    createBackreference(reffed.number)
                ]));
            replaceWith(adoptAndSwapKids(createGroup(), alts));
        } else {
            node.ref = participants[0].number;
        }
    },
    CapturingGroup ({ node }, state) {
        node.number = ++state.numCapturesToLeft;
        if (node.name) {
            if (state.groupsByName.get(node.name).get(node).hasDuplicateNameToRemove) {
                delete node.name;
            }
        }
    },
    Recursion ({ node }, state) {
        if (node.ref === 0) {
            return;
        }
        node.ref = state.reffedNodesByReferencer.get(node).number;
    },
    Regex: {
        exit ({ node }, state) {
            const numCapsNeeded = Math.max(state.highestOrphanBackref - state.numCapturesToLeft, 0);
            for(let i = 0; i < numCapsNeeded; i++){
                const emptyCapture = createCapturingGroup();
                node.pattern.alternatives.at(-1).elements.push(emptyCapture);
            }
        }
    }
};
var asciiSpaceChar = "[	-\r ]";
var defaultWordChar = r`[\p{L}\p{M}\p{N}\p{Pc}]`;
function adoptAndSwapKids(parent, kids) {
    kids.forEach((kid)=>kid.parent = parent);
    parent[getContainerAccessor(parent)] = kids;
    return parent;
}
function areFlagsEqual(a, b) {
    return a.dotAll === b.dotAll && a.ignoreCase === b.ignoreCase;
}
function canParticipateWithNode(capture, node) {
    let rightmostPoint = node;
    do {
        if (rightmostPoint.type === AstTypes.Pattern) {
            return false;
        }
        if (rightmostPoint.type === AstTypes.Alternative) {
            continue;
        }
        if (rightmostPoint === capture) {
            return false;
        }
        const kidsOfParent = getKids(rightmostPoint.parent);
        for (const kid of kidsOfParent){
            if (kid === rightmostPoint) {
                break;
            }
            if (kid === capture) {
                return true;
            }
            if (hasDescendant(kid, capture)) {
                return true;
            }
        }
    }while (rightmostPoint = rightmostPoint.parent)
    throw new Error("Unexpected path");
}
function cloneCapturingGroup(obj, originMap, up, up2) {
    const store = Array.isArray(obj) ? [] : {};
    for (const [key, value] of Object.entries(obj)){
        if (key === "parent") {
            store.parent = Array.isArray(up) ? up2 : up;
        } else if (value && typeof value === "object") {
            store[key] = cloneCapturingGroup(value, originMap, store, up);
        } else {
            if (key === "type" && value === AstTypes.CapturingGroup) {
                originMap.set(store, originMap.get(obj) ?? obj);
            }
            store[key] = value;
        }
    }
    return store;
}
function createRecursion(ref) {
    return {
        type: AstTypes.Recursion,
        ref
    };
}
function getAllParents(node, filterFn) {
    const results = [];
    while(node = node.parent){
        if (!filterFn || filterFn(node)) {
            results.push(node);
        }
    }
    return results;
}
function getAndStoreJsGroupName(name, map) {
    if (map.has(name)) {
        return map.get(name);
    }
    const jsName = `$${map.size}_${name.replace(/^[^$_\p{IDS}]|[^$\u200C\u200D\p{IDC}]/ug, "_")}`;
    map.set(name, jsName);
    return jsName;
}
function getContainerAccessor(node) {
    for (const accessor of [
        "alternatives",
        "classes",
        "elements"
    ]){
        if (node[accessor]) {
            return accessor;
        }
    }
    return null;
}
function getCombinedFlagModsFromFlagNodes(flagNodes) {
    const flagProps = [
        "dotAll",
        "ignoreCase"
    ];
    const combinedFlags = {
        enable: {},
        disable: {}
    };
    flagNodes.forEach(({ flags })=>{
        flagProps.forEach((prop)=>{
            if (flags.enable?.[prop]) {
                delete combinedFlags.disable[prop];
                combinedFlags.enable[prop] = true;
            }
            if (flags.disable?.[prop]) {
                combinedFlags.disable[prop] = true;
            }
        });
    });
    if (!Object.keys(combinedFlags.enable).length) {
        delete combinedFlags.enable;
    }
    if (!Object.keys(combinedFlags.disable).length) {
        delete combinedFlags.disable;
    }
    if (combinedFlags.enable || combinedFlags.disable) {
        return combinedFlags;
    }
    return null;
}
function getFlagModsFromFlags({ dotAll, ignoreCase }) {
    const mods = {};
    if (dotAll || ignoreCase) {
        mods.enable = {};
        dotAll && (mods.enable.dotAll = true);
        ignoreCase && (mods.enable.ignoreCase = true);
    }
    if (!dotAll || !ignoreCase) {
        mods.disable = {};
        !dotAll && (mods.disable.dotAll = true);
        !ignoreCase && (mods.disable.ignoreCase = true);
    }
    return mods;
}
function getKids(node) {
    if (!node) {
        throw new Error("Node expected");
    }
    if (node.type === AstTypes.Quantifier) {
        return [
            node.element
        ];
    }
    const accessor = getContainerAccessor(node);
    return accessor && node[accessor];
}
function getLeadingG(els) {
    const firstToConsider = els.find((el)=>el.kind === AstAssertionKinds.search_start || isLoneGLookaround(el, {
            negate: false
        }) || !isAlwaysZeroLength(el));
    if (!firstToConsider) {
        return null;
    }
    if (firstToConsider.kind === AstAssertionKinds.search_start) {
        return firstToConsider;
    }
    if (isLookaround(firstToConsider)) {
        return firstToConsider.alternatives[0].elements[0];
    }
    if (isConsumptiveGroup(firstToConsider)) {
        const gNodesForGroup = [];
        for (const alt of firstToConsider.alternatives){
            const leadingG = getLeadingG(alt.elements);
            if (!leadingG) {
                return null;
            }
            Array.isArray(leadingG) ? gNodesForGroup.push(...leadingG) : gNodesForGroup.push(leadingG);
        }
        return gNodesForGroup;
    }
    return null;
}
function hasDescendant(node, descendant) {
    const kids = getKids(node) ?? [];
    for (const kid of kids){
        if (kid === descendant || hasDescendant(kid, descendant)) {
            return true;
        }
    }
    return false;
}
function isLoneGLookaround(node, options) {
    const opts = {
        negate: null,
        ...options
    };
    return isLookaround(node) && (opts.negate === null || node.negate === opts.negate) && hasOnlyChild(node, (kid)=>kid.kind === AstAssertionKinds.search_start);
}
function isValidGroupNameJs(name) {
    return /^[$_\p{IDS}][$\u200C\u200D\p{IDC}]*$/u.test(name);
}
function parseFragment(pattern, options) {
    const ast = parse(tokenize(pattern), options);
    const alts = ast.pattern.alternatives;
    if (alts.length > 1 || alts[0].elements.length > 1) {
        return adoptAndSwapKids(createGroup(), alts);
    }
    return alts[0].elements[0];
}
function prepContainer(node, kids) {
    const accessor = getContainerAccessor(node);
    node[accessor][0].parent = node;
    if (kids) {
        adoptAndSwapKids(node[accessor][0], kids);
    }
    return node;
}
function setNegate(node, negate) {
    node.negate = negate;
    return node;
}
function traverseReplacement(replacement, { parent, key, container }, state, visitor) {
    traverse({
        // Don't use the `node` from `path`
        node: replacement,
        parent,
        key,
        container
    }, state, visitor);
}
// src/generate.js
function generate(ast, options) {
    const opts = getOptions(options);
    const minTargetEs2024 = isMinTarget(opts.target, "ES2024");
    const minTargetEs2025 = isMinTarget(opts.target, "ES2025");
    const recursionLimit = opts.rules.recursionLimit;
    if (!Number.isInteger(recursionLimit) || recursionLimit < 2 || recursionLimit > 20) {
        throw new Error("Invalid recursionLimit; use 2-20");
    }
    let hasCaseInsensitiveNode = null;
    let hasCaseSensitiveNode = null;
    if (!minTargetEs2025) {
        const iStack = [
            ast.flags.ignoreCase
        ];
        traverse({
            node: ast
        }, {
            getCurrentModI: ()=>iStack.at(-1),
            popModI () {
                iStack.pop();
            },
            pushModI (isIOn) {
                iStack.push(isIOn);
            },
            setHasCasedChar () {
                if (iStack.at(-1)) {
                    hasCaseInsensitiveNode = true;
                } else {
                    hasCaseSensitiveNode = true;
                }
            }
        }, FlagModifierVisitor);
    }
    const appliedGlobalFlags = {
        dotAll: ast.flags.dotAll,
        // - Turn global flag i on if a case insensitive node was used and no case sensitive nodes were
        //   used (to avoid unnecessary node expansion).
        // - Turn global flag i off if a case sensitive node was used (since case sensitivity can't be
        //   forced without the use of ES2025 flag groups)
        ignoreCase: !!((ast.flags.ignoreCase || hasCaseInsensitiveNode) && !hasCaseSensitiveNode)
    };
    let lastNode = null;
    const state = {
        accuracy: opts.accuracy,
        appliedGlobalFlags,
        captureMap: /* @__PURE__ */ new Map(),
        currentFlags: {
            dotAll: ast.flags.dotAll,
            ignoreCase: ast.flags.ignoreCase
        },
        inCharClass: false,
        lastNode,
        originMap: ast._originMap,
        recursionLimit,
        useAppliedIgnoreCase: !!(!minTargetEs2025 && hasCaseInsensitiveNode && hasCaseSensitiveNode),
        useFlagMods: minTargetEs2025,
        useFlagV: minTargetEs2024,
        verbose: opts.verbose
    };
    function gen(node) {
        state.lastNode = lastNode;
        lastNode = node;
        switch(node.type){
            case AstTypes.Regex:
                return {
                    pattern: gen(node.pattern),
                    flags: gen(node.flags),
                    options: {
                        ...node.options
                    }
                };
            case AstTypes.Alternative:
                return node.elements.map(gen).join("");
            case AstTypes.Assertion:
                return genAssertion(node, state, gen);
            case AstTypes.Backreference:
                return genBackreference(node, state);
            case AstTypes.CapturingGroup:
                return genCapturingGroup(node, state, gen);
            case AstTypes.Character:
                return genCharacter(node, state);
            case AstTypes.CharacterClass:
                return genCharacterClass(node, state, gen);
            case AstTypes.CharacterClassIntersection:
                if (!state.useFlagV) {
                    throw new Error("Use of class intersection requires min target ES2024");
                }
                return node.classes.map(gen).join("&&");
            case AstTypes.CharacterClassRange:
                return genCharacterClassRange(node, state);
            case AstTypes.CharacterSet:
                return genCharacterSet(node, state);
            case AstTypes.Flags:
                return genFlags(node, state);
            case AstTypes.Group:
                return genGroup(node, state, gen);
            case AstTypes.Pattern:
                return node.alternatives.map(gen).join("|");
            case AstTypes.Quantifier:
                return gen(node.element) + getQuantifierStr(node);
            case AstTypes.Recursion:
                return genRecursion(node, state);
            default:
                throw new Error(`Unexpected node type "${node.type}"`);
        }
    }
    const result = gen(ast);
    if (!minTargetEs2024) {
        delete result.options.force.v;
        result.options.disable.v = true;
        result.options.unicodeSetsPlugin = null;
    }
    result._captureTransfers = /* @__PURE__ */ new Map();
    result._hiddenCaptures = [];
    state.captureMap.forEach((value, key)=>{
        if (value.hidden) {
            result._hiddenCaptures.push(key);
        }
        if (value.transferTo) {
            getOrCreate(result._captureTransfers, value.transferTo, []).push(key);
        }
    });
    return result;
}
var FlagModifierVisitor = {
    AnyGroup: {
        enter ({ node }, state) {
            const currentModI = state.getCurrentModI();
            state.pushModI(node.flags ? getNewCurrentFlags({
                ignoreCase: currentModI
            }, node.flags).ignoreCase : currentModI);
        },
        exit (_, state) {
            state.popModI();
        }
    },
    Backreference (_, state) {
        state.setHasCasedChar();
    },
    Character ({ node }, state) {
        if (charHasCase(cp(node.value))) {
            state.setHasCasedChar();
        }
    },
    CharacterClassRange ({ node, skip }, state) {
        skip();
        if (getCasesOutsideCharClassRange(node, {
            firstOnly: true
        }).length) {
            state.setHasCasedChar();
        }
    },
    CharacterSet ({ node }, state) {
        if (node.kind === AstCharacterSetKinds.property && UnicodePropertiesWithSpecificCase.has(node.value)) {
            state.setHasCasedChar();
        }
    }
};
var BaseEscapeChars = /* @__PURE__ */ new Set([
    "$",
    "(",
    ")",
    "*",
    "+",
    ".",
    "?",
    "[",
    "\\",
    "]",
    "^",
    "{",
    "|",
    "}"
]);
var CharClassEscapeChars = /* @__PURE__ */ new Set([
    "-",
    "\\",
    "]",
    "^",
    // Literal `[` doesn't require escaping with flag u, but this can help work around regex source
    // linters and regex syntax processors that expect unescaped `[` to create a nested class
    "["
]);
var CharClassEscapeCharsFlagV = /* @__PURE__ */ new Set([
    "(",
    ")",
    "-",
    "/",
    "[",
    "\\",
    "]",
    "^",
    "{",
    "|",
    "}",
    // Double punctuators; also includes already-listed `-` and `^`
    "!",
    "#",
    "$",
    "%",
    "&",
    "*",
    "+",
    ",",
    ".",
    ":",
    ";",
    "<",
    "=",
    ">",
    "?",
    "@",
    "`",
    "~"
]);
var CharCodeEscapeMap = /* @__PURE__ */ new Map([
    [
        9,
        r`\t`
    ],
    // horizontal tab
    [
        10,
        r`\n`
    ],
    // line feed
    [
        11,
        r`\v`
    ],
    // vertical tab
    [
        12,
        r`\f`
    ],
    // form feed
    [
        13,
        r`\r`
    ],
    // carriage return
    [
        8232,
        r`\u2028`
    ],
    // line separator
    [
        8233,
        r`\u2029`
    ],
    // paragraph separator
    [
        65279,
        r`\uFEFF`
    ]
]);
var casedRe = /^\p{Cased}$/u;
function charHasCase(char) {
    return casedRe.test(char);
}
function genAssertion(node, _, gen) {
    const { kind, negate, alternatives } = node;
    if (isLookaround(node)) {
        const prefix = `${kind === AstAssertionKinds.lookahead ? "" : "<"}${negate ? "!" : "="}`;
        return `(?${prefix}${alternatives.map(gen).join("|")})`;
    }
    if (kind === AstAssertionKinds.string_end) {
        return "$";
    }
    if (kind === AstAssertionKinds.string_start) {
        return "^";
    }
    if (kind === AstAssertionKinds.word_boundary) {
        return negate ? r`\B` : r`\b`;
    }
    throw new Error(`Unexpected assertion kind "${kind}"`);
}
function genBackreference({ ref }, state) {
    if (typeof ref !== "number") {
        throw new Error("Unexpected named backref in transformed AST");
    }
    if (!state.useFlagMods && state.accuracy === "strict" && state.currentFlags.ignoreCase && !state.captureMap.get(ref).ignoreCase) {
        throw new Error("Use of case-insensitive backref to case-sensitive group requires target ES2025 or non-strict accuracy");
    }
    return "\\" + ref;
}
function genCapturingGroup(node, state, gen) {
    const { name, number, alternatives } = node;
    const data = {
        ignoreCase: state.currentFlags.ignoreCase
    };
    const origin = state.originMap.get(node);
    if (origin) {
        data.hidden = true;
        if (number > origin.number) {
            data.transferTo = origin.number;
        }
    }
    state.captureMap.set(number, data);
    return `(${name ? `?<${name}>` : ""}${alternatives.map(gen).join("|")})`;
}
function genCharacter({ value }, state) {
    const char = cp(value);
    const escaped = getCharEscape(value, {
        isAfterBackref: state.lastNode.type === AstTypes.Backreference,
        inCharClass: state.inCharClass,
        useFlagV: state.useFlagV
    });
    if (escaped !== char) {
        return escaped;
    }
    if (state.useAppliedIgnoreCase && state.currentFlags.ignoreCase && charHasCase(char)) {
        const cases = getIgnoreCaseMatchChars(char);
        return state.inCharClass ? cases.join("") : cases.length > 1 ? `[${cases.join("")}]` : cases[0];
    }
    return char;
}
function genCharacterClass({ negate, parent, elements }, state, gen) {
    const genClass = ()=>`[${negate ? "^" : ""}${elements.map(gen).join("")}]`;
    if (!state.inCharClass) {
        state.inCharClass = true;
        const result = genClass();
        state.inCharClass = false;
        return result;
    }
    const firstType = elements[0]?.type;
    if (!negate && firstType && // Allows many nested classes to work with `target` ES2018 which doesn't support nesting
    ((!state.useFlagV || !state.verbose) && parent.type === AstTypes.CharacterClass && firstType !== AstTypes.CharacterClassIntersection || !state.verbose && parent.type === AstTypes.CharacterClassIntersection && // JS doesn't allow intersection with union or ranges
    elements.length === 1 && firstType !== AstTypes.CharacterClass && firstType !== AstTypes.CharacterClassRange)) {
        return elements.map(gen).join("");
    }
    if (!state.useFlagV && parent.type === AstTypes.CharacterClass) {
        throw new Error("Use of nested character class requires min target ES2024");
    }
    return genClass();
}
function genCharacterClassRange(node, state) {
    const min = node.min.value;
    const max = node.max.value;
    const escOpts = {
        isAfterBackref: false,
        inCharClass: true,
        useFlagV: state.useFlagV
    };
    const minStr = getCharEscape(min, escOpts);
    const maxStr = getCharEscape(max, escOpts);
    const extraChars = /* @__PURE__ */ new Set();
    if (state.useAppliedIgnoreCase && state.currentFlags.ignoreCase) {
        const charsOutsideRange = getCasesOutsideCharClassRange(node);
        const ranges = getCodePointRangesFromChars(charsOutsideRange);
        ranges.forEach((value)=>{
            extraChars.add(Array.isArray(value) ? `${getCharEscape(value[0], escOpts)}-${getCharEscape(value[1], escOpts)}` : getCharEscape(value, escOpts));
        });
    }
    return `${minStr}-${maxStr}${[
        ...extraChars
    ].join("")}`;
}
function genCharacterSet({ kind, negate, value, key }, state) {
    if (kind === AstCharacterSetKinds.dot) {
        return state.currentFlags.dotAll ? state.appliedGlobalFlags.dotAll || state.useFlagMods ? "." : "[^]" : // Onig's only line break char is line feed, unlike JS
        r`[^\n]`;
    }
    if (kind === AstCharacterSetKinds.digit) {
        return negate ? r`\D` : r`\d`;
    }
    if (kind === AstCharacterSetKinds.property) {
        if (state.useAppliedIgnoreCase && state.currentFlags.ignoreCase && UnicodePropertiesWithSpecificCase.has(value)) {
            throw new Error(`Unicode property "${value}" can't be case-insensitive when other chars have specific case`);
        }
        return `${negate ? r`\P` : r`\p`}{${key ? `${key}=` : ""}${value}}`;
    }
    if (kind === AstCharacterSetKinds.word) {
        return negate ? r`\W` : r`\w`;
    }
    throw new Error(`Unexpected character set kind "${kind}"`);
}
function genFlags(node, state) {
    return(// The transformer should never turn on the properties for flags d, g, and m since Onig doesn't
    // have equivs. Flag m is never relied on since Onig uses different line break chars than JS
    // (node.hasIndices ? 'd' : '') +
    // (node.global ? 'g' : '') +
    // (node.multiline ? 'm' : '') +
    (state.appliedGlobalFlags.ignoreCase ? "i" : "") + (node.dotAll ? "s" : "") + (node.sticky ? "y" : ""));
}
function genGroup({ atomic: atomic2, flags, parent, alternatives }, state, gen) {
    const currentFlags = state.currentFlags;
    if (flags) {
        state.currentFlags = getNewCurrentFlags(currentFlags, flags);
    }
    const contents = alternatives.map(gen).join("|");
    const result = !state.verbose && alternatives.length === 1 && parent.type !== AstTypes.Quantifier && !atomic2 && (!state.useFlagMods || !flags) ? contents : `(?${getGroupPrefix(atomic2, flags, state.useFlagMods)}${contents})`;
    state.currentFlags = currentFlags;
    return result;
}
function genRecursion({ ref }, state) {
    const limit = state.recursionLimit;
    return ref === 0 ? `(?R=${limit})` : r`\g<${ref}&R=${limit}>`;
}
function getCasesOutsideCharClassRange(node, options) {
    const firstOnly = !!options?.firstOnly;
    const min = node.min.value;
    const max = node.max.value;
    const found = [];
    if (min < 65 && (max === 65535 || max >= 131071) || min === 65536 && max >= 131071) {
        return found;
    }
    for(let i = min; i <= max; i++){
        const char = cp(i);
        if (!charHasCase(char)) {
            continue;
        }
        const charsOutsideRange = getIgnoreCaseMatchChars(char).filter((caseOfChar)=>{
            const num = caseOfChar.codePointAt(0);
            return num < min || num > max;
        });
        if (charsOutsideRange.length) {
            found.push(...charsOutsideRange);
            if (firstOnly) {
                break;
            }
        }
    }
    return found;
}
function getCharEscape(codePoint, { isAfterBackref, inCharClass, useFlagV }) {
    if (CharCodeEscapeMap.has(codePoint)) {
        return CharCodeEscapeMap.get(codePoint);
    }
    if (// Control chars, etc.; condition modeled on the Chrome developer console's display for strings
    codePoint < 32 || codePoint > 126 && codePoint < 160 || // Unicode planes 4-16; unassigned, special purpose, and private use area
    codePoint > 262143 || // Avoid corrupting a preceding backref by immediately following it with a literal digit
    isAfterBackref && isDigitCharCode(codePoint)) {
        return codePoint > 255 ? `\\u{${codePoint.toString(16).toUpperCase()}}` : `\\x${codePoint.toString(16).toUpperCase().padStart(2, "0")}`;
    }
    const escapeChars = inCharClass ? useFlagV ? CharClassEscapeCharsFlagV : CharClassEscapeChars : BaseEscapeChars;
    const char = cp(codePoint);
    return (escapeChars.has(char) ? "\\" : "") + char;
}
function getCodePointRangesFromChars(chars) {
    const codePoints = chars.map((char)=>char.codePointAt(0)).sort((a, b)=>a - b);
    const values = [];
    let start = null;
    for(let i = 0; i < codePoints.length; i++){
        if (codePoints[i + 1] === codePoints[i] + 1) {
            start ??= codePoints[i];
        } else if (start === null) {
            values.push(codePoints[i]);
        } else {
            values.push([
                start,
                codePoints[i]
            ]);
            start = null;
        }
    }
    return values;
}
function getGroupPrefix(atomic2, flagMods, useFlagMods) {
    if (atomic2) {
        return ">";
    }
    let mods = "";
    if (flagMods && useFlagMods) {
        const { enable, disable } = flagMods;
        mods = (enable?.ignoreCase ? "i" : "") + (enable?.dotAll ? "s" : "") + (disable ? "-" : "") + (disable?.ignoreCase ? "i" : "") + (disable?.dotAll ? "s" : "");
    }
    return `${mods}:`;
}
function getQuantifierStr({ min, max, greedy, possessive: possessive2 }) {
    let base;
    if (!min && max === 1) {
        base = "?";
    } else if (!min && max === Infinity) {
        base = "*";
    } else if (min === 1 && max === Infinity) {
        base = "+";
    } else if (min === max) {
        base = `{${min}}`;
    } else {
        base = `{${min},${max === Infinity ? "" : max}}`;
    }
    return base + (possessive2 ? "+" : greedy ? "" : "?");
}
function isDigitCharCode(value) {
    return value > 47 && value < 58;
}
// src/subclass.js
var EmulatedRegExp = class _EmulatedRegExp extends RegExp {
    /**
  @type {Map<number, {
    hidden?: true;
    transferTo?: number;
  }>}
  */ #captureMap = /* @__PURE__ */ new Map();
    /**
  @type {RegExp | EmulatedRegExp | null}
  */ #compiled = null;
    /**
  @type {string}
  */ #pattern;
    /**
  @type {Map<number, string>?}
  */ #nameMap = null;
    /**
  @type {string?}
  */ #strategy = null;
    /**
  Can be used to serialize the instance.
  @type {EmulatedRegExpOptions}
  */ rawOptions = {};
    // Override the getter with one that works with lazy-compiled regexes
    get source() {
        return this.#pattern || "(?:)";
    }
    /**
  @overload
  @param {string} pattern
  @param {string} [flags]
  @param {EmulatedRegExpOptions} [options]
  */ /**
  @overload
  @param {EmulatedRegExp} pattern
  @param {string} [flags]
  */ constructor(pattern, flags, options){
        const lazyCompile = !!options?.lazyCompile;
        if (pattern instanceof RegExp) {
            if (options) {
                throw new Error("Cannot provide options when copying a regexp");
            }
            const re = pattern;
            super(re, flags);
            this.#pattern = re.source;
            if (re instanceof _EmulatedRegExp) {
                this.#captureMap = re.#captureMap;
                this.#nameMap = re.#nameMap;
                this.#strategy = re.#strategy;
                this.rawOptions = re.rawOptions;
            }
        } else {
            const opts = {
                hiddenCaptures: [],
                strategy: null,
                transfers: [],
                ...options
            };
            super(lazyCompile ? "" : pattern, flags);
            this.#pattern = pattern;
            this.#captureMap = createCaptureMap(opts.hiddenCaptures, opts.transfers);
            this.#strategy = opts.strategy;
            this.rawOptions = options ?? {};
        }
        if (!lazyCompile) {
            this.#compiled = this;
        }
    }
    /**
  Called internally by all String/RegExp methods that use regexes.
  @override
  @param {string} str
  @returns {RegExpExecArray?}
  */ exec(str) {
        if (!this.#compiled) {
            const { lazyCompile, ...rest } = this.rawOptions;
            this.#compiled = new _EmulatedRegExp(this.#pattern, this.flags, rest);
        }
        const useLastIndex = this.global || this.sticky;
        const pos = this.lastIndex;
        if (this.#strategy === "clip_search" && useLastIndex && pos) {
            this.lastIndex = 0;
            const match = this.#execCore(str.slice(pos));
            if (match) {
                adjustMatchDetailsForOffset(match, pos, str, this.hasIndices);
                this.lastIndex += pos;
            }
            return match;
        }
        return this.#execCore(str);
    }
    /**
  Adds support for hidden and transfer captures.
  @param {string} str
  @returns
  */ #execCore(str) {
        this.#compiled.lastIndex = this.lastIndex;
        const match = super.exec.call(this.#compiled, str);
        this.lastIndex = this.#compiled.lastIndex;
        if (!match || !this.#captureMap.size) {
            return match;
        }
        const matchCopy = [
            ...match
        ];
        match.length = 1;
        let indicesCopy;
        if (this.hasIndices) {
            indicesCopy = [
                ...match.indices
            ];
            match.indices.length = 1;
        }
        const mappedNums = [
            0
        ];
        for(let i = 1; i < matchCopy.length; i++){
            const { hidden, transferTo } = this.#captureMap.get(i) ?? {};
            if (hidden) {
                mappedNums.push(null);
            } else {
                mappedNums.push(match.length);
                match.push(matchCopy[i]);
                if (this.hasIndices) {
                    match.indices.push(indicesCopy[i]);
                }
            }
            if (transferTo && matchCopy[i] !== void 0) {
                const to = throwIfNot(mappedNums[transferTo]);
                match[to] = matchCopy[i];
                if (this.hasIndices) {
                    match.indices[to] = indicesCopy[i];
                }
                if (match.groups) {
                    if (!this.#nameMap) {
                        this.#nameMap = createNameMap(this.source);
                    }
                    const name = this.#nameMap.get(transferTo);
                    if (name) {
                        match.groups[name] = matchCopy[i];
                        if (this.hasIndices) {
                            match.indices.groups[name] = indicesCopy[i];
                        }
                    }
                }
            }
        }
        return match;
    }
};
function adjustMatchDetailsForOffset(match, offset, input, hasIndices) {
    match.index += offset;
    match.input = input;
    if (hasIndices) {
        const indices = match.indices;
        for(let i = 0; i < indices.length; i++){
            const arr = indices[i];
            if (arr) {
                indices[i] = [
                    arr[0] + offset,
                    arr[1] + offset
                ];
            }
        }
        const groupIndices = indices.groups;
        if (groupIndices) {
            Object.keys(groupIndices).forEach((key)=>{
                const arr = groupIndices[key];
                if (arr) {
                    groupIndices[key] = [
                        arr[0] + offset,
                        arr[1] + offset
                    ];
                }
            });
        }
    }
}
function createCaptureMap(hiddenCaptures, transfers) {
    const captureMap = /* @__PURE__ */ new Map();
    for (const num of hiddenCaptures){
        captureMap.set(num, {
            hidden: true
        });
    }
    for (const [to, from] of transfers){
        for (const num of from){
            getOrCreate(captureMap, num, {}).transferTo = to;
        }
    }
    return captureMap;
}
function createNameMap(pattern) {
    const re = /(?<capture>\((?:\?<(?![=!])(?<name>[^>]+)>|(?!\?)))|\\?./gsu;
    const map = /* @__PURE__ */ new Map();
    let numCharClassesOpen = 0;
    let numCaptures = 0;
    let match;
    while(match = re.exec(pattern)){
        const { 0: m, groups: { capture, name } } = match;
        if (m === "[") {
            numCharClassesOpen++;
        } else if (!numCharClassesOpen) {
            if (capture) {
                numCaptures++;
                if (name) {
                    map.set(numCaptures, name);
                }
            }
        } else if (m === "]") {
            numCharClassesOpen--;
        }
    }
    return map;
}
;
;
function toOnigurumaAst(pattern, options) {
    const opts = {
        flags: options?.flags ?? "",
        rules: {
            captureGroup: false,
            singleline: false,
            ...options?.rules
        }
    };
    return parse(tokenize(pattern, opts.flags, opts.rules));
}
function toRegExp(pattern, options) {
    const d = toRegExpDetails(pattern, options);
    if (d.options) {
        return new EmulatedRegExp(d.pattern, d.flags, d.options);
    }
    return new RegExp(d.pattern, d.flags);
}
function toRegExpDetails(pattern, options) {
    const opts = getOptions(options);
    const tokenized = tokenize(pattern, opts.flags, {
        captureGroup: opts.rules.captureGroup,
        singleline: opts.rules.singleline
    });
    const onigurumaAst = parse(tokenized, {
        skipBackrefValidation: opts.rules.allowOrphanBackrefs,
        verbose: opts.verbose
    });
    const regexAst = transform(onigurumaAst, {
        accuracy: opts.accuracy,
        asciiWordBoundaries: opts.rules.asciiWordBoundaries,
        avoidSubclass: opts.avoidSubclass,
        bestEffortTarget: opts.target
    });
    const generated = generate(regexAst, opts);
    const recursionResult = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2d$recursion$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["recursion"])(generated.pattern, {
        captureTransfers: generated._captureTransfers,
        hiddenCaptures: generated._hiddenCaptures,
        mode: "external"
    });
    const possessiveResult = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2f$src$2f$atomic$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["possessive"])(recursionResult.pattern);
    const atomicResult = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$regex$2f$src$2f$atomic$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["atomic"])(possessiveResult.pattern, {
        captureTransfers: recursionResult.captureTransfers,
        hiddenCaptures: recursionResult.hiddenCaptures
    });
    const details = {
        pattern: atomicResult.pattern,
        flags: `${opts.hasIndices ? "d" : ""}${opts.global ? "g" : ""}${generated.flags}${generated.options.disable.v ? "u" : "v"}`
    };
    if (opts.avoidSubclass) {
        if (opts.lazyCompileLength !== Infinity) {
            throw new Error("Lazy compilation requires subclass");
        }
    } else {
        const hiddenCaptures = atomicResult.hiddenCaptures.sort((a, b)=>a - b);
        const transfers = Array.from(atomicResult.captureTransfers);
        const strategy = regexAst._strategy;
        const lazyCompile = details.pattern.length >= opts.lazyCompileLength;
        if (hiddenCaptures.length || transfers.length || strategy || lazyCompile) {
            details.options = {
                ...hiddenCaptures.length && {
                    hiddenCaptures
                },
                ...transfers.length && {
                    transfers
                },
                ...strategy && {
                    strategy
                },
                ...lazyCompile && {
                    lazyCompile
                }
            };
        }
    }
    return details;
}
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/apps/website/docs/node_modules/hast-util-is-element/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Parents} Parents
 */ /**
 * @template Fn
 * @template Fallback
 * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate
 */ /**
 * @callback Check
 *   Check that an arbitrary value is an element.
 * @param {unknown} this
 *   Context object (`this`) to call `test` with
 * @param {unknown} [element]
 *   Anything (typically a node).
 * @param {number | null | undefined} [index]
 *   Position of `element` in its parent.
 * @param {Parents | null | undefined} [parent]
 *   Parent of `element`.
 * @returns {boolean}
 *   Whether this is an element and passes a test.
 *
 * @typedef {Array<TestFunction | string> | TestFunction | string | null | undefined} Test
 *   Check for an arbitrary element.
 *
 *   * when `string`, checks that the element has that tag name
 *   * when `function`, see `TestFunction`
 *   * when `Array`, checks if one of the subtests pass
 *
 * @callback TestFunction
 *   Check if an element passes a test.
 * @param {unknown} this
 *   The given context.
 * @param {Element} element
 *   An element.
 * @param {number | undefined} [index]
 *   Position of `element` in its parent.
 * @param {Parents | undefined} [parent]
 *   Parent of `element`.
 * @returns {boolean | undefined | void}
 *   Whether this element passes the test.
 *
 *   Note: `void` is included until TS sees no return as `undefined`.
 */ /**
 * Check if `element` is an `Element` and whether it passes the given test.
 *
 * @param element
 *   Thing to check, typically `element`.
 * @param test
 *   Check for a specific element.
 * @param index
 *   Position of `element` in its parent.
 * @param parent
 *   Parent of `element`.
 * @param context
 *   Context object (`this`) to call `test` with.
 * @returns
 *   Whether `element` is an `Element` and passes a test.
 * @throws
 *   When an incorrect `test`, `index`, or `parent` is given; there is no error
 *   thrown when `element` is not a node or not an element.
 */ __turbopack_esm__({
    "convertElement": (()=>convertElement),
    "isElement": (()=>isElement)
});
const isElement = /**
     * @param {unknown} [element]
     * @param {Test | undefined} [test]
     * @param {number | null | undefined} [index]
     * @param {Parents | null | undefined} [parent]
     * @param {unknown} [context]
     * @returns {boolean}
     */ // eslint-disable-next-line max-params
function(element, test, index, parent, context) {
    const check = convertElement(test);
    if (index !== null && index !== undefined && (typeof index !== 'number' || index < 0 || index === Number.POSITIVE_INFINITY)) {
        throw new Error('Expected positive finite `index`');
    }
    if (parent !== null && parent !== undefined && (!parent.type || !parent.children)) {
        throw new Error('Expected valid `parent`');
    }
    if ((index === null || index === undefined) !== (parent === null || parent === undefined)) {
        throw new Error('Expected both `index` and `parent`');
    }
    return looksLikeAnElement(element) ? check.call(context, element, index, parent) : false;
};
const convertElement = /**
     * @param {Test | null | undefined} [test]
     * @returns {Check}
     */ function(test) {
    if (test === null || test === undefined) {
        return element;
    }
    if (typeof test === 'string') {
        return tagNameFactory(test);
    }
    // Assume array.
    if (typeof test === 'object') {
        return anyFactory(test);
    }
    if (typeof test === 'function') {
        return castFactory(test);
    }
    throw new Error('Expected function, string, or array as `test`');
};
/**
 * Handle multiple tests.
 *
 * @param {Array<TestFunction | string>} tests
 * @returns {Check}
 */ function anyFactory(tests) {
    /** @type {Array<Check>} */ const checks = [];
    let index = -1;
    while(++index < tests.length){
        checks[index] = convertElement(tests[index]);
    }
    return castFactory(any);
    "TURBOPACK unreachable";
    /**
   * @this {unknown}
   * @type {TestFunction}
   */ function any(...parameters) {
        let index = -1;
        while(++index < checks.length){
            if (checks[index].apply(this, parameters)) return true;
        }
        return false;
    }
}
/**
 * Turn a string into a test for an element with a certain type.
 *
 * @param {string} check
 * @returns {Check}
 */ function tagNameFactory(check) {
    return castFactory(tagName);
    "TURBOPACK unreachable";
    /**
   * @param {Element} element
   * @returns {boolean}
   */ function tagName(element) {
        return element.tagName === check;
    }
}
/**
 * Turn a custom test into a test for an element that passes that test.
 *
 * @param {TestFunction} testFunction
 * @returns {Check}
 */ function castFactory(testFunction) {
    return check;
    "TURBOPACK unreachable";
    /**
   * @this {unknown}
   * @type {Check}
   */ function check(value, index, parent) {
        return Boolean(looksLikeAnElement(value) && testFunction.call(this, value, typeof index === 'number' ? index : undefined, parent || undefined));
    }
}
/**
 * Make sure something is an element.
 *
 * @param {unknown} element
 * @returns {element is Element}
 */ function element(element) {
    return Boolean(element && typeof element === 'object' && 'type' in element && element.type === 'element' && 'tagName' in element && typeof element.tagName === 'string');
}
/**
 * @param {unknown} value
 * @returns {value is Element}
 */ function looksLikeAnElement(value) {
    return value !== null && typeof value === 'object' && 'type' in value && 'tagName' in value;
}
}}),
"[project]/apps/website/docs/node_modules/unist-util-find-after/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Node} UnistNode
 * @typedef {import('unist').Parent} UnistParent
 */ /**
 * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test
 *   Test from `unist-util-is`.
 *
 *   Note: we have remove and add `undefined`, because otherwise when generating
 *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,
 *   which doesn’t work when publishing on npm.
 */ /**
 * @typedef {(
 *   Fn extends (value: any) => value is infer Thing
 *   ? Thing
 *   : Fallback
 * )} Predicate
 *   Get the value of a type guard `Fn`.
 * @template Fn
 *   Value; typically function that is a type guard (such as `(x): x is Y`).
 * @template Fallback
 *   Value to yield if `Fn` is not a type guard.
 */ /**
 * @typedef {(
 *   Check extends null | undefined // No test.
 *   ? Value
 *   : Value extends {type: Check} // String (type) test.
 *   ? Value
 *   : Value extends Check // Partial test.
 *   ? Value
 *   : Check extends Function // Function test.
 *   ? Predicate<Check, Value> extends Value
 *     ? Predicate<Check, Value>
 *     : never
 *   : never // Some other test?
 * )} MatchesOne
 *   Check whether a node matches a primitive check in the type system.
 * @template Value
 *   Value; typically unist `Node`.
 * @template Check
 *   Value; typically `unist-util-is`-compatible test, but not arrays.
 */ /**
 * @typedef {(
 *   Check extends Array<any>
 *   ? MatchesOne<Value, Check[keyof Check]>
 *   : MatchesOne<Value, Check>
 * )} Matches
 *   Check whether a node matches a check in the type system.
 * @template Value
 *   Value; typically unist `Node`.
 * @template Check
 *   Value; typically `unist-util-is`-compatible test.
 */ /**
 * @typedef {(
 *   Kind extends {children: Array<infer Child>}
 *   ? Child
 *   : never
 * )} Child
 *   Collect nodes that can be parents of `Child`.
 * @template {UnistNode} Kind
 *   All node types.
 */ __turbopack_esm__({
    "findAfter": (()=>findAfter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-is/lib/index.js [app-rsc] (ecmascript)");
;
const findAfter = /**
     * @param {UnistParent} parent
     * @param {UnistNode | number} index
     * @param {Test} [test]
     * @returns {UnistNode | undefined}
     */ function(parent, index, test) {
    const is = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convert"])(test);
    if (!parent || !parent.type || !parent.children) {
        throw new Error('Expected parent node');
    }
    if (typeof index === 'number') {
        if (index < 0 || index === Number.POSITIVE_INFINITY) {
            throw new Error('Expected positive finite number as index');
        }
    } else {
        index = parent.children.indexOf(index);
        if (index < 0) {
            throw new Error('Expected child node or index');
        }
    }
    while(++index < parent.children.length){
        if (is(parent.children[index], index, parent)) {
            return parent.children[index];
        }
    }
    return undefined;
};
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-text/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Comment} Comment
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Nodes} Nodes
 * @typedef {import('hast').Parents} Parents
 * @typedef {import('hast').Text} Text
 * @typedef {import('hast-util-is-element').TestFunction} TestFunction
 */ /**
 * @typedef {'normal' | 'nowrap' | 'pre' | 'pre-wrap'} Whitespace
 *   Valid and useful whitespace values (from CSS).
 *
 * @typedef {0 | 1 | 2} BreakNumber
 *   Specific break:
 *
 *   *   `0` — space
 *   *   `1` — line ending
 *   *   `2` — blank line
 *
 * @typedef {'\n'} BreakForce
 *   Forced break.
 *
 * @typedef {boolean} BreakValue
 *   Whether there was a break.
 *
 * @typedef {BreakNumber | BreakValue | undefined} BreakBefore
 *   Any value for a break before.
 *
 * @typedef {BreakForce | BreakNumber | BreakValue | undefined} BreakAfter
 *   Any value for a break after.
 *
 * @typedef CollectionInfo
 *   Info on current collection.
 * @property {BreakAfter} breakAfter
 *   Whether there was a break after.
 * @property {BreakBefore} breakBefore
 *   Whether there was a break before.
 * @property {Whitespace} whitespace
 *   Current whitespace setting.
 *
 * @typedef Options
 *   Configuration.
 * @property {Whitespace | null | undefined} [whitespace='normal']
 *   Initial CSS whitespace setting to use (default: `'normal'`).
 */ __turbopack_esm__({
    "toText": (()=>toText)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-is-element/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$find$2d$after$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-find-after/lib/index.js [app-rsc] (ecmascript)");
;
;
const searchLineFeeds = /\n/g;
const searchTabOrSpaces = /[\t ]+/g;
const br = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convertElement"])('br');
const cell = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convertElement"])(isCell);
const p = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convertElement"])('p');
const row = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convertElement"])('tr');
// Note that we don’t need to include void elements here as they don’t have text.
// See: <https://github.com/wooorm/html-void-elements>
const notRendered = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convertElement"])([
    // List from: <https://html.spec.whatwg.org/multipage/rendering.html#hidden-elements>
    'datalist',
    'head',
    'noembed',
    'noframes',
    'noscript',
    'rp',
    'script',
    'style',
    'template',
    'title',
    // Hidden attribute.
    hidden,
    // From: <https://html.spec.whatwg.org/multipage/rendering.html#flow-content-3>
    closedDialog
]);
// See: <https://html.spec.whatwg.org/multipage/rendering.html#the-css-user-agent-style-sheet-and-presentational-hints>
const blockOrCaption = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$is$2d$element$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convertElement"])([
    'address',
    'article',
    'aside',
    'blockquote',
    'body',
    'caption',
    'center',
    'dd',
    'dialog',
    'dir',
    'dl',
    'dt',
    'div',
    'figure',
    'figcaption',
    'footer',
    'form,',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'header',
    'hgroup',
    'hr',
    'html',
    'legend',
    'li',
    'listing',
    'main',
    'menu',
    'nav',
    'ol',
    'p',
    'plaintext',
    'pre',
    'section',
    'ul',
    'xmp' // Flow content (legacy)
]);
function toText(tree, options) {
    const options_ = options || {};
    const children = 'children' in tree ? tree.children : [];
    const block = blockOrCaption(tree);
    const whitespace = inferWhitespace(tree, {
        whitespace: options_.whitespace || 'normal',
        breakBefore: false,
        breakAfter: false
    });
    /** @type {Array<BreakNumber | string>} */ const results = [];
    // Treat `text` and `comment` as having normal white-space.
    // This deviates from the spec as in the DOM the node’s `.data` has to be
    // returned.
    // If you want that behavior use `hast-util-to-string`.
    // All other nodes are later handled as if they are `element`s (so the
    // algorithm also works on a `root`).
    // Nodes without children are treated as a void element, so `doctype` is thus
    // ignored.
    if (tree.type === 'text' || tree.type === 'comment') {
        results.push(...collectText(tree, {
            whitespace,
            breakBefore: true,
            breakAfter: true
        }));
    }
    // 1.  If this element is not being rendered, or if the user agent is a
    //     non-CSS user agent, then return the same value as the textContent IDL
    //     attribute on this element.
    //
    //     Note: we’re not supporting stylesheets so we’re acting as if the node
    //     is rendered.
    //
    //     If you want that behavior use `hast-util-to-string`.
    //     Important: we’ll have to account for this later though.
    // 2.  Let results be a new empty list.
    let index = -1;
    // 3.  For each child node node of this element:
    while(++index < children.length){
        // 3.1. Let current be the list resulting in running the inner text
        //      collection steps with node.
        //      Each item in results will either be a JavaScript string or a
        //      positive integer (a required line break count).
        // 3.2. For each item item in current, append item to results.
        results.push(...renderedTextCollection(children[index], // @ts-expect-error: `tree` is a parent if we’re here.
        tree, {
            whitespace,
            breakBefore: index ? undefined : block,
            breakAfter: index < children.length - 1 ? br(children[index + 1]) : block
        }));
    }
    // 4.  Remove any items from results that are the empty string.
    // 5.  Remove any runs of consecutive required line break count items at the
    //     start or end of results.
    // 6.  Replace each remaining run of consecutive required line break count
    //     items with a string consisting of as many U+000A LINE FEED (LF)
    //     characters as the maximum of the values in the required line break
    //     count items.
    /** @type {Array<string>} */ const result = [];
    /** @type {number | undefined} */ let count;
    index = -1;
    while(++index < results.length){
        const value = results[index];
        if (typeof value === 'number') {
            if (count !== undefined && value > count) count = value;
        } else if (value) {
            if (count !== undefined && count > -1) {
                result.push('\n'.repeat(count) || ' ');
            }
            count = -1;
            result.push(value);
        }
    }
    // 7.  Return the concatenation of the string items in results.
    return result.join('');
}
/**
 * <https://html.spec.whatwg.org/multipage/dom.html#rendered-text-collection-steps>
 *
 * @param {Nodes} node
 * @param {Parents} parent
 * @param {CollectionInfo} info
 * @returns {Array<BreakNumber | string>}
 */ function renderedTextCollection(node, parent, info) {
    if (node.type === 'element') {
        return collectElement(node, parent, info);
    }
    if (node.type === 'text') {
        return info.whitespace === 'normal' ? collectText(node, info) : collectPreText(node);
    }
    return [];
}
/**
 * Collect an element.
 *
 * @param {Element} node
 *   Element node.
 * @param {Parents} parent
 * @param {CollectionInfo} info
 *   Info on current collection.
 * @returns {Array<BreakNumber | string>}
 */ function collectElement(node, parent, info) {
    // First we infer the `white-space` property.
    const whitespace = inferWhitespace(node, info);
    const children = node.children || [];
    let index = -1;
    /** @type {Array<BreakNumber | string>} */ let items = [];
    // We’re ignoring point 3, and exiting without any content here, because we
    // deviated from the spec in `toText` at step 3.
    if (notRendered(node)) {
        return items;
    }
    /** @type {BreakNumber | undefined} */ let prefix;
    /** @type {BreakForce | BreakNumber | undefined} */ let suffix;
    // Note: we first detect if there is going to be a break before or after the
    // contents, as that changes the white-space handling.
    // 2.  If node’s computed value of `visibility` is not `visible`, then return
    //     items.
    //
    //     Note: Ignored, as everything is visible by default user agent styles.
    // 3.  If node is not being rendered, then return items. [...]
    //
    //     Note: We already did this above.
    // See `collectText` for step 4.
    // 5.  If node is a `<br>` element, then append a string containing a single
    //     U+000A LINE FEED (LF) character to items.
    if (br(node)) {
        suffix = '\n';
    } else if (row(node) && // @ts-expect-error: something up with types of parents.
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$find$2d$after$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findAfter"])(parent, node, row)) {
        suffix = '\n';
    } else if (p(node)) {
        prefix = 2;
        suffix = 2;
    } else if (blockOrCaption(node)) {
        prefix = 1;
        suffix = 1;
    }
    // 1.  Let items be the result of running the inner text collection steps with
    //     each child node of node in tree order, and then concatenating the
    //     results to a single list.
    while(++index < children.length){
        items = items.concat(renderedTextCollection(children[index], node, {
            whitespace,
            breakBefore: index ? undefined : prefix,
            breakAfter: index < children.length - 1 ? br(children[index + 1]) : suffix
        }));
    }
    // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS
    //     box is not the last `table-cell` box of its enclosing `table-row` box,
    //     then append a string containing a single U+0009 CHARACTER TABULATION
    //     (tab) character to items.
    //
    //     See: <https://html.spec.whatwg.org/multipage/rendering.html#tables-2>
    if (cell(node) && // @ts-expect-error: something up with types of parents.
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$find$2d$after$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findAfter"])(parent, node, cell)) {
        items.push('\t');
    }
    // Add the pre- and suffix.
    if (prefix) items.unshift(prefix);
    if (suffix) items.push(suffix);
    return items;
}
/**
 * 4.  If node is a Text node, then for each CSS text box produced by node,
 *     in content order, compute the text of the box after application of the
 *     CSS `white-space` processing rules and `text-transform` rules, set
 *     items to the list of the resulting strings, and return items.
 *     The CSS `white-space` processing rules are slightly modified:
 *     collapsible spaces at the end of lines are always collapsed, but they
 *     are only removed if the line is the last line of the block, or it ends
 *     with a br element.
 *     Soft hyphens should be preserved.
 *
 *     Note: See `collectText` and `collectPreText`.
 *     Note: we don’t deal with `text-transform`, no element has that by
 *     default.
 *
 * See: <https://drafts.csswg.org/css-text/#white-space-phase-1>
 *
 * @param {Comment | Text} node
 *   Text node.
 * @param {CollectionInfo} info
 *   Info on current collection.
 * @returns {Array<BreakNumber | string>}
 *   Result.
 */ function collectText(node, info) {
    const value = String(node.value);
    /** @type {Array<string>} */ const lines = [];
    /** @type {Array<BreakNumber | string>} */ const result = [];
    let start = 0;
    while(start <= value.length){
        searchLineFeeds.lastIndex = start;
        const match = searchLineFeeds.exec(value);
        const end = match && 'index' in match ? match.index : value.length;
        lines.push(// Any sequence of collapsible spaces and tabs immediately preceding or
        // following a segment break is removed.
        trimAndCollapseSpacesAndTabs(// […] ignoring bidi formatting characters (characters with the
        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if
        // they were not there.
        value.slice(start, end).replace(/[\u061C\u200E\u200F\u202A-\u202E\u2066-\u2069]/g, ''), start === 0 ? info.breakBefore : true, end === value.length ? info.breakAfter : true));
        start = end + 1;
    }
    // Collapsible segment breaks are transformed for rendering according to the
    // segment break transformation rules.
    // So here we jump to 4.1.2 of [CSSTEXT]:
    // Any collapsible segment break immediately following another collapsible
    // segment break is removed
    let index = -1;
    /** @type {BreakNumber | undefined} */ let join;
    while(++index < lines.length){
        // *   If the character immediately before or immediately after the segment
        //     break is the zero-width space character (U+200B), then the break is
        //     removed, leaving behind the zero-width space.
        if (lines[index].charCodeAt(lines[index].length - 1) === 0x20_0b /* ZWSP */  || index < lines.length - 1 && lines[index + 1].charCodeAt(0) === 0x20_0b) {
            result.push(lines[index]);
            join = undefined;
        } else if (lines[index]) {
            if (typeof join === 'number') result.push(join);
            result.push(lines[index]);
            join = 0;
        } else if (index === 0 || index === lines.length - 1) {
            // If this line is empty, and it’s the first or last, add a space.
            // Note that this function is only called in normal whitespace, so we
            // don’t worry about `pre`.
            result.push(0);
        }
    }
    return result;
}
/**
 * Collect a text node as “pre” whitespace.
 *
 * @param {Text} node
 *   Text node.
 * @returns {Array<BreakNumber | string>}
 *   Result.
 */ function collectPreText(node) {
    return [
        String(node.value)
    ];
}
/**
 * 3.  Every collapsible tab is converted to a collapsible space (U+0020).
 * 4.  Any collapsible space immediately following another collapsible
 *     space—even one outside the boundary of the inline containing that
 *     space, provided both spaces are within the same inline formatting
 *     context—is collapsed to have zero advance width. (It is invisible,
 *     but retains its soft wrap opportunity, if any.)
 *
 * @param {string} value
 *   Value to collapse.
 * @param {BreakBefore} breakBefore
 *   Whether there was a break before.
 * @param {BreakAfter} breakAfter
 *   Whether there was a break after.
 * @returns {string}
 *   Result.
 */ function trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {
    /** @type {Array<string>} */ const result = [];
    let start = 0;
    /** @type {number | undefined} */ let end;
    while(start < value.length){
        searchTabOrSpaces.lastIndex = start;
        const match = searchTabOrSpaces.exec(value);
        end = match ? match.index : value.length;
        // If we’re not directly after a segment break, but there was white space,
        // add an empty value that will be turned into a space.
        if (!start && !end && match && !breakBefore) {
            result.push('');
        }
        if (start !== end) {
            result.push(value.slice(start, end));
        }
        start = match ? end + match[0].length : end;
    }
    // If we reached the end, there was trailing white space, and there’s no
    // segment break after this node, add an empty value that will be turned
    // into a space.
    if (start !== end && !breakAfter) {
        result.push('');
    }
    return result.join(' ');
}
/**
 * Figure out the whitespace of a node.
 *
 * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).
 *
 * @param {Nodes} node
 *   Node (typically `Element`).
 * @param {CollectionInfo} info
 *   Info on current collection.
 * @returns {Whitespace}
 *   Applied whitespace.
 */ function inferWhitespace(node, info) {
    if (node.type === 'element') {
        const properties = node.properties || {};
        switch(node.tagName){
            case 'listing':
            case 'plaintext':
            case 'xmp':
                {
                    return 'pre';
                }
            case 'nobr':
                {
                    return 'nowrap';
                }
            case 'pre':
                {
                    return properties.wrap ? 'pre-wrap' : 'pre';
                }
            case 'td':
            case 'th':
                {
                    return properties.noWrap ? 'nowrap' : info.whitespace;
                }
            case 'textarea':
                {
                    return 'pre-wrap';
                }
            default:
        }
    }
    return info.whitespace;
}
/**
 * @type {TestFunction}
 * @param {Element} node
 * @returns {node is {properties: {hidden: true}}}
 */ function hidden(node) {
    return Boolean((node.properties || {}).hidden);
}
/**
 * @type {TestFunction}
 * @param {Element} node
 * @returns {node is {tagName: 'td' | 'th'}}
 */ function isCell(node) {
    return node.tagName === 'td' || node.tagName === 'th';
}
/**
 * @type {TestFunction}
 */ function closedDialog(node) {
    return node.tagName === 'dialog' && !(node.properties || {}).open;
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-from-html/lib/errors.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef ErrorInfo
 *   Info on a `parse5` error.
 * @property {string} reason
 *   Reason of error.
 * @property {string} description
 *   More info on error.
 * @property {false} [url]
 *   Turn off if this is not documented in the html5 spec (optional).
 */ __turbopack_esm__({
    "errors": (()=>errors)
});
const errors = {
    /** @type {ErrorInfo} */ abandonedHeadElementChild: {
        reason: 'Unexpected metadata element after head',
        description: 'Unexpected element after head. Expected the element before `</head>`',
        url: false
    },
    /** @type {ErrorInfo} */ abruptClosingOfEmptyComment: {
        reason: 'Unexpected abruptly closed empty comment',
        description: 'Unexpected `>` or `->`. Expected `-->` to close comments'
    },
    /** @type {ErrorInfo} */ abruptDoctypePublicIdentifier: {
        reason: 'Unexpected abruptly closed public identifier',
        description: 'Unexpected `>`. Expected a closing `"` or `\'` after the public identifier'
    },
    /** @type {ErrorInfo} */ abruptDoctypeSystemIdentifier: {
        reason: 'Unexpected abruptly closed system identifier',
        description: 'Unexpected `>`. Expected a closing `"` or `\'` after the identifier identifier'
    },
    /** @type {ErrorInfo} */ absenceOfDigitsInNumericCharacterReference: {
        reason: 'Unexpected non-digit at start of numeric character reference',
        description: 'Unexpected `%c`. Expected `[0-9]` for decimal references or `[0-9a-fA-F]` for hexadecimal references'
    },
    /** @type {ErrorInfo} */ cdataInHtmlContent: {
        reason: 'Unexpected CDATA section in HTML',
        description: 'Unexpected `<![CDATA[` in HTML. Remove it, use a comment, or encode special characters instead'
    },
    /** @type {ErrorInfo} */ characterReferenceOutsideUnicodeRange: {
        reason: 'Unexpected too big numeric character reference',
        description: 'Unexpectedly high character reference. Expected character references to be at most hexadecimal 10ffff (or decimal 1114111)'
    },
    /** @type {ErrorInfo} */ closingOfElementWithOpenChildElements: {
        reason: 'Unexpected closing tag with open child elements',
        description: 'Unexpectedly closing tag. Expected other tags to be closed first',
        url: false
    },
    /** @type {ErrorInfo} */ controlCharacterInInputStream: {
        reason: 'Unexpected control character',
        description: 'Unexpected control character `%x`. Expected a non-control code point, 0x00, or ASCII whitespace'
    },
    /** @type {ErrorInfo} */ controlCharacterReference: {
        reason: 'Unexpected control character reference',
        description: 'Unexpectedly control character in reference. Expected a non-control code point, 0x00, or ASCII whitespace'
    },
    /** @type {ErrorInfo} */ disallowedContentInNoscriptInHead: {
        reason: 'Disallowed content inside `<noscript>` in `<head>`',
        description: 'Unexpected text character `%c`. Only use text in `<noscript>`s in `<body>`',
        url: false
    },
    /** @type {ErrorInfo} */ duplicateAttribute: {
        reason: 'Unexpected duplicate attribute',
        description: 'Unexpectedly double attribute. Expected attributes to occur only once'
    },
    /** @type {ErrorInfo} */ endTagWithAttributes: {
        reason: 'Unexpected attribute on closing tag',
        description: 'Unexpected attribute. Expected `>` instead'
    },
    /** @type {ErrorInfo} */ endTagWithTrailingSolidus: {
        reason: 'Unexpected slash at end of closing tag',
        description: 'Unexpected `%c-1`. Expected `>` instead'
    },
    /** @type {ErrorInfo} */ endTagWithoutMatchingOpenElement: {
        reason: 'Unexpected unopened end tag',
        description: 'Unexpected end tag. Expected no end tag or another end tag',
        url: false
    },
    /** @type {ErrorInfo} */ eofBeforeTagName: {
        reason: 'Unexpected end of file',
        description: 'Unexpected end of file. Expected tag name instead'
    },
    /** @type {ErrorInfo} */ eofInCdata: {
        reason: 'Unexpected end of file in CDATA',
        description: 'Unexpected end of file. Expected `]]>` to close the CDATA'
    },
    /** @type {ErrorInfo} */ eofInComment: {
        reason: 'Unexpected end of file in comment',
        description: 'Unexpected end of file. Expected `-->` to close the comment'
    },
    /** @type {ErrorInfo} */ eofInDoctype: {
        reason: 'Unexpected end of file in doctype',
        description: 'Unexpected end of file. Expected a valid doctype (such as `<!doctype html>`)'
    },
    /** @type {ErrorInfo} */ eofInElementThatCanContainOnlyText: {
        reason: 'Unexpected end of file in element that can only contain text',
        description: 'Unexpected end of file. Expected text or a closing tag',
        url: false
    },
    /** @type {ErrorInfo} */ eofInScriptHtmlCommentLikeText: {
        reason: 'Unexpected end of file in comment inside script',
        description: 'Unexpected end of file. Expected `-->` to close the comment'
    },
    /** @type {ErrorInfo} */ eofInTag: {
        reason: 'Unexpected end of file in tag',
        description: 'Unexpected end of file. Expected `>` to close the tag'
    },
    /** @type {ErrorInfo} */ incorrectlyClosedComment: {
        reason: 'Incorrectly closed comment',
        description: 'Unexpected `%c-1`. Expected `-->` to close the comment'
    },
    /** @type {ErrorInfo} */ incorrectlyOpenedComment: {
        reason: 'Incorrectly opened comment',
        description: 'Unexpected `%c`. Expected `<!--` to open the comment'
    },
    /** @type {ErrorInfo} */ invalidCharacterSequenceAfterDoctypeName: {
        reason: 'Invalid sequence after doctype name',
        description: 'Unexpected sequence at `%c`. Expected `public` or `system`'
    },
    /** @type {ErrorInfo} */ invalidFirstCharacterOfTagName: {
        reason: 'Invalid first character in tag name',
        description: 'Unexpected `%c`. Expected an ASCII letter instead'
    },
    /** @type {ErrorInfo} */ misplacedDoctype: {
        reason: 'Misplaced doctype',
        description: 'Unexpected doctype. Expected doctype before head',
        url: false
    },
    /** @type {ErrorInfo} */ misplacedStartTagForHeadElement: {
        reason: 'Misplaced `<head>` start tag',
        description: 'Unexpected start tag `<head>`. Expected `<head>` directly after doctype',
        url: false
    },
    /** @type {ErrorInfo} */ missingAttributeValue: {
        reason: 'Missing attribute value',
        description: 'Unexpected `%c-1`. Expected an attribute value or no `%c-1` instead'
    },
    /** @type {ErrorInfo} */ missingDoctype: {
        reason: 'Missing doctype before other content',
        description: 'Expected a `<!doctype html>` before anything else',
        url: false
    },
    /** @type {ErrorInfo} */ missingDoctypeName: {
        reason: 'Missing doctype name',
        description: 'Unexpected doctype end at `%c`. Expected `html` instead'
    },
    /** @type {ErrorInfo} */ missingDoctypePublicIdentifier: {
        reason: 'Missing public identifier in doctype',
        description: 'Unexpected `%c`. Expected identifier for `public` instead'
    },
    /** @type {ErrorInfo} */ missingDoctypeSystemIdentifier: {
        reason: 'Missing system identifier in doctype',
        description: 'Unexpected `%c`. Expected identifier for `system` instead (suggested: `"about:legacy-compat"`)'
    },
    /** @type {ErrorInfo} */ missingEndTagName: {
        reason: 'Missing name in end tag',
        description: 'Unexpected `%c`. Expected an ASCII letter instead'
    },
    /** @type {ErrorInfo} */ missingQuoteBeforeDoctypePublicIdentifier: {
        reason: 'Missing quote before public identifier in doctype',
        description: 'Unexpected `%c`. Expected `"` or `\'` instead'
    },
    /** @type {ErrorInfo} */ missingQuoteBeforeDoctypeSystemIdentifier: {
        reason: 'Missing quote before system identifier in doctype',
        description: 'Unexpected `%c`. Expected `"` or `\'` instead'
    },
    /** @type {ErrorInfo} */ missingSemicolonAfterCharacterReference: {
        reason: 'Missing semicolon after character reference',
        description: 'Unexpected `%c`. Expected `;` instead'
    },
    /** @type {ErrorInfo} */ missingWhitespaceAfterDoctypePublicKeyword: {
        reason: 'Missing whitespace after public identifier in doctype',
        description: 'Unexpected `%c`. Expected ASCII whitespace instead'
    },
    /** @type {ErrorInfo} */ missingWhitespaceAfterDoctypeSystemKeyword: {
        reason: 'Missing whitespace after system identifier in doctype',
        description: 'Unexpected `%c`. Expected ASCII whitespace instead'
    },
    /** @type {ErrorInfo} */ missingWhitespaceBeforeDoctypeName: {
        reason: 'Missing whitespace before doctype name',
        description: 'Unexpected `%c`. Expected ASCII whitespace instead'
    },
    /** @type {ErrorInfo} */ missingWhitespaceBetweenAttributes: {
        reason: 'Missing whitespace between attributes',
        description: 'Unexpected `%c`. Expected ASCII whitespace instead'
    },
    /** @type {ErrorInfo} */ missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: {
        reason: 'Missing whitespace between public and system identifiers in doctype',
        description: 'Unexpected `%c`. Expected ASCII whitespace instead'
    },
    /** @type {ErrorInfo} */ nestedComment: {
        reason: 'Unexpected nested comment',
        description: 'Unexpected `<!--`. Expected `-->`'
    },
    /** @type {ErrorInfo} */ nestedNoscriptInHead: {
        reason: 'Unexpected nested `<noscript>` in `<head>`',
        description: 'Unexpected `<noscript>`. Expected a closing tag or a meta element',
        url: false
    },
    /** @type {ErrorInfo} */ nonConformingDoctype: {
        reason: 'Unexpected non-conforming doctype declaration',
        description: 'Expected `<!doctype html>` or `<!doctype html system "about:legacy-compat">`',
        url: false
    },
    /** @type {ErrorInfo} */ nonVoidHtmlElementStartTagWithTrailingSolidus: {
        reason: 'Unexpected trailing slash on start tag of non-void element',
        description: 'Unexpected `/`. Expected `>` instead'
    },
    /** @type {ErrorInfo} */ noncharacterCharacterReference: {
        reason: 'Unexpected noncharacter code point referenced by character reference',
        description: 'Unexpected code point. Do not use noncharacters in HTML'
    },
    /** @type {ErrorInfo} */ noncharacterInInputStream: {
        reason: 'Unexpected noncharacter character',
        description: 'Unexpected code point `%x`. Do not use noncharacters in HTML'
    },
    /** @type {ErrorInfo} */ nullCharacterReference: {
        reason: 'Unexpected NULL character referenced by character reference',
        description: 'Unexpected code point. Do not use NULL characters in HTML'
    },
    /** @type {ErrorInfo} */ openElementsLeftAfterEof: {
        reason: 'Unexpected end of file',
        description: 'Unexpected end of file. Expected closing tag instead',
        url: false
    },
    /** @type {ErrorInfo} */ surrogateCharacterReference: {
        reason: 'Unexpected surrogate character referenced by character reference',
        description: 'Unexpected code point. Do not use lone surrogate characters in HTML'
    },
    /** @type {ErrorInfo} */ surrogateInInputStream: {
        reason: 'Unexpected surrogate character',
        description: 'Unexpected code point `%x`. Do not use lone surrogate characters in HTML'
    },
    /** @type {ErrorInfo} */ unexpectedCharacterAfterDoctypeSystemIdentifier: {
        reason: 'Invalid character after system identifier in doctype',
        description: 'Unexpected character at `%c`. Expected `>`'
    },
    /** @type {ErrorInfo} */ unexpectedCharacterInAttributeName: {
        reason: 'Unexpected character in attribute name',
        description: 'Unexpected `%c`. Expected whitespace, `/`, `>`, `=`, or probably an ASCII letter'
    },
    /** @type {ErrorInfo} */ unexpectedCharacterInUnquotedAttributeValue: {
        reason: 'Unexpected character in unquoted attribute value',
        description: 'Unexpected `%c`. Quote the attribute value to include it'
    },
    /** @type {ErrorInfo} */ unexpectedEqualsSignBeforeAttributeName: {
        reason: 'Unexpected equals sign before attribute name',
        description: 'Unexpected `%c`. Add an attribute name before it'
    },
    /** @type {ErrorInfo} */ unexpectedNullCharacter: {
        reason: 'Unexpected NULL character',
        description: 'Unexpected code point `%x`. Do not use NULL characters in HTML'
    },
    /** @type {ErrorInfo} */ unexpectedQuestionMarkInsteadOfTagName: {
        reason: 'Unexpected question mark instead of tag name',
        description: 'Unexpected `%c`. Expected an ASCII letter instead'
    },
    /** @type {ErrorInfo} */ unexpectedSolidusInTag: {
        reason: 'Unexpected slash in tag',
        description: 'Unexpected `%c-1`. Expected it followed by `>` or in a quoted attribute value'
    },
    /** @type {ErrorInfo} */ unknownNamedCharacterReference: {
        reason: 'Unexpected unknown named character reference',
        description: 'Unexpected character reference. Expected known named character references'
    }
};
}}),
"[project]/apps/website/docs/node_modules/hast-util-from-html/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Root} from 'hast'
 * @import {ParserError} from 'parse5'
 * @import {Value} from 'vfile'
 * @import {ErrorCode, Options} from './types.js'
 */ __turbopack_esm__({
    "fromHtml": (()=>fromHtml)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse5/dist/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/vfile/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse5/dist/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$from$2d$parse5$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-from-parse5/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$from$2d$html$2f$lib$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-from-html/lib/errors.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/devlop/lib/development.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/vfile-message/lib/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const base = 'https://html.spec.whatwg.org/multipage/parsing.html#parse-error-';
const dashToCamelRe = /-[a-z]/g;
const formatCRe = /%c(?:([-+])(\d+))?/g;
const formatXRe = /%x/g;
const fatalities = {
    2: true,
    1: false,
    0: null
};
/** @type {Readonly<Options>} */ const emptyOptions = {};
function fromHtml(value, options) {
    const settings = options || emptyOptions;
    const onerror = settings.onerror;
    const file = value instanceof __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFile"] ? value : new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFile"](value);
    const parseFunction = settings.fragment ? __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["parseFragment"] : __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse5$2f$dist$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["parse"];
    const document = String(file);
    const p5Document = parseFunction(document, {
        sourceCodeLocationInfo: true,
        // Note `parse5` types currently do not allow `undefined`.
        onParseError: settings.onerror ? internalOnerror : null,
        scriptingEnabled: false
    });
    // `parse5` returns document which are always mapped to roots.
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$from$2d$parse5$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fromParse5"])(p5Document, {
        file,
        space: settings.space,
        verbose: settings.verbose
    });
    "TURBOPACK unreachable";
    /**
   * Handle a parse error.
   *
   * @param {ParserError} error
   *   Parse5 error.
   * @returns {undefined}
   *   Nothing.
   */ function internalOnerror(error) {
        const code = error.code;
        const name = camelcase(code);
        const setting = settings[name];
        const config = setting === null || setting === undefined ? true : setting;
        const level = typeof config === 'number' ? config : config ? 1 : 0;
        if (level) {
            const info = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$from$2d$html$2f$lib$2f$errors$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["errors"][name];
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(info, 'expected known error from `parse5`');
            const message = new __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VFileMessage"](format(info.reason), {
                place: {
                    start: {
                        line: error.startLine,
                        column: error.startCol,
                        offset: error.startOffset
                    },
                    end: {
                        line: error.endLine,
                        column: error.endCol,
                        offset: error.endOffset
                    }
                },
                ruleId: code,
                source: 'hast-util-from-html'
            });
            if (file.path) {
                message.file = file.path;
                message.name = file.path + ':' + message.name;
            }
            message.fatal = fatalities[level];
            message.note = format(info.description);
            message.url = info.url === false ? undefined : base + code;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ok"])(onerror, '`internalOnerror` is not passed if `onerror` is not set');
            onerror(message);
        }
        /**
     * Format a human readable string about an error.
     *
     * @param {string} value
     *   Value to format.
     * @returns {string}
     *   Formatted.
     */ function format(value) {
            return value.replace(formatCRe, formatC).replace(formatXRe, formatX);
            "TURBOPACK unreachable";
            /**
       * Format the character.
       *
       * @param {string} _
       *   Match.
       * @param {string} $1
       *   Sign (`-` or `+`, optional).
       * @param {string} $2
       *   Offset.
       * @returns {string}
       *   Formatted.
       */ function formatC(_, $1, $2) {
                const offset = ($2 ? Number.parseInt($2, 10) : 0) * ($1 === '-' ? -1 : 1);
                const char = document.charAt(error.startOffset + offset);
                return visualizeCharacter(char);
            }
            /**
       * Format the character code.
       *
       * @returns {string}
       *   Formatted.
       */ function formatX() {
                return visualizeCharacterCode(document.charCodeAt(error.startOffset));
            }
        }
    }
}
/**
 * @param {string} value
 *   Error code in dash case.
 * @returns {ErrorCode}
 *   Error code in camelcase.
 */ function camelcase(value) {
    // This should match an error code.
    return value.replace(dashToCamelRe, dashToCamel);
}
/**
 * @param {string} $0
 *   Match.
 * @returns {string}
 *   Camelcased.
 */ function dashToCamel($0) {
    return $0.charAt(1).toUpperCase();
}
/**
 * @param {string} char
 *   Character.
 * @returns {string}
 *   Formatted.
 */ function visualizeCharacter(char) {
    return char === '`' ? '` ` `' : char;
}
/**
 * @param {number} charCode
 *   Character code.
 * @returns {string}
 *   Formatted.
 */ function visualizeCharacterCode(charCode) {
    return '0x' + charCode.toString(16).toUpperCase();
}
}}),
"[project]/apps/website/docs/node_modules/unist-util-remove-position/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('unist').Node} Node
 */ /**
 * @typedef Options
 *   Configuration.
 * @property {boolean | null | undefined} [force=false]
 *   Whether to use `delete` to remove `position` fields.
 *
 *   The default is to set them to `undefined`.
 */ __turbopack_esm__({
    "removePosition": (()=>removePosition)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit/lib/index.js [app-rsc] (ecmascript) <locals>");
;
function removePosition(tree, options) {
    const config = options || {};
    const force = config.force || false;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(tree, remove);
    /**
   * @param {Node} node
   */ function remove(node) {
        if (force) {
            delete node.position;
        } else {
            node.position = undefined;
        }
    }
}
}}),
"[project]/apps/website/docs/node_modules/hast-util-from-html-isomorphic/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @typedef {import('hast').Root} Root
 *
 * @typedef {Pick<import('hast-util-from-html').Options, 'fragment'>} Options
 */ __turbopack_esm__({
    "fromHtmlIsomorphic": (()=>fromHtmlIsomorphic)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$from$2d$html$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-from-html/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$remove$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-remove-position/lib/index.js [app-rsc] (ecmascript)");
;
;
function fromHtmlIsomorphic(value, options) {
    const tree = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$from$2d$html$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fromHtml"])(value, options);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$remove$2d$position$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["removePosition"])(tree, {
        force: true
    });
    delete tree.data;
    return tree;
}
}}),
"[project]/apps/website/docs/node_modules/rehype-katex/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {ElementContent, Root} from 'hast'
 * @import {KatexOptions} from 'katex'
 * @import {VFile} from 'vfile'
 */ /**
 * @typedef {Omit<KatexOptions, 'displayMode' | 'throwOnError'>} Options
 */ __turbopack_esm__({
    "default": (()=>rehypeKatex)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$katex$2f$dist$2f$katex$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/katex/dist/katex.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit-parents/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$text$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-text/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$from$2d$html$2d$isomorphic$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-from-html-isomorphic/lib/index.js [app-rsc] (ecmascript)");
;
;
;
;
/** @type {Readonly<Options>} */ const emptyOptions = {};
/** @type {ReadonlyArray<unknown>} */ const emptyClasses = [];
function rehypeKatex(options) {
    const settings = options || emptyOptions;
    /**
   * Transform.
   *
   * @param {Root} tree
   *   Tree.
   * @param {VFile} file
   *   File.
   * @returns {undefined}
   *   Nothing.
   */ return function(tree, file) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["visitParents"])(tree, 'element', function(element, parents) {
            const classes = Array.isArray(element.properties.className) ? element.properties.className : emptyClasses;
            // This class can be generated from markdown with ` ```math `.
            const languageMath = classes.includes('language-math');
            // This class is used by `remark-math` for flow math (block, `$$\nmath\n$$`).
            const mathDisplay = classes.includes('math-display');
            // This class is used by `remark-math` for text math (inline, `$math$`).
            const mathInline = classes.includes('math-inline');
            let displayMode = mathDisplay;
            // Any class is fine.
            if (!languageMath && !mathDisplay && !mathInline) {
                return;
            }
            let parent = parents[parents.length - 1];
            let scope = element;
            // If this was generated with ` ```math `, replace the `<pre>` and use
            // display.
            if (element.tagName === 'code' && languageMath && parent && parent.type === 'element' && parent.tagName === 'pre') {
                scope = parent;
                parent = parents[parents.length - 2];
                displayMode = true;
            }
            /* c8 ignore next -- verbose to test. */ if (!parent) return;
            const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$text$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toText"])(scope, {
                whitespace: 'pre'
            });
            /** @type {Array<ElementContent> | string | undefined} */ let result;
            try {
                result = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$katex$2f$dist$2f$katex$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].renderToString(value, {
                    ...settings,
                    displayMode,
                    throwOnError: true
                });
            } catch (error) {
                const cause = error;
                const ruleId = cause.name.toLowerCase();
                file.message('Could not render math with KaTeX', {
                    ancestors: [
                        ...parents,
                        element
                    ],
                    cause,
                    place: element.position,
                    ruleId,
                    source: 'rehype-katex'
                });
                // KaTeX *should* handle `ParseError` itself, but not others.
                // it doesn’t always:
                // <https://github.com/remarkjs/react-markdown/issues/853>
                try {
                    result = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$katex$2f$dist$2f$katex$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].renderToString(value, {
                        ...settings,
                        displayMode,
                        strict: 'ignore',
                        throwOnError: false
                    });
                } catch  {
                    // Generate similar markup if this is an other error.
                    // See: <https://github.com/KaTeX/KaTeX/blob/5dc7af0/docs/error.md>.
                    result = [
                        {
                            type: 'element',
                            tagName: 'span',
                            properties: {
                                className: [
                                    'katex-error'
                                ],
                                style: 'color:' + (settings.errorColor || '#cc0000'),
                                title: String(error)
                            },
                            children: [
                                {
                                    type: 'text',
                                    value
                                }
                            ]
                        }
                    ];
                }
            }
            if (typeof result === 'string') {
                const root = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$from$2d$html$2d$isomorphic$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fromHtmlIsomorphic"])(result, {
                    fragment: true
                });
                // Cast as we don’t expect `doctypes` in KaTeX result.
                result = root.children;
            }
            const index = parent.children.indexOf(scope);
            parent.children.splice(index, 1, ...result);
            return __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SKIP"];
        });
    };
}
}}),
"[project]/apps/website/docs/node_modules/parse-numeric-range/index.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * @param {string} string    The string to parse
 * @returns {Array<number>}  Returns an energetic array.
 */ function parsePart(string) {
    let res = [];
    let m;
    for (let str of string.split(",").map((str)=>str.trim())){
        // just a number
        if (/^-?\d+$/.test(str)) {
            res.push(parseInt(str, 10));
        } else if (m = str.match(/^(-?\d+)(-|\.\.\.?|\u2025|\u2026|\u22EF)(-?\d+)$/)) {
            // 1-5 or 1..5 (equivalent) or 1...5 (doesn't include 5)
            let [_, lhs, sep, rhs] = m;
            if (lhs && rhs) {
                lhs = parseInt(lhs);
                rhs = parseInt(rhs);
                const incr = lhs < rhs ? 1 : -1;
                // Make it inclusive by moving the right 'stop-point' away by one.
                if (sep === "-" || sep === ".." || sep === "\u2025") rhs += incr;
                for(let i = lhs; i !== rhs; i += incr)res.push(i);
            }
        }
    }
    return res;
}
exports.default = parsePart;
module.exports = parsePart;
}}),
"[project]/apps/website/docs/node_modules/hast-util-to-string/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Nodes, Parents} from 'hast'
 */ /**
 * Get the plain-text value of a hast node.
 *
 * @param {Nodes} node
 *   Node to serialize.
 * @returns {string}
 *   Serialized node.
 */ __turbopack_esm__({
    "toString": (()=>toString)
});
function toString(node) {
    // “The concatenation of data of all the Text node descendants of the context
    // object, in tree order.”
    if ('children' in node) {
        return all(node);
    }
    // “Context object’s data.”
    return 'value' in node ? node.value : '';
}
/**
 * @param {Nodes} node
 *   Node.
 * @returns {string}
 *   Serialized node.
 */ function one(node) {
    if (node.type === 'text') {
        return node.value;
    }
    return 'children' in node ? all(node) : '';
}
/**
 * @param {Parents} node
 *   Node.
 * @returns {string}
 *   Serialized node.
 */ function all(node) {
    let index = -1;
    /** @type {Array<string>} */ const result = [];
    while(++index < node.children.length){
        result[index] = one(node.children[index]);
    }
    return result.join('');
}
}}),
"[project]/apps/website/docs/node_modules/rehype-parse/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @import {Root} from 'hast'
 * @import {Options as FromHtmlOptions} from 'hast-util-from-html'
 * @import {Parser, Processor} from 'unified'
 */ /**
 * @typedef {Omit<FromHtmlOptions, 'onerror'> & RehypeParseFields} Options
 *   Configuration.
 *
 * @typedef RehypeParseFields
 *   Extra fields.
 * @property {boolean | null | undefined} [emitParseErrors=false]
 *   Whether to emit parse errors while parsing (default: `false`).
 *
 *   > 👉 **Note**: parse errors are currently being added to HTML.
 *   > Not all errors emitted by parse5 (or us) are specced yet.
 *   > Some documentation may still be missing.
 */ __turbopack_esm__({
    "default": (()=>rehypeParse)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$from$2d$html$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-from-html/lib/index.js [app-rsc] (ecmascript)");
;
function rehypeParse(options) {
    /** @type {Processor<Root>} */ // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.
    const self = this;
    const { emitParseErrors, ...settings } = {
        ...self.data('settings'),
        ...options
    };
    self.parser = parser;
    /**
   * @type {Parser<Root>}
   */ function parser(document, file) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$from$2d$html$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fromHtml"])(document, {
            ...settings,
            onerror: emitParseErrors ? function(message) {
                if (file.path) {
                    message.name = file.path + ':' + message.name;
                    message.file = file.path;
                }
                file.messages.push(message);
            } : undefined
        });
    }
}
}}),
"[project]/apps/website/docs/node_modules/rehype-pretty-code/dist/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>src_default),
    "rehypePrettyCode": (()=>rehypePrettyCode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$numeric$2d$range$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/parse-numeric-range/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/hast-util-to-string/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unified$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unified/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$rehype$2d$parse$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/rehype-parse/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/unist-util-visit/lib/index.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$shiki$2f$dist$2f$bundle$2d$full$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/apps/website/docs/node_modules/shiki/dist/bundle-full.mjs [app-rsc] (ecmascript) <locals>");
;
;
;
;
;
;
// src/index.ts
function isJSONTheme(value) {
    return value ? Object.hasOwn(value, "tokenColors") : false;
}
function isElement(value) {
    return value ? value.type === "element" : false;
}
function isText(value) {
    return value ? value.type === "text" : false;
}
function isInlineCode(element, parent, bypass = false) {
    if (bypass) {
        return false;
    }
    return element.tagName === "code" && isElement(parent) && parent.tagName !== "pre" || element.tagName === "inlineCode";
}
function isBlockCode(element) {
    return element.tagName === "pre" && Array.isArray(element.children) && element.children.length === 1 && isElement(element.children[0]) && element.children[0].tagName === "code";
}
function getInlineCodeLang(meta, defaultFallbackLang) {
    const placeholder = "\0";
    let temp = meta.replace(/\\\\/g, placeholder);
    temp = temp.replace(/\\({:[a-zA-Z.-]+})$/, "$1");
    const lang = temp.match(/{:([a-zA-Z.-]+)}$/)?.[1];
    return lang?.replace(new RegExp(placeholder, "g"), "\\") || defaultFallbackLang;
}
function parseBlockMetaString(element, filter, defaultFallback) {
    let meta = filter(element.data?.meta ?? element.properties?.metastring ?? "");
    const titleMatch = meta.match(/title="([^"]*)"/);
    const title = titleMatch?.[1] ?? null;
    meta = meta.replace(titleMatch?.[0] ?? "", "");
    const captionMatch = meta.match(/caption="([^"]*)"/);
    const caption = captionMatch?.[1] ?? null;
    meta = meta.replace(captionMatch?.[0] ?? "", "");
    let lang = defaultFallback;
    if (element.properties && Array.isArray(element.properties.className) && typeof element.properties.className[0] === "string" && element.properties.className[0].startsWith("language-")) {
        lang = element.properties.className[0].replace("language-", "");
    }
    return {
        title,
        caption,
        lang,
        meta
    };
}
function getThemeNames(theme) {
    if (isJSONTheme(theme)) {
        return [
            theme.name
        ];
    }
    if (typeof theme === "string") {
        return [
            theme
        ];
    }
    return Object.values(theme).map((theme2)=>typeof theme2 === "string" ? theme2 : theme2.name);
}
function replaceLineClass(element) {
    if (Array.isArray(element.properties?.className) && element.properties.className.includes("line")) {
        const className = element.properties.className.filter((c)=>c !== "line");
        element.properties.className = className.length > 0 ? className : void 0;
        element.properties["data-line"] = "";
    }
}
function getLineId(lineNumber, meta) {
    const segments = meta.match(/\{[^}]+\}#[a-zA-Z0-9]+/g);
    if (!segments) return null;
    for (const segment of segments){
        const [range, id] = segment.split("#");
        if (!(range && id)) continue;
        const match = range.match(/\{(.*?)\}/);
        const capture = match?.[1];
        if (capture && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$numeric$2d$range$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(capture).includes(lineNumber)) {
            return id;
        }
    }
    return null;
}
// src/chars/splitElement.ts
function splitElement({ elements, elementToWrap, innerString, rightString, leftString, rest, nextElementContinues, index, ignoreChars }) {
    if (isElement(elementToWrap) && elementToWrap.children?.[0]?.type !== "text" || ignoreChars) {
        return [
            elementToWrap,
            index
        ];
    }
    let newIndex = index;
    const textElement = elementToWrap.children[0];
    if (isText(textElement)) {
        textElement.value = innerString;
    }
    let rightStr = rightString;
    const leftStr = leftString;
    if (rest.length > 0) {
        rightStr += rest.map((s)=>s === "" ? innerString : innerString + s).join("");
    }
    if (leftStr.length > 0) {
        elements.splice(newIndex, 0, {
            ...elementToWrap,
            properties: {
                ...elementToWrap.properties
            },
            children: [
                {
                    type: "text",
                    value: leftStr
                }
            ]
        });
    }
    if (rightStr.length > 0 && !nextElementContinues) {
        newIndex = leftStr.length > 0 ? newIndex + 2 : newIndex + 1;
        elements.splice(newIndex, 0, {
            ...elementToWrap,
            properties: {
                ...elementToWrap.properties
            },
            children: [
                {
                    type: "text",
                    value: rightStr
                }
            ]
        });
    }
    return [
        elementToWrap,
        index + 1
    ];
}
function nextElementMaybeContinuesChars({ elements, nextIndex, remainingPart }) {
    if (remainingPart === "") {
        return false;
    }
    const nextNode = elements[nextIndex];
    const content = getContent(nextNode);
    if (!content) {
        return false;
    }
    const includesNext = content.startsWith(remainingPart) || remainingPart.startsWith(content);
    const overlap = findOverlap(content, remainingPart);
    if (overlap === remainingPart && content.startsWith(remainingPart)) {
        return true;
    }
    if (includesNext) {
        return nextElementMaybeContinuesChars({
            elements,
            nextIndex: nextIndex + 1,
            remainingPart: remainingPart.replace(content, "")
        });
    }
    return false;
}
function getContent(node) {
    if (!node) return;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(node);
}
function findOverlap(a, b) {
    if (b.length === 0) {
        return "";
    }
    if (a.endsWith(b)) {
        return b;
    }
    if (a.indexOf(b) >= 0) {
        return b;
    }
    return findOverlap(a, b.substring(0, b.length - 1));
}
function reverseString(s) {
    return s.split("").reverse().join("");
}
// src/chars/getElementsToHighlight.ts
function getElementsToHighlight(element, chars, startIndex = 0, ignoreChars = false) {
    const toWrap = [];
    let charsSoFar = "";
    if (element.children) {
        const elements = element.children;
        for(let i = startIndex; i < elements.length; i++){
            const remaining = charsSoFar ? chars.replace(charsSoFar, "") : chars;
            if (remaining === "") {
                return toWrap;
            }
            const maybeElement = elements[i];
            if (!maybeElement || maybeElement.type !== "element" || // ignore any previously matched chars within
            Object.hasOwn(maybeElement.properties ?? {}, "rehype-pretty-code-visited")) {
                continue;
            }
            const content = getContent(maybeElement) || "";
            if (content === chars || charsSoFar + content === chars) {
                toWrap.push({
                    element: maybeElement,
                    index: i
                });
                return toWrap;
            }
            if (chars.startsWith(charsSoFar + content)) {
                if (nextElementMaybeContinuesChars({
                    elements,
                    nextIndex: i + 1,
                    remainingPart: remaining.replace(content, "")
                })) {
                    toWrap.push({
                        element: elements[i],
                        index: i
                    });
                    charsSoFar += content;
                    continue;
                }
            }
            const overlap = findOverlap(content, remaining);
            const partialMatch = overlap && remaining.startsWith(overlap);
            if (partialMatch) {
                const nextPart = remaining.replace(overlap, "");
                if (nextPart !== "" && getContent(elements[i + 1]) && !nextElementMaybeContinuesChars({
                    elements,
                    nextIndex: i + 1,
                    remainingPart: nextPart
                })) {
                    continue;
                }
                const splitParts = content.split(overlap);
                const [leftPart, rightPart, ...rest] = splitParts;
                if (rightPart || leftPart || rest.length > 0) {
                    const withNextNode = content + (getContent(elements[i + 1]) ? getContent(elements[i + 1]) : "");
                    const nextNodeOverlap = findOverlap(withNextNode, remaining);
                    const splitIndex = withNextNode.indexOf(nextNodeOverlap);
                    if (chars.endsWith(overlap) || chars.startsWith(overlap)) {
                        const rightString = rightPart.replace(overlap, "");
                        const innerString = overlap;
                        const leftString = content.substring(0, splitIndex);
                        const nextElementContinues = nextElementMaybeContinuesChars({
                            elements,
                            nextIndex: i + 1,
                            remainingPart: nextPart
                        });
                        const [newElement, updatedIndex] = splitElement({
                            elements,
                            elementToWrap: elements[i],
                            innerString,
                            rightString,
                            leftString,
                            rest,
                            nextElementContinues,
                            index: i,
                            ignoreChars
                        });
                        charsSoFar += overlap;
                        toWrap.push({
                            element: newElement,
                            index: updatedIndex
                        });
                    }
                }
            }
        }
    }
    return toWrap;
}
// src/chars/wrapHighlightedChars.ts
function wrapHighlightedChars(parentElement, elementsToWrap, options, ignoreWord, onVisitHighlightedChars) {
    if (!elementsToWrap || elementsToWrap.length === 0) {
        return;
    }
    const [{ element }] = elementsToWrap;
    if (ignoreWord) {
        if (element.properties) {
            element.properties["rehype-pretty-code-visited"] = "";
        }
        return;
    }
    if (elementsToWrap.length > 1) {
        parentElement.children.splice(elementsToWrap[0].index, elementsToWrap.length, {
            type: "element",
            tagName: "mark",
            properties: {
                "data-highlighted-chars-mark": ""
            },
            children: elementsToWrap.map(({ element: element3 })=>element3)
        });
        const element2 = parentElement.children[elementsToWrap[0].index];
        if (!isElement(element2)) {
            return;
        }
        const wordStr = element2.children.reduce((acc, node)=>{
            const textElement = isElement(node) ? node.children[0] : null;
            if (isText(textElement)) {
                return acc + textElement.value;
            }
            return acc;
        }, "");
        const id = options.idsMap.get(wordStr);
        element2.properties = element2.properties || {};
        element2.properties["data-highlighted-chars"] = "";
        element2.properties["data-chars-id"] = id;
        element2.tagName = "mark";
        onVisitHighlightedChars?.(element2, id);
    } else {
        const [{ element: element2 }] = elementsToWrap;
        const textElement = element2.children[0];
        if (!isText(textElement)) {
            return;
        }
        const id = options.idsMap.get(textElement.value);
        element2.properties = element2.properties || {};
        element2.properties["rehype-pretty-code-visited"] = "";
        element2.properties["data-highlighted-chars"] = "";
        element2.properties["data-chars-id"] = id;
        element2.tagName = "mark";
        element2.children = [
            {
                type: "element",
                tagName: "span",
                properties: {
                    style: element2.properties.style
                },
                children: element2.children
            }
        ];
        element2.properties.style = void 0;
        onVisitHighlightedChars?.(element2, id);
    }
}
function charsHighlighter(element, charsList, options, onVisitHighlightedChars) {
    const { ranges = [] } = options;
    const textContent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(element);
    charsList.forEach((chars, index)=>{
        if (chars && textContent?.includes(chars)) {
            let textContent2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(element);
            let startIndex = 0;
            while(textContent2.includes(chars)){
                const currentCharsRange = ranges[index] || [];
                const id = `${chars}-${index}`;
                options.counterMap.set(id, (options.counterMap.get(id) || 0) + 1);
                const ignoreChars = currentCharsRange.length > 0 && !currentCharsRange.includes(options.counterMap.get(id) ?? -1);
                const elementsToWrap = getElementsToHighlight(element, chars, startIndex, ignoreChars);
                if (elementsToWrap.length === 0) break;
                wrapHighlightedChars(element, elementsToWrap, options, ignoreChars, onVisitHighlightedChars);
                startIndex = Math.max(elementsToWrap[elementsToWrap.length - 1].index - 2, 0);
                textContent2 = element.children.map((childNode)=>{
                    const props = isElement(childNode) ? childNode.properties : {};
                    if (props && !Object.hasOwn(props, "rehype-pretty-code-visited") && !Object.hasOwn(props, "data-highlighted-chars-mark")) {
                        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(childNode);
                    }
                }).join("");
            }
        }
    });
    element.children.forEach((childNode)=>{
        if (!isElement(childNode)) return;
        if (Object.hasOwn(childNode.properties, "rehype-pretty-code-visited")) {
            childNode.properties["rehype-pretty-code-visited"] = void 0;
        }
    });
}
// src/index.ts
function apply(element, { tree, lang, title, caption, inline = false, keepBackground = true, grid = true, lineNumbersMaxDigits = 1, theme, onVisitTitle, onVisitCaption }) {
    element.tagName = inline ? "span" : "figure";
    element.properties["data-rehype-pretty-code-figure"] = "";
    const codeData = element.children[0]?.data;
    element.children = [
        tree
    ].flatMap((tree2)=>{
        const pre = tree2.children[0];
        const themeNames = getThemeNames(theme);
        const themeNamesString = themeNames.join(" ");
        if (!(isElement(pre) && pre.properties)) {
            return [];
        }
        const code = pre.children[0];
        if (Array.isArray(pre.properties.className) && pre.properties.className.includes("shiki")) {
            const className = pre.properties.className.filter((c)=>c !== "shiki" && c !== "shiki-themes" && (typeof c === "string" ? !themeNames.includes(c) : true));
            pre.properties.className = className.length > 0 ? className : void 0;
        }
        if (!keepBackground) {
            pre.properties.style = void 0;
        }
        pre.properties["data-language"] = lang;
        pre.properties["data-theme"] = themeNamesString;
        if (!(isElement(code) && code.properties)) {
            return [];
        }
        code.properties["data-language"] = lang;
        code.properties["data-theme"] = themeNamesString;
        code.data = codeData;
        if (inline) {
            if (keepBackground) {
                code.properties.style = pre.properties.style;
            }
            return code;
        }
        if (grid) {
            if (code.properties.style) {
                code.properties.style += "display: grid;";
            } else {
                code.properties.style = "display: grid;";
            }
        }
        if (Object.hasOwn(code.properties, "data-line-numbers")) {
            code.properties["data-line-numbers-max-digits"] = lineNumbersMaxDigits.toString().length;
        }
        const fragments = [];
        if (title) {
            const elementContent = {
                type: "element",
                tagName: caption ? "div" : "figcaption",
                properties: {
                    "data-rehype-pretty-code-title": "",
                    "data-language": lang,
                    "data-theme": themeNamesString
                },
                children: [
                    {
                        type: "text",
                        value: title
                    }
                ]
            };
            onVisitTitle?.(elementContent);
            fragments.push(elementContent);
        }
        fragments.push(pre);
        if (caption) {
            const elementContent = {
                type: "element",
                tagName: "figcaption",
                properties: {
                    "data-rehype-pretty-code-caption": "",
                    "data-language": lang,
                    "data-theme": themeNamesString
                },
                children: [
                    {
                        type: "text",
                        value: caption
                    }
                ]
            };
            onVisitCaption?.(elementContent);
            fragments.push(elementContent);
        }
        return fragments;
    });
}
var globalHighlighterCache = /* @__PURE__ */ new Map();
var hastParser = (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unified$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["unified"])().use(__TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$rehype$2d$parse$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"], {
    fragment: true
});
var src_default = rehypePrettyCode;
function rehypePrettyCode(options = {}) {
    const { grid = true, theme = "github-dark-dimmed", keepBackground = true, bypassInlineCode = false, defaultLang = "", tokensMap = {}, filterMetaString = (v)=>v, getHighlighter: getHighlighter$1 = __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$shiki$2f$dist$2f$bundle$2d$full$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getHighlighter"], transformers, onVisitLine, onVisitHighlightedLine, onVisitHighlightedChars, onVisitTitle, onVisitCaption } = options;
    const key = JSON.stringify(theme);
    let cachedHighlighter = globalHighlighterCache.get(key);
    if (!cachedHighlighter) {
        cachedHighlighter = getHighlighter$1({
            themes: isJSONTheme(theme) || typeof theme === "string" ? [
                theme
            ] : Object.values(theme),
            langs: [
                "plaintext"
            ]
        });
        globalHighlighterCache.set(key, cachedHighlighter);
    }
    const defaultCodeBlockLang = typeof defaultLang === "string" ? defaultLang : defaultLang.block || "";
    const defaultInlineCodeLang = typeof defaultLang === "string" ? defaultLang : defaultLang.inline || "";
    function getOptions(lang, meta) {
        const multipleThemes = !isJSONTheme(theme) && typeof theme === "object" ? theme : null;
        const singleTheme = isJSONTheme(theme) || typeof theme === "string" ? theme : null;
        return {
            lang,
            meta: {
                __raw: meta
            },
            transformers,
            defaultColor: typeof theme === "string" ? theme : false,
            ...multipleThemes ? {
                themes: multipleThemes
            } : {
                theme: singleTheme
            }
        };
    }
    return async (tree)=>{
        const langsToLoad = /* @__PURE__ */ new Set();
        const highlighter = await cachedHighlighter;
        if (!highlighter) return;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(tree, "element", (element, _, parent)=>{
            if (isInlineCode(element, parent, bypassInlineCode)) {
                const textElement = element.children[0];
                if (!isText(textElement)) return;
                const value = textElement.value;
                if (!value) return;
                const lang = getInlineCodeLang(value, defaultInlineCodeLang);
                if (lang && lang[0] !== ".") {
                    langsToLoad.add(lang);
                }
            }
            if (isBlockCode(element)) {
                const codeElement = element.children[0];
                if (!isElement(codeElement)) return;
                const { lang } = parseBlockMetaString(codeElement, filterMetaString, defaultCodeBlockLang);
                if (lang) {
                    langsToLoad.add(lang);
                }
            }
        });
        try {
            await Promise.allSettled(Array.from(langsToLoad).map((lang)=>{
                try {
                    return highlighter.loadLanguage(lang);
                } catch (e) {
                    return Promise.reject(e);
                }
            }));
        } catch (e) {
            console.error(e);
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(tree, "element", (element, _, parent)=>{
            if (isInlineCode(element, parent, bypassInlineCode)) {
                const textElement = element.children[0];
                if (!isText(textElement)) return;
                const value = textElement.value;
                if (!value) return;
                const keepLangPart = /\\{:[a-zA-Z.-]+}$/.test(value);
                const strippedValue = keepLangPart ? value.replace(/\\({:[a-zA-Z.-]+})$/, "$1") : value.replace(/{:[a-zA-Z.-]+}$/, "");
                textElement.value = strippedValue;
                const lang = keepLangPart ? "" : getInlineCodeLang(value, defaultInlineCodeLang);
                const isLang = lang[0] !== ".";
                if (!lang) return;
                let codeTree;
                if (isLang) {
                    try {
                        codeTree = hastParser.parse(highlighter.codeToHtml(strippedValue, getOptions(lang)));
                    } catch  {
                        codeTree = hastParser.parse(highlighter.codeToHtml(strippedValue, getOptions("plaintext")));
                    }
                } else {
                    const themeNames = getThemeNames(theme);
                    const isMultiTheme = typeof theme === "object" && !isJSONTheme(theme);
                    const themeKeys = isMultiTheme ? Object.keys(theme) : null;
                    const colorsByTheme = themeNames.map((name)=>name ? highlighter.getTheme(name).settings.find(({ scope })=>scope?.includes(tokensMap[lang.slice(1)] ?? lang.slice(1)))?.settings.foreground ?? "inherit" : "inherit");
                    if (isMultiTheme && themeKeys) {
                        codeTree = hastParser.parse(`<pre><code><span style="${themeKeys.map((key2, i)=>`--shiki-${key2}:${colorsByTheme[i]}`).join(";")}">${strippedValue}</span></code></pre>`);
                    } else {
                        codeTree = hastParser.parse(`<pre><code><span style="color:${colorsByTheme[0]}">${strippedValue}</span></code></pre>`);
                    }
                }
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(codeTree, "element", replaceLineClass);
                apply(element, {
                    tree: codeTree,
                    lang: isLang ? lang : ".token",
                    inline: true,
                    keepBackground,
                    theme
                });
            }
            if (isBlockCode(element)) {
                const codeElement = element.children[0];
                if (!isElement(codeElement)) return;
                const textElement = codeElement.children[0];
                const { title, caption, meta, lang } = parseBlockMetaString(codeElement, filterMetaString, defaultCodeBlockLang);
                if (!lang || lang === "math") return;
                const lineNumbers = [];
                if (meta) {
                    const matches = meta.matchAll(/\B\{(.*?)\}\B/g);
                    for (const match of matches){
                        if (match[1]) {
                            lineNumbers.push(...(0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$numeric$2d$range$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(match[1]));
                        }
                    }
                }
                let lineNumbersMaxDigits = 0;
                const lineIdMap = /* @__PURE__ */ new Map();
                const charsList = [];
                const charsListNumbers = [];
                const charsListIdMap = /* @__PURE__ */ new Map();
                const charsMatches = meta ? [
                    ...meta.matchAll(/(?<delimiter>["/])(?<chars>.*?)\k<delimiter>(?<charsIdAndOrRange>\S*)/g)
                ] : void 0;
                lineNumbers.forEach((lineNumber)=>{
                    const id = getLineId(lineNumber, meta);
                    id && lineIdMap.set(lineNumber, id);
                });
                if (Array.isArray(charsMatches)) {
                    charsMatches.forEach((name)=>{
                        const { chars, charsIdAndOrRange } = name.groups;
                        charsList.push(chars);
                        if (charsIdAndOrRange === "") {
                            charsListNumbers.push([]);
                        } else {
                            const [range, id] = charsIdAndOrRange.split("#");
                            range && charsListNumbers.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$parse$2d$numeric$2d$range$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(range));
                            id && charsListIdMap.set(chars, id);
                        }
                    });
                }
                if (!isText(textElement)) return;
                const strippedValue = textElement.value.replace(/\n$/, "");
                let codeTree;
                try {
                    codeTree = hastParser.parse(highlighter.codeToHtml(strippedValue, getOptions(lang, meta)));
                } catch  {
                    codeTree = hastParser.parse(highlighter.codeToHtml(strippedValue, getOptions("plaintext", meta)));
                }
                let lineCounter = 0;
                const charsHighlighterOptions = {
                    ranges: charsListNumbers,
                    idsMap: charsListIdMap,
                    counterMap: /* @__PURE__ */ new Map()
                };
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(codeTree, "element", (element2)=>{
                    if (element2.tagName === "code" && /srebmuNeniLwohs(?!(.*)(\/))/.test(reverseString(meta))) {
                        if (element2.properties) {
                            element2.properties["data-line-numbers"] = "";
                        }
                        const lineNumbersStartAtMatch = reverseString(meta).match(/(?:\}(\d+){)?srebmuNeniLwohs(?!(.*)(\/))/);
                        const startNumberString = lineNumbersStartAtMatch?.[1];
                        if (startNumberString) {
                            const startAt = startNumberString ? Number(reverseString(startNumberString)) - 1 : 0;
                            lineNumbersMaxDigits = startAt;
                            if (element2.properties) {
                                element2.properties.style = `counter-set: line ${startAt};`;
                            }
                        }
                    }
                    if (Array.isArray(element2.properties?.className) && element2.properties?.className?.[0] === "line") {
                        if (grid && (0, __TURBOPACK__imported__module__$5b$project$5d2f$apps$2f$website$2f$docs$2f$node_modules$2f$hast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toString"])(element2) === "") {
                            element2.children = [
                                {
                                    type: "text",
                                    value: " "
                                }
                            ];
                        }
                        replaceLineClass(element2);
                        onVisitLine?.(element2);
                        lineCounter++;
                        if (lineNumbers.includes(lineCounter)) {
                            element2.properties["data-highlighted-line"] = "";
                            const lineId = lineIdMap.get(lineCounter);
                            if (lineId) {
                                element2.properties["data-highlighted-line-id"] = lineId;
                            }
                            onVisitHighlightedLine?.(element2, lineId);
                        }
                        charsHighlighter(element2, charsList, charsHighlighterOptions, onVisitHighlightedChars);
                        lineNumbersMaxDigits++;
                    }
                });
                apply(element, {
                    tree: codeTree,
                    lang,
                    title,
                    caption,
                    keepBackground,
                    grid,
                    lineNumbersMaxDigits,
                    theme,
                    onVisitTitle,
                    onVisitCaption
                });
            }
        });
    };
}
;
}}),

};

//# sourceMappingURL=node_modules_1118ad._.js.map