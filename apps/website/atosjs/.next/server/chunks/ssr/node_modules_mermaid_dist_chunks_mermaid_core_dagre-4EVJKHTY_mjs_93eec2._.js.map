{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/atosjs/apps/website/docs/apps/website/docs/node_modules/mermaid/dist/chunks/mermaid.core/dagre-4EVJKHTY.mjs"],"sourcesContent":["import {\n  clear as clear2,\n  insertEdge,\n  insertEdgeLabel,\n  markers_default,\n  positionEdgeLabel\n} from \"./chunk-66SQ7PYY.mjs\";\nimport {\n  clear,\n  clear2 as clear3,\n  insertCluster,\n  insertNode,\n  positionNode,\n  setNodeElem,\n  updateNodeBounds\n} from \"./chunk-7NZE2EM7.mjs\";\nimport \"./chunk-OPO4IU42.mjs\";\nimport \"./chunk-3JNJP5BE.mjs\";\nimport {\n  getSubGraphTitleMargins\n} from \"./chunk-3X56UNUX.mjs\";\nimport \"./chunk-6JOS74DS.mjs\";\nimport \"./chunk-7DKRZKHE.mjs\";\nimport {\n  __name,\n  getConfig2 as getConfig,\n  log\n} from \"./chunk-6DBFFHIP.mjs\";\n\n// src/rendering-util/layout-algorithms/dagre/index.js\nimport { layout as dagreLayout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson2 from \"dagre-d3-es/src/graphlib/json.js\";\nimport * as graphlib2 from \"dagre-d3-es/src/graphlib/index.js\";\n\n// src/rendering-util/layout-algorithms/dagre/mermaid-graphlib.js\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nvar clusterDb = /* @__PURE__ */ new Map();\nvar descendants = /* @__PURE__ */ new Map();\nvar parents = /* @__PURE__ */ new Map();\nvar clear4 = /* @__PURE__ */ __name(() => {\n  descendants.clear();\n  parents.clear();\n  clusterDb.clear();\n}, \"clear\");\nvar isDescendant = /* @__PURE__ */ __name((id, ancestorId) => {\n  const ancestorDescendants = descendants.get(ancestorId) || [];\n  log.trace(\"In isDescendant\", ancestorId, \" \", id, \" = \", ancestorDescendants.includes(id));\n  return ancestorDescendants.includes(id);\n}, \"isDescendant\");\nvar edgeInCluster = /* @__PURE__ */ __name((edge, clusterId) => {\n  const clusterDescendants = descendants.get(clusterId) || [];\n  log.info(\"Descendants of \", clusterId, \" is \", clusterDescendants);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId || edge.w === clusterId) {\n    return false;\n  }\n  if (!clusterDescendants) {\n    log.debug(\"Tilt, \", clusterId, \",not in descendants\");\n    return false;\n  }\n  return clusterDescendants.includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || clusterDescendants.includes(edge.w);\n}, \"edgeInCluster\");\nvar copy = /* @__PURE__ */ __name((clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n}, \"copy\");\nvar extractDescendants = /* @__PURE__ */ __name((id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents.set(child, id);\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n}, \"extractDescendants\");\nvar findCommonEdges = /* @__PURE__ */ __name((graph, id1, id2) => {\n  const edges1 = graph.edges().filter((edge) => edge.v === id1 || edge.w === id1);\n  const edges2 = graph.edges().filter((edge) => edge.v === id2 || edge.w === id2);\n  const edges1Prim = edges1.map((edge) => {\n    return { v: edge.v === id1 ? id2 : edge.v, w: edge.w === id1 ? id1 : edge.w };\n  });\n  const edges2Prim = edges2.map((edge) => {\n    return { v: edge.v, w: edge.w };\n  });\n  const result = edges1Prim.filter((edgeIn1) => {\n    return edges2Prim.some((edge) => edgeIn1.v === edge.v && edgeIn1.w === edge.w);\n  });\n  return result;\n}, \"findCommonEdges\");\nvar findNonClusterChild = /* @__PURE__ */ __name((id, graph, clusterId) => {\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    return id;\n  }\n  let reserve;\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph, clusterId);\n    const commonEdges = findCommonEdges(graph, clusterId, _id);\n    if (_id) {\n      if (commonEdges.length > 0) {\n        reserve = _id;\n      } else {\n        return _id;\n      }\n    }\n  }\n  return reserve;\n}, \"findNonClusterChild\");\nvar getAnchorId = /* @__PURE__ */ __name((id) => {\n  if (!clusterDb.has(id)) {\n    return id;\n  }\n  if (!clusterDb.get(id).externalConnections) {\n    return id;\n  }\n  if (clusterDb.has(id)) {\n    return clusterDb.get(id).id;\n  }\n  return id;\n}, \"getAnchorId\");\nvar adjustClustersAndEdges = /* @__PURE__ */ __name((graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph, id)\n      );\n      descendants.set(id, extractDescendants(id, graph));\n      clusterDb.set(id, { id: findNonClusterChild(id, graph, id), clusterData: graph.node(id) });\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        const d1 = isDescendant(edge.v, id);\n        const d2 = isDescendant(edge.w, id);\n        if (d1 ^ d2) {\n          log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n          log.warn(\"Descendants of XXX \", id, \": \", descendants.get(id));\n          clusterDb.get(id).externalConnections = true;\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  for (let id of clusterDb.keys()) {\n    const nonClusterChild = clusterDb.get(id).id;\n    const parent = graph.parent(nonClusterChild);\n    if (parent !== id && clusterDb.has(parent) && !clusterDb.get(parent).externalConnections) {\n      clusterDb.get(id).id = parent;\n    }\n  }\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb.get(e.v),\n      \" --- \",\n      clusterDb.get(e.w)\n    );\n    if (clusterDb.get(e.v) || clusterDb.get(e.w)) {\n      log.warn(\"Fixing and trying - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        const parent = graph.parent(v);\n        clusterDb.get(parent).externalConnections = true;\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        const parent = graph.parent(w);\n        clusterDb.get(parent).externalConnections = true;\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n}, \"adjustClustersAndEdges\");\nvar extractor = /* @__PURE__ */ __name((graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb.has(node) && !clusterDb.get(node).externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb.has(node)) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb.get(node).externalConnections && graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb.get(node)?.clusterData?.dir) {\n        dir = clusterDb.get(node).clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb.get(node).clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb.get(node).clusterData,\n        label: clusterDb.get(node).label,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb.get(node).externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data?.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n}, \"extractor\");\nvar sorter = /* @__PURE__ */ __name((graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign([], nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n}, \"sorter\");\nvar sortNodesByHierarchy = /* @__PURE__ */ __name((graph) => sorter(graph, graph.children()), \"sortNodesByHierarchy\");\n\n// src/rendering-util/layout-algorithms/dagre/index.js\nvar recursiveRender = /* @__PURE__ */ __name(async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {\n  log.warn(\"Graph in recursive render:XAX\", graphlibJson2.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.info(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.trace(\n          \"Setting data for parent cluster XXX\\n Node.id = \",\n          v,\n          \"\\n data=\",\n          data.height,\n          \"\\nParent cluster\",\n          parentCluster.height\n        );\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node?.clusterNode) {\n        log.info(\"Cluster identified XBX\", v, node.width, graph.node(v));\n        const { ranksep, nodesep } = graph.graph();\n        node.graph.setGraph({\n          ...node.graph.graph(),\n          ranksep: ranksep + 25,\n          nodesep\n        });\n        const o = await recursiveRender(\n          nodes,\n          node.graph,\n          diagramType,\n          id,\n          graph.node(v),\n          siteConfig\n        );\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\n          \"New compound node after recursive render XAX\",\n          v,\n          \"width\",\n          // node,\n          node.width,\n          \"height\",\n          node.height\n          // node.x,\n          // node.y\n        );\n        setNodeElem(newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.trace(\n            \"Cluster - the non recursive path XBX\",\n            v,\n            node.id,\n            node,\n            node.width,\n            \"Graph:\",\n            graph\n          );\n          log.trace(findNonClusterChild(node.id, graph));\n          clusterDb.set(node.id, { id: findNonClusterChild(node.id, graph), node });\n        } else {\n          log.trace(\"Node - the non recursive path XAX\", v, nodes, graph.node(v), dir);\n          await insertNode(nodes, graph.node(v), { config: siteConfig, dir });\n        }\n      }\n    })\n  );\n  const processEdges = /* @__PURE__ */ __name(async () => {\n    const edgePromises = graph.edges().map(async function(e) {\n      const edge = graph.edge(e.v, e.w, e.name);\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n      log.info(\n        \"Fix\",\n        clusterDb,\n        \"ids:\",\n        e.v,\n        e.w,\n        \"Translating: \",\n        clusterDb.get(e.v),\n        clusterDb.get(e.w)\n      );\n      await insertEdgeLabel(edgeLabels, edge);\n    });\n    await Promise.all(edgePromises);\n  }, \"processEdges\");\n  await processEdges();\n  log.info(\"Graph before layout:\", JSON.stringify(graphlibJson2.write(graph)));\n  log.info(\"############################################# XXX\");\n  log.info(\"###                Layout                 ### XXX\");\n  log.info(\"############################################# XXX\");\n  dagreLayout(graph);\n  log.info(\"Graph after layout:\", JSON.stringify(graphlibJson2.write(graph)));\n  let diff = 0;\n  let { subGraphTitleTotalMargin } = getSubGraphTitleMargins(siteConfig);\n  await Promise.all(\n    sortNodesByHierarchy(graph).map(async function(v) {\n      const node = graph.node(v);\n      log.info(\n        \"Position XBX => \" + v + \": (\" + node.x,\n        \",\" + node.y,\n        \") width: \",\n        node.width,\n        \" height: \",\n        node.height\n      );\n      if (node?.clusterNode) {\n        node.y += subGraphTitleTotalMargin;\n        log.info(\n          \"A tainted cluster node XBX1\",\n          v,\n          node.id,\n          node.width,\n          node.height,\n          node.x,\n          node.y,\n          graph.parent(v)\n        );\n        clusterDb.get(node.id).node = node;\n        positionNode(node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\n            \"A pure cluster node XBX1\",\n            v,\n            node.id,\n            node.x,\n            node.y,\n            node.width,\n            node.height,\n            graph.parent(v)\n          );\n          node.height += subGraphTitleTotalMargin;\n          graph.node(node.parentId);\n          const halfPadding = node?.padding / 2 || 0;\n          const labelHeight = node?.labelBBox?.height || 0;\n          const offsetY = labelHeight - halfPadding || 0;\n          log.debug(\"OffsetY\", offsetY, \"labelHeight\", labelHeight, \"halfPadding\", halfPadding);\n          await insertCluster(clusters, node);\n          clusterDb.get(node.id).node = node;\n        } else {\n          const parent = graph.node(node.parentId);\n          node.y += subGraphTitleTotalMargin / 2;\n          log.info(\n            \"A regular node XBX1 - using the padding\",\n            node.id,\n            \"parent\",\n            node.parentId,\n            node.width,\n            node.height,\n            node.x,\n            node.y,\n            \"offsetY\",\n            node.offsetY,\n            \"parent\",\n            parent,\n            parent?.offsetY,\n            node\n          );\n          positionNode(node);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    edge.points.forEach((point) => point.y += subGraphTitleTotalMargin / 2);\n    const startNode = graph.node(e.v);\n    var endNode = graph.node(e.w);\n    const paths = insertEdge(edgePaths, edge, clusterDb, diagramType, startNode, endNode, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.isGroup) {\n      diff = n.diff;\n    }\n  });\n  log.warn(\"Returning from recursive render XAX\", elem, diff);\n  return { elem, diff };\n}, \"recursiveRender\");\nvar render = /* @__PURE__ */ __name(async (data4Layout, svg) => {\n  const graph = new graphlib2.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: data4Layout.direction,\n    nodesep: data4Layout.config?.nodeSpacing || data4Layout.config?.flowchart?.nodeSpacing || data4Layout.nodeSpacing,\n    ranksep: data4Layout.config?.rankSpacing || data4Layout.config?.flowchart?.rankSpacing || data4Layout.rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  const element = svg.select(\"g\");\n  markers_default(element, data4Layout.markers, data4Layout.type, data4Layout.diagramId);\n  clear3();\n  clear2();\n  clear();\n  clear4();\n  data4Layout.nodes.forEach((node) => {\n    graph.setNode(node.id, { ...node });\n    if (node.parentId) {\n      graph.setParent(node.id, node.parentId);\n    }\n  });\n  log.debug(\"Edges:\", data4Layout.edges);\n  data4Layout.edges.forEach((edge) => {\n    if (edge.start === edge.end) {\n      const nodeId = edge.start;\n      const specialId1 = nodeId + \"---\" + nodeId + \"---1\";\n      const specialId2 = nodeId + \"---\" + nodeId + \"---2\";\n      const node = graph.node(nodeId);\n      graph.setNode(specialId1, {\n        domId: specialId1,\n        id: specialId1,\n        parentId: node.parentId,\n        labelStyle: \"\",\n        label: \"\",\n        padding: 0,\n        shape: \"labelRect\",\n        // shape: 'rect',\n        style: \"\",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId1, node.parentId);\n      graph.setNode(specialId2, {\n        domId: specialId2,\n        id: specialId2,\n        parentId: node.parentId,\n        labelStyle: \"\",\n        padding: 0,\n        // shape: 'rect',\n        shape: \"labelRect\",\n        label: \"\",\n        style: \"\",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId2, node.parentId);\n      const edge1 = structuredClone(edge);\n      const edgeMid = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge1.id = nodeId + \"-cyclic-special-1\";\n      edgeMid.arrowTypeEnd = \"none\";\n      edgeMid.id = nodeId + \"-cyclic-special-mid\";\n      edge2.label = \"\";\n      if (node.isGroup) {\n        edge1.fromCluster = nodeId;\n        edge2.toCluster = nodeId;\n      }\n      edge2.id = nodeId + \"-cyclic-special-2\";\n      graph.setEdge(nodeId, specialId1, edge1, nodeId + \"-cyclic-special-0\");\n      graph.setEdge(specialId1, specialId2, edgeMid, nodeId + \"-cyclic-special-1\");\n      graph.setEdge(specialId2, nodeId, edge2, nodeId + \"-cyc<lic-special-2\");\n    } else {\n      graph.setEdge(edge.start, edge.end, { ...edge }, edge.id);\n    }\n  });\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson2.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after XAX:\", JSON.stringify(graphlibJson2.write(graph)));\n  const siteConfig = getConfig();\n  await recursiveRender(\n    element,\n    graph,\n    data4Layout.type,\n    data4Layout.diagramId,\n    void 0,\n    siteConfig\n  );\n}, \"render\");\nexport {\n  render\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 555, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}